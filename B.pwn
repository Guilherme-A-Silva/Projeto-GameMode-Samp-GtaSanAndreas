/*
					  Bugando /contaslider
					  Coisas a Fazer
					  Não esquecer de Arrumar carros caindo das Novas casas e Condominio e colocar casa Raikan
					  E dps que terminar tirar foto de tudo.
					  Acabar de configurar o /freio
					  Acabar Sistema de Cardápio [OK]
					  Acabar Sala admin [OK]
					  Acabar os portoes das casas
					  Adicionar mais casas.
					  Arrumar os Index IDs dos SetPlayerAttachedObject Bugando 0-9.
					  1° Comer Churrasco [OK]
					  2° Arrumar Plugin streamer [OK]
					  3° Arrumar portão das casas
					  4° Arrumar detran. [OK]
					  5° Sistema de Som. [OK]
					  5° Arrumar o BOPE [OK] 80%
					  6° Arrumar Prefeito Entrada Bugada
					  7° Colocar Ingreja [OK]
					  8° Transferir auto escola.
					  9° Coloca estacionamento sub terranio
					  10° Arrumar Radar [OK]
					  11° Arrumar Tunning.
					  12° Arrumar comerchurrasco. [OK]
					  13° Depois passar tudo de CreateObject para CreateDynamicObject = Super Simples

*/

#include                <  a_samp  >
#include                <  a_http  >
#include                <  core  >
#include                <  float  >
#include                <  time  >
#include                <  file  >
#include                <  a_objects  >
#include                <  Dini  >
#include                <  streamer  >
#include                <  seif_walk  >
#include                <  servermoneyGM  >
#pragma tabsize 0

#define MPNOME "mapname Brasil RPG"
#define SVVERSAO "BRNM: Brasil RPG"
//>-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<
#if defined MAX_PLAYERS
#undef MAX_PLAYERS
#define MAX_PLAYERS (101)
#endif

#if defined MAX_VEHICLES
#undef MAX_VEHICLES
#define MAX_VEHICLES (2001)

#endif
#define totalveiculos 500 // Veículos do Servidor.
#define totalveiculosh 501 // Veículos do Servidor + 1.
#define CAR_AMOUNT 2001// Todos os Veículos do Servidor + 1. 721


#define sleep2(%0);  for(new _@%0; _@%0 != (%0*50000000);) (_@%0++);
#define DialogImpost                     21293 // topo do gm

new Gate;
new Gate2;
new Gate3;
new Gate5;
new Gate6;
new Gate7;
new Gate8;
new Gate9;
new Gate10;
new GateCasaHosp;
new GateCasaMadDog;
new GateCasaMVIP1;
new GateCasaMVIP4;
//new GeteCasaVIP1;


//Portoes Fechar Abrir Manual
new CasaVIP1Portao;
new CasaVIP2Portao;
new CasaVIP3Portao;
new CasaVIP4Portao;
new CasaVIP5Portao;
new PortaoM1Portaop;
new PortaoM1Portaog;
new PortaoM1Portaog1;
new PortaoMPMansao228;
new PortaoMPMansao229;

new ViaFacil[MAX_PLAYERS];
new bool:Pedagio[MAX_PLAYERS] = {false, ...};
new Cancela[MAX_PLAYERS][2];

new OwnableCarOffer[MAX_PLAYERS];
new OwnableCarID[MAX_PLAYERS];
new OwnableCarPrice[MAX_PLAYERS];

new carsonserver = 501;

new motor[MAX_PLAYERS];

new bool: Portao2garagem216;
new bool: PortaoPF2;
new bool: Portaogaragem216;
#define KEY_AIM 128

#define SCM SendClientMessage
new xacalaca[MAX_PLAYERS];
///////////////////////teste da auto escola///////////////////////
new Teste[MAX_PLAYERS];

//>-=-=-=-=-==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<
#define SetPlayerHoldingObject(%1,%2,%3,%4,%5,%6,%7,%8,%9) SetPlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1,%2,%3,%4,%5,%6,%7,%8,%9)
#define StopPlayerHoldingObject(%1) RemovePlayerAttachedObject(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define IsPlayerHoldingObject(%1) IsPlayerAttachedObjectSlotUsed(%1,MAX_PLAYER_ATTACHED_OBJECTS-1)
#define ForPlayers(%1) for(new %1 = 0; %1 < MAX_PLAYERS; %1++) if(IsPlayerConnected(%1) && !IsPlayerNPC(%1))
#define Function%0(%1) forward%0(%1); public%0(%1)
//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
#define ColorFlood 0x24B1DBAA
#define TimerFlood 5000
#define AlertFlood 5
#define MAX_CONNECTIONS_FROM_IP     3

#define SUB_MODERADOR            1
#define MODERADOR                2
#define AUXILIAR                 3
#define SUB_MASTER               4
#define MASTER                   1337
#define SUB_GERENTE              1338
#define GERENTE                  1339
#define SUB_DONO                 1340
#define DONO                     1341
#define COR_PM                   0x9999FFF6
#define COR_BOPE                 0x666699F6
#define COR_EXE                  0x00660CF6
#define COR_SAMU                 0xCC6666F6
#define COR_AZULZAO              0x005FFFFF
#define ROXO                     0xC2A2DAAA
#define COR_CINZA1 		         0xB4B5B7FF
#define COR_AZTECAS 	         0x109FFFAA
#define COR_Taliban 	         0x009999F6
#define COR_PRE 	             0x6699FFF6
#define COR_HITMAN 	             0xA9A9A9F6
#define COR_NAVWHITE             0xCDC9A5
#define COR_REP               	 0xFF9900AA
#define COLOR_BLUE               0x2641FEAA
#define COR_TAXI 	             0x66FFFFF6
#define COR_PF 			         0x999966F6
#define COR_COSA 		         0x996600F6
#define COR_YAK 		         0x660066F6
#define COR_ADV                  0x696969FF
#define COR_GRO 		         0x33FF00F6
#define COR_AL 		             0xFFCC99F6
#define COR_PC 		             0x93833EF6
#define COR_BALLAS 		         0x9900CCF6
#define COR_VAGOS 		         0xFFFF33F6
#define COR_SONS 		         0x980000AA
#define COR_PR 		             0xD8D800AA
#define COR_DRIFTERS 	         0x50FF7BAA
#define COR_TRIADS 		         0xCCFF99FF
#define COR_FARC 		         0xFE005DFF
#define COR_DETRAN               0xFFB90FFF
#define COR_WHITE 		         0xFFF8F8AA
#define VERDE2 			         0x33FF00FF
#define COLOR_DEPTH 	         0x993333FF
#define COR_ADMIN 		         0xFF34B3F6
#define COR_HELPER 		         0x18C5FFAA
#define COLOR_WHITE              0xFFFFFFAA
#define LARANJA 		         0xFF6600AA
#define VERDECLARO 		         0x00FF0CAA
#define VERDEFRACO               0x80cf80AA
#define COLOR_AMARELOR           0xFFFF00AA
#define VERDEFRACOR              0x80cf80AA
#define COR_3DLABEL              0xF68E00F6 
#define COR_TCP                  0x16C970AA
#define COLOR_AZULBB             0xCCCCFFFF
#define TEAM_CYAN_COLOR          0xA92BF6F6
#define GCOP_COLOR 		         0x6666FFC8
#define COLOR_LIGHTRED 	         0xFF6347AA
#define COLORGZ_YAKUZA           0x006699C8
#define COLORGZ_PF               0x000000C8
#define COLOR_GREEN              0x33AA33AA
#define COLOR_PURPLE             0xC2A2DAAA
#define TEAM_GROVE_COLOR         0x00D900C8
#define TEAM_BALLAS_COLOR        0x9900FFC8
#define TEAM_AZTECAS_COLOR       0x2641FEC8
#define COLOR_GRAD1              0xB4B5B7FF
#define COLOR_GRAD2              0xBFC0C2FF
#define COLOR_GRAD3 	         0xBFC0C2FF
#define COLOR_GRAD4              0xD8D8D8FF
#define COLOR_GRAD5              0xF0F0F0FF
#define COLOR_GRAD6              0xF0F0F0FF
#define COLOR_LIGHTBLUE          0x33CCFFAA
#define COLOR_DBLUE              0x2641FEAA
#define COLOR_YELLOW             0xFFFF00AA
#define COLOR_GREY               0xAFAFAFAA
#define COLOR_RED                0xAA3333AA
#define COLOR_LIGHTGREEN         0x9ACD32AA
#define TEAM_VAGOS_COLOR         0xFFC801C8
#define CINZA                    0xAFAFAFAA
#define PRETO                    0x000000FF
#define COLOR_FADE4              0x8C8C8C8C
#define COLOR_FADE5              0x6E6E6E6E
#define COLOR_FADE3              0xAAAAAAAA
#define COLOR_RCARRO             0x80FF8096
#define TEAM_HIT_COLOR           0xFFFFFF00
#define CINZA2                   0xBFC0C2FF
#define COLOR_FADE2 	         0xC8C8C8C8
#define COLOR_NEWS 		         0xFFA500AA
#define COLOR_NEWS               0xFFA500AA
#define COLOR_ALLDEPT            0xFF8282AA
#define COLOR_FADE1              0xE6E6E6E6
#define COLOR_R                  0x6666CCFF
#define COLORGZ_ALCAIDA          0x685000C8
#define COLOR_MSG                0x934FF6F6
#define COLORGZ_Taliban          0x009999F6
#define COLORGZ_FARC             0x185000AA
#define AZUL3                    0x33CCFFAA
#define CINZA1                   0xB4B5B7FF
#define AN_COLOR                 0x00E7C6F6
#define COLOR_YELLOW2            0xF5DEB3AA
#define COLOR_TAXISTA            0xF68E00F6
#define TEAM_BLUE_COLOR          0x8D8DFF00
#define COLORGZ_LH               0x00E7C6C8
#define COLORGZ_EXE              0x33AA33C8
#define COLOR_EXE                0x33AA33C8
//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= FIM CORES =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<| 
#define Tutorial                         3428
#define EVENTOC                          3423
#define EVENTOCC                         3424
#define EVENTOCCM4                       3425
#define EVENTOCCCOMBAT                   3426
#define TELEPORTE                        4324
#define cVotacao                         3235
#define cPergunta                        3234
#define TEAM_CYAN 					     1
#define DIALOG_CAIXA_ELETRONICO          172
#define DIALOG_CAIXA_ELETRONICO_INPUT    173
#define DIALOG_TRANSFERIR 				 176
#define DIALOG_RANGE 					 1264
#define DialogCasaGPS 					 1982
#define DialogEmpresaGPS 				 1983
#define PegandoEmpresaTH 				 1984
#define PegandoMiniEmpresaTH 			 1985
#define SPAM_MAX_MSGS 					 6
#define SPAM_TIMELIMIT 				     3
#define MAX_INTEGRANTE_NOMES  			 27
#define DIALOG_INFO 				     167
#define DIALOG_ALUGAR 				     1212
#define DIALOG_ALUGAR2 				     1213
#define DIALOGID                         9999
#define PEGARMAFIA 				         1741
#define Controle 						 TogglePlayerControllable
#define CameraPos 					     SetPlayerCameraPos
#define TextCasaVenda               	 "[ CASA À VENDA ]\nTipo da Casa: %s\nPreço da Casa: R$%d\nNivel: %d\nID: %d\nPara comprar digite /comprarcasa"
#define TextCasa                         "Dono da Casa: %s\nNivel: %d\nID: %d"
#define TextCasaAl                       "Dono da Casa: %s\nAluguel da Casa: R$%d\nNivel: %d\nID: %d\nPara alugar digite /alugarquarto"
#define TextEmpresaVenda               	 "[ EMPRESA À VENDA ]\n%s\nPreço da Empresa: R$%d\nNivel: %d\nID: %d\nPara comprar digite /compraremp"
#define TextEmpresa                      "%s\nDono da Empresa: %s\nExtorção: %s\nEntrada: R$%d\nNivel: %d\nID: %d\nAperte Enter Para Entrar"
#define TextMEmpresaVenda                "[ MINI EMPRESA À VENDA ]\n%s\nPreço da Mini Empresa: R$%d\nNivel: %d\nID: %d\nPara comprar digite /compraremp"
#define TextMEmpresa                      "%s\nDono da Mini Empresa: %s\nExtorção: %s\nEntrada: R$%d\nNivel: %d\nID: %d"
#define URLTHIAGO                        "     ~w~~>~~p~www~w~.~y~BRNM~w~.~p~forumeiros~w~.~p~com ~w~~<~"
#define dhitman 						 2424
#define CAIXINHA_VG 				     1276
#define char 						     255
#define MAX_MACONHAS 			         5000
#define DIALOG_ANUNCIO 					 168
#define cabeloshopping                   1590
#define ViajarThiago 			         1357 
#define sorveteria                       1578
#define dialogcomerchurrasco             1579
#define MAX_SPIKESTRIPS 				 200
#define MAX_ORGS 	                     26
#define AFK_TIME 					     10
#define PICKUP_TYPE_NONE 				 0
#define PICKUP_TYPE_WEAPON 			     1
#define DIALOGID2 				         9999
#define DialogMenuConce                  5847
#define DialogMenuConce2                 6848
#define DialogMenuConceKarts             6948
#define DialogNPC                        7100
#define SPECIAL_ACTION_PISSING2          68
#define KEY_HORN 						 2
#define CHECKPOINT_Nenhum                0
#define CHECKPOINT_HOME                  12
#define MAX_HOUSES                       237
#define MAX_BIZZES 						 10
#define MAX_SBIZZES 					 246
#define granacarro 						 200
#define precomorte 						 100
#define pingmaximo 					     1200
#define GranadaFavela 				     800
#define GranadoSkate 				     800
#define GranadaEstacao 					 1200
#define GranadoPark 					 800
#define GranadoCasarao 					 1200
#define GranadoAero 					 800
#define MAX_TRUNK_SLOTS					 (5)
#define GasMax 							 100
#define RunortTime 					     15000
#define RefuelWait 						 5000
#define MAX_STRING 						 255
#define MAX_ZONE_NAME 					 28
#define DIALOG_MPTHREE                   5874
#define Dialog_Bandana                   5875
#define DialogCaixaSom                   5876
#define DialogRestaurant                 5176
#define VOTETIME 30000 // Altere a Hora Que Você Quer Como Tempo Restante Para Votar
#define STRING 255
#define MAX_CAIXAS 50
#define SLOTS 500
//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= FIM DEFINES =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<|
new GunObjects[47][0] = {
	{0},// Emty // 0
	{331},// Brass Knuckles
	{333},// Golf Club
	{334},// Nitestick
	{335},// Knife
	{336},// Baseball Bat
	{337},// Showel
	{338},// Pool Cue
	{339},// Katana
	{341},// Chainsaw
	{321},// Purple Dildo
	{322},// Small White Dildo
	{323},// Long White Dildo
	{324},// Vibrator
	{325},// Flowers
	{326},// Cane
	{342},// Grenade
	{343},// Tear Gas
	{344},// Molotov
	{0},
	{0},
	{0},
	{346},// Glock
	{347},// Silenced Colt
	{348},// Desert Eagle
	{349},// Shotgun
	{350},// Sawn Off
	{351},// Combat Shotgun
	{352},// Micro UZI
	{353},// MP5
	{355},// AK47
	{356},// M4
	{372},// Tec9
	{357},// Rifle
	{358},// Sniper Rifle
	{359},// Rocket Launcher
	{360},// HS Rocket Launcher
	{361},// Flamethrower
	{362},// Minigun
	{363},// Detonator
	{364},// Detonator Button
	{365},// Spraycan
	{366},// Fire Extinguisher
	{367},// Camera
	{368},// Nightvision
	{368},// Infrared Vision
	{371}// Parachute
};
#define maxobj 50
#define ARMEDBODY_USE_HEAVY_WEAPON			(false)
static
armedbody_pTick[MAX_PLAYERS];
new FloodAlert[MAX_PLAYERS],
	FloodTimer[MAX_PLAYERS];
new UpdateSeconds = 2; // Não Mecher
new maxobject = 1;
new Text:Intro[12];
new Float:ObjCoords[maxobj][3];
new objectgun[maxobj];
new Dropped[maxobj];
new ObjetoID[maxobj][3];
new pcbomba;
new psinc;
new GZFavela;
new TutTime[MAX_PLAYERS];
new ComandoTutorial[MAX_PLAYERS];
new BugSpawn[MAX_PLAYERS];
new GZSkate;
new GZAero;
new GZComplexo;
new GZPark;
new donoskate;
new donoaero;
new picVida;
new donopark;
new pcorrida;
new phbomba;
new tempoGranaTR;
new GuerranaFavela;
new GuerranoSkate;
new GuerranoAero;
new GuerranoPark;
new TempoGuerraFavela;
new TempoGuerraAero;
new TempoGuerraSkate;
new TempoGuerraPark;
new donoFavela;
new TempoAnReporter;
new TempoGuerraCasarao;
new TempoGuerraComplexo;
new psequestrar;
new pamarrar;
new pcorridaoni;
new GZGuerra;
new weaponhacktimer;
new TempoGuerraEstacao;
new GuerranoCasarao;
new GZEstacao;
new donoestacao;
new donocomplexo;
new GZCasarao;
new donocasarao;
new GuerranaEstacao;
new GuerranoComplexo;
new tempovictim;
new TempoSinc;
new TempoSincronizar;
new TempoAdministrador;
new TempoHelper;
new TempoGuerra;
new tempozip;
new roubovictim;
new tempobinco;
new shifthour;
new year;
new month;
new day;
new hour;
new minute;
new second;
new roubozip;
new tempoloja2;
new roubobinco;
new tempoloja1;
new rouboloja2;
new tempolot;
new rouboloja1;
new tempobanco;
new roubolot;
new roubobanco;
new pickups;
new TempoAnGang;
new TempoAnTaliban;
new TempoAnAlqaeda;
new TempoAnFARC;
new TempoRecarga;
new TempoAnHitmans;
new TempoAnTriads;
new TempoAnmerce;
new TempoAnMafia;
new TempoAnDrift;
new TempoAnTaxi;
new panunciogang;
new panunciomafia;
new panuncioTaliban;
new panuncioalqaeda;
new panuncioFARC;
new panunciotaxi;
new panunciohitmans;
new panunciotriads;
new Portaocat;
new caixinha;
new panuncio;
new radioscasas[150];
new mudarlutacasas[150];
new barcasas[150];
new comerchurrascocasas[150];
new TempoLogin;
new TempoAn;
new TempoCorrida;
new TempoSequestrar;
new TempoAmarrar;
new TempoServicoTaxi;
new TempoServicoOnibus;
new TempoServicoPolicia;
new TempoServicoMedico;
new TempoServicoMecanico;
new TempoMecanico;
new TempoMedico;
new TempoCorridaOni;
new TempoAnPrefeito;
new TempoAnGov;
new Tempocbomba;
new Tempohbomba;
new VagaSobrando;
new PortaoEntrada, PortaoSaida;
new AguaLava1;
new AguaLava2;
new AguaLava3;
new AguaLava4;
new AguaLava5;
new AguaLava6;
new AguaLava7;
new SalaAdmin;
new PayDayDesviar;
new dDesativado;
new Float:chealth;
new Hospital[MAX_PLAYERS];
new HaveTaser[MAX_PLAYERS];
new bool:TaCongelado[MAX_PLAYERS];
new NaoPodeLogar[MAX_PLAYERS];
new EnviouRelatorio[MAX_PLAYERS];  
new timerrelatorio[MAX_PLAYERS];
new EnviouReport[MAX_PLAYERS];
new timerreport[MAX_PLAYERS];
new EnviouHelper[MAX_PLAYERS];
new InterfonouEnviou[MAX_PLAYERS];
new InterfonouKill[MAX_PLAYERS];
new timerhelper[MAX_PLAYERS];
new equiparammu[MAX_PLAYERS];
new timerequiparammu[MAX_PLAYERS];
new tempopescar[MAX_PLAYERS];
new TravarEntrada[MAX_PLAYERS];
new TempoPescou[MAX_PLAYERS];
new TempoDrogas[MAX_PLAYERS];
new CameraConce[MAX_PLAYERS];
new RoubandoComando[MAX_PLAYERS];
new KillRoubando[MAX_PLAYERS];
new SomVeiculoTipo[MAX_VEHICLES];
new SomVeiculoObjeto[3][MAX_VEHICLES];
new bool:SomInstalado[MAX_VEHICLES];
new Float:SomPos[3][MAX_VEHICLES][6];
new Caixa[5];
new TempoEnviarPagamento[MAX_PLAYERS];
new TimerEnviarPagamento[MAX_PLAYERS];
new bool: CaixaExplodido[MAX_CAIXAS];
new bool: VaiExplodir[MAX_CAIXAS];
new PaydayCodigo[MAX_PLAYERS][125];
new bool:PaydayParaReceber[MAX_PLAYERS];
new VoteKick;
new Votes;
new Voted[MAX_PLAYERS];
//*    Explosão Caixa Eletronico  *//
new Float: EfX[MAX_CAIXAS] = {1495.3994, 1363.7000, 1928.7715, 2233.0525};
new Float: EfY[MAX_CAIXAS] = {-1749.8994, -1745.4000, -1785.1870, -1162.6240};
new Float: EfZ[MAX_CAIXAS] = {15.1000, 13.2000, 13.1398, 25.4835};
new Float: EfrX[MAX_CAIXAS] = {0.0000, 0.0000, 0.0000, 0.0000};
new Float: EfrY[MAX_CAIXAS] = {0.0000, 0.0000, 0.0000, 0.0000};
new Float: EfrZ[MAX_CAIXAS] = {179.9945, 270.0000, 90.0000, 270.0000};
new Pickup[MAX_CAIXAS] = {0xFFFF, ...};
new
        Sim,
        Nao,
        aStr[90],
        Votou[MAX_PLAYERS],
        Votacao[MAX_PLAYERS]
;
// =-=-=-=-=-=-=- [ EMPRESTIMO ] -=-=-=-=-=-=-=-
new FOI[MAX_PLAYERS] = 0;
new EMPRESTIMO[MAX_PLAYERS] = 0;
// =-=-=-=-=-=-=- [ Defines Emprestimo ] =-=-=-=-=-=-=-=-
#define DIALOG_EMPRESTIMO 7897
/*
new localizardppm[MAX_PLAYERS];
new localizardpbope[MAX_PLAYERS];
new localizardppc[MAX_PLAYERS];
new localizardppf[MAX_PLAYERS];
new localizarbanco[MAX_PLAYERS];
new localizarprefeitura[MAX_PLAYERS];
*/


//------------------ Bomba nuclear --------------------
new PlantouBombaNuclear[MAX_PLAYERS];
new pBombNuclear[MAX_PLAYERS];
new NuclearBomb;
new RecompensaNuclear;
new pbombanuclear[MAX_PLAYERS]; //pbomba
new pbombanuclear2[MAX_PLAYERS]; //pbomba2
new pbombanuclear3[MAX_PLAYERS]; //pbomba3
new Float:PosBombaXN, Float:PosBombaYN, Float:PosBombaZN; //new Float:PosBombaX, Float:PosBombaY, Float:PosBombaZ;
new usarbombasnuclear = 0; // usarbombas
new BOMBAON = 0;
new BOMBAONTIME = 0;
new VERVIDA;
//-----------------------------------------------------
new Text:Textdraw0[MAX_PLAYERS];
new TimeT, TimeM = 1, TimeS = 0;
//-----------------------------------------------------
new v[6];
new timer[500];
new PedirAvaliar = 999;
new CreatedCar = 0;
new usarbombas = 0;
new TendoGuerra = 0;
new temporoubobanco = 0;
new temporoubolot = 0;
new temporouboloja1 = 0;
new temporouboloja2 = 0;
new temporoubobinco = 0;
new temporoubozip = 0;
new temporoubovictim = 0;
new UsouComando[MAX_PLAYERS] = 0;
new LSThiago[MAX_PLAYERS] = 0;
new SFThiago[MAX_PLAYERS] = 0;
new LVThiago[MAX_PLAYERS] = 0;
new usandolavacarro = -1;
new stringagendou[150];
new Text:FilaAtendimentoText[MAX_PLAYERS];
new Text:TempoAtendimento2Text[MAX_PLAYERS];
new FilaAtendimento[MAX_PLAYERS];
new TempoAtendimento2[MAX_PLAYERS];
new Text:Entrada[MAX_PLAYERS];
new Text:forum[MAX_PLAYERS];
new PortaoTaxi;
new Text:box[MAX_PLAYERS];
new Text:fahrzeug[MAX_PLAYERS];
new Text:mph[MAX_PLAYERS];
new Text:hoehe[MAX_PLAYERS];
new Text:combustivelt[MAX_PLAYERS];
new Text:gps[MAX_PLAYERS];
new Text:url[MAX_PLAYERS];
new Text:zustand[MAX_PLAYERS];
new Text:TextBan[MAX_PLAYERS];
new SpeedoON[MAX_PLAYERS];
enum OldSpeedoPos{Float:sX,Float:sY,Float:sZ}
new SavePlayerPos[MAX_PLAYERS][OldSpeedoPos];
new Float:sVehicle_X[MAX_VEHICLES], Float:sVehicle_Y[MAX_VEHICLES], Float:sVehicle_Z[MAX_VEHICLES];
new TruckMission[MAX_PLAYERS];
new var1[MAX_PLAYERS];
new pban[MAX_PLAYERS];
new cdivulgar[MAX_PLAYERS];
new mudandonick[MAX_PLAYERS];
new gPlayerTerminal[MAX_PLAYERS];
new gmsg[MAX_PLAYERS];
new gSpamCount[MAX_PLAYERS][2];
new Equipamentos[MAX_PLAYERS];
new Dia, Mes, Ano, Hora, Minuto, Segundo;
new CaixaEletronico_Ok[MAX_PLAYERS];
new TransferenciaID[MAX_PLAYERS];
new invadiocat[MAX_PLAYERS];
new HidePM[MAX_PLAYERS];
new Avaliado[MAX_PLAYERS];
new FoiDesban[MAX_PLAYERS];
new TempoAvaliar[MAX_PLAYERS];
new Sequestrado[MAX_PLAYERS];
new Multa[MAX_PLAYERS];
new MoneyMessage[MAX_PLAYERS];
new pbomba[MAX_PLAYERS];
new pbomba2[MAX_PLAYERS];
new pbomba3[MAX_PLAYERS];
new Float:PosBombaX, Float:PosBombaY, Float:PosBombaZ;
new OnCortado[MAX_PLAYERS];
new madeiracortada[MAX_PLAYERS];
new madeirao[MAX_PLAYERS];
new CapacetePlayer[MAX_PLAYERS];
new gpTimes[MAX_PLAYERS];
new InviteOffer[MAX_PLAYERS];
new InviteJob[MAX_PLAYERS];
new away[MAX_PLAYERS];
new storeexit[MAX_PLAYERS];
new barexit[MAX_PLAYERS];
new lotericaexit[MAX_PLAYERS];
new EmDialog[MAX_PLAYERS];
new tempotd[MAX_PLAYERS];
new Reduzido[MAX_PLAYERS];
new ReduzidoBot[MAX_PLAYERS];
new bool:TextShow[MAX_PLAYERS];
new DestroyPickupVidaTimer[MAX_PICKUPS];
new PickupType[MAX_PICKUPS];
new PickupWeapon[MAX_PICKUPS];
new PickupAmmo[MAX_PICKUPS];
new DestroyPickupTimer[MAX_PICKUPS];
new SemBombas[MAX_PLAYERS];
new OfAssalto[MAX_PLAYERS];
new precoassalto[MAX_PLAYERS];
new InAFoodPlace[MAX_PLAYERS];
new skinadm[MAX_PLAYERS];
new roubando[MAX_PLAYERS];
new ProvocoBanco[MAX_PLAYERS];
new ProvocoLot[MAX_PLAYERS];
new ProvocoLoja1[MAX_PLAYERS];
new ProvocoLoja2[MAX_PLAYERS];
new ProvocoBinco[MAX_PLAYERS];
new ProvocoZip[MAX_PLAYERS];
new ProvocoVictim[MAX_PLAYERS];
new ProvocoEstacao[MAX_PLAYERS];
new ProvocoCasarao[MAX_PLAYERS];
new ProvocoComplexo[MAX_PLAYERS];
new spawnado[MAX_PLAYERS];
new admtrampando[MAX_PLAYERS];
new helpertrampando[MAX_PLAYERS];
new logouagora[MAX_PLAYERS];
new Float:FaceAngle[MAX_PLAYERS];
new Float:PlayerHPP[MAX_PLAYERS];
new VehicleIDD[MAX_PLAYERS];
new ammoo[13][MAX_PLAYERS];
new Float:APP[MAX_PLAYERS];
new vehicledd[MAX_PLAYERS];
new interior[MAX_PLAYERS];
new Float:xx[MAX_PLAYERS];
new Float:yy[MAX_PLAYERS];
new Float:zz[MAX_PLAYERS];
new skinneg[MAX_PLAYERS];
new gunsinc[13][MAX_PLAYERS];
new virt[MAX_PLAYERS];
new sincronizando[MAX_PLAYERS];
new OnEquipado[MAX_PLAYERS];
new OnMafiaEquipado[MAX_PLAYERS];
new MudarSenhaAceito[MAX_PLAYERS];
new MudarNickAceito[MAX_PLAYERS];
new Dominando[MAX_PLAYERS];
new ProvocoFavela[MAX_PLAYERS];
new ProvocoSkate[MAX_PLAYERS];
new ProvocoPark[MAX_PLAYERS];
new ProvocoAero[MAX_PLAYERS];
new PolicialInRonda[MAX_PLAYERS];
new Text3D:HouseLabel[MAX_HOUSES];
new Text3D:BizzLabel[MAX_BIZZES];
new Text3D:SBizzLabel[MAX_SBIZZES];
new HouseEntered[MAX_PLAYERS];
new VTrancado[MAX_VEHICLES] = 0;
new CreatedCars[200];
new gstring[128];
new gstring1[128];
new objectcreated;
enum TrInfo{Float:MinX,Float:MinY,Float:MaxX,Float:MaxY,exemortos,talmortos,almortos,FARCmortos,};
new Territorio[TrInfo];
//enum BlInfo{pMotivo[126],pAdmBan[MAX_PLAYER_NAME],pData[20],pHora[20],pNick[64]};
enum BlInfo{
pMotivo[126],
pAdmBan[MAX_PLAYER_NAME],
pData[20],
pHora[20],
BanDia[20],
BanMes[20],
BanAno[20],
BanSegundo[20],
BanHora[20],
BanMinuto[20],
pNick[64]};


new BanInfo[MAX_PLAYERS][BlInfo];
enum sInfo{sCreated,Float:sX,Float:sY,Float:sZ,sObject,};
new SpikeInfo[MAX_SPIKESTRIPS][sInfo];
static gTeam[MAX_PLAYERS];
enum sequestroinfo{QuantidadeSequestro,};
new GuSequestro[MAX_ORGS][sequestroinfo];
new SequestroVezes;
enum CofreInfo{Dinheiro,Materiais,Maconha,Cocaina,Crack,};
new CofreOrg[MAX_ORGS][CofreInfo];
new pCofreOrg[MAX_PLAYERS];
enum Oinfo{Lider[MAX_PLAYER_NAME],SubLider[MAX_PLAYER_NAME],Membro1[MAX_PLAYER_NAME],Membro2[MAX_PLAYER_NAME],
Membro3[MAX_PLAYER_NAME],Membro4[MAX_PLAYER_NAME],Membro5[MAX_PLAYER_NAME],Membro6[MAX_PLAYER_NAME],
Membro7[MAX_PLAYER_NAME],Membro8[MAX_PLAYER_NAME],Membro9[MAX_PLAYER_NAME],Membro10[MAX_PLAYER_NAME],
Membro11[MAX_PLAYER_NAME],Membro12[MAX_PLAYER_NAME],Membro13[MAX_PLAYER_NAME],Membro14[MAX_PLAYER_NAME],
Membro15[MAX_PLAYER_NAME],Membro16[MAX_PLAYER_NAME],Membro17[MAX_PLAYER_NAME],Membro18[MAX_PLAYER_NAME],
Membro19[MAX_PLAYER_NAME],
Membro20[MAX_PLAYER_NAME],};
new InfoOrg[26][Oinfo];
new admhide[MAX_PLAYERS];
new helperhide[MAX_PLAYERS];
stock PlayerName(playerid){new Name[MAX_PLAYER_NAME];GetPlayerName(playerid, Name, MAX_PLAYER_NAME);return Name;}
//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= FORWARD'S =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<|
forward TextProcu();
forward PrintBizInfo(playerid,targetid);
forward AnimRouboBanco(playerid);
forward AnimRouboLot(playerid);
forward AnimRouboLoja(playerid);
forward AnimRouboAmmu(playerid);
forward LoadComponents(vehicleid);
forward AnimRouboBinco(playerid);
forward AnimRouboZip(playerid);
forward AnimRouboVictim(playerid);
forward AttachObjectCorrectly(playerid, object);
forward PortaoTaxi2();
forward reloginho();
forward VeloThiago();
forward invadircat(playerid);
forward UpdateSpeed(playerid);
forward CloseGate(gateid); // Deixe QUETO ( Isso que fará com que o Portão Feche )
forward CloseGate2(gateid2);
forward CloseGate3(gateid3);
forward CloseGate5(gateid5);
forward CloseGate6(gateid6);
forward CloseGate7(gateid7);
forward CloseGate8(gateid8);
forward CloseGate9(gateid9);
forward CloseGate10(gateid10);
forward Usarcat(playerid);
forward Portaogcatandando();
forward SendHelperMessage(COLOR, string[]);
forward SendStarCityMessage(COLOR, string[]);
forward MostrarRG(playerid,targetid);
forward SendSocioMessage(COLOR, string[]);
forward ModCar(playerid);
forward TempoAtendimento();
forward cortando(playerid);
forward cortando2(playerid);
forward usebomb(playerid);
forward usebombnuclear(playerid);
forward @Viajar(playerid);
forward camera(playerid);
forward musica(playerid);
forward contasdolider(playerid);
forward SaveCarCoords();
forward LoadCar();
forward CarroTimer(carid);
forward HelperCheck(playerid);
forward HelpersVaga();
forward AdmCheck(playerid); 
forward SaveComponent(vehicleid, componentid);
forward AdmsVaga();
forward LoadAdm();
forward SaveAdm();
forward LoadHelper();
forward SaveHelper();
forward SendMensagens();
forward ReduzTempoBot(playerid);
forward ReduzTempo(playerid);
forward DropVida(playerid);
forward DestroyVidaPickup(pickupid);
forward DestroyWeaponPickup(pickupid);
forward DropWeapons(playerid);
forward UsarNovamente(playerid);
forward VoltarBombas(playerid);
forward PresoMulta(playerid);
forward Sincronizar(playerid);
forward verping();
forward kickping(playerid);
forward Fixhour(hora);
forward Aroubo();
forward Aroubo2();
forward Aroubo3();
forward Aroubo4();
forward Aroubo5();
forward Aroubo6();
forward Aroubo7();
forward Aroubo8();
forward AcabarMochila(playerid);
forward RouboBanco(playerid);
forward RouboLot(playerid);
forward RouboLoja1(playerid);
forward FuckYou(playerid,give);
forward RouboLoja2(playerid);
forward RouboBinco(playerid);
forward RouboZip(playerid);
forward RouboVictim(playerid);
forward LoginAgora(playerid);
forward Corrida();
forward Sequestrar();
forward Amarrar();
forward CorridaOni();
forward hbomba();
forward cbomba();
forward Sinc();
forward Administrador(playerid);
forward CheckOwnerb(playerid);
forward CheckOwnerh(playerid);
forward GuerraTerrorista(playerid);
forward SendVIPMessage(color, string[]);
forward CheckHack();
forward GuerraFavela(playerid);
forward GuerraSkate(playerid);
forward GuerraPark(playerid);
forward GuerraAero(playerid);
forward ColocarGang(playerid, Vaga, Nome);
forward GranaTerritorios();
forward RecriarObjeto();
forward DestruirObjeto(objid);
forward CriarExplosao(Float:X,Float:Y,Float:Z,tipo,Float:diam);
forward NRouco(playerid);
forward NFlood(playerid);
forward NSemAn(playerid);
forward OnPlayerTeamPrivmsg(playerid,text[]);
forward ScoreLevel(playerid);
forward IsAGOV(playerid);
forward IsAGOVCar(carid);
forward IsABOPEs(playerid);
forward IsABOPEsCar(carid);
forward IsAEx(playerid);
forward IsAExCar(carid);
forward IsAJornal(playerid);
forward IsAJornalCar(carid);
forward IsAHit(playerid);
forward IsAHitCar(carid);
forward IsABikeCar(carid);
forward IsATaliban(playerid);
forward IsATalibanCar(carid);
forward IsASonsofAnarchy(playerid);
forward IsASonsofAnarchyCar(carid);
forward IsATriad(playerid);
forward IsATriadCar(carid);
forward IsAYa(playerid);
forward IsAYaCar(carid);
forward IsAOni(playerid);
forward IsAOniCar(carid);
forward IsATaxi(playerid);
forward IsATaxiCar(carid);
forward gasolina(playerid);
forward IsAVagos(playerid);
forward IsAVagosCar(carid);
forward IsABallas(playerid);
forward IsABallasCar(carid);
forward IsADetran(playerid);
forward IsADetranCar(carid);
forward IsAAdvCar(carid);
forward IsAAdv(playerid);
forward carroVIP(carid);
forward IsAPoliciaCivilCar(carid);
forward GuerraEstacao(playerid);
forward GuerraCasarao(playerid);
forward VoteTimer(giveplayerid);
forward IsAAl(playerid);
forward IsAAlCar(carid);
forward IsAFARC(playerid);
forward IsAFARCCar(carid);
forward IsAGroove(playerid);
forward IsAGrooveCar(carid);
forward IsAAzteca(playerid);
forward IsAAztecaCar(carid);
forward IsADri(playerid);
forward IsADriCar(carid);
forward PDEx2();
forward Hide(target, td);
forward PortaoRally2();
forward PortaoPC2();
forward PortaoReporter2();
forward PortaoBallas();
forward PortaoPoliciaC1();
forward PortaoPoliciaC2();
forward PortaoCasaHosp();
forward PortaoCMadDog();
forward PortaoCMansao4();
forward PortaoC2Mansao4();
forward PortaoMVIP1();
forward  PortaoCasaVIP1();
forward pd1();
forward pd2();
forward gt3gate2();
forward pd3();
forward pd4();
forward pd5();
forward pd6();
forward pd7();
forward GaragemDpClosed();
forward GaragemDpClosed2();
forward pcclosed();
forward PFClosed2();
forward PFClosed3();
forward PCClosed();
forward PCClosed2();
forward PortaoGov2();
forward PortaoDeposito2();
forward PortaoPre2();
forward PortaoHit3();
forward PortaoTriad2();
forward Portao2();
forward LoadProperty();
forward LoadBizz();
forward LoadSBizz();
forward LoadStuff();
forward SaveStuff();
forward LoadBoxer();
forward SaveBoxer();
forward OnPropUpdate();
forward OnPropUpdate2();
forward ExtortionBiz(bizid, money);
forward ExtortionSBiz(bizid, money);
forward IsAnOwnableCar(vehicleid);
forward IsAtDealership(playerid);
forward IsAtClothShop(playerid);
forward IsAtGasStation(playerid);
forward IsAtFishPlace(playerid);
forward IsAtCookPlace(playerid);
forward IsAtBar(playerid);
forward SearchingHit(playerid);
forward PortaooPC2();
forward SetPlayerSpawn(playerid);
forward SetupPlayerForClassSelection(playerid);
forward fecharyakuza1();
forward fecharyakuza3();
forward SaveTrunk();
forward LoadTrunk();
forward ReduceTimer(playerid);
forward RemovePlayerWeapon(playerid, weaponid);
forward CarroMala(vehicleid);
forward SetPlayerTeamFromClass(playerid,classid);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward CarMods(vehicleid);
forward CrimInRange(Float:radi, playerid,copid);
forward ABroadCast(COLOR,const string[],level);
forward HelperBroadCast(COLOR,const string[],level);
forward GetClosestPlayer(p1);
forward IsPlayerInTurf(playerid, turfid);
forward BizInfo(playerid,targetid);
forward TextProcu();
forward PrintSBizInfo(playerid,targetid);
forward SetPlayerUnjail();
forward OtherTimer();
forward RingTonerRev();
forward RingToner();
forward HireCost(carid);
forward SBan(playerid, string[], string2[]);
forward BanLog(string[]);
forward VipsLog(string[]);
forward ConceLog(string[]);
forward KickLog(string[]);
forward PayLog(string[]);
forward IsAnAmbulanceCar(carid);
forward IsAAmbu(playerid);
forward IsAGOV(playerid);
forward IsAGatev(carid);
forward IsACopCar(carid);
forward IsArma(playerid);
forward IsAEnforcerCar(carid);
forward IsACaminhaozinhoCar(carid);
forward IsAMecCar(carid);
forward IsAMec(playerid);
forward IsAPFCar(carid);
forward IsACosaNostraCar(carid);
forward IsAGOVCar(carid);
forward IsACosaNostra(playerid);
forward IsAPlane(carid);
forward IsAAutoescola(carid);
forward IsABoat(carid);
forward IsACop(playerid);
forward IsAMember(playerid);
forward Spectator();
forward ConvertTicks(ticks);
forward Float:GetDistanceBetweenPlayers(p1,p2);
forward GameModeExitFunc();
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward SetPlayerCriminal(playerid,declare,reason[]);
forward SetPlayerFree(playerid,declare,reason[]);
forward SetPlayerWeapons(playerid);
forward ShowStats(playerid,targetid);
forward SetPlayerToTeamColor(playerid);
forward GameModeInitExitFunc();
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,password[]);
forward OnPlayerRegister(playerid, password[]);
forward BroadCast(COLOR,const string[]);
forward OOCNews(COLOR,const string[]);
forward SendEmpregoMessage(Emprego, COLOR, string[]);
forward SendFamilyMessage(family, COLOR, string[]);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward CarKeys(playerid);
forward SavePlayerData(playerid);
forward ini_GetKey( line[] );
forward ini_GetValue( line[] );
forward OnPlayerKeyStateChange(playerid, newkeys, oldkeys);
forward ClearMarriage(playerid);
forward ClearCrime(playerid);
forward FishCost(playerid, fish);
forward ClearFishes(playerid);
forward ClearFishID(playerid, fish);
forward ClearCooking(playerid);
forward ClearCookingID(playerid, cook);
forward ClearGroceries(playerid);
forward Lotto(number);
forward CarCheck();
forward CarInit();
forward CarTow(carid);
forward CarRespawn(carid);
forward CheckGas();
forward Fillup();
forward CorridaTrack();
forward SyncTime();
forward IsPlayerInZone(playerid, zoneid);
forward Production();
forward PayDay();
forward ini_GetKey(line[]);
forward ini_GetValue(line[]);
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward PlayerFixRadio(playerid);
forward PlayerFixRadio2();
forward CustomPickups();
forward SetCamBack(playerid);
forward RemoveRoadblock(playerid);
forward RemoveParedao(playerid);
forward RemoveRoadCones(playerid);
forward RemoveRoadPregos(playerid);
forward BackupClear(playerid, calledbytimer);
forward RemoveBarraca(playerid);
forward ClearChatbox(playerid, lines);
forward Autocruise(playerid, in);
forward AbrirSaida(playerid);
forward EndWash(playerid);
forward AguaLava(playerid, on);
//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= FIM FORWARD'S =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-<|
//        -LAVA JATO-

new Cores[] = {0xF8F8FFAA,0x95FF90AA,0x78B4FFAA, 0xFFA0FAAA, 0xF8F8FFAA,0x95FF90AA, 0x78B4FFAA, 0xFFA0FAAA,
0xF8F8FFAA,0x95FF90AA, 0x78B4FFAA, 0xFFA0FAAA, 0xF8F8FFAA,0x95FF90AA,0x78B4FFAA, 0xFFA0FAAA, 0x78B4FFAA,};

new Mensagenscima[22][128] ={
    "Aviso: Chame seus amigos para jogar aqui, você ajudará o servidor a crescer !",
	"Aviso: Novato ? Precisa de Ajuda ? USE: /relatorio",
	"Aviso: NUNCA Mate Sem Motivo (DM) ou será banido.",
	"Aviso: Sempre Leia Nossas Promoções No /forum.",
	"Aviso: Deseja mudar seu estilo de andar ? USE: /andar",
	"Aviso: Está perdido no meio do nada ? Use seu moderno /gps",
	"Aviso: BRNM Agradece Por Sua Preferencia!",
	"Aviso: Precisando de ajuda ? Digite /ajuda",
	"Informação: Compre Seu Carro na Concessionaria Use /gps, Locais em Geral, Concessionária ",
	"Aviso: Para ver os Advogados Online USE: /advogados",
	"Aviso: Tem Alguma Dúvida? Use: /duvida",
	"Aviso: Adiquira benefícios vip premium, mais informações em brnm.forumeiros.com",
	"Aviso: Você viu alguem violar as regras?, DB, DM, Cheats, Use: /reportar", 
	"Aviso: Você viu algum bug ?, Use /relatorio",
	"Aviso: Conheça as regras da bomba nuclear em nosso forum /forum",
	"Aviso: Para ver os Funcionários do Detran Online Digite /detrans",
	"Aviso: Este Servidor é de RolePlay Portanto Prezamos Pela Simulação da Vida Real",
	"Aviso: Viu alguém violar alguma regra? Use: /votekick.",
	"Aviso: Curta nossa página do facebook www.facebook.com/brnmrpg",
	"Aviso: Adquira beneficios 'vip premium' e ajude seu server, mais informação /forum",
	"Server BRNM: 192.99.223.213:7733",
	"Aviso: É level 3 ou maior? precisa de uma grana vá até o banco e faça um empréstimo!"};
	
public SendMensagens(){new random1 = random(sizeof(Mensagenscima));new random2 = random(sizeof(Cores));
format(gstring, sizeof(gstring), "%s", Mensagenscima[random1]);
SendClientMessageToAll(Cores[random2],gstring);OnPropUpdate();SaveBoxer();return true;}

enum Admin
{
gMembro[MAX_PLAYER_NAME],AdminVaga,
};
enum Helper
{
hMembro[MAX_PLAYER_NAME],HelperVaga,
};
new AdmInfo[31][Admin];new HelperInfo[21][Helper];

public HelperCheck(playerid){new idx = 0;while(idx < sizeof(HelperInfo)){if(strcmp(HelperInfo[idx][hMembro],PlayerName(playerid), true ) == 0 ){return true;}idx++;}return 0;}

public HelpersVaga()
{
new storedcopname[64];
new File: file = fopen("BrasilGames/Helpers.cfg", io_read);
if (file)
{
new valtmp[MAX_PLAYER_NAME];
while (fread(file, valtmp) > 0)
{
strmid(storedcopname, valtmp, 0, strlen("Vazio"), 255);
if ((strcmp(storedcopname, "Vazio", true, strlen("Vazio")) == 0) && (strlen("Vazio") == strlen(storedcopname)))
{
fclose(file);VagaSobrando = 1;
return true;
}
}
}
fclose(file);VagaSobrando = 0;return 0;
}

public AdmCheck(playerid){new idx = 0;while(idx < sizeof(AdmInfo))
{
if(strcmp(AdmInfo[idx][gMembro],PlayerName(playerid), true ) == 0 )
{
return true;
}idx++;
}
return 0;
}
stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}

public AdmsVaga()
{
new storedcopname[64];
new File: file = fopen("BrasilGames/Admins.cfg", io_read);
if (file)
{
new valtmp[MAX_PLAYER_NAME];
while (fread(file, valtmp) > 0){strmid(storedcopname, valtmp, 0, strlen("Vazio"), 255);
if ((strcmp(storedcopname, "Vazio", true, strlen("Vazio")) == 0) && (strlen("Vazio") == strlen(storedcopname)))
{
fclose(file);VagaSobrando = 1;return true;}}}fclose(file);VagaSobrando = 0;
return 0;
}

public SaveAdm()
{
new idx;new File: file2;
while (idx < sizeof(AdmInfo))
{
new coordsstring[256];
format(coordsstring, sizeof(coordsstring), "%s,%d\n",AdmInfo[idx][gMembro],AdmInfo[idx][AdminVaga]);
if(idx == 0)
{
file2 = fopen("BrasilGames/Admins.cfg", io_write);
}
else
{
file2 = fopen("BrasilGames/Admins.cfg", io_append);
}
fwrite(file2, coordsstring);idx++;fclose(file2);
}
return true;
}

public LoadAdm()
{
new arrCoords[2][64];
new strFromFile2[256];
new File: file = fopen("BrasilGames/Admins.cfg", io_read);
if (file){new idx = 0;
while(idx < sizeof(AdmInfo))
{
fread(file, strFromFile2);
split(strFromFile2, arrCoords, ',');
strmid(AdmInfo[idx][gMembro], arrCoords[0], 0, strlen(arrCoords[0]), 255);
AdmInfo[idx][AdminVaga] = strval(arrCoords[1]);idx++;
}
}
fclose(file);
return true;
}

public SaveHelper()
{
new idx;new File: file2;
while (idx < sizeof(HelperInfo))
{
new coordsstring[256];
format(coordsstring, sizeof(coordsstring), "%s,%d\n",HelperInfo[idx][hMembro],HelperInfo[idx][HelperVaga]);
if(idx == 0)
{
file2 = fopen("BrasilGames/Helpers.cfg", io_write);
}
else{file2 = fopen("BrasilGames/Helpers.cfg", io_append);
}
fwrite(file2, coordsstring);
idx++;fclose(file2);
}
return true;
}

public LoadHelper()
{
new arrCoords[2][64];
new strFromFile2[256];
new File: file = fopen("BrasilGames/Helpers.cfg", io_read);
if (file)
{
new idx = 0;
while(idx < sizeof(HelperInfo))
{
fread(file, strFromFile2);
split(strFromFile2, arrCoords, ',');
strmid(HelperInfo[idx][hMembro], arrCoords[0], 0, strlen(arrCoords[0]), 255);
HelperInfo[idx][HelperVaga] = strval(arrCoords[1]);idx++;
}
}
fclose(file);
return true;
}

enum floatinfo
{
Float:posxafk,Float:posyafk,Float:poszafk,Float:angleafk,
}

new PlayerUpdateInfo[MAX_PLAYERS][floatinfo];
new PlayerInactivity[MAX_PLAYERS];
enum SAZONE_MAIN {SAZONE_NAME[28],Float:SAZONE_AREA[6]};
static const gSAZones[][SAZONE_MAIN] = {
	{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
	{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
	{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
	{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
	{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
	{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
	{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
	{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
	{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
	{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
	{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
	{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
	{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
	{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
	{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
	{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
	{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
	{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
	{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
	{"Blackfield",     				{1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
	{"Blackfield",   				{1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
	{"Blackfield",     				{1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
	{"Blackfield",     				{1375.60,823.20,-89.00,1457.30,919.40,110.90}},
	{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
	{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
	{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
	{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
	{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
	{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
	{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
	{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
	{"Castelo",           {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
	{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
	{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
	{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
	{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
	{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
	{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
	{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
	{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
	{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
	{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
	{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
	{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
	{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
	{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
	{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
	{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
	{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
	{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
	{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
	{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
	{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
	{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
	{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
	{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
	{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
	{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
	{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
	{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
	{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
	{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
	{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
	{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
	{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
	{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
	{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
	{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
	{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
	{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
	{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
	{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
	{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
	{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
	{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
	{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
	{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
	{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
	{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
	{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
	{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
	{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
	{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
	{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
	{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
	{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
	{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
	{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
	{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
	{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
	{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
	{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
	{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
	{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
	{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
	{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
	{"Flint ",          			{-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
	{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
	{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
	{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
	{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
	{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
	{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
	{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
	{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
	{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
	{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
	{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
	{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
	{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
	{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
	{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
	{"Parque Gleen",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
	{"Parque Gleen",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
	{"Parque Gleen",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
	{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
	{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
	{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
	{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
	{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
	{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
	{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
	{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
	{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
	{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
	{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
	{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
	{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
	{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
	{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
	{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
	{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
	{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
	{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
	{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
	{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
	{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
	{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
	{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
	{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
	{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
	{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
	{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
	{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
	{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
	{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
	{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
	{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
	{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
	{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
	{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
	{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
	{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
	{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
	{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
	{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
	{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
	{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
	{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
	{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
	{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
	{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
	{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
	{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
	{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
	{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
	{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
	{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
	{"Morro",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
	{"Morro",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
	{"Morro",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
	{"Morro",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
	{"Morro",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
	{"Morro",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
	{"Morro",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
	{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
	{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
	{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
	{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
	{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
	{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
	{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
	{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
	{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
	{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
	{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
	{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
	{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
	{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
	{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
	{"Aeroporto Los Santos",    			{1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
	{"Aeroporto Los Santos",    			{1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
	{"Aeroporto Los Santos",    			{1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
	{"Aeroporto Los Santos",    			{1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
	{"Aeroporto Los Santos",    			{1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
	{"Aeroporto Los Santos",    			{2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
	{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
	{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
	{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
	{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
	{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
	{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
	{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
	{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
	{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
	{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
	{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
	{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
	{"Montgomery",     				{1546.60,208.10,0.00,1745.80,347.40,200.00}},
	{"Montgomery",     				{1582.40,347.40,0.00,1664.60,401.70,200.00}},
	{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
	{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
	{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
	{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
	{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
	{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
	{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
	{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
	{"Robada",         				{-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
	{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
	{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
	{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
	{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
	{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
	{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
	{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
	{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
	{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
	{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
	{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
	{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
	{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
	{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
	{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
	{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
	{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
	{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
	{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
	{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
	{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
	{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
	{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
	{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
	{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
	{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
	{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
	{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
	{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
	{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
	{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
	{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
	{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
	{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
	{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
	{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
	{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
	{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
	{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
	{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
	{"Four Dragons Casino",         {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
	{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
	{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
	{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
	{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
	{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
	{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
	{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
	{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
	{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
	{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
	{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
	{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
	{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
	{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
	{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
	{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
	{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
	{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
	{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
	{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
	{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
	{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
	{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
	{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
	{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
	{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
	{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
	{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
	{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
	{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
	{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
	{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
	{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
	{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
	{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
	{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
	// Citys Zones
	{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
	{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
	{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
	{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
	{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
	{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
	{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
	{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
	{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

stock right(sorrce[], len){new retval[MAX_STRING], srclen;srclen = strlen(sorrce);strmid(retval, sorrce, srclen - len, srclen, MAX_STRING);return retval;}
stock ini_GetKey( line[] )
{
	new keyRes[256];
	keyRes[0] = 0;
    if ( strfind( line , "=" , true ) == -1 ) return keyRes;
    strmid( keyRes , line , 0 , strfind( line , "=" , true ) , sizeof( keyRes) );
    return keyRes;
}

stock ini_GetValue( line[] )
{
	new valRes[256];
	valRes[0]=0;
	if ( strfind( line , "=" , true ) == -1 ) return valRes;
	strmid( valRes , line , strfind( line , "=" , true )+1 , strlen( line ) , sizeof( valRes ) );
	return valRes;
}
stock IsPlayerInFavela(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 2117.333 && y >= -1069.962 && x <= 2261.841 && y <= -959.4252) return true;else return 0;}
stock IsPlayerInAero(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 1395.7454 && y >= -2368.6396 && x <= 1566.4358 && y <= -2204.4346) return true;else return 0;}
stock IsPlayerInSkate(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 1861.9410 && y >= -1450.6462 && x <= 1976.5867 && y <= -1351.4069) return true;else return 0;}
stock IsPlayerInPark(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 1847.332 && y >= -1267.349 && x <= 2060.291 && y <= -1137.074) return true;else return 0;}
stock IsPlayerInEstacao(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 1687.613 && y >= -1958.204 && x <= 1813.106 && y <= -1859.51) return true;else return 0;}
stock IsPlayerInCasarao(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 1098.173 && y >= -2084.531 && x <= 1299.723 && y <= -2005.577) return true;else return 0;}

stock IsPlayerInComplexo(playerid){new Float:x,Float:y,Float:z;GetPlayerPos(playerid, x, y, z);if(x >= 1090.567 && y >= -1989.786 && x <= 1204.652 && y <= -1902.935) return true;else return 0;}
stock GetPlayer2DZone(playerid, zone[], len){new Float:x, Float:y, Float:z;GetPlayerPos(playerid, x, y, z);for(new i = 0; i != sizeof(gSAZones); i++){if(x >= gSAZones[i][SAZONE_AREA][0] && x <= gSAZones[i][SAZONE_AREA][3] && y >= gSAZones[i][SAZONE_AREA][1] && y <= gSAZones[i][SAZONE_AREA][4]){return format(zone, len, gSAZones[i][SAZONE_NAME], 0);}}return 0;}
stock ChecarveiculoThiago(Float:radi, playerid, vehicleid){if(IsPlayerConnected(playerid)){new Float:PX,Float:PY,Float:PZ,Float:X,Float:Y,Float:Z;GetPlayerPos(playerid,PX,PY,PZ);GetVehiclePos(vehicleid, X,Y,Z);new Float:Distance = (X-PX)*(X-PX)+(Y-PY)*(Y-PY)+(Z-PZ)*(Z-PZ);if(Distance <= radi*radi){return true;}}return 0;}
stock GetWeaponModel(weaponid){
switch(weaponid){
case 1:
return 331;
case 2..8:
return weaponid+331;
case 9:
return 341;
case 10..15:
return weaponid+311;
case 16..18:
return weaponid+326;
case 22..29:
return weaponid+324;
case 30,31:
return weaponid+325;
case 32:
return 372;
case 33..45:
return weaponid+324;
case 46:
return 371;
}return 0;}
new vehName[][] = {
	"Landstalker",
	"Bravura",
	"Buffalo",
	"Linerunner",
	"Perrenial",
	"Sentinel",
	"Dumper",
	"Firetruck",
	"Trashmaster",
	"Stretch",
	"Manana",
	"Infernus",
	"Voodoo",
	"Pony",
	"Mule",
	"Cheetah",
	"Ambulance",
	"Leviathan",
	"Moonbeam",
	"Esperanto",
	"Taxi",
	"Washington",
	"Bobcat",
	"Whoopee",
	"BF Injection",
	"Hunter",
	"Premier",
	"Enforcer",
	"Securicar",
	"Banshee",
	"Predator",
	"Bus",
	"Rhino",
	"Barracks",
	"Hotknife",
	"Trailer",
	"Previon",
	"Coach",
	"Cabbie",
	"Stallion",
	"Rumpo",
	"RC Bandit",
	"Romero",
	"Packer",
	"Monster",
	"Admiral",
	"Squalo",
	"Seasparrow",
	"Pizzaboy",
	"Tram",
	"Trailer",
	"Turismo",
	"Speeder",
	"Reefer",
	"Tropic",
	"Flatbed",
	"Yankee",
	"Caddy",
	"Solair",
	"Berkley's RC Van",
	"Skimmer",
	"PCJ-600",
	"Faggio",
	"Freeway",
	"RC Baron",
	"RC Raider",
	"Glendale",
	"Oceanic",
	"Sanchez",
	"Sparrow",
	"Patriot",
	"ATV",
	"Coastguard",
	"Dinghy",
	"Hermes",
	"Sabre",
	"Rustler",
	"ZR-350",
	"Walton",
	"Regina",
	"Comet",
	"BMX",
	"Burrito",
	"Camper",
	"Marquis",
	"Baggage",
	"Dozer",
	"Maverick",
	"News Chopper",
	"Rancher",
	"FBI Rancher",
	"Virgo",
	"Greenwood",
	"Jetmax",
	"Hotring",
	"Sandking",
	"BlistaC",
	"Police Maverick",
	"Boxvillde",
	"Benson",
	"Mesa",
	"RC Goblin",
	"Hotring Racer A",
	"Hotring Racer B",
	"Bloodring Banger",
	"Rancher",
	"Super GT",
	"Elegant",
	"Journey",
	"Bike",
	"Mountain Bike",
	"Beagle",
	"Cropduster",
	"Stunt",
	"Tanker",
	"Roadtrain",
	"Nebula",
	"Majestic",
	"Buccaneer",
	"Shamal",
	"Hydra",
	"FCR-900",
	"NRG-500",
	"HPV1000",
	"Cement Truck",
	"Tow Truck",
	"Fortune",
	"Cadrona",
	"FBI Truck",
	"Willard",
	"Forklift",
	"Tractor",
	"Combine",
	"Feltzer",
	"Remington",
	"Slamvan",
	"Blade",
	"Freight",
	"Streak",
	"Vortex",
	"Vincent",
	"Bullet",
	"Clover",
	"Sadler",
	"Firetruck",
	"Hustler",
	"Intruder",
	"Primo",
	"Cargobob",
	"Tampa",
	"Sunrise",
	"Merit",
	"Utility",
	"Nevada",
	"Jeep",
	"Windsor",
	"Monster",
	"Monster",
	"Uranus",
	"Jester",
	"Sultan",
	"Stratum",
	"Elegy",
	"Raindance",
	"RC Tiger",
	"Flash",
	"Tahoma",
	"Savanna",
	"Bandito",
	"Freight Flat",
	"Streak Carriage",
	"Kart",
	"Mower",
	"Dune",
	"Sweeper",
	"Broadway",
	"Tornado",
	"AT-400",
	"DFT-30",
	"Huntley",
	"Stafford",
	"BF-400",
	"News Van",
	"Tug",
	"Trailer",
	"Emperor",
	"Wayfarer",
	"Euros",
	"Hotdog",
	"Club",
	"Freight Box",
	"Trailer",
	"Andromada",
	"Dodo",
	"RC Cam",
	"Launch",
	"Police Car LSPD",
	"Police Car SFPD",
	"Police Car LVPD",
	"Police Ranger",
	"Picador",
	"S.W.A.T",
	"Alpha",
	"Phoenix",
	"Glendale",
	"Sadler",
	"Luggage",
	"Luggage",
	"Stairs",
	"Boxville",
	"Tiller",
	"Utility Trailer"
};
enum cInfo
{
	cModel,
	Float:cLocationx,
	Float:cLocationy,
	Float:cLocationz,
	Float:cAngle,
	cColorOne,
	cColorTwo,
	cOwner[MAX_PLAYER_NAME],
	cDescription[25], // 12
	cValue,
	cLicense[14],
	cRegistration,
	cOwned,
	cLock,
	ownedvehicle,
	mod1,
	mod2,
	mod3,
	mod4,
	mod5,
	mod6,
	mod7,
	mod8,
	mod9,
	mod10,
	mod11,
	mod12,
	mod13,
	mod14,
	mod15,
	mod16,
	mod17,
	paintjob,
	cFreio,
	Float:cPosX,
	Float:cPosY,
	Float:cPosZ,
	Float:cAngulo,
	VeiculoAprendido,
};
new CarInfo[2001][cInfo];// 721

new spoiler[20][0] = {
	{1000},
	{1001},
	{1002},
	{1003},
	{1014},
	{1015},
	{1016},
	{1023},
	{1058},
	{1060},
	{1049},
	{1050},
	{1138},
	{1139},
	{1146},
	{1147},
	{1158},
	{1162},
	{1163},
	{1164}
};

new nitro[3][0] = {
    {1008},
    {1009},
    {1010}
};

new fbumper[23][0] = {
    {1117},
    {1152},
    {1153},
    {1155},
    {1157},
    {1160},
    {1165},
    {1167},
    {1169},
    {1170},
    {1171},
    {1172},
    {1173},
    {1174},
    {1175},
    {1179},
    {1181},
    {1182},
    {1185},
    {1188},
    {1189},
    {1192},
    {1193}
};

new rbumper[22][0] = {
    {1140},
    {1141},
    {1148},
    {1149},
    {1150},
    {1151},
    {1154},
    {1156},
    {1159},
    {1161},
    {1166},
    {1168},
    {1176},
    {1177},
    {1178},
    {1180},
    {1183},
    {1184},
    {1186},
    {1187},
    {1190},
    {1191}
};

new exhaust[28][0] = {
    {1018},
    {1019},
    {1020},
    {1021},
    {1022},
    {1028},
    {1029},
    {1037},
    {1043},
    {1044},
    {1045},
    {1046},
    {1059},
    {1064},
    {1065},
    {1066},
    {1089},
    {1092},
    {1104},
    {1105},
    {1113},
    {1114},
    {1126},
    {1127},
    {1129},
    {1132},
    {1135},
    {1136}
};

new bventr[2][0] = {
    {1042},
    {1044}
};

new bventl[2][0] = {
    {1043},
    {1045}
};

new bscoop[4][0] = {
	{1004},
	{1005},
	{1011},
	{1012}
};

new rscoop[13][0] = {
    {1006},
    {1032},
    {1033},
    {1035},
    {1038},
    {1053},
    {1054},
    {1055},
    {1061},
    {1067},
    {1068},
    {1088},
    {1091}
};

new lskirt[21][0] = {
    {1007},
    {1026},
    {1031},
    {1036},
    {1039},
    {1042},
    {1047},
    {1048},
    {1056},
    {1057},
    {1069},
    {1070},
    {1090},
    {1093},
    {1106},
    {1108},
    {1118},
    {1119},
    {1133},
    {1122},
    {1134}
};

new rskirt[21][0] = {
    {1017},
    {1027},
    {1030},
    {1040},
    {1041},
    {1051},
    {1052},
    {1062},
    {1063},
    {1071},
    {1072},
    {1094},
    {1095},
    {1099},
    {1101},
    {1102},
    {1107},
    {1120},
    {1121},
    {1124},
    {1137}
};

new hydraulics[1][0] = {
    {1087}
};

new base[1][0] = {
    {1086}
};

new rbbars[2][0] = {
    {1109},
    {1110}
};

new fbbars[2][0] = {
    {1115},
    {1116}
};

new wheels[17][0] = {
    {1025},
    {1073},
    {1074},
    {1075},
    {1076},
    {1077},
    {1078},
    {1079},
    {1080},
    {1081},
    {1082},
    {1083},
    {1084},
    {1085},
    {1096},
    {1097},
    {1098}
};

new light[2][0] = {
	{1013},
	{1024}
};

InitComponents(componentid)
{
	new i;
	for(i=0; i<20; i++)
	{
	    if(spoiler[i][0]==componentid) { return 1; }
	}
	for(i=0; i<3; i++)
	{
	    if(nitro[i][0]==componentid) { return 2; }
	}
	for(i=0; i<23; i++)
	{
	    if(fbumper[i][0]==componentid) { return 3; }
	}
	for(i=0; i<22; i++)
	{
	    if(rbumper[i][0]==componentid) { return 4; }
	}
	for(i=0; i<28; i++)
	{
	    if(exhaust[i][0]==componentid) { return 5; }
	}
	for(i=0; i<2; i++)
	{
	    if(bventr[i][0]==componentid) { return 6; }
	}
	for(i=0; i<2; i++)
	{
	    if(bventl[i][0]==componentid) { return 7; }
	}
	for(i=0; i<4; i++)
	{
	    if(bscoop[i][0]==componentid) { return 8; }
	}
	for(i=0; i<13; i++)
	{
	    if(rscoop[i][0]==componentid) { return 9; }
	}
	for(i=0; i<21; i++)
	{
	    if(lskirt[i][0]==componentid) { return 10; }
	}
	for(i=0; i<21; i++)
	{
	    if(rskirt[i][0]==componentid) { return 11; }
	}
	if(hydraulics[0][0]==componentid) { return 12; }
	if(base[0][0]==componentid) { return 13; }
	for(i=0; i<2; i++)
	{
	    if(rbbars[i][0]==componentid) { return 14; }
	}
	for(i=0; i<2; i++)
	{
	    if(fbbars[i][0]==componentid) { return 15; }
	}
	for(i=0; i<17; i++)
	{
	    if(wheels[i][0]==componentid) { return 16; }
	}
	for(i=0; i<2; i++)
	{
	    if(light[i][0]==componentid) { return 17; }
	}
	return 0;
}

enum StreetInfo{Tels[20],PLojaA1,PLojaA2,PpLoja247,PpLoja2472,ArmaLoja[52],InicioGuerra,PAbriuRG,};
new ThiagoInfo[MAX_PLAYERS][StreetInfo];
new aNames[55][] ={
"Desarmado", "Soqueira", "Taco de Golf", "Cacetete",
"Faca", "Taco de Base-Ball", "Pá de pedreiro", "Cano", "Espada", "Motoserra", "Vibrador", "Vibrador", "Vibrador", "Vibrador",
"Flores", "Pé de cabra", "Granada", "Bomba de Gás", "Coquetel-Molotov", "Desconhecido 19", "Desconhecido 20", "Jetpack", "Pistola 9mm", "Pistola 9mm com Silenciador",
"Desert Eagle", "Shotgun", "Escopeta do cano serrado", "Escopeta de combate", "Micro Uzi", "MP5", "Ak-47", "M4", "Tec9", "Rifle", "Rifle-Sniper",
"Lança Missil", "Lança Missil RPG", "Lança Chamas", "Minigun", "Explosivo Remoto", "Detonador", "Spray", "Extintor", "Camera", "Òculos de Visão noturna", "Òculos Infra Vermelho",
"Paraquedas", "Desconhecido", "Desconhecido", "Desconhecido", "Desconhecido", "Desconhecido", "Desconhecido", "Desconhecido", "Desconhecido"};
new NicksProibidos[41][MAX_PLAYER_NAME]  ={
"com1","com2","com3","com4","com5","com6","com7","com8","com9","lpt1","lpt2","lpt3","lpt4","lpt5","lpt6","lpt7",
"lpt8","lpt9","clock$","prn","nul","con","[BOT]","Carl","Rocky","Anonymus","BOT","CON","con","con1","GameOf_style","BFS","PRN","AUX","Mr_X","LSBR","BPL",
"Server_Lixao","crashar_servidor","Crashar_Servidor","com1.aux.com.ipt3"};

new Float:ex;new Float:ey;new Float:ez;new Evento;new Text:Reloginho1;new Text:Reloginho2;new kickname[MAX_PLAYER_NAME];new sendername[MAX_PLAYER_NAME];new Rouco[MAX_PLAYERS];new SemAn[MAX_PLAYERS];new portaoPC1;new PortaoCHosp;new PortaoCasaMadDog;new CasaVIP1;new CasaVIP2;new CasaVIP3;new CasaVIP4;new CasaVIP5;new portaoPC2;new PortaooPC;new Float:BusShowLocation[MAX_PLAYERS][4];new BusShowLocationC[MAX_PLAYERS];new BusrouteWest[MAX_PLAYERS][2];new BusrouteEast[MAX_PLAYERS][2];new NomeCarro[128];
new pyakuza1, pyakuza3, acn;new PDEx;new PortaoRally;new PortaoReporter;new PDDOORa;new PDDOORb;new PDDOORc;new PDPMLS;new PDGARAGE;new PDELEVATOR;new gatepf3;new gatepf2;new gt3gate;new gt3gate3;new PortaoGov;new PortaoDeposito;new Portaocasa216;new Portao2casa216;new PortaoPF; new CasaMVIP1;new CasaMVIP1p;new CasaMVIP1pp;new CasaMVIP1g;new CasaMVIP1g2;new CasaMVIP4p;new CasaMVIP4p2;new CasaMVIP4p3;new CasaMVIP4p4;
new PortaoPre;new PortaoHit1;new PortaoTriad1;new TaxValue = 0;new Jackpot = 0;new InRing = 0;new RorndStarted = 0;new BoxDelay = 0;new Boxer1 = 255;new Boxer2 = 255;new TBoxer = 255;new PlayerBoxing[MAX_PLAYERS];new hitfound = 0;new hitid1 = 999;new Copsronda = 0;new CopsrondaCall = 999;new CopsrondaCallTime[MAX_PLAYERS];new CopsrondaAccepted[MAX_PLAYERS];new Medics = 0;new MedicCall = 999;new MedicCallTime[MAX_PLAYERS];
new MedicAccepted[MAX_PLAYERS];new Mechanics = 0;new MechanicCall = 999;new MechanicCallTime[MAX_PLAYERS];new MechanicAccepted[MAX_PLAYERS];new TaxiDrivers = 0;new TaxiCall = 999;new TaxiCallTime[MAX_PLAYERS];new TaxiAccepted[MAX_PLAYERS];new BusDrivers = 0;new BusCall = 999;new BusCallTime[MAX_PLAYERS];new BusAccepted[MAX_PLAYERS];new TransportDuty[MAX_PLAYERS];new TransportValue[MAX_PLAYERS];new TransportMoney[MAX_PLAYERS];
new TransportTime[MAX_PLAYERS];new TransportCost[MAX_PLAYERS];new TransportDriver[MAX_PLAYERS];new EmpregoDuty[MAX_PLAYERS];new RegistrationStep[MAX_PLAYERS];new MapIconsShown[MAX_PLAYERS];new UsedFind[MAX_PLAYERS];new WatchingTV[MAX_PLAYERS];new PMansao228p2;new PMansao228;new PMansao229;new PMansao229p2;
new NoFuel[MAX_PLAYERS];new MatsHolding[MAX_PLAYERS];new DivorceOffer[MAX_PLAYERS];new MarriageCeremoney[MAX_PLAYERS];new ProposeOffer[MAX_PLAYERS];new ProposedTo[MAX_PLAYERS];new GotProposedBy[MAX_PLAYERS];new MarryWitness[MAX_PLAYERS];new MarryWitnessOffer[MAX_PLAYERS];new TicketOffer[MAX_PLAYERS];new TicketMoney[MAX_PLAYERS];new PlayerStoned[MAX_PLAYERS];new ConsumingMoney[MAX_PLAYERS];new FishCornt[MAX_PLAYERS];
new PlayerDrunk[MAX_PLAYERS];new PlayerDrunkTime[MAX_PLAYERS];new PlayerTazeTime[MAX_PLAYERS];new FindTimePoints[MAX_PLAYERS];new FindTime[MAX_PLAYERS];new BoxWaitTime[MAX_PLAYERS];new TestFishes[MAX_PLAYERS];new BoxOffer[MAX_PLAYERS];new CarOffer[MAX_PLAYERS];new CarPrice[MAX_PLAYERS];new CarID[MAX_PLAYERS];new CarCalls[MAX_PLAYERS];new GotHit[MAX_PLAYERS];new GanhouArmamento;new FH = 0;new FK = 0;new Avisouc = 0;
new ColocouContrato = 999;new CHitman;new CTriad;new GoChase[MAX_PLAYERS];new GetChased[MAX_PLAYERS];new OrderReady[MAX_PLAYERS];new ConnectedToPC[MAX_PLAYERS];new MedicTime[MAX_PLAYERS];new NeedMedicTime[MAX_PLAYERS];new MedicBill[MAX_PLAYERS];new PlayerTied[MAX_PLAYERS];new PlayerCuffed[MAX_PLAYERS];new PlayerCuffedTime[MAX_PLAYERS];new LiveOffer[MAX_PLAYERS];new TalkingLive[MAX_PLAYERS];new PlacedNews[MAX_PLAYERS];
new SelectChar[MAX_PLAYERS];new SelectCharID[MAX_PLAYERS];new SelectCharPlace[MAX_PLAYERS];new ChosenSkin[MAX_PLAYERS];new GettingEmprego[MAX_PLAYERS];new GuardOffer[MAX_PLAYERS];new GuardPrice[MAX_PLAYERS];new ApprovedAdvogado[MAX_PLAYERS];new CallAdvogado[MAX_PLAYERS];new WantAdvogado[MAX_PLAYERS];new CurrentMoney[MAX_PLAYERS];new KickPlayer[MAX_PLAYERS];new Robbed[MAX_PLAYERS];new RobbedTime[MAX_PLAYERS];
new CP[MAX_PLAYERS];new Condom[MAX_PLAYERS];new MendigoOffer[MAX_PLAYERS];new MendigoPrice[MAX_PLAYERS];new SexOffer[MAX_PLAYERS];new SexPrice[MAX_PLAYERS];new RepairOffer[MAX_PLAYERS];new RepairPrice[MAX_PLAYERS];new RefillOffer[MAX_PLAYERS];new RefillPrice[MAX_PLAYERS];new RepairCar[MAX_PLAYERS];new DrugOffer[MAX_PLAYERS];new DrugPrice[MAX_PLAYERS];new DrugGram[MAX_PLAYERS];new JailPrice[MAX_PLAYERS];
new WantedPoints[MAX_PLAYERS];new OnDuty[MAX_PLAYERS];new gPlayerCheckpointStatus[MAX_PLAYERS];new gPlayerLogged[MAX_PLAYERS];new gPlayerLogTries[MAX_PLAYERS];new gPlayerSpawned[MAX_PLAYERS];new gActivePlayers[MAX_PLAYERS];new gLastCar[301];new gNews[MAX_PLAYERS];new gFam[MAX_PLAYERS];new BigEar[MAX_PLAYERS];new Spectate[MAX_PLAYERS];new CellTime[MAX_PLAYERS];new HireCar[MAX_PLAYERS];new SafeTime[MAX_PLAYERS];
new PhoneOnline[MAX_PLAYERS];new gDice[MAX_PLAYERS];new gSpentCash[MAX_PLAYERS];new SwitchKey[MAX_PLAYERS];new Fixr[MAX_PLAYERS];new Locator[MAX_PLAYERS];new Mobile[MAX_PLAYERS];new RingTone[MAX_PLAYERS];new CallCost[MAX_PLAYERS];new gPlayerConta[MAX_PLAYERS];new gPlayerMission[MAX_PLAYERS];new gLastDriver[302];new portaodpauto;new playerpickup[MAX_PLAYERS];new ghour = 0;new numplayers = 0;new levelcost = 5000;
new callcost = 10; new realchat = 1;new timeshift = 0;new othtimer;new newmistimer;new unjailtimer;new turftimer;new pickuptimer;new spectatetimer;new productiontimer;new Contastimer;new checkgastimer;new stoppedvehtimer;new cartimer;new levelexp = 4;new cchargetime = 60;new Float:ChangePos[MAX_PLAYERS][3];new ChangePos2[MAX_PLAYERS][2];new Float:TeleportDest[MAX_PLAYERS][3];new Float:TelePos[MAX_PLAYERS][6];
new pRoadblock[MAX_PLAYERS];
new pRoadCones[MAX_PLAYERS];
new STD1[] = {0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3};
new STD2[] = {0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3};
new STD3[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3};
new STD4[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3};
new vehTrunkCounter[MAX_VEHICLES] = 1;
new vehTrunk[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new vehTrunkAmmo[MAX_VEHICLES][MAX_TRUNK_SLOTS];
new Float:vehTrunkArmour[MAX_VEHICLES];
new ReduceTime[MAX_PLAYERS];
new Gas[CAR_AMOUNT];
new Refueling[MAX_PLAYERS];
public Float:GetDistanceBetweenPlayers(p1,p2){new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2)){return -1.00;}
GetPlayerPos(p1,x1,y1,z1);GetPlayerPos(p2,x2,y2,z2);return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));}
new Music[MAX_PLAYERS];
new Songs[7][1] = {{1187},{1185},{1183},{1097},{1076},{1068},{1062}};
new FishNamesNumber = 22;
new FishNames[22][20] = {
{"Jacketa"},
{"Peixe Estragado"},
{"Garoupa"},
{"Cioppa"},
{"Calças"},
{"Truta"},
{"Cavalo Marinho"},
{"Lata"},
{"Sardinha"},
{"Lobo do Mar"},
{"Sapato"},
{"Ferro"},
{"Piranha"},
{"Peixe Vela"},
{"Atum"},
{"Enguia"},
{"Golfinho"},
{"Tubarão"},
{"Tartaruga"},
{"Peixe-Gato"},
{"Bolsa de Dinheiro"},
{"Peixe-Espada"}};

new Float:gPresoPmSpawns[3][4] = {
{264.0141,82.0856,1001.0391,267.1115},
{264.1883,86.7433,1001.0391,268.5763},
{264.6288,77.5742,1001.0391,268.5763}};
new Float:gPresoBopeSpawns[3][4] = {
{219.1653,109.2390,999.0156,358.9629},
{223.2178,110.6664,999.0156,355.7435},
{227.1820,110.4537,999.0156,7.7288}};
new Float:gPresoPcSpawns[3][4] = {
{193.3041,174.5611,1003.0234,359.3811},
{198.5518,162.2574,1003.0300,177.3532},
{198.1076,175.0731,1003.0234,0.0}};
new Float:gPresoPfSpawns[3][4] = {
{319.5352,312.7950,999.1484,267.9541},
{319.6884,316.7169,999.1484,272.3408},
{319.5352,312.7950,999.1484,267.9541}};
new Float:gInviteSpawns[10][4] = {
{-1976.5912,166.1818,36.9623,272.6393},
{-1975.8610,162.1945,36.9623,272.0126},
{-1975.7461,157.5404,36.9623,276.1093},
{-1975.2136,151.4920,36.9623,268.2993},
{-1974.9963,145.3430,36.9623,269.2628},
{-1975.5842,140.8170,36.9623,269.8895},
{-1975.7874,134.0368,36.9623,271.7696},
{-1975.1681,129.0926,36.9623,270.8531},
{-1975.9069,121.4700,36.9623,270.5631},
{-1975.3311,112.7078,36.9623,267.7665}};
new Float:gMedPlayerSpawns[2][3] = {
{1178.1,-1321.0,14.1},
{1177.7,-1325.0,14.0}};
new Text:MsgBox;
enum {
CommonRed = 19006,
CommonOrange,
CommonGreen,
CommonBlue,
CommonPurple,
CommonEspiral,
CommonBlack,
CommonEyes,
CommonXadrex,
CommonTransparent,
CommonXRayVision,
SquareFormatYellow,
SquareFormatOrange,
SquareFormatRed,
SquareFormatBlue,
SquareFormatGreen,
RayBanGray,
RayBanBlue,
RayBanPurple,
RayBanPink,
RayBanRed,
RayBanOrange,
RayBanYellow,
RayBanGreen,
CircularNormal,
CircularYellow,
CircularRed,
CircularBlack,
CircularXadrex,
CircularThunders,
CopGlassesBlack = 19138,
CopGlassesRed = 19139,
CopGlassesBlue = 19140,
};

enum pAInfo{
cMotivoAgendou[128],
cAdminAgendou[64],};
new AgendouInfo[MAX_PLAYERS][pAInfo];

new Float:SkinOffSet[300][7] = {
{0.098771, 0.030772, -0.000335, 85.342658, 84.122947, 4.236968 }, // - 0
{0.100766, 0.028630, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 1
{0.083712, 0.033132, -0.003521, 87.936676, 82.110870, 4.236968 }, // - 2
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 3
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 4
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 5
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 6
{0.090066, 0.043458, -0.006523, 87.936676, 82.110870, 4.236968 }, // - 7
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 8
{0.070977, 0.028663, 0.000147, 81.164970, 92.128402, 4.236968 },  // - 9
{0.072317, 0.032179, -0.002934, 86.843269, 84.196006, 4.236968 }, // - 10
{0.072317, 0.035465, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 11
{0.072317, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 12
{0.076569, 0.028100, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 13
{0.091310, 0.049169, -0.002201, 86.843269, 84.196006, 4.236968 }, // - 14
{0.073734, 0.006292, -0.002755, 86.843269, 84.196006, 4.236968 }, // - 15
{0.092845, 0.040331, 0.000183, 86.843269, 82.864280, 4.236968 },  // - 16
{0.088241, 0.030184, -0.000157, 86.843269, 82.864280, 4.236968 }, // - 17
{0.061677, 0.029596, -0.007398, 86.843269, 82.864280, 4.236968 }, // - 18
{0.079911, 0.029596, -0.002934, 86.843269, 82.864280, 4.236968 }, // - 19
{0.095079, 0.029596, -0.001718, 85.261871, 86.296562, 4.236968 }, // - 20
{0.093728, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 21
{0.079585, 0.042083, -0.005781, 85.261871, 81.636192, 4.236968 }, // - 22
{0.090786, 0.041737, -0.005263, 85.261871, 81.636192, 4.236968 }, // - 23
{0.085247, 0.026941, -0.000317, 85.261871, 81.636192, 4.236968 }, // - 24
{0.081646, 0.031448, -0.001113, 89.393653, 81.665985, 4.236968 }, // - 25
{0.083700, 0.033814, -0.001960, 86.436462, 81.665985, 4.236968 }, // - 26
{0.092498, 0.037321, -0.001960, 86.436462, 85.568023, 4.236968 }, // - 27
{0.097068, 0.041360, -0.007881, 86.771400, 85.568023, 4.236968 }, // - 28
{0.083456, 0.050595, 0.001011, 86.771400, 77.201461, 4.236968 },  // - 29
{0.076983, 0.047168, -0.006161, 86.771400, 74.329719, 4.236968 }, // - 30
{0.083798, 0.042184, -0.001869, 86.771400, 83.181861, 4.236968 }, // - 31
{0.053021, -0.000587, -0.001869, 86.771400, 66.859710, 4.236968 },// - 32
{0.034386, 0.013324, -0.001869, 86.771400, 80.314460, 4.236968 }, // - 33
{0.104669, 0.037365, -0.001403, 86.771400, 87.178382, 4.236968 }, // - 34
{0.102659, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 35
{0.107638, 0.037465, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 36
{0.107638, 0.035879, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 37
{0.107638, 0.041106, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 38
{0.080326, 0.035634, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 39
{0.080326, 0.027371, -0.000829, 86.771400, 93.020492, 4.236968 }, // - 40
{0.084617, 0.039613, -0.001620, 86.771400, 93.020492, 4.236968 }, // - 41
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 42
{0.040075, 0.025445, -0.000974, 86.771400, 92.964149, 4.236968 }, // - 43
{0.077369, 0.028469, -0.000974, 86.771400, 78.435791, 4.236968 }, // - 44
{0.064145, 0.028684, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 45
{0.091993, 0.056559, -0.000974, 86.771400, 84.762802, 4.236968 }, // - 46
{0.084582, 0.051277, -0.005034, 86.771400, 84.762802, 4.236968 }, // - 47
{0.092182, 0.042095, -0.003533, 86.771400, 84.762802, 4.236968 }, // - 48
{0.086866, 0.032203, -0.001021, 86.771400, 84.762802, 4.236968 }, // - 49
{0.099350, 0.009422, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 50
{0.099350, 0.030598, -0.005899, 86.771400, 84.762802, 4.236968 }, // - 51
{0.099350, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 52
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 53
{0.079123, 0.030598, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 54
{0.063159, 0.029641, -0.003575, 86.771400, 84.762802, 4.236968 }, // - 55
{0.070293, 0.029641, -0.000570, 86.771400, 84.762802, 4.236968 }, // - 56
{0.111305, 0.045368, -0.000570, 86.771400, 84.458084, 4.236968 }, // - 57
{0.084901, 0.020965, -0.000570, 86.771400, 79.542411, 4.236968 }, // - 58
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 59
{0.090164, 0.044163, -0.004754, 86.771400, 79.542411, 4.236968 }, // - 60
{0.087151, 0.041447, -0.000885, 90.928329, 89.598678, 0.000000 }, // - 61
{0.094350, 0.041447, 0.005717, 90.928329, 89.598678, 0.000000 },  // - 62
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 63
{0.075534, 0.041447, -0.001751, 90.928329, 89.598678, 0.000000 }, // - 64
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 65
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 66
{0.104148, 0.034787, 0.001341, 90.928329, 89.598678, 0.000000 },  // - 67
{0.087317, 0.039646, -0.004032, 90.928329, 89.598678, 0.000000 }, // - 68
{0.074873, 0.039646, -0.003072, 90.928329, 89.598678, 0.000000 }, // - 69
{0.090391, 0.042364, 0.005494, 90.928329, 89.598678, 0.000000 },  // - 70
{0.090391, 0.022298, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 71
{0.090391, 0.039580, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 72
{0.090391, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 73
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 74
{0.083113, 0.038224, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 75
{0.072957, 0.028956, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 76
{0.069398, 0.039981, -0.001170, 90.928329, 89.598678, 0.000000 }, // - 77
{0.105738, 0.010001, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 78
{0.078264, 0.019668, 0.004508, 90.928329, 79.030494, 0.000000 },  // - 79
{0.087377, 0.022096, -0.001993, 90.928329, 79.030494, 0.000000 }, // - 80
{0.087377, 0.022096, -0.001635, 90.928329, 79.030494, 0.000000 }, // - 81
{0.100623, 0.043063, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 82
{0.092528, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 83
{0.102086, 0.027493, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 84
{0.081954, 0.041672, -0.001635, 90.928329, 87.672645, 0.000000 }, // - 85
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 86
{0.077010, 0.046925, -0.003438, 90.928329, 91.590301, 0.000000 }, // - 87
{0.069952, 0.042635, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 88
{0.093827, 0.019258, -0.003438, 90.928329, 86.722587, 0.000000 }, // - 89
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 90
{0.066464, 0.035685, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 91
{0.066464, 0.038135, -0.000843, 90.928329, 86.722587, 0.000000 }, // - 92
{0.066464, 0.038135, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 93
{0.048124, 0.010598, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 94
{0.084997, 0.006773, -0.001690, 90.928329, 86.722587, 0.000000 }, // - 95
{0.100076, 0.026633, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 96
{0.061686, 0.027537, -0.001690, 90.928329, 80.020179, 0.000000 }, // - 97
{0.098318, 0.053993, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 98
{0.098318, 0.033702, -0.001690, 90.928329, 89.237678, 0.000000 }, // - 99
{0.086149, 0.042526, -0.001690, 90.928329, 77.587478, 0.000000 }, // - 100
{0.081864, 0.030555, -0.001690, 90.928329, 78.145759, 0.000000 }, // - 101
{0.081864, 0.047914, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 102
{0.089607, 0.036717, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 103
{0.079655, 0.042021, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 104
{0.091779, 0.037620, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 105
{0.084179, 0.035251, -0.005079, 90.928329, 78.145759, 0.000000 }, // - 106
{0.089387, 0.040297, -0.006006, 90.928329, 78.145759, 0.000000 }, // - 107
{0.081930, 0.030756, 0.001523, 90.928329, 78.145759, 0.000000 },  // - 108
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 109
{0.092857, 0.043070, -0.006084, 90.928329, 85.326652, 0.000000 }, // - 110
{0.106601, 0.028021, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 111
{0.096335, 0.015873, -0.003537, 90.928329, 90.217376, 0.000000 }, // - 112
{0.105827, 0.046620, -0.001395, 90.928329, 90.217376, 0.000000 }, // - 113
{0.097520, 0.044296, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 114
{0.097408, 0.043470, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 115
{0.092588, 0.049832, -0.007286, 90.928329, 90.217376, 0.000000 }, // - 116
{0.081444, 0.037602, -0.003125, 90.928329, 90.217376, 0.000000 }, // - 117
{0.078678, 0.037602, -0.001816, 90.928329, 90.217376, 0.000000 }, // - 118
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 119
{0.089214, 0.029291, -0.000784, 90.928329, 84.624763, 0.000000 }, // - 120
{0.086825, 0.033424, -0.000784, 90.928329, 77.233818, 0.000000 }, // - 121
{0.082869, 0.030783, -0.000950, 90.928329, 77.233818, 0.000000 }, // - 122
{0.096117, 0.048957, -0.006245, 90.928329, 87.579650, 0.000000 }, // - 123
{0.103663, 0.040022, 0.000449, 90.928329, 87.579650, 0.000000 },  // - 124
{0.099326, 0.031202, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 125
{0.099326, 0.031132, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 126
{0.099326, 0.039279, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 127
{0.099326, 0.047422, -0.001180, 90.928329, 87.579650, 0.000000 }, // - 128
{0.088817, 0.021210, 0.000730, 90.928329, 87.579650, 0.000000 },  // - 129
{0.025784, 0.028323, 0.000730, 90.928329, 59.394767, 0.000000 },  // - 130
{0.068455, 0.031841, -0.004470, 90.928329, 79.979003, 0.000000 }, // - 131
{0.012930, 0.008392, -0.004470, 90.928329, 72.129173, 0.000000 }, // - 132
{0.102457, 0.032260, -0.003338, 90.928329, 84.534217, 0.000000 }, // - 133
{0.085976, 0.014956, -0.003338, 90.928329, 80.308830, 0.000000 }, // - 134
{0.071574, 0.028186, -0.001588, 90.928329, 80.308830, 0.000000 }, // - 135
{0.085219, 0.016666, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 136
{0.065114, 0.009318, -0.000738, 90.928329, 80.308830, 0.000000 }, // - 137
{0.066890, 0.040024, -0.000738, 90.928329, 87.341934, 0.000000 }, // - 138
{0.072037, 0.036141, -0.000702, 90.928329, 87.341934, 0.000000 }, // - 139
{0.069108, 0.042194, -0.000436, 90.928329, 87.341934, 0.000000 }, // - 140
{0.058717, 0.043547, -0.000436, 90.928329, 87.209770, 0.000000 }, // - 141
{0.104196, 0.039601, -0.005481, 90.928329, 87.209770, 0.000000 }, // - 142
{0.090929, 0.045881, -0.012780, 90.928329, 87.209770, 0.000000 }, // - 143
{0.098291, 0.042464, -0.006952, 90.928329, 83.081665, 0.000000 }, // - 144
{0.080087, 0.030122, 0.000606, 90.928329, 83.081665, 0.000000 },  // - 145
{0.093500, 0.030690, -0.001545, 90.928329, 83.081665, 0.000000 }, // - 146
{0.079566, 0.020138, 0.004838, 90.928329, 73.715591, 0.000000 },  // - 147
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 148
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 149
{0.073564, 0.028430, -0.000527, 90.928329, 88.295433, 0.000000 }, // - 150
{0.083426, 0.032359, -0.005717, 90.928329, 88.295433, 0.000000 }, // - 151
{0.072349, 0.019623, -0.000747, 90.928329, 82.624351, 0.000000 }, // - 152
{0.075065, 0.015351, 0.006545, 90.928329, 71.041442, 0.000000 },  // - 153
{0.062227, 0.029731, -0.004938, 90.928329, 84.602760, 0.000000 }, // - 154
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 155
{0.079936, 0.049000, -0.000304, 90.928329, 82.926010, 0.000000 }, // - 156
{0.067550, 0.035686, -0.000017, 90.928329, 82.926010, 0.000000 }, // - 157
{0.090676, 0.039383, -0.001726, 90.928329, 88.667900, 0.000000 }, // - 158
{0.090676, 0.039383, -0.003532, 90.928329, 88.667900, 0.000000 }, // - 159
{0.098662, 0.017441, -0.001589, 90.928329, 88.667900, 0.000000 }, // - 160
{0.105388, 0.038409, 0.003155, 90.928329, 88.667900, 0.000000 },  // - 161
{0.097415, 0.036904, -0.000525, 90.928329, 88.667900, 0.000000 }, // - 162
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 163
{0.088934, 0.023302, -0.004153, 90.928329, 80.393875, 0.000000 }, // - 164
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 165
{0.087018, 0.051364, 0.000484, 90.928329, 94.584838, 0.000000 },  // - 166
{0.095996, 0.038787, 0.000484, 90.928329, 84.315711, 0.000000 },  // - 167
{0.089094, 0.034001, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 168
{0.075700, 0.028082, -0.006451, 90.928329, 84.315711, 0.000000 }, // - 169
{0.093751, 0.041968, -0.005545, 90.928329, 84.315711, 0.000000 }, // - 170
{0.090124, 0.031055, -0.000505, 90.928329, 84.315711, 0.000000 }, // - 171
{0.066033, 0.032915, -0.002713, 90.928329, 84.315711, 0.000000 }, // - 172
{0.088287, 0.045350, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 173
{0.087750, 0.042129, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 174
{0.092384, 0.039294, -0.005384, 90.928329, 84.315711, 0.000000 }, // - 175
{0.097661, 0.039065, -0.006344, 90.928329, 80.736480, 0.000000 }, // - 176
{0.097114, 0.039641, -0.006692, 90.928329, 80.736480, 0.000000 }, // - 177
{0.069354, 0.039641, -0.000474, 90.928329, 80.736480, 0.000000 }, // - 178
{0.091414, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 179
{0.094914, 0.039641, -0.005617, 90.928329, 80.736480, 0.000000 }, // - 180
{0.117232, 0.033217, -0.001099, 90.928329, 82.396362, 0.000000 }, // - 181
{0.082569, 0.032748, -0.003248, 90.928329, 87.394371, 0.000000 }, // - 182
{0.095527, 0.027237, -0.001960, 90.928329, 86.443649, 0.000000 }, // - 183
{0.095527, 0.040994, -0.006878, 90.928329, 86.443649, 0.000000 }, // - 184
{0.085663, 0.030601, -0.002345, 90.928329, 81.496513, 0.000000 }, // - 185
{0.085663, 0.030601, -0.001015, 90.928329, 81.496513, 0.000000 }, // - 186
{0.076527, 0.027211, 0.008500, 90.928329, 74.401092, 0.000000 },  // - 187
{0.096669, 0.032578, 0.001662, 90.928329, 83.502502, 0.000000 },  // - 188
{0.098753, 0.032129, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 189
{0.092821, 0.035572, -0.001659, 90.928329, 90.153724, 0.000000 }, // - 190
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 191
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 192
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 193
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 194
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 195
{0.092821, 0.035572, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 196
{0.100630, 0.020568, -0.001132, 90.928329, 90.153724, 0.000000 }, // - 197
{0.077905, 0.028523, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 198
{0.099095, 0.022463, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 199
{0.103182, 0.031106, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 200
{0.078426, 0.038546, 0.000000, 89.675476, 89.270309, 0.000000 },  // - 201
{0.101092, 0.035797, -0.002997, 89.675476, 82.081153, 0.000000 }, // - 202
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 203
{0.092009, 0.042780, -0.005841, 89.675476, 84.463294, 0.000000 }, // - 204
{0.092969, 0.027782, -0.002959, 89.675476, 84.463294, 0.000000 }, // - 205
{0.105109, 0.036128, -0.000471, 89.675476, 84.463294, 0.000000 }, // - 206
{0.066892, 0.024410, -0.002792, 89.675476, 84.463294, 0.000000 }, // - 207
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 208
{0.084046, 0.013608, -0.002792, 89.675476, 81.667831, 0.000000 }, // - 209
{0.084046, 0.013608, -0.001034, 89.675476, 81.667831, 0.000000 }, // - 210
{0.067610, 0.033777, -0.001034, 89.675476, 85.214485, 0.000000 }, // - 211
{0.094159, 0.020717, 0.000715, 89.675476, 85.214485, 0.000000 },  // - 212
{0.098744, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 213
{0.068755, 0.036786, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 214
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 215
{0.068755, 0.026863, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 216
{0.095765, 0.030034, -0.001770, 89.675476, 85.214485, 0.000000 }, // - 217
{0.085486, 0.039427, -0.003311, 89.675476, 85.214485, 0.000000 }, // - 218
{0.068874, 0.027850, -0.001021, 89.675476, 85.214485, 0.000000 }, // - 219
{0.052931, 0.050390, -0.002062, 89.675476, 88.113647, 0.000000 }, // - 220
{0.094479, 0.034432, 0.000875, 89.675476, 83.572830, 0.000000 },  // - 221
{0.094479, 0.034432, -0.000596, 89.675476, 83.572830, 0.000000 }, // - 222
{0.094479, 0.062073, -0.003098, 89.675476, 83.572830, 0.000000 }, // - 223
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 224
{0.064458, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 225
{0.072095, 0.029760, -0.001460, 89.675476, 83.572830, 0.000000 }, // - 226
{0.110619, 0.043037, -0.001466, 89.675476, 86.927627, 0.000000 }, // - 227
{0.099446, 0.050772, -0.001466, 89.675476, 85.103805, 0.000000 }, // - 228
{0.078635, 0.023680, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 229
{0.043357, 0.028726, -0.000275, 89.675476, 73.445220, 0.000000 }, // - 230
{0.092488, 0.049972, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 231
{0.092488, 0.016739, -0.000275, 89.675476, 88.981941, 0.000000 }, // - 232
{0.071677, 0.037055, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 233
{0.082745, 0.004209, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 234
{0.057909, 0.021331, -0.002878, 89.675476, 88.981941, 0.000000 }, // - 235
{0.079016, 0.021331, -0.000419, 89.675476, 77.678733, 0.000000 }, // - 236
{0.074572, 0.021331, -0.000419, 89.675476, 84.527442, 0.000000 }, // - 237
{0.074572, 0.038346, -0.001500, 89.675476, 84.527442, 0.000000 }, // - 238
{0.111645, 0.011549, 0.006237, 89.675476, 84.527442, 0.000000 },  // - 239
{0.090766, 0.044221, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 240
{0.069491, 0.049021, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 241
{0.059706, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 242
{0.065242, 0.031911, -0.000423, 89.675476, 89.461883, 0.000000 }, // - 243
{0.065242, 0.051077, -0.001103, 89.675476, 89.461883, 0.000000 }, // - 244
{0.082393, 0.038233, 0.000410, 89.675476, 89.461883, 0.000000 },  // - 245
{0.079338, 0.044859, -0.002535, 89.675476, 89.461883, 0.000000 }, // - 246
{0.101566, 0.037019, 0.000750, 89.675476, 83.514060, 0.000000 },  // - 247
{0.091887, 0.047776, -0.000040, 89.675476, 83.514060, 0.000000 }, // - 248
{0.089745, 0.044044, 0.004071, 89.675476, 83.514060, 0.000000 },  // - 249
{0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000 }, // - 250
{0.072282, 0.044044, -0.001468, 89.675476, 90.444763, 0.000000 }, // - 251
{0.095764, 0.034224, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 252
{0.087454, 0.026208, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 253
{0.099198, 0.037362, -0.000264, 89.675476, 82.959915, 0.000000 }, // - 254
{0.070845, 0.019943, 0.003505, 89.675476, 73.529716, 0.000000 },  // - 255
{0.065373, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 256
{0.070077, 0.033656, -0.001141, 89.675476, 83.002151, 0.000000 }, // - 257
{0.089536, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 258
{0.084822, 0.041904, 0.000715, 89.675476, 83.002151, 0.000000 },  // - 259
{0.093009, 0.031491, -0.001568, 89.675476, 83.002151, 0.000000 }, // - 260
{0.093009, 0.015023, -0.001477, 89.675476, 83.002151, 0.000000 }, // - 261
{0.076580, 0.039782, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 262
{0.076580, 0.028967, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 263
{0.075424, 0.043059, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 264
{0.089655, 0.021726, -0.001477, 89.675476, 88.620780, 0.000000 }, // - 265
{0.096792, 0.014114, -0.003062, 89.675476, 85.166038, 0.000000 }, // - 266
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 267
{0.094886, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 268
{0.102252, 0.024989, -0.003184, 89.675476, 85.166038, 0.000000 }, // - 269
{0.102252, 0.024989, 0.000529, 89.675476, 85.166038, 0.000000 },  // - 270
{0.096134, 0.025462, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 271
{0.099226, 0.032663, 0.000529, 89.675476, 79.225112, 0.000000 },  // - 272
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 273
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 274
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 275
{0.089833, 0.022466, -0.001590, 89.675476, 88.636062, 0.000000 }, // - 276
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 277
{0.082718, 0.062596, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 278
{0.087652, 0.059379, -0.000201, 89.675476, 88.636062, 0.000000 }, // - 279
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 280
{0.087652, 0.023702, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 281
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 282
{0.090877, 0.026643, -0.003091, 89.675476, 88.636062, 0.000000 }, // - 283
{0.090877, 0.053674, 0.009879, 89.675476, 88.636062, 0.000000 },  // - 284
{0.104320, 0.041487, 0.008021, 89.675476, 88.636062, 0.000000 },  // - 285
{0.087062, 0.021779, -0.003307, 89.675476, 88.636062, 0.000000 }, // - 286
{0.073173, 0.048856, 0.005337, 89.675476, 92.561180, 0.000000 },  // - 287
{0.090294, 0.027592, -0.003497, 89.675476, 92.561180, 0.000000 }, // - 288
{0.0, 0.0, 0.0, 0.0, 0.0, 0.0},                                   // - 289
{0.086562, 0.042698, -0.000612, 89.675476, 92.561180, 0.000000 }, // - 290
{0.096768, 0.039233, -0.000612, 89.675476, 83.550270, 0.000000 }, // - 291
{0.079939, 0.020731, -0.005162, 89.675476, 83.550270, 0.000000 }, // - 292
{0.097107, 0.027826, -0.005162, 89.675476, 88.505996, 0.000000 }, // - 293
{0.097107, 0.037636, 0.000618, 89.675476, 88.505996, 0.000000 },  // - 294
{0.079985, 0.035006, -0.000826, 89.675476, 87.533462, 0.000000 }, // - 295
{0.088445, 0.024209, -0.002076, 89.675476, 73.285072, 0.000000 }, // - 296
{0.094039, 0.035411, 0.000490, 89.675476, 84.277572, 0.000000 },  // - 297
{0.099553, 0.024683, -0.002919, 89.675476, 84.277572, 0.000000 }, // - 298
{0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000 }  // - 299
};
enum pBoxingStats{TitelName[32],TitelWins,TitelLoses,};
new Titel[pBoxingStats];
enum pFishing{pFish1[20],pFish2[20],pFish3[20],pFish4[20],pFish5[20],pWeight1,pWeight2,pWeight3,pWeight4,pWeight5,pFid1,pFid2,pFid3,pFid4,pFid5,pLastFish,pFishID,pLastWeight,};
new Fishes[MAX_PLAYERS][pFishing];
enum pCooking{pCook1[20],pCook2[20],pCook3[20],pCook4[20],pCook5[20],pCWeight1,pCWeight2,pCWeight3,pCWeight4,pCWeight5,pCookID1,pCookID2,pCookID3,pCookID4,pCookID5,};
new Cooking[MAX_PLAYERS][pCooking];
enum pGroceries{pChickens,pChicken,pHamburgers,pHamburger,pPizzas,pPizza,};
new Groceries[MAX_PLAYERS][pGroceries];
enum pSpec{Float:Coords[3],Float:sPx,	Float:sPy,Float:sPz,sPint,sLocal,sCam,};
new Unspec[MAX_PLAYERS][pSpec];
enum eCars{model_id,Float:pos_x,Float:pos_y,	Float:pos_z,Float:z_angle,};
enum hNews{hTaken1,hTaken2,hTaken3,hTaken4,hTaken5,hAdd1[128],hAdd2[128],hAdd3[128],hAdd4[128],hAdd5[128],hContact1[128],hContact2[128],hContact3[128],hContact4[128],hContact5[128],};
new News[hNews];
enum pInfo{
	pKey[128],
	pLevel,
	pDiaVIP,
	pHoraVIP,
	pMesVIP,
	pAnoVIP,
	pAdmin,
	pHelper,
	pVIP,
	pCidadania,
	pGrampo,
	gPupgrade,
	pConnectTime,
	pReg,
	pSex,
	pAge,
	pMuted,
	pAgendado,
	pTempoAgendado,
	pAdminAgendou[64],
	pMotivoAgendou[128],
	pSequestrado,
	pExp,
	pCash,
	pConta,
	pCrimes,
	pKills,
	pDeaths,
	pPhoneBook,
	pLottoNr,
	pFishes,
	pBiggestFish,
	pEmprego,
	pSalario,
	pHeadValue,
	pHeadValueT,
	pJailed,
	pJailTime,
	pMats,
	pDrogas,
	pDrogas2,
	pDrogas3,
	pLider,
	pMembro,
	pCargo,
	pSkin,
	pContractTime,
	pDetSkill,
	pSexSkill,
	pBoxSkill,
	pLawSkill,
	pMechSkill,
	pNewsSkill,
	pDrogasSkill,
	pCookSkill,
	pFishSkill,
	Float:pSHealth,
	pInt,
	pCapacete,
	pLocal,
	pTeam,
	pPnumber,
	pPHousekey,
	pPbiskey,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pCarLic,
	pFlyLic,
	pBoatLic,
	pFishLic,
	pGunLic,
	pPayDay,
	pCDPlayer,
	pWins,
	pLoses,
	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	pTut,
	pWarns,
	pMarried,
	pParedao,
	pRequestingBackup,
	pMask,
	pMaskuse,
	pBarraca,
	pMarriedTo[64],
	pSpawn,
	pSafeDrogas,
	pSafeDrogas2,
	pSafeDrogas3,
	pVeiculo,
	pVeiculo2,
	pVeiculo3,
	pPcarkey,
	pPcarkey2,
	pPcarkey3,
	pPcarkey4,
	psMats,
	pLuta,
	pAutorizado,
	pAutorizado2,
	pDorgado,
	pDorgado2,
	pDoenca,
	pLastDia,
	pLastMes,
	pLastAno,
	pLastHora,
	pLastMinuto,
	pCreditos,
	pLastLogin[20],
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pGun5,
	pGun6,
	pGun7,
	pGun8,
	pGun9,
	pGun10,
	pGun11,
	pGun12,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pAmmo5,
	pAmmo6,
	pAmmo7,
	pAmmo8,
	pAmmo9,
	pAmmo10,
	pAmmo11,
	pAmmo12,
	pCheckInfoOrg,
	pCaixinha,
	pBan,
	pDiaBanTemp,
	pMesBanTemp,
	pAnoBanTemp,
	pPlantei,
	pBombL,

};
new PlayerInfo[256][pInfo];
enum pHaul{pCapasity,pLoad,};
new PlayerHaul[CAR_AMOUNT][pHaul];
enum hInfo{Float:hEntrancex,Float:hEntrancey,Float:hEntrancez,Float:hExitx,Float:hExity,Float:hExitz,
hHealthx,hHealthy,hHealthz,hArmorrx,hArmorry,hArmorrz,hOwner[MAX_PLAYER_NAME],hDiscription[MAX_PLAYER_NAME],
hValue,hHel,hArm,hInt,hLock,hOwned,hRooms,hRent,hRentabil,hTakings,hVec,hVcol1,hVcol2,hDate,hLevel,hWorld};
new HouseInfo[237][hInfo]; // 228
enum bInfo{bOwned,	bOwner[64],bMessage[128],bExtortion[MAX_PLAYER_NAME],Float:bEntranceX,Float:bEntranceY,Float:bEntranceZ,Float:bExitX,Float:bExitY,Float:bExitZ,bLevelNeeded,bBuyPrice,bEntranceCost,bTill,bLocked,bInterior,};
new BizzInfo[10][bInfo];
enum sbInfo{sbOwned,sbOwner[64],sbMessage[128],sbExtortion[MAX_PLAYER_NAME],Float:sbEntranceX,Float:sbEntranceY,Float:sbEntranceZ,sbLevelNeeded,sbBuyPrice,sbEntranceCost,sbTill,sbLocked,};
new SBizzInfo[27][sbInfo];
enum pCrime{pBplayer[32],pAccusing[32],pAccusedof[32],pVictim[32],};
new PlayerCrime[MAX_PLAYERS][pCrime];
enum iInfo{iAdmin[128],iMOTD[128],iPassword[128],iNeedPass,iLock,iPlayers,};

new GunPrice[30][1] = {
{124}, //parachute
{100}, //golfclub
{75}, //nigHCtick
{50}, //knife
{175}, //baseballbat
{75}, //shovel
{25}, //poolcue
{100}, //purpledildo
{125}, //whitedildo
{125}, //longwhitedildo
{125}, //whitedildo2
{50}, //flowers
{150}, //cane
{250}, //sdpistol
{250}, //colt45
{1000}, //deagle
{500}, //Tec9
{750}, //uzi
{750}, //mp5
{750}, //shotgun
{1500}, //spas12
{1000}, //sawnoff
{800}, //ak47
{800}, //m4
{250}, //rifle
{25}, //pistolammo
{20}, //shotgunammo
{12}, //smgammo
{20}, //assaultammo
{25} //rifle
};
new Peds[223][1] = {
{6},//Skin do Civil
{265},//TEAM_ADMIN
{267},{240},{228},{114},{120},{147},{294},{227},{61},{171},{270},{123},{59},{102},{108},{117},
{26},//Civis DOWN aqui
{26},{100},{256},{263},{262},{261},{260},{259},{258},{257},{256},{255},
{253},{252},{251},{249},{246},{245},{244},{243},{242},{241},{240},{239},
{238},{237},{236},{235},{234},{233},{232},{231},{230},{229},
{226},{225},{173},{174},{175},{224},{223},{222},{221},{220},{219},{218},
{217},{216},{215},{214},{213},{212},{211},{210},{209},
{207},{206},{205},{204},{203},{202},{201},{200},{199},{198},{197},{196},
{195},{194},{193},{192},{191},{190},{189},{185},{184},{183},
{182},{181},{180},{179},{178},{176},{172},{170},{168},{167},{162},
{161},{160},{159},{158},{157},{156},{155},{154},{153},{152},{151},
{146},{145},{144},{143},{142},{141},{140},{139},{138},{137},{136},{135},
{134},{133},{132},{131},{130},{129},{128},{254},{99},{97},{96},{95},{94},
{92},{90},{89},{88},{87},{85},{84},{83},{82},{81},{80},{79},{78},{77},{76},
{75},{73},{72},{69},{68},{67},{66},{64},{63},{62},{58},{57},{56},{55},
{54},{53},{52},{51},{50},{49},{45},{44},{43},{41},{39},{38},{37},{36},{35},
{34},{33},{32},{31},{30},{29},{28},{27},{26},{25},{24},{23},{22},{21},{20},
{19},{18},{17},{16},{15},{14},{13},{12},{11},{10},{1},{2},
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299}//ZERO
};
main(){
print("**************************************");
print("*    Brasil Novo Mundo RPG ®    *");
print("*ºººººººººººººººººººººººººººººººººººº*");
print("*    RPG versão 5.1 ®                *");
print("*    Los Santos ®                    *");
print("*------------------------------------*");
print("*          Servidor Ligado.          *");
print("*    *GM edited 80% by VictorLuS*    *");
print("**************************************");
print(" ");}
public SearchingHit(playerid){new string[256];new giveplayer[MAX_PLAYER_NAME];new searchhit = 0;
for(new i=0; i<MAX_PLAYERS; i++){if(IsPlayerConnected(i)){if(searchhit == 0){if(PlayerInfo[i][pHeadValue] > 0 && GotHit[i] == 0){GetPlayerName(i, giveplayer, sizeof(giveplayer));searchhit = 1;hitfound = 1;hitid1 = i;
for(new k=0; k<MAX_PLAYERS; k++){if(IsPlayerConnected(k)){if(GetPlayerOrg(k) == 8 && FH == 1){
SendClientMessage(k, COLOR_WHITE, "~~~~~~~~~~~~~~~~~~~~~~~> Agencia de Hitmans <~~~~~~~~~~~~~~~~~~~~~~~");
SendClientMessage(k, COLOR_DBLUE, "*~*~* Mensagem: Está disponivel um novo contrato! *~*~*");
format(string, sizeof(string), "Contrato: %s   ID: %d   Valor: R$%d", giveplayer, i, PlayerInfo[i][pHeadValue]);
SendClientMessage(k, COLOR_DBLUE, string);
SendClientMessage(k, COLOR_YELLOW, "Use darcont [ID], Para atribuir o contrato a um dos Hitmans.");
SendClientMessage(k, COLOR_WHITE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
FH = 0;return true;}if(GetPlayerOrg(k) == 22 && FK == 1){
SendClientMessage(k, COLOR_WHITE, "~~~~~~~~~~~~~~~~~~~~~~~~~> Agencia dos Triads <~~~~~~~~~~~~~~~~~~~~~~~~~");
SendClientMessage(k, COLOR_DBLUE, "*~*~* Mensagem: Está disponivel um novo contrato! *~*~*");
format(string, sizeof(string), "Contrato: %s   ID: %d   Valor: R$%d", giveplayer, i, PlayerInfo[i][pHeadValue]);
SendClientMessage(k, COLOR_DBLUE, string);
SendClientMessage(k, COLOR_YELLOW, "Use darcont [ID], Para atribuir o contrato a um dos Assassinos.");
SendClientMessage(k, COLOR_WHITE, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
FK = 0;return true;
}}}return 0;}}}}if(searchhit == 0){SendClientMessage(playerid, COLOR_GREY, "   Não há contratos disponiveis!");}return 0;}

public ExtortionBiz(bizid, money){format(gstring, sizeof(gstring), "Nenhum");if(strcmp(BizzInfo[bizid][bExtortion],gstring, true ) == 0){return 0;}
for(new i = 0; i < MAX_PLAYERS; i++){if(IsPlayerConnected(i)){new wstring[MAX_PLAYER_NAME];format(gstring, sizeof(gstring), "%s", PlayerName(i));strmid(wstring, gstring, 0, strlen(gstring), 255);if(strcmp(BizzInfo[bizid][bExtortion] ,wstring, true ) == 0 ){new value = money / 100;value = value * 10;GivePlayerMoney(i, value);BizzInfo[bizid][bTill] -= value;}}}return true;}

public ExtortionSBiz(bizid, money){format(gstring, sizeof(gstring), "Ninguem");if(strcmp(SBizzInfo[bizid][sbExtortion],gstring, true ) == 0 ){return 0;}
for(new i = 0; i < MAX_PLAYERS; i++){if(IsPlayerConnected(i)){new wstring[MAX_PLAYER_NAME];format(gstring, sizeof(gstring), "%s", PlayerName(i));strmid(wstring, gstring, 0, strlen(gstring), 255);
if(strcmp(SBizzInfo[bizid][sbExtortion] ,wstring, true ) == 0 ){new value = money / 100;value = value * 10;GivePlayerMoney(i, value);SBizzInfo[bizid][sbTill] -= value;}}}return true;}

public SendVIPMessage(color, string[]){for(new i = 0; i < MAX_PLAYERS; i++){if(IsPlayerConnected(i)){if(PlayerInfo[i][pVIP] >= 0){SendClientMessage(i, color, string);}}}}
public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
new vehid;
vehid = GetPlayerVehicleID(playerid);
Controle(playerid, 1);new string[128];new stringe[128];
if(response)
	{
		if(dialogid == DIALOGID+6)
		{
			if(response)
			{
				if(listitem==0)
				{
					if(CarInfo[vehid][mod1] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod1] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"*  Aerofólio foi removido com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem aerofólio instalado!!!");
					}
				}
				if(listitem==1)
				{
					if(CarInfo[vehid][mod3] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ,Float:CarHP,Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod3] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"*  O para-choque dianteiro foi removido com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem nenhum para-choque dianteiro instalado!!!");
					}
				}
				if(listitem==2)
				{
					if(CarInfo[vehid][mod4] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod4] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"*  O para-choque traseiro foi removido com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem nenhum para-choque traseiro instalado!!!");
					}
				}
				if(listitem==3)
				{
					if(CarInfo[vehid][mod10] > 0 && CarInfo[vehid][mod11] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod11] = 0; CarInfo[vehid][mod10] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"* Os para-choques laterais foram removidos com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem para-choque lateral!!!");
					}
				}
				if(listitem==4)
				{
					if(CarInfo[vehid][mod9] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod9] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"*  Roof Scoops foram removidos com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem Roof Scoop Instalado!!!");
					}
				}
				if(listitem==5)
				{
					if(CarInfo[vehid][mod5] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod5] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"*  Escapamentos foram removidos com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem Escapamento instalado!!!");
					}
				}
				if(listitem==6)
				{
					if(CarInfo[vehid][mod2] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod2] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"* O Nitro foi removido com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"* Seu carro não tem nitro instalado!!!");
					}
				}
				if(listitem==7)
				{
					if(CarInfo[vehid][mod12] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod12] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"* Suspensão Hidráulica foi removida com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem suspensão hidráulica instalada!!!");
					}
				}
				if(listitem==8)
				{
					if(CarInfo[vehid][mod16] > 0)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][mod16] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"*  As rodas foram removidas com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro tem rodas instaladas!!!");
					}
				}
				if(listitem==9)
				{
					if(CarInfo[vehid][paintjob] > -1)
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][paintjob] = -1;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"* O Paintjob foi removido com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"*  Seu carro não tem Paintjob!!!");
					}
				}
				if(listitem==10)
				{
					if(CarMods(vehid))
					{
                        new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
                        GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	                    GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][paintjob] = -1; CarInfo[vehid][mod1] = 0; CarInfo[vehid][mod2] = 0;
	                    CarInfo[vehid][mod3] = 0; CarInfo[vehid][mod4] = 0; CarInfo[vehid][mod5] = 0; CarInfo[vehid][mod6] = 0; CarInfo[vehid][mod7] = 0;
	                    CarInfo[vehid][mod8] = 0; CarInfo[vehid][mod9] = 0; CarInfo[vehid][mod10] = 0; CarInfo[vehid][mod11] = 0; CarInfo[vehid][mod12] = 0;
	                    CarInfo[vehid][mod13] = 0; CarInfo[vehid][mod14] = 0; CarInfo[vehid][mod15] = 0; CarInfo[vehid][mod16] = 0; CarInfo[vehid][mod17] = 0;
	                    SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
	                    PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	                    UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                    SendClientMessage(playerid, COLOR_BLUE,"* Todos os componentes removido com sucesso!!!");
                        LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE,"* Seu carro não tem componentes instalado!!!");
                    }
                 }
	        }
	    }
    }
if(dialogid == DIALOG_CAIXA_ELETRONICO){CaixaEletronico_Ok[playerid] = 0;if(response == 0){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);return true;}
if(response == 1){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);if(listitem >= 0 && listitem <= 3){
if(listitem == 0){CaixaEletronico_Ok[playerid] = 1;ShowPlayerDialog(playerid, DIALOG_CAIXA_ELETRONICO_INPUT, DIALOG_STYLE_INPUT, "   Saque","Digite a Quantia que Deseja Sacar:", "Confirma", "Sair");}
if(listitem == 1){CaixaEletronico_Ok[playerid] = 2;ShowPlayerDialog(playerid, DIALOG_CAIXA_ELETRONICO_INPUT, DIALOG_STYLE_INPUT, "   Depósito","Digite a Quantia que Deseja Depositar:", "Confirma", "Sair");}
if(listitem == 2){CaixaEletronico_Ok[playerid] = 3;format(stringe, sizeof(stringe), "Seu saldo é de: %d", PlayerInfo[playerid][pConta]);ShowPlayerDialog(playerid, DIALOG_CAIXA_ELETRONICO_INPUT, DIALOG_STYLE_MSGBOX, "Informação do Saldo:",stringe, "Confirma", "Sair");}
if(listitem == 3){CaixaEletronico_Ok[playerid] = 4;ShowPlayerDialog(playerid, DIALOG_TRANSFERIR, DIALOG_STYLE_INPUT, "   Transferência","Digite o ID de quem receberá o dinheiro transferido:", "Confirma", "Sair");}}}}

if(dialogid == DIALOG_CAIXA_ELETRONICO_INPUT){if(response == 0){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);CaixaEletronico_Ok[playerid] = 0;return true;}
if(response >= 1){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);if(CaixaEletronico_Ok[playerid] != 3){if(CaixaEletronico_Ok[playerid] == 1){format(stringe, sizeof(stringe), "/sacar_input_type %d", strval(inputtext));OnPlayerCommandText(playerid,stringe);}else if(CaixaEletronico_Ok[playerid] == 2){if (strval(inputtext) > GetPlayerMoneyEx(playerid) || strval(inputtext) < 1){
CaixaEletronico_Ok[playerid] = 0;SendClientMessage(playerid, COLOR_GRAD2, "   Voce  não tem tudo isso na sua conta!");return true;}
GivePlayerMoneyEx(playerid,-strval(inputtext));new curfunds = PlayerInfo[playerid][pConta];PlayerInfo[playerid][pConta]=strval(inputtext)+PlayerInfo[playerid][pConta];
SendClientMessage(playerid, COLOR_WHITE, "|___| BANCO  INFO |___|");
format(string, sizeof(string), "  Conta: R$%d", curfunds);
SendClientMessage(playerid, COLOR_GRAD2, string);
format(string, sizeof(string), "  Deposito: R$%d",strval(inputtext));
SendClientMessage(playerid, COLOR_GRAD4, string);
SendClientMessage(playerid, COLOR_GRAD6, "|..................|");
format(string, sizeof(string), "  Nova conta: R$%d", PlayerInfo[playerid][pConta]);
SendClientMessage(playerid, COLOR_WHITE, string);}else if(CaixaEletronico_Ok[playerid] == 4){if (IsPlayerConnected(TransferenciaID[playerid])){if(TransferenciaID[playerid] != INVALID_PLAYER_ID){
if (strval(inputtext) > 0 && PlayerInfo[playerid][pConta] >= strval(inputtext))
{
new log[35];
format(log, sizeof(log), "Emprestimo/%s.ini", PlayerName(playerid));
if(dini_Int(log, "Emprestimo") >= 1)
{
		SendClientMessage(playerid,COLOR_GREY,"Você primeiro precisa quitar o empréstimo!");
		return true;
}
PlayerInfo[playerid][pConta] -= strval(inputtext);
PlayerInfo[TransferenciaID[playerid]][pConta] += strval(inputtext);
format(string, sizeof(string), "Voce transferiu R$%d para %s's ", strval(inputtext), GetName(TransferenciaID[playerid]),TransferenciaID[playerid]);PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);SendClientMessage(playerid, COLOR_GRAD1, string);
format(string, sizeof(string), "Voce recebeu R$%d pela sua conta de %s", strval(inputtext), GetName(playerid), playerid);SendClientMessage(TransferenciaID[playerid], COLOR_GRAD1, string);
format(string, sizeof(string), "Você pagou uma taxa de transferéncia de R$%d.", strval(inputtext) / 40);SendClientMessage(playerid, COLOR_GRAD1, string);
PlayerInfo[playerid][pConta] -= strval(inputtext) / 40;
SBizzInfo[25][sbTill] += strval(inputtext) / 40;
SaveStuff();
format(string, sizeof(string), "%s Transferiu R$%d para %s", GetName(playerid), strval(inputtext), GetName(TransferenciaID[playerid]));
if(strval(inputtext) >= 500000){ABroadCast(COLOR_YELLOW,string,1);}printf("%s", string);PayLog(string);PlayerPlaySound(TransferenciaID[playerid], 1052, 0.0, 0.0, 0.0);}else{SendClientMessage(playerid, COLOR_GRAD1, "   Transferencia Invalida!.");}}}else{
format(string, sizeof(string), "   %d Não esta ativo", TransferenciaID[playerid]);SendClientMessage(playerid, COLOR_GRAD1, string);}}}CaixaEletronico_Ok[playerid] = 0;return true;}return true;}
if(dialogid == DIALOG_TRANSFERIR){if(response == 0){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);CaixaEletronico_Ok[playerid] = 0;return true;}if(response >= 1){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);if(CaixaEletronico_Ok[playerid] == 4){
PlayerPlaySound(playerid,1057,0.0,0.0,0.0);TransferenciaID[playerid] = strval(inputtext);ShowPlayerDialog(playerid, DIALOG_CAIXA_ELETRONICO_INPUT, DIALOG_STYLE_INPUT, "   Transferência","Digite a Quantia que Deseja Transferir:", "Confirma", "Sair");}return true;}return true;}

if(dialogid == DIALOG_RANGE){if(!response) return 0;if(listitem == 0){new engine, lights, alarm, doors, bonnet, boot, objective,vehicleid;
vehicleid = GetPlayerVehicleID(playerid);GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);if(GetPVarInt(playerid,"Lights") == 1){SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_OFF, alarm, doors, bonnet, boot, objective);SetPVarInt(playerid,"Lights",0);}else if(GetPVarInt(playerid,"Lights") == 0){SetVehicleParamsEx(vehicleid, engine, VEHICLE_PARAMS_ON, alarm, doors, bonnet, boot, objective);
SetPVarInt(playerid,"Lights",1);}return true;}if(listitem == 1){new engine, lights, alarm, doors, bonnet, boot, objective,vehicleid;vehicleid = GetPlayerVehicleID(playerid);GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);if(GetPVarInt(playerid,"Alarm") == 1){SetVehicleParamsEx(vehicleid, engine, lights, VEHICLE_PARAMS_OFF, doors, bonnet, boot, objective);SetPVarInt(playerid,"Alarm",0);}
else if(GetPVarInt(playerid,"Alarm") == 0){SetVehicleParamsEx(vehicleid, engine, lights, VEHICLE_PARAMS_ON, doors, bonnet, boot, objective);SetPVarInt(playerid,"Alarm",1);}return true;}if(listitem == 2){new engine, lights, alarm, doors, bonnet, boot, objective,vehicleid;vehicleid = GetPlayerVehicleID(playerid);GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
if(GetPVarInt(playerid,"Bonnet") == 1){SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_OFF, boot, objective);SetPVarInt(playerid,"Bonnet",0);}else if(GetPVarInt(playerid,"Bonnet") == 0){SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, VEHICLE_PARAMS_ON, boot, objective);SetPVarInt(playerid,"Bonnet",1);}return true;}
if(listitem == 3){new engine, lights, alarm, doors, bonnet, boot, objective,vehicleid;vehicleid = GetPlayerVehicleID(playerid);GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);if(GetPVarInt(playerid,"Boot") == 1){SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_OFF, objective);SetPVarInt(playerid,"Boot",0);}
else if(GetPVarInt(playerid,"Boot") == 0){SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, VEHICLE_PARAMS_ON, objective);SetPVarInt(playerid,"Boot",1);}return true;}return true;}

if(dialogid == 5566){if(response == 0){SendClientMessage(playerid, COLOR_GRAD1, "Você cancelou o pedido para Novo Carro da sua Casa!");return true;}if(response >= 1){if(listitem == 0){
new info[600];new info2[100],info3[100],info4[100],info5[100],info6[100],info7[100],info8[100],info9[100],info10[100],info11[100],info12[100],info13[100],info14[100],info15[100],info16[100],info17[100];
format(info2,70,"BlistaC - Carro");format(info3,70,"Clover - Carro");format(info4,70,"Elegant - Carro");format(info5,70,"Emperor - Carro");format(info6,70,"Glendale - Carro");
format(info7,70,"Greenwood - Carro");format(info8,70,"Huntley - Carro");format(info9,70,"Jester - Carro");format(info10,70,"Landstalker - Carro");format(info11,70,"Merit - Carro");
format(info12,70,"Nebula - Carro");format(info13,70,"Sabre - Carro");format(info14,70,"Stratum - Carro");format(info15,70,"Sunrise - Carro");format(info16,70,"Tahoma - Carro");format(info17,70,"Uranus - Carro");
format(info,600,"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",info2,info3,info4,info5,info6,info7,info8,info9,info10,info11,info12,info13,info14,info15,info16,info17);
ShowPlayerDialog(playerid,5567,DIALOG_STYLE_LIST,"Por Favor escolha o seu Carro Free:",info,"Escolher","Sair");return true;}if(listitem == 1){
new info[600];new info2[100],info3[100],info4[100],info5[100],info6[100],info7[100],info8[100],info9[100],info10[100],info11[100],info12[100],info13[100];
format(info2,70,"Stretch - Carro");format(info3,70,"Elegy - Carro");format(info4,70,"Phoenix - Carro");format(info5,70,"Hotknife - Carro");
format(info6,70,"Bandito - Carro");format(info7,70,"Sultan - Carro");format(info8,70,"NRG-500 - Moto");format(info9,70,"Bullet - Carro");
format(info10,70,"Cheetah - Carro");format(info11,70,"Infernus - Carro");format(info12,70,"Buffalo - Carro");format(info13,70,"Turismo - Carro");
format(info,600,"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",info2,info3,info4,info5,info6,info7,info8,info9,info10,info11,info12,info13);
ShowPlayerDialog(playerid,5568,DIALOG_STYLE_LIST,"Por Favor escolha o seu Carro VIP:",info,"Escolher","Sair");return true;}return true;}}

/*if(dialogid == 5567){if(response == 0){return true;}if(response >= 1){if(listitem == 0){OnPlayerCommandText(playerid,"/comprarcarrovsfth blistac");return true;}if(listitem == 1){OnPlayerCommandText(playerid,"/comprarcarrovsfth clover");return true;}
if(listitem == 2){OnPlayerCommandText(playerid,"/comprarcarrovsfth elegant");return true;}if(listitem == 3){OnPlayerCommandText(playerid,"/comprarcarrovsfth emperor");return true;}
if(listitem == 4){OnPlayerCommandText(playerid,"/comprarcarrovsfth glendale");return true;}if(listitem == 5){OnPlayerCommandText(playerid,"/comprarcarrovsfth greenwood");return true;}
if(listitem == 6){OnPlayerCommandText(playerid,"/comprarcarrovsfth huntley");return true;}if(listitem == 7){OnPlayerCommandText(playerid,"/comprarcarrovsfth jester");return true;}
if(listitem == 8){OnPlayerCommandText(playerid,"/comprarcarrovsfth landstalker");return true;}if(listitem == 9){OnPlayerCommandText(playerid,"/comprarcarrovsfth merit");return true;}
if(listitem == 10){OnPlayerCommandText(playerid,"/comprarcarrovsfth nebula");return true;}if(listitem == 11){OnPlayerCommandText(playerid,"/comprarcarrovsfth sabre");return true;}
if(listitem == 12){OnPlayerCommandText(playerid,"/comprarcarrovsfth stratum");return true;}if(listitem == 13){OnPlayerCommandText(playerid,"/comprarcarrovsfth sunrise");return true;}
if(listitem == 14){OnPlayerCommandText(playerid,"/comprarcarrovsfth tahoma");return true;}if(listitem == 15){OnPlayerCommandText(playerid,"/comprarcarrovsfth uranus");return true;}return true;}}

if(dialogid == 5568){if(response == 0){return true;}if(response >= 1){if(listitem == 0){OnPlayerCommandText(playerid,"/comprarcarrovsfth limozine");return true;}if(listitem == 1){OnPlayerCommandText(playerid,"/comprarcarrovsfth elegy");return true;}
if(listitem == 2){OnPlayerCommandText(playerid,"/comprarcarrovsfth phoenix");return true;}if(listitem == 3){OnPlayerCommandText(playerid,"/comprarcarrovsfth hotknife");return true;}
if(listitem == 4){OnPlayerCommandText(playerid,"/comprarcarrovsfth bandito");return true;}if(listitem == 5){OnPlayerCommandText(playerid,"/comprarcarrovsfth sultan");return true;}
if(listitem == 6){OnPlayerCommandText(playerid,"/comprarcarrovsfth nrg500");return true;}if(listitem == 7){OnPlayerCommandText(playerid,"/comprarcarrovsfth bullet");return true;}
if(listitem == 8){OnPlayerCommandText(playerid,"/comprarcarrovsfth cheetah");return true;}if(listitem == 9){OnPlayerCommandText(playerid,"/comprarcarrovsfth infernus");return true;}
if(listitem == 10){OnPlayerCommandText(playerid,"/comprarcarrovsfth buffalo");return true;}if(listitem == 11){OnPlayerCommandText(playerid,"/comprarcarrovsfth turismo");return true;}return true;}}
*/
if(dialogid == 9282){if(IsPlayerConnected(PedirAvaliar)){if(response >= 1){
SendClientMessage(playerid, COLOR_DBLUE, "Obrigado pela sua Avaliação {00FF00}Positiva!");
SendClientMessage(PedirAvaliar, COLOR_WHITE, "Você foi avaliado positivamente e ganhou 1 Nível de Helper!");PlayerInfo[PedirAvaliar][pHelper] += 1;return true;}if(response == 0){
SendClientMessage(playerid, COLOR_DBLUE, "Você avaliou o Helper {E31919}Negativamente!");
SendClientMessage(PedirAvaliar, COLOR_WHITE, "Você foi avaliado negativamente e perdeu 1 nivel de Helper");PlayerInfo[PedirAvaliar][pHelper] -= 1;return true;}}return true;}

if(dialogid == 10101){if(PlayerToPoint(2.0,playerid,963.7944,-933.7776,41.9256)){new Float:X;new Float:Y;new Float:Z;new Float:angle;if(GetPlayerMoneyEx(playerid) < 100) return SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}[{CD96E3}D.E.T.R.A.N{FFFFFF}]: Você não tem R$100 para mudar sua placa.");
if(strlen(inputtext) < 1 || strlen(inputtext) > 8) return SendClientMessage(playerid, 0xAFAFAFAA, "{FFFFFF}[{CD96E3}D.E.T.R.A.N{FFFFFF}]: Texto Invalido.");else{
format(string, sizeof(string), "{FFFFFF}[{CD96E3}D.E.T.R.A.N{FFFFFF}]: Você alterou o nome da placa do seu veiculo para \'%s\' e pagou R$100", inputtext);
SendClientMessage(playerid, 0x33CCFFAA, string);GetPlayerPos(playerid, X, Y, Z);
GetPlayerFacingAngle(playerid, angle);GivePlayerMoneyEx(playerid,-100);SetVehicleNumberPlate(GetPlayerVehicleID(playerid), inputtext);SetVehicleToRespawn(GetPlayerVehicleID(playerid));GetPlayerPos(playerid, X, Y, Z);
SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z);SetVehicleZAngle(GetPlayerVehicleID(playerid), angle);PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), 0);SetVehiclePos(GetPlayerVehicleID(playerid), X, Y, Z+2);}}else{SendClientMessage(playerid, COLOR_WHITE, "Você Não Está no D.E.T.R.A.N !");return true;}}

if(dialogid == 5024){if(response == 1){OnPlayerCommandText(playerid,"/desalugarcarro");Controle(playerid, 1);SendClientMessage(playerid, COLOR_GRAD1, "Veiculo desalugado");RemovePlayerFromVehicle(playerid);return 0;}else if(response == 0){RemovePlayerFromVehicle(playerid);Controle(playerid, 1);return 0;}return 0;}

if(dialogid == 642){if(response == 0){}if(response == 1){OnPlayerCommandText(playerid,"/aceitar convite");ShowPlayerDialog(playerid, 643, DIALOG_STYLE_MSGBOX, "Escolha Sua Skin", "{0FF768}Proximo: {F7D40F}Para trocar sua skin.\n{0FF768}Confirmar: {F7D40F}Para confirmar sua skin.", "Confirmar", "Próximo");}return true;}
if(dialogid == 643){if(response == 0){OnPlayerText(playerid,"proximo");ShowPlayerDialog(playerid, 643, DIALOG_STYLE_MSGBOX, "Escolha Sua Skin", "{0FF768}Proximo: {F7D40F}Para trocar sua skin.\n{0FF768}Confirmar: {F7D40F}Para confirmar sua skin.", "Confirmar", "Próximo");}if(response == 1){OnPlayerText(playerid,"Confirma");}return true;}

if(dialogid == 510){if(response){if(listitem == 0){ShowPlayerDialog(playerid, 5115, DIALOG_STYLE_LIST, "Marque a resposta certa:", "a- Andar com o veículo no lado esquerdo\nb- Andar com o veículo no lado direito\nc- Atropelar todos pela frente\nd- Beber e dirigir", "Confirmar", "Cancelar");}}return true;}

if(dialogid == 5115){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){ShowPlayerDialog(playerid, 5116, DIALOG_STYLE_LIST, "O sinal verde significa ?", "a- Pare\nb- Atencao\nc- Siga em Frente\nd- Significa nada", "Confirmar", "Cancelar");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 5116){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 2){ShowPlayerDialog(playerid, 5117, DIALOG_STYLE_LIST, "O sinal azul significa ?", "a- Atencao\nb- Pare\nc- Siga em Frente\nd- Significa nada", "Confirmar", "Cancelar");}
if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 5117) {if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){
GivePlayerMoney(playerid,-600);SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você passou na prova, agora poderá fazer o teste prático, dirija-se ao estacionamento ao lado!");PlayerInfo[playerid][pAutorizado] = 1;}}return true;}
//teste de cidadania//
if(dialogid == 1500){if(response){if(listitem == 0){ShowPlayerDialog(playerid, 1501, DIALOG_STYLE_LIST, "o que é DM?:", "a- é Andar Em cima do carro\nb- Matar alguem Sem motivo\nc- Usar O carro Para Matar Alguem\nd- DM não significa nada", "Confirmar", "Cancelar");}}return true;}

if(dialogid == 1501){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){ShowPlayerDialog(playerid, 1502, DIALOG_STYLE_LIST, "o que é Drive-by ?", "a- Drive-by é a mesma coisa que DM\nb- invadir uma hq com carro\nc- Matar ou atirar em alguem usando um veiculo (DB)\nd- Significa nada", "Confirmar", "Cancelar");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1502){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 2){ShowPlayerDialog(playerid, 1503, DIALOG_STYLE_LIST, "o que é role play?", "a- modo de jogo Baseado em guerra de times contra time\nb- RP é um modo de jogo Baseado em corridas\nc- Significa nada\nd- modo de jogo que simula a vida real", "Confirmar", "Cancelar");}
if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1503){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){ShowPlayerDialog(playerid, 1504, DIALOG_STYLE_LIST, "para que serve o /an ?", "a- Serve Fazer anuncios de compra E venda\nb- Serve para insultar os outros\nc- usado para pedir ajuda a um admin\nd- Serve Para nada", "Confirmar", "Cancelar");}}return true;}

if(dialogid == 1504){if(response){if(listitem == 0){ShowPlayerDialog(playerid, 1505, DIALOG_STYLE_LIST, "para que o policias devem usar o /megafone ? :", "a- para se comunicar com alguem\nb- para poder ter o direito de matar alguem\nc- para abordar um suspeito\nd- para pedir ajuda a alguem", "Confirmar", "Cancelar");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1505){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){ShowPlayerDialog(playerid, 1506, DIALOG_STYLE_LIST, "Quando os policiais não precisam usar o /m para abordar ?:", "a- é sempre necessario o uso do /m\nb-nunca sera necessario o uso do /m\nc-quando você esta em grupo e um deles da /m\nd- /m não é um comando para policiais ", "Confirmar", "Cancelar");}if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1506){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){ShowPlayerDialog(playerid, 1507, DIALOG_STYLE_LIST, "para que serve o /gov e /ang ?", "a- para anunciar recrutamento e operações(policiais)\nb- server para anunciar algo que você queira vender e comprar\nc- para anunciar alguma coisa fora do jogo\nd- Server Para Pedir ajuda a um admin", "Confirmar", "Cancelar");}
if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1507){if(response){if(listitem == 0){ShowPlayerDialog(playerid, 1508, DIALOG_STYLE_LIST, "quando você perdera lider ? ", "a- nunca perdera, cargo de lider é vitalicio\nb-quando você levar um kick\nc-quando você e seus membros quebrar varias regras, e caso não logue 2 dias\nd- Caso alguem peça para tirar você de lider", "Confirmar", "Cancelar");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1508){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){ShowPlayerDialog(playerid, 1509, DIALOG_STYLE_LIST, "Como o lider deve fazer o manual ?", "a- não e permitido manual nesse servidor\nb-deve fazer como achar melhor\nc-o lider não precisa fazer manual caso não queira\nd- Deve Fazer o manual Baseando-se nas regras do servidor", "Confirmar", "Cancelar");}if(listitem == 3){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}}return true;}

if(dialogid == 1509){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 3){ShowPlayerDialog(playerid, 1510, DIALOG_STYLE_LIST, "o que você deve fazer caso leve punição de algum administrador ?", "a- deve mandar /relatorio xingando o admin\nb- deve pedir desculpas para que ele alivie sua punição\nc- deve dizer que a pena foi injusta ou pesada de mais\nd- deve ficar calado e não comentar e nem mandar relatorio falando sobre a punição", "Confirmar", "Cancelar");}}return true;}

if(dialogid == 1510){if(response){if(listitem == 0){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 1){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}
if(listitem == 2){SendClientMessage(playerid, COLOR_WHITE, " Você errou ou cancelou a Prova.");}if(listitem == 3){  
SendClientMessage(playerid, COLOR_WHITE, "Parabéns você agora possui cidadania e podera se tornar um líder.");  
GivePlayerMoney(playerid, -10000);
SBizzInfo[25][sbTill] += 10000;
PlayerInfo[playerid][pCidadania] = 1; 
SaveStuff();
} 
 } 
 return true;}
//teste de cidadania//

if(dialogid == DIALOG_ANUNCIO){if(response == 0){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);return true;}if(response == 1){PlayerPlaySound(playerid,1057,0.0,0.0,0.0);if(listitem >= 0 && listitem <= 10){
if(listitem == 0){OnPlayerCommandText(playerid,"/an_2_input 56");}if(listitem == 1){OnPlayerCommandText(playerid,"/an_2_input 1");}
if(listitem == 2){OnPlayerCommandText(playerid,"/an_2_input 111");}if(listitem == 3){OnPlayerCommandText(playerid,"/an_2_input 31");}
if(listitem == 4){OnPlayerCommandText(playerid,"/an_2_input 112");}if(listitem == 5){OnPlayerCommandText(playerid,"/an_2_input 113");}
if(listitem == 6){OnPlayerCommandText(playerid,"/an_2_input 114");}if(listitem == 7){OnPlayerCommandText(playerid,"/an_2_input 115");}
if(listitem == 8){OnPlayerCommandText(playerid,"/an_2_input 116");}if(listitem == 9){OnPlayerCommandText(playerid,"/an_2_input 117");}
if(listitem == 10){OnPlayerCommandText(playerid,"/an_2_input 118");}return true;}else{OnPlayerCommandText(playerid,"/an_2_input 119");return true;}}}

if(dialogid == EVENTOC){if(response == 0){SendClientMessage(playerid, COLOR_DBLUE, "Ok, você não quis ir ao evento.");return true;}
if(response >= 1){if(PlayerInfo[playerid][pJailed] >= 1){SendClientMessage(playerid, COLOR_GREY, "Você está preso e por isso não poderá comparecer ao evento.");return true;}
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Obrigado por comparecer a este evento.");
SetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
return true;}return true;}

//Evento Eagle
if(dialogid == EVENTOCC){if(response == 0){SendClientMessage(playerid, COLOR_DBLUE, "Ok, você não quis ir ao evento.");return true;}
if(response >= 1){if(PlayerInfo[playerid][pJailed] >= 1){SendClientMessage(playerid, COLOR_GREY, "Você está preso e por isso não poderá comparecer ao evento.");return true;}
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Obrigado por comparecer a este evento.");
SetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
GivePlayerWeapon(playerid, 24, 999);
SetPlayerArmour(playerid, 100);
SetPlayerHealth(playerid, 100);
return true;}return true;}

//Evento M4
if(dialogid == EVENTOCCM4){if(response == 0){SendClientMessage(playerid, COLOR_DBLUE, "Ok, você não quis ir ao evento.");return true;}
if(response >= 1){if(PlayerInfo[playerid][pJailed] >= 1){SendClientMessage(playerid, COLOR_GREY, "Você está preso e por isso não poderá comparecer ao evento.");return true;}
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Obrigado por comparecer a este evento.");
SetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
GivePlayerWeapon(playerid, 31, 999);
SetPlayerArmour(playerid, 100);
SetPlayerHealth(playerid, 100);
return true;}return true;}

//Evento Combat Shotgun
if(dialogid == EVENTOCCCOMBAT){if(response == 0){SendClientMessage(playerid, COLOR_DBLUE, "Ok, você não quis ir ao evento.");return true;}
if(response >= 1){if(PlayerInfo[playerid][pJailed] >= 1){SendClientMessage(playerid, COLOR_GREY, "Você está preso e por isso não poderá comparecer ao evento.");return true;}
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Obrigado por comparecer a este evento.");
SetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
GivePlayerWeapon(playerid, 27, 999);
SetPlayerArmour(playerid, 100);
SetPlayerHealth(playerid, 100);
return true;}return true;}

if(dialogid == cPergunta){if(response){for(new i = 0; i < MAX_PLAYERS; i++){if(IsPlayerConnected(i)){ShowPlayerDialog(i, cVotacao, DIALOG_STYLE_MSGBOX, "{E31919}» {00FFFF}Votação: {E31919}«",inputtext,"Sim","Não");}}}}

if(dialogid == cVotacao){if(response){
if(Votou[playerid] == 1) return SendClientMessage(playerid, 0xFFFFFFFF, "Você já votou uma vez!");
Votou[playerid] = 1;Sim++;SendClientMessage(playerid, 0xFFFFFFFF, "Você votou em {00FF00}SIM{FFFFFF}!");}
else if(!response){if(Votou[playerid] == 1) return SendClientMessage(playerid, 0xFFFFFFFF, "Você já votou uma vez!");
Votou[playerid] = 1;Nao++;SendClientMessage(playerid, 0xFFFFFFFF, "Você votou em {E31919}NÃO{FFFFFF}!");}}

if(dialogid == ViajarThiago){if(!response) return SendClientMessage( playerid, -1, "Você cancelou a viajem!");
if(listitem == 0){SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
SetPlayerInterior(playerid, 1);GivePlayerMoney(playerid,-50);
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você entrou no avião para viajar para Los Santos... Em breve chegará!");
SetTimerEx("@Viajar", 60000, false, "i", playerid);
LSThiago[playerid] = 1;}
else if(listitem == 1){SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
SetPlayerInterior(playerid, 1);GivePlayerMoney(playerid,-50);
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você entrou no avião para viajar para Las Venturas... Em breve chegará!");
SetTimerEx("@Viajar", 60000, false, "i", playerid);
LVThiago[playerid] = 1;}
else if(listitem == 2){SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
SetPlayerInterior(playerid, 1);GivePlayerMoney(playerid,-50);
SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você entrou no avião para viajar para San Fierro... Em breve chegará!");
SetTimerEx("@Viajar", 60000, false, "i", playerid);
SFThiago[playerid] = 1;}return true;}
	
	if(dialogid == DIALOG_EMPRESTIMO)
    {
        if(response == 0) return true;
        if(response >= 1)
		{
		    new log[85];
     		format(log,sizeof log,"Emprestimo/%s.ini",PlayerName(playerid));
        	new EMPRESS[MAX_PLAYERS];
       		new DialogEmprestimo[1500];
       		new senhaacc[MAX_PLAYERS],quantasvs[MAX_PLAYERS],MoneyQ[MAX_PLAYERS];
       		new stringf[255];
        	if(listitem == 0)
			{
		   	 	if(PlayerInfo[playerid][pLevel] >= 3)
                {
					SendClientMessage(playerid, COLOR_RED, "O juros de empréstimo que está sendo cobrado por essa empresa é de 25 por cento.");
            		ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO+1, DIALOG_STYLE_INPUT, "{FFFFFF}Empréstimo","{FFFFFF} Digite o valor desejado:","Cancelar","Confirmar");
                    FOI[playerid] = 0;
				}
				else
        		{
		  			SendClientMessage(playerid,-1,"Você precisar ser pelo menos level 3 para fazer empréstimos.");
				}
			}
    		if(listitem == 1)
			{
				senhaacc[playerid] = dini_Int(log, "Emprestimo");
				quantasvs[playerid] = dini_Int(log, "Quantasvs");
				MoneyQ[playerid] = dini_Int(log, "Money");
            	if(dini_Exists(log))
				{

	    			if(IsPlayerConnected(playerid))
	    			{
	    		    	EMPRESS[playerid] = MoneyQ[playerid]/quantasvs[playerid];
						format(stringf, 128, "- Em %dx de %d Falta %d\n",quantasvs[playerid],EMPRESS[playerid],MoneyQ[playerid]);
						strcat(DialogEmprestimo,stringf);
						ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO+1, DIALOG_STYLE_MSGBOX, "Empréstimo",DialogEmprestimo,"Confirmar", "");
					}
	           		//dini_IntSet(log, "Emprestimo", dini_Int(log, "Emprestimo")+strval(inputtext));
	           	}
			}
	  		if(listitem == 2)
			{
	            //new DialogEmprestimo[1500];
				format(stringf, 128, "O termo empréstimo é popularmente conhecido como um contrato\n pelo qual uma pessoa entrega a outra pessoa um objeto\n");
				strcat(DialogEmprestimo,stringf);
	            format(stringf, 128, ", que deve ser devolvido ao primeiro em certo prazo.\n É comum a utilização do termo empréstimo para designar outras operações, \ncomo financiamento e crédito. No entanto,\n");
				strcat(DialogEmprestimo,stringf);
	   			format(stringf, 128, " tais termos não são equivalentes.\n Enquanto no empréstimo o valor é dado sem destinação específica,\n no financiamento existe vinculação entre o valor concedido e sua utilização.\n1 Já o crédito, que também não tem destinação específica\n");
				strcat(DialogEmprestimo,stringf);
	   			format(stringf, 128, " é utilizado para a satisfação de uma necessidade a curto prazo,\n geralmente concedido em conta ou através de cartão de crédito\n");
				strcat(DialogEmprestimo,stringf);
	   			format(stringf, 128, "onde se tem um montante fixo disponível para uso. O empréstimo, por sua vez, não tem valor fixo,\n e pode ser concedido de acordo com o pedido do cliente e sua possibilidade de pagamento.\n");
				strcat(DialogEmprestimo,stringf);
				ShowPlayerDialog(playerid, 8723, DIALOG_STYLE_MSGBOX, "Empréstimo {FF00FF}Info",DialogEmprestimo,"Ok", "Ok");
			}
			if(listitem == 3)
			{
               if(dini_Int(log, "Quantasvs") == 0)
			   {
			        SendClientMessage(playerid, -1, "Você não tem uma dívida com a empresa de empréstimos.");
					return true;
			   }
			   ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO + 4, DIALOG_STYLE_LIST, "Quitar Empréstimo", "Quitar empréstimo em parcelas\nQuitar empréstimo completo", "Confirmar", "Cancelar");
			}
		}
	}
	if(dialogid == DIALOG_EMPRESTIMO + 4)
	{
       new log[85];
       format(log,sizeof log,"Emprestimo/%s.ini",PlayerName(playerid));
       new EMPRESS[MAX_PLAYERS];
       new DialogEmprestimo[1500];
       new senhaacc[MAX_PLAYERS],quantasvs[MAX_PLAYERS],MoneyQ[MAX_PLAYERS];
	   new stringf[255];
	   if(response == 0) return SendClientMessage(playerid, -1, "Ok, você não quis quitar empréstimo!");
       if(response >= 1)
	   {
			if(listitem == 0)
			{
              senhaacc[playerid] = dini_Int(log, "Emprestimo");
			  quantasvs[playerid] = dini_Int(log, "Quantasvs");
			  MoneyQ[playerid] = dini_Int(log, "Money");
			  EMPRESS[playerid] = MoneyQ[playerid]/quantasvs[playerid];
			  format(stringf, 128, "{FFFFFF}Você deve pagar R$:%d Em %dx de R$:%d \n",senhaacc[playerid],quantasvs[playerid],MoneyQ[playerid]);
			  strcat(DialogEmprestimo,stringf);
			  format(stringf, 128, "{FFFFFF}Deseja Paga 1 parcela de R$:%d agora ?\n",EMPRESS[playerid]);
			  strcat(DialogEmprestimo,stringf);
			  ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO+2, DIALOG_STYLE_MSGBOX, "{FFFFFF}Empréstimo",DialogEmprestimo,"Confirmar", "Cancelar");
			}
		  	if(listitem == 1)
	        {
			   senhaacc[playerid] = dini_Int(log, "Emprestimo");
			   quantasvs[playerid] = dini_Int(log, "Quantasvs");
			   MoneyQ[playerid] = dini_Int(log, "Money");
			   EMPRESS[playerid] = MoneyQ[playerid];
			   format(stringf, 128, "{FFFFFF}Você está devendo R$:%d para o banco de empréstimos\nDeseja pagar agora:", EMPRESS[playerid]);
			   strcat(DialogEmprestimo,stringf);
			   ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO + 5, DIALOG_STYLE_MSGBOX, "{FFFFFF}Empréstimo",DialogEmprestimo,"Confirmar", "Cancelar");
	        }
	    }
	}
   if(dialogid == DIALOG_EMPRESTIMO + 5)
   {
        if(response == 0)
		{
 			return true;
   		}
        if(response >= 1)
		{
		    new log[85];
     		format(log,sizeof log,"Emprestimo/%s.ini",PlayerName(playerid));
      		new EMPRESS[MAX_PLAYERS];
       		new senhaacc[MAX_PLAYERS],quantasvs[MAX_PLAYERS];
       		new MoneyQ[MAX_PLAYERS];
       		MoneyQ[playerid] = dini_Int(log, "Money");
		    senhaacc[playerid] = dini_Int(log, "Emprestimo");
			quantasvs[playerid] = dini_Int(log, "Quantasvs");
    		EMPRESS[playerid] = MoneyQ[playerid];
    		if(GetPlayerMoney(playerid) < EMPRESS[playerid]) return SendClientMessage(playerid,-1,"Você não está com dinheiro do empréstimo!");
    		GivePlayerMoney(playerid,-EMPRESS[playerid]);
    		BizzInfo[3][bTill] += EMPRESS[playerid];
            if(dini_Int(log, "Quantasvs") >= 1)
   			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Parabéns, você quitou sua dívida!");
				dini_IntSet(log, "Emprestimo",0);
				dini_IntSet(log, "Quantasvs",dini_Int(log, "Quantasvs") - quantasvs[playerid]);
				dini_IntSet(log, "Money",dini_Int(log, "Money")-EMPRESS[playerid]);
				totalRecebido(EMPRESS[playerid]);
		        return true;
		    }
	    }
    }
	if(dialogid == DIALOG_EMPRESTIMO+2)
  	{
        if(response == 0)
		{
 			return true;
   		}
        if(response >= 1)
		{
		    new log[85];
     		format(log,sizeof log,"Emprestimo/%s.ini",PlayerName(playerid));
      		new EMPRESS[MAX_PLAYERS];
       		new senhaacc[MAX_PLAYERS],quantasvs[MAX_PLAYERS];
       		new stringf[255];
       		new MoneyQ[MAX_PLAYERS];
       		MoneyQ[playerid] = dini_Int(log, "Money");
		    senhaacc[playerid] = dini_Int(log, "Emprestimo");
			quantasvs[playerid] = dini_Int(log, "Quantasvs");
    		EMPRESS[playerid] = MoneyQ[playerid]/quantasvs[playerid];
    		if(GetPlayerMoney(playerid) < EMPRESS[playerid]) return SendClientMessage(playerid,-1,"Você não está com dinheiro da parcela!");
    		GivePlayerMoney(playerid,-EMPRESS[playerid]);
    		BizzInfo[3][bTill] += EMPRESS[playerid];
    		if(dini_Int(log, "Quantasvs") >= 2)
    		{
    		  format(stringf, sizeof(stringf),"Você pagou uma parcela de R$:%d",EMPRESS[playerid]);
   			}
            else if(dini_Int(log, "Quantasvs") == 1)
   			{
    	    format(stringf, sizeof(stringf),"Você pagou a ultima parcela de R$:%d",EMPRESS[playerid]);
   			dini_IntSet(log, "Emprestimo",0);
			}else SendClientMessage(playerid,-1,"ERROR INTERNO !! Peça um Admin para te Ajudar !");
    		dini_IntSet(log, "Quantasvs",dini_Int(log, "Quantasvs")-1);
    		dini_IntSet(log, "Money",dini_Int(log, "Money")-EMPRESS[playerid]);
    		totalRecebido(EMPRESS[playerid]);
    		SendClientMessage(playerid,-1,stringf);
		    return true;
		}
  	}
   	if(dialogid == DIALOG_EMPRESTIMO+1)
  	{
       	if(response == 0)
		{
			if(strlen(inputtext) == 0)
			{
				return true;
			}
			if(FOI[playerid] == 1)
			{
			    FOI[playerid] = 0;
				return true;
			}
			SetPVarInt(playerid, "EMPRESTIMOVAR", strval(inputtext));
			new EMPRESS[6];
			EMPRESS[0] = strval(inputtext)/2;
			EMPRESS[1] = strval(inputtext)/4;
			EMPRESS[2] = strval(inputtext)/6;
			EMPRESS[3] = strval(inputtext)/8;
			EMPRESS[4] = strval(inputtext)/10;
			EMPRESS[5] = strval(inputtext)/12;
     		new DialogEmprestimo[1500],stringf[255];
			format(stringf, 128, "{FFFFFF}Pagar de 2x  de %d vezes - %d\n",EMPRESS[0],strval(inputtext));
			strcat(DialogEmprestimo,stringf);
    		format(stringf, 128, "{FFFFFF}Pagar de 4x  de %d vezes - %d\n",EMPRESS[1],strval(inputtext));
			strcat(DialogEmprestimo,stringf);
			format(stringf, 128, "{FFFFFF}Pagar de 6x  de %d vezes - %d\n",EMPRESS[2],strval(inputtext));
			strcat(DialogEmprestimo,stringf);
			format(stringf, 128, "{FFFFFF}Pagar de 8x  de %d vezes - %d\n",EMPRESS[3],strval(inputtext));
			strcat(DialogEmprestimo,stringf);
			format(stringf, 128, "{FFFFFF}Pagar de 10x de %d vezes - %d\n",EMPRESS[4],strval(inputtext));
			strcat(DialogEmprestimo,stringf);
			format(stringf, 128, "{FFFFFF}Pagar de 12x de %d vezes - %d\n",EMPRESS[5],strval(inputtext));
			strcat(DialogEmprestimo,stringf);
			ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO+1, DIALOG_STYLE_LIST, "{FFFFFF}Empréstimo {FF00FF}Parcelas",DialogEmprestimo,"Pagar", "Cancelar");
			FOI[playerid] = 1;
			EMPRESTIMO[playerid] = strval(inputtext);
 			return true;
   		}
   		if(response >= 1)
		{
			if(listitem == 0)
			{
			    printf("%d",GetPVarInt(playerid, "EMPRESTIMOVAR"));
		        SYSTEMEMPRESTIMO(playerid,2,GetPVarInt(playerid, "EMPRESTIMOVAR"));
  			}
  			if(listitem == 1)
  			{
  			    SYSTEMEMPRESTIMO(playerid,4,GetPVarInt(playerid, "EMPRESTIMOVAR"));
  			}
  			if(listitem == 2)
  			{
  			    SYSTEMEMPRESTIMO(playerid,6,GetPVarInt(playerid, "EMPRESTIMOVAR"));
  			}
  			if(listitem == 3)
  			{
  			    SYSTEMEMPRESTIMO(playerid,8,GetPVarInt(playerid, "EMPRESTIMOVAR"));
  			}
  			if(listitem == 4)
	 		{
	 		    SYSTEMEMPRESTIMO(playerid,10,GetPVarInt(playerid, "EMPRESTIMOVAR"));
	 		}
	 		if(listitem == 5)
	 		{
	 		    SYSTEMEMPRESTIMO(playerid,12,GetPVarInt(playerid, "EMPRESTIMOVAR"));
	 		}
	 	}
	}
 	if(dialogid == DIALOG_EMPRESTIMO+3)
  	{
        new log[35],log1[35];
        if(response == 0)
		{
            	//SendClientMessage(playerid, COLOR_LIGHTBLUE, "Ok, Caso queira fazer login posteriormente use /logar [senha]!");
 			return true;
   		}
        if(response >= 1)
		{
            if(strlen(inputtext) == 0)
			{
				return true;
			}
  			format(log,sizeof log,"Emprestimo/%s.ini",PlayerName(playerid));
  			format(log1,sizeof log1,"Emprestimo/infobanco.ini");
		    if(strval(inputtext) < 1000) return SendClientMessage(playerid,COLOR_GREY,"Você So pode Fazer Empréstimos acima de R$1.000");
      		if(strval(inputtext) > 50000) return SendClientMessage(playerid,COLOR_GREY,"Você So pode Fazer Empréstimos abaixo de R$50.000");
   			if(dini_Exists(log))
			{
				if(dini_Int(log, "Emprestimo") > 1)
				{
			    	SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}Ops... Lamento mas você ja tem um Empréstimo no Banco !");
			    	SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}Pague o Empréstimo Anterior para um Fazer um novo Empréstimo !");
   				}
	   			else if(dini_Int(log, "Emprestimo") < 1)
				{
        			if(BizzInfo[3][bTill] < strval(inputtext)) return SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}O Banco deve está {FF0000}Falido{FFFFFF} ou não tem esse Dinheiro !");
     				new quantasvs;
					quantasvs = dini_Int(log1, "Quantasvs");
         			format(string, sizeof(string), "Empréstimo: Você pagará R$%d em %d parcelas de R$%d.(Juros de 25 por cento)", strval(inputtext), quantasvs, strval(inputtext) / quantasvs);
         			SendClientMessage(playerid, COLOR_GREY, string);
					dini_Create(log);
					dini_IntSet(log, "Emprestimo",strval(inputtext));
					dini_IntSet(log, "Quantasvs",quantasvs);
					GivePlayerMoneyEx(playerid, strval(inputtext));
					BizzInfo[3][bTill] -= strval(inputtext);
				}
 			}
			else
    	    {
    	        if(BizzInfo[3][bTill] < strval(inputtext)) return SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}O Banco deve está {FF0000}Falido{FFFFFF} ou não tem esse Dinheiro !");
				new quantasvs;
				quantasvs = dini_Int(log1, "Quantasvs");
         		format(string, sizeof(string), "Empréstimo: Você pagará R$%d em %d parcelas de R$%d.(Juros de 25 por cento)", strval(inputtext), quantasvs, strval(inputtext) / quantasvs);
         		SendClientMessage(playerid, COLOR_GREY, string);
				dini_Create(log);
				dini_IntSet(log, "Emprestimo",strval(inputtext));
				dini_IntSet(log, "Quantasvs",quantasvs);
				BizzInfo[3][bTill] -= strval(inputtext);
       		}
  		}
	}
	if(dialogid == DialogCaixaSom)  //Dialog de instalar remover ou editar o som
    {
        if(response)
        {
            if(listitem == 0)   //instalar
            {
				ShowPlayerDialog(playerid, DialogCaixaSom + 1, DIALOG_STYLE_LIST, "Tipo de Instalação", "Caixa Deitada(R$5.000)\nTrio(R$20.000)", "Ok", "Cancelar");
			}
			if(listitem == 1)   //Editar
            {
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
				else
                	SendClientMessage(playerid,-1,"Seu véiculo não tem equipamento de som instalado.");
            }
			if(listitem == 2)   //Remover
			{
			    if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
			    {
			        if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
			        {
		    			DestroyObject(SomVeiculoObjeto[0][GetPlayerVehicleID(playerid)]);
	    				SomPos[0][GetPlayerVehicleID(playerid)][0] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][1] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][2] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][3] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][4] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][5] = 0;
   					}
            		else
					{
			    		for(new i; i < 3;i++)
						{
			        		DestroyObject(SomVeiculoObjeto[i][GetPlayerVehicleID(playerid)]);
		    				SomPos[i][GetPlayerVehicleID(playerid)][0] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][1] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][2] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][3] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][4] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][5] = 0;
						}
   					}
			        SomInstalado[GetPlayerVehicleID(playerid)] = false;
					SendClientMessage(playerid,-1,"Equipamento de som removido com sucesso.");
				}
				else
				    SendClientMessage(playerid,-1,"Seu véiculo não tem equipamento de som instalado.");
			}
        }
    }
    if(dialogid == DialogCaixaSom + 1) // Dialog de instalar som
    {
        if(response)
        {
            if(listitem == 0)       //Caixa deitada
            {
                SomVeiculoTipo[GetPlayerVehicleID(playerid)] = 1;
                SendClientMessage(playerid,-1,"Instalação em andamento, aguarde...");
                CreateSomObjeto(GetPlayerVehicleID(playerid),2232,0,0,-2,0,0,-90,0,300);
                ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
   			if(listitem == 1)      // Trio
            {
                SomVeiculoTipo[GetPlayerVehicleID(playerid)] = 2;
                SendClientMessage(playerid,-1,"Instalação em andamento aguarde.");
                CreateSomObjeto(GetPlayerVehicleID(playerid),2232,0,0,-2,0,0,0,0,300);
                CreateSomObjeto(GetPlayerVehicleID(playerid),2232,1,-0.54,-2,0,0,0,0,300);
                CreateSomObjeto(GetPlayerVehicleID(playerid),2232,2,0.54,-2,0,0,0,0,300);
                ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
		}
    }
    if(dialogid == DialogCaixaSom + 2) //Dialog de mover som
    {
        if(response == 0)               //Se não finalizar destroi o som
        {
            if(SomInstalado[GetPlayerVehicleID(playerid)] == false)
            {
				if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
	   			{
	    			DestroyObject(SomVeiculoObjeto[0][GetPlayerVehicleID(playerid)]);
		    		SomPos[0][GetPlayerVehicleID(playerid)][0] = 0;
					SomPos[0][GetPlayerVehicleID(playerid)][1] = 0;
					SomPos[0][GetPlayerVehicleID(playerid)][2] = 0;
					SomPos[0][GetPlayerVehicleID(playerid)][3] = 0;
					SomPos[0][GetPlayerVehicleID(playerid)][4] = 0;
					SomPos[0][GetPlayerVehicleID(playerid)][5] = 0;
	   			}
	      		else
				{
	   				for(new i; i < 3;i++)
					{
	    				DestroyObject(SomVeiculoObjeto[i][GetPlayerVehicleID(playerid)]);
	  					SomPos[i][GetPlayerVehicleID(playerid)][0] = 0;
						SomPos[i][GetPlayerVehicleID(playerid)][1] = 0;
						SomPos[i][GetPlayerVehicleID(playerid)][2] = 0;
						SomPos[i][GetPlayerVehicleID(playerid)][3] = 0;
						SomPos[i][GetPlayerVehicleID(playerid)][4] = 0;
						SomPos[i][GetPlayerVehicleID(playerid)][5] = 0;
					}
				}
				SendClientMessage(playerid,-1,"Ok, você não quis finalizar a instalação.");
			}
		}
        if(response == 1)
        {
            if(listitem == 0)
            {
				new vehicleid = GetPlayerVehicleID(playerid);
				if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
				    if(SomPos[0][vehicleid][1] <= - 0.65)
				    {
			    		CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1]+ 0.05,SomPos[0][vehicleid][2],SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
			    		SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				else
				{   if(((SomPos[0][vehicleid][1] <= - 0.65) && (SomPos[1][vehicleid][1] <= - 0.65)) && (SomPos[2][vehicleid][1] <= - 0.65)) // 0.65
				    {
					    CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1]+ 0.05,SomPos[0][vehicleid][2],SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,1,SomPos[1][vehicleid][0],SomPos[1][vehicleid][1]+ 0.05,SomPos[1][vehicleid][2],SomPos[1][vehicleid][3],SomPos[1][vehicleid][4],SomPos[1][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,2,SomPos[2][vehicleid][0],SomPos[2][vehicleid][1]+ 0.05,SomPos[2][vehicleid][2],SomPos[2][vehicleid][3],SomPos[2][vehicleid][4],SomPos[2][vehicleid][5],300);
					    SendClientMessage(playerid,-1,"Ajuste feito.");
                    }
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
                else
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
			if(listitem == 1)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
                    if(SomPos[0][vehicleid][1] <= -2.45)
				    {
        				CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1]- 0.05,SomPos[0][vehicleid][2],SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
        				SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
			   	else
				{
				    if(((SomPos[0][vehicleid][1] <= -2.45) && (SomPos[1][vehicleid][1] <= -2.45)) && (SomPos[2][vehicleid][1] <= -2.45))
				    {
						CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1]- 0.05,SomPos[0][vehicleid][2],SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,1,SomPos[1][vehicleid][0],SomPos[1][vehicleid][1]- 0.05,SomPos[1][vehicleid][2],SomPos[1][vehicleid][3],SomPos[1][vehicleid][4],SomPos[1][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,2,SomPos[2][vehicleid][0],SomPos[2][vehicleid][1]- 0.05,SomPos[2][vehicleid][2],SomPos[2][vehicleid][3],SomPos[2][vehicleid][4],SomPos[2][vehicleid][5],300);
					    SendClientMessage(playerid,-1,"Ajuste feito.");
     				}
                   	else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
                else
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
			if(listitem == 2)
            {   new vehicleid = GetPlayerVehicleID(playerid);
            	if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
            	    if(SomPos[0][vehicleid][2] <= 0.40)
					{
			    		CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2]+ 0.05,SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
			    		SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				else
				{
				    if(((SomPos[0][vehicleid][2] <= 0.40) &&(SomPos[0][vehicleid][2] <= 0.40))&&(SomPos[0][vehicleid][2] <= 0.40))
					{
					    CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2]+ 0.05,SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,1,SomPos[1][vehicleid][0],SomPos[1][vehicleid][1],SomPos[1][vehicleid][2]+ 0.05,SomPos[1][vehicleid][3],SomPos[1][vehicleid][4],SomPos[1][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,2,SomPos[2][vehicleid][0],SomPos[2][vehicleid][1],SomPos[2][vehicleid][2]+ 0.05,SomPos[2][vehicleid][3],SomPos[2][vehicleid][4],SomPos[2][vehicleid][5],300);
					    SendClientMessage(playerid,-1,"Ajuste feito.");
     				}
                   	else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
                else
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
			if(listitem == 3)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
                    if(SomPos[0][vehicleid][2] >= -0.20)
					{
			    		CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2] - 0.05,SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
			    		SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
                else
				{
				    if(((SomPos[0][vehicleid][2] >= -0.20) && (SomPos[0][vehicleid][2] >= -0.20)) && (SomPos[0][vehicleid][2] >= -0.20))
					{
					    CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2] - 0.05,SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
	                    CreateSomObjeto(vehicleid,2232,1,SomPos[1][vehicleid][0],SomPos[1][vehicleid][1],SomPos[1][vehicleid][2] - 0.05,SomPos[1][vehicleid][3],SomPos[1][vehicleid][4],SomPos[1][vehicleid][5],300);
	                    CreateSomObjeto(vehicleid,2232,2,SomPos[2][vehicleid][0],SomPos[2][vehicleid][1],SomPos[2][vehicleid][2] - 0.05,SomPos[2][vehicleid][3],SomPos[2][vehicleid][4],SomPos[2][vehicleid][5],300);
	                    SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
                else
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
			if(listitem == 4)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
                {
                    if(SomPos[0][vehicleid][3] <= -5)
					{
			    		CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2],SomPos[0][vehicleid][3] + 5.0,SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
			    		SendClientMessage(playerid,-1,"Ajuste feito.");
			   		}
			   		else
			   		    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
			    else
				{
				    if(((SomPos[0][vehicleid][3] <= -5) && (SomPos[0][vehicleid][3] <= -5)) && (SomPos[0][vehicleid][3] <= -5))
					{
						CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2],SomPos[0][vehicleid][3] + 5.0,SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,1,SomPos[1][vehicleid][0],SomPos[1][vehicleid][1],SomPos[1][vehicleid][2],SomPos[1][vehicleid][3] + 5.0,SomPos[1][vehicleid][4],SomPos[1][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,2,SomPos[2][vehicleid][0],SomPos[2][vehicleid][1],SomPos[2][vehicleid][2],SomPos[2][vehicleid][3] + 5.0,SomPos[2][vehicleid][4],SomPos[2][vehicleid][5],300);
					    SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
					    SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
                else
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
			if(listitem == 5)
            {
                new vehicleid = GetPlayerVehicleID(playerid);
                if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
                    if(SomPos[0][vehicleid][3] >= -85)
                    {
			    		CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2],SomPos[0][vehicleid][3] - 5.0,SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
                        SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
	    				SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
                else
				{
				    if(((SomPos[0][vehicleid][3] >= -85) && (SomPos[0][vehicleid][3] >= -85)) && (SomPos[0][vehicleid][3] >= -85))
				    {
					    CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2],SomPos[0][vehicleid][3] - 5.0,SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,1,SomPos[1][vehicleid][0],SomPos[1][vehicleid][1],SomPos[1][vehicleid][2],SomPos[1][vehicleid][3] - 5.0,SomPos[1][vehicleid][4],SomPos[1][vehicleid][5],300);
					    CreateSomObjeto(vehicleid,2232,2,SomPos[2][vehicleid][0],SomPos[2][vehicleid][1],SomPos[2][vehicleid][2],SomPos[2][vehicleid][3] - 5.0,SomPos[2][vehicleid][4],SomPos[2][vehicleid][5],300);
					    SendClientMessage(playerid,-1,"Ajuste feito.");
					}
					else
	    				SendClientMessage(playerid,-1,"Limite de posicionamento da caixa atingido.");
				}
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Edição", "Ok", "Cancelar");
                else
                	ShowPlayerDialog(playerid, DialogCaixaSom + 2, DIALOG_STYLE_LIST, "Mover Caixa De Som:", "Para Frente\nPara Trás\nPara Cima\nPara Baixo\nRotacionar Para Frente\nRotacionar Para Trás\nFinalizar Instalação", "Ok", "Cancelar");
			}
			if(listitem == 6)
            {
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
                    SendClientMessage(playerid, -1, "Edição concluída com sucesso!");
				else
				{
	                if((SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1) && (GetPlayerMoney(playerid) >= 5000))
	                {
	                    GivePlayerMoney(playerid, -5000);
	                    SomInstalado[GetPlayerVehicleID(playerid)] = true;
	                	SendClientMessage(playerid,-1,"Instalação concluída com sucesso!");
	          		}
					else if((SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 2) && (GetPlayerMoney(playerid) >= 20000))
					{
	                    GivePlayerMoney(playerid, -20000);
	                    SomInstalado[GetPlayerVehicleID(playerid)] = true;
	                	SendClientMessage(playerid,-1,"Instalação concluída com sucesso!");
	          		}
	          		else
					{
					    SendClientMessage(playerid,-1,"Você não possui dinheiro suficiente.");
					    if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
			   			{
			    			DestroyObject(SomVeiculoObjeto[0][GetPlayerVehicleID(playerid)]);
				    		SomPos[0][GetPlayerVehicleID(playerid)][0] = 0;
							SomPos[0][GetPlayerVehicleID(playerid)][1] = 0;
							SomPos[0][GetPlayerVehicleID(playerid)][2] = 0;
							SomPos[0][GetPlayerVehicleID(playerid)][3] = 0;
							SomPos[0][GetPlayerVehicleID(playerid)][4] = 0;
							SomPos[0][GetPlayerVehicleID(playerid)][5] = 0;
			   			}
			      		else
						{
			   				for(new i; i < 3;i++)
							{
			    				DestroyObject(SomVeiculoObjeto[i][GetPlayerVehicleID(playerid)]);
			  					SomPos[i][GetPlayerVehicleID(playerid)][0] = 0;
								SomPos[i][GetPlayerVehicleID(playerid)][1] = 0;
								SomPos[i][GetPlayerVehicleID(playerid)][2] = 0;
								SomPos[i][GetPlayerVehicleID(playerid)][3] = 0;
								SomPos[i][GetPlayerVehicleID(playerid)][4] = 0;
								SomPos[i][GetPlayerVehicleID(playerid)][5] = 0;
							}
						}
					}
				}
			}
		}
	}
	if(dialogid == DIALOG_MPTHREE)
    {
    new Float:Pos[3], Float:Distance = 100.0;
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	if(IsPlayerInRangeOfPoint(i, 100.0, Pos[0], Pos[1], Pos[2]))
	{
           PlayAudioStreamForPlayer(i, inputtext, Pos[0], Pos[1], Pos[2], Distance, 1);
     }
  }
}
    if(dialogid==Dialog_Bandana)
    {
	    if(response){
			if(listitem==0){SetPlayerAttachedObject( playerid, 5, 18917, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==1){SetPlayerAttachedObject( playerid, 5, 18913, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==2){SetPlayerAttachedObject( playerid, 5, 18916, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==3){SetPlayerAttachedObject(playerid, 5, 18915, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==4){SetPlayerAttachedObject(playerid, 5, 18912 , 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==5){SetPlayerAttachedObject(playerid, 5, 18911 , 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==6){SetPlayerAttachedObject( playerid, 5, 18914, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==7){SetPlayerAttachedObject(playerid, 5, 18918, 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==8){SetPlayerAttachedObject(playerid, 5, 18920 , 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==9){SetPlayerAttachedObject(playerid, 5, 18919 , 2, 0.078534, 0.041857, -0.001727, 268.970458, 1.533374, 269.223754);}
			if(listitem==10){for(new i;i<5;i++) RemovePlayerAttachedObject(playerid,i);}
		}
		return 1;
 }
 
  if(dialogid == DialogMenuConce) // Menu principal
	{
		if(response)
		{
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 1, DIALOG_STYLE_LIST, "Tabela de Motocicletas",
   			    "Faggio(R$8.000)\nBF-400(R$20.000)\nNRG-500(R$95.000)\nPCJ-400(R$45.000)\nFCR-900(R$60.000)\nFreeway(R$38.000)\nWayfarer(R$70.000)\nSanchez(R$30.000)\nQuadriciculo(R$20.000)", "OK", "Voltar");
			}
			else if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 2, DIALOG_STYLE_LIST, "Carros Conversíveis",
				"Comet(R$280.000)\nFeltzer(R$70.000)\nStallion(R$60.000)\nWindsor(R$75.000)", "OK", "Voltar");
			}
			else if(listitem == 2)
			{
   				ShowPlayerDialog(playerid, DialogMenuConce + 3, DIALOG_STYLE_LIST, "Carros Clássicos",
				"Blade(R$90.000)\nBroadway(R$70.000)\nRemington(R$75.000)\nSavanna(R$75.000)\nSlamvan(R$85.000)\nTahoma(R$45.000)\nTornado(R$75.000)\nVoodoo(R$50.000)", "OK", "Voltar");
			}
			else if(listitem == 3)
			{
			   ShowPlayerDialog(playerid, DialogMenuConce + 4, DIALOG_STYLE_LIST, "Utilitários 4x4",
			   "Bandito(R$20.000)\nBF-Injection(R$25.000)\nDune(R$145.000)\nHuntley(R$85.000)\nLandstalker(R$65.000)\nMesa(R$55.000)\nMonster(R$500.000)\nMonster A(R$500.000)\nMonster B(R$500.000)\nPatriot(R$225.000)\nRancher(R$89.000)\nSandking(R$110.000)", "OK", "Voltar");
			}
			else if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 5, DIALOG_STYLE_LIST, "Carros Sedan",
				"Admiral(R$27.000)\nBloodring(R$60.000)\nBravura(R$20.000)\nBuccanner(R$32.000)\nCadrona(R$35.000)\nClover(R$20.000)\nElegant(R$35.000)\nElegy(R$150.000)\nEmperor(R$35.000)\nEsperanto(R$45.000)\nFortune(R$30.000)\nGlendale(R$60.000)\nGreenwood(R$50.000)\nHermes(R$80.000)\nIntruder(R$33.000)\nMajestic(R$56.000)\nManana(R$18.000)\nMerit(R$35.000)\nNebula(R$32.000)\nPróxima Página","OK", "Voltar");
			}
			else if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 7, DIALOG_STYLE_LIST, "Carros Sport",
				"Alpha(R$50.000)\nBanshee(R$335.000)\nBlista Compact(R$30.000)\nBuffalo(R$225.000)\nBullet(R$800.000)\nCheetah(R$500.000)\nClub(R$70.000)\nEuros(R$130.000)\nFlash(R$75.000)\nHotring Racer(R$225.000)\nHotring A(R$225.000)\nHotring B(R$225.000)\nInfernus(R$1.000.000)\nJester(R$120.000)\nPhoenix(R$350.000)\nSabre(R$65.000)\nSuper GT(R$400.000)\nTurismo(R$1.300.000)\nUranus(R$95.000)\nZR-350(R$300.000)", "OK", "Voltar");
			}
			else if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 8, DIALOG_STYLE_LIST, "Station Wagons",
				"Moonbeam(R$32.000)\nPerenniel(R$22.000)\nRegina(R$26.000)\nSolair(R$37.000)\nStratum(R$70.000)","OK", "Voltar");
			}
			else if(listitem == 7)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 9, DIALOG_STYLE_LIST, "Caminhões, Furgões e Picapes",
				"Bobcat(R$30.000)\nBurrito(R$35.000)\nDFT-30(R$90.000)\nLinerunner(R$300.000)\nPicador(R$40.000)\nPony(R$30.000)\nSadler(R$40.000)\nWalton(R$25.000)\nJeep(R$125.000)","OK", "Voltar");
			}
			else
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 10, DIALOG_STYLE_LIST, "Veículos Únicos",
				"Stretch(R$300.000)\nHotknife(R$60.000)\nCamper(R$29.000)\nJourney(R$175.000)\nHustler(R$80.000)","OK", "Voltar");
			}
		}
	}
	else if(dialogid == DialogMenuConce + 1)     //Motocicletas
	{
		if(response == 0)
		{
			 ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,8000,462);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,20000,581);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,95000,522);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,45000,461);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,60000,521);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,38000,463);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,70000,586);
			}
			else if(listitem == 7)
			{
			    MenuConce(playerid,30000,468);
			}

			else
			{
			    MenuConce(playerid,20000,471);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 2)  //Carros Conversíveis
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,280000,480);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,70000,533);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,60000,439);
			}
			else
			{
			    MenuConce(playerid,75000,555);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 3)    // Carros Clássicos
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,90000,536);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,70000,575);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,75000,534);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,75000,567);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,85000,535);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,45000,566);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,75000,576);
			}
			else
			{
			    MenuConce(playerid,50000,412);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 4)  //utilitarios 4x4
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,20000,568);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,25000,424);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,145000,573);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,85000,579);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,65000,400);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,55000,500);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,500000,444);
			}
			else if(listitem == 7)
			{
			    MenuConce(playerid,500000,556);
			}
			else if(listitem == 8)
			{
			    MenuConce(playerid,500000,557);
			}
			else if(listitem == 9)
			{
			    MenuConce(playerid,225000,470);
			}
			else if(listitem == 10)
			{
			    MenuConce(playerid,89000,489);
			}
			else
			{
			    MenuConce(playerid,110000,495);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 5)  //Sedans
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,27000,445);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,60000,504);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,20000,401);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,32000,518);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,35000,527);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,20000,542);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,35000,507);
			}
			else if(listitem == 7)
			{
			    MenuConce(playerid,150000,562);
			}
			else if(listitem == 8)
			{
			    MenuConce(playerid,35000,585);
			}
			else if(listitem == 9)
			{
			    MenuConce(playerid,45000,419);
			}
			else if(listitem == 10)
			{
			    MenuConce(playerid,30000,526);
			}
			else if(listitem == 11)
			{
			    MenuConce(playerid,60000,466);
			}
			else if(listitem == 12)
			{
			    MenuConce(playerid,50000,492);
			}
			else if(listitem == 13)
			{
			    MenuConce(playerid,80000,474);
			}
			else if(listitem == 14)
			{
			    MenuConce(playerid,33000,546);
			}
			else if(listitem == 15)
			{
			    MenuConce(playerid,56000,517);
			}
			else if(listitem == 16)
			{
			    MenuConce(playerid,18000,410);
			}
			else if(listitem == 17)
			{
			    MenuConce(playerid,35000,551);
			}
			else if(listitem == 18)
			{
			    MenuConce(playerid,32000,516);
			}
			else
			{
			    ShowPlayerDialog(playerid, DialogMenuConce + 6, DIALOG_STYLE_LIST, "Carros Sedan",
      			"Oceanic(R$27.000)\nPremier(R$35.000)\nPrevion(R$25.000)\nPrimo(R$25.000)\nSentinel(R$43.000)\nStafford(R$170.000)\nSultan(R$150.000)\nSunrise(R$60.000)\nTampa(R$25.000)\nVincent(R$45.000)\nVirgo(R$40.000)\nWillard(R$30.000)\nWashington(R$55.000)", "OK", "Voltar");
			}
		}
	}
    else if(dialogid == DialogMenuConce + 6)  //Sedans proxima pagina
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,60000,467);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,35000,426);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,25000,436);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,25000,547);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,43000,405);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,170000,580);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,150000,560);
			}
			else if(listitem == 7)
			{
			    MenuConce(playerid,60000,550);
			}
			else if(listitem == 8)
			{
			    MenuConce(playerid,25000,549);
			}
			else if(listitem == 9)
			{
			    MenuConce(playerid,45000,540);
			}
			else if(listitem == 10)
			{
			    MenuConce(playerid,40000,491);
			}
			else if(listitem == 11)
			{
			    MenuConce(playerid,30000,529);
			}
			else
			{
			    MenuConce(playerid,55000,421);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 7)  //Sports
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,50000,602);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,335000,429);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,30000,496);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,225000,402);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,800000,541);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,500000,415);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,70000,589);
			}
			else if(listitem == 7)
			{
			    MenuConce(playerid,130000,587);
			}
			else if(listitem == 8)
			{
			    MenuConce(playerid,75000,565);
			}
			else if(listitem == 9)
			{
			    MenuConce(playerid,225000,494);
			}
			else if(listitem == 10)
			{
			    MenuConce(playerid,225000,502);
			}
			else if(listitem == 11)
			{
			    MenuConce(playerid,225000,503);
			}
			else if(listitem == 12)
			{
			    MenuConce(playerid,1000000,411);
			}
			else if(listitem == 13)
			{
			    MenuConce(playerid,120000,559);
			}
			else if(listitem == 14)
			{
			    MenuConce(playerid,350000,603);
			}
			else if(listitem == 15)
			{
			    MenuConce(playerid,65000,475);
			}
			else if(listitem == 16)
			{
			    MenuConce(playerid,400000,506);
			}
			else if(listitem == 17)
			{
			    MenuConce(playerid,1300000,451);
			}
			else if(listitem == 18)
			{
			    MenuConce(playerid,95000,558);
			}
			else
			{
			    MenuConce(playerid,300000,477);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 8)  //Station wagons
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,32000,418);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,22000,404);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,26000,479);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,37000,458);
			}
			else
			{
			    MenuConce(playerid,70000,561);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 9)  //caminhoes
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,30000,422);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,35000,482);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,90000,578);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,300000,403);
			}
			else if(listitem == 4)
			{
			    MenuConce(playerid,40000,600);
			}
			else if(listitem == 5)
			{
			    MenuConce(playerid,30000,413);
			}
			else if(listitem == 6)
			{
			    MenuConce(playerid,40000,543);
			}
			else if(listitem == 7)
			{
			    MenuConce(playerid,25000,478);
			}
			else
			{
			    MenuConce(playerid,125000,554);
			}
		}
	}
	else if(dialogid == DialogMenuConce + 10)  //veiculos unicos
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce(playerid,300000,409);
			}
			else if(listitem == 1)
			{
			    MenuConce(playerid,60000,434);
			}
			else if(listitem == 2)
			{
			    MenuConce(playerid,29000,483);
			}
			else if(listitem == 3)
			{
			    MenuConce(playerid,175000,508);
			}
			else
			{
			    MenuConce(playerid,80000,545);
			}
		}
	}
  // Painel de veículos Concessionaria 2
   if(dialogid == DialogMenuConce2) // Menu principal Conce 2
	{
		if(response)
		{
			if(listitem == 0)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 1, DIALOG_STYLE_LIST, "Tabela de Motocicletas",
   			    "Faggio(R$8.000)\nBF-400(R$20.000)\nNRG-500(R$95.000)\nPCJ-400(R$45.000)\nFCR-900(R$60.000)\nFreeway(R$38.000)\nWayfarer(R$70.000)\nSanchez(R$30.000)\nQuadriciculo(R$20.000)", "OK", "Voltar");
			}
			else if(listitem == 1)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 2, DIALOG_STYLE_LIST, "Carros Conversíveis",
				"Comet(R$280.000)\nFeltzer(R$70.000)\nStallion(R$60.000)\nWindsor(R$75.000)", "OK", "Voltar");
			}
			else if(listitem == 2)
			{
   				ShowPlayerDialog(playerid, DialogMenuConce2 + 3, DIALOG_STYLE_LIST, "Carros Clássicos",
				"Blade(R$90.000)\nBroadway(R$70.000)\nRemington(R$75.000)\nSavanna(R$75.000)\nSlamvan(R$85.000)\nTahoma(R$45.000)\nTornado(R$75.000)\nVoodoo(R$50.000)", "OK", "Voltar");
			}
			else if(listitem == 3)
			{
			   ShowPlayerDialog(playerid, DialogMenuConce2 + 4, DIALOG_STYLE_LIST, "Utilitários 4x4",
			   "Bandito(R$20.000)\nBF-Injection(R$25.000)\nDune(R$145.000)\nHuntley(R$85.000)\nLandstalker(R$65.000)\nMesa(R$55.000)\nMonster(R$500.000)\nMonster A(R$500.000)\nMonster B(R$500.000)\nPatriot(R$225.000)\nRancher(R$89.000)\nSandking(R$110.000)", "OK", "Voltar");
			}
			else if(listitem == 4)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 5, DIALOG_STYLE_LIST, "Carros Sedan",
				"Admiral(R$27.000)\nBloodring(R$60.000)\nBravura(R$20.000)\nBuccanner(R$32.000)\nCadrona(R$35.000)\nClover(R$20.000)\nElegant(R$35.000)\nElegy(R$150.000)\nEmperor(R$35.000)\nEsperanto(R$45.000)\nFortune(R$30.000)\nGlendale(R$60.000)\nGreenwood(R$50.000)\nHermes(R$80.000)\nIntruder(R$33.000)\nMajestic(R$56.000)\nManana(R$18.000)\nMerit(R$35.000)\nNebula(R$32.000)\nPróxima Página","OK", "Voltar");
			}
			else if(listitem == 5)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 7, DIALOG_STYLE_LIST, "Carros Sport",
				"Alpha(R$50.000)\nBanshee(R$335.000)\nBlista Compact(R$30.000)\nBuffalo(R$225.000)\nBullet(R$800.000)\nCheetah(R$500.000)\nClub(R$70.000)\nEuros(R$130.000)\nFlash(R$75.000)\nHotring Racer(R$225.000)\nHotring A(R$225.000)\nHotring B(R$225.000)\nInfernus(R$1.000.000)\nJester(R$120.000)\nPhoenix(R$350.000)\nSabre(R$65.000)\nSuper GT(R$400.000)\nTurismo(R$1.300.000)\nUranus(R$95.000)\nZR-350(R$300.000)", "OK", "Voltar");
			}
			else if(listitem == 6)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 8, DIALOG_STYLE_LIST, "Station Wagons",
				"Moonbeam(R$32.000)\nPerenniel(R$22.000)\nRegina(R$26.000)\nSolair(R$37.000)\nStratum(R$70.000)","OK", "Voltar");
			}
			else if(listitem == 7)
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 9, DIALOG_STYLE_LIST, "Caminhões, Furgões e Picapes",
				"Bobcat(R$30.000)\nBurrito(R$35.000)\nDFT-30(R$90.000)\nLinerunner(R$300.000)\nPicador(R$40.000)\nPony(R$30.000)\nSadler(R$40.000)\nWalton(R$25.000)\nJeep(R$125.000)","OK", "Voltar");
			}
			else
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 10, DIALOG_STYLE_LIST, "Veículos Únicos",
				"Stretch(R$300.000)\nHotknife(R$60.000)\nCamper(R$29.000)\nJourney(R$175.000)\nHustler(R$80.000)","OK", "Voltar");
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 1)     //Motocicletas
	{
		if(response == 0)
		{
			 ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,8000,462);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,20000,581);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,95000,522);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,45000,461);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,60000,521);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,38000,463);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,70000,586);
			}
			else if(listitem == 7)
			{
			    MenuConce2(playerid,30000,468);
			}

			else
			{
			    MenuConce2(playerid,20000,471);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 2)  //Carros Conversíveis
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,280000,480);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,70000,533);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,60000,439);
			}
			else
			{
			    MenuConce2(playerid,75000,555);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 3)    // Carros Clássicos
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,90000,536);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,70000,575);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,75000,534);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,75000,567);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,85000,535);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,45000,566);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,75000,576);
			}
			else
			{
			    MenuConce2(playerid,50000,412);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 4)  //utilitarios 4x4
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,20000,568);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,25000,424);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,145000,573);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,85000,579);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,65000,400);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,55000,500);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,500000,444);
			}
			else if(listitem == 7)
			{
			    MenuConce2(playerid,500000,556);
			}
			else if(listitem == 8)
			{
			    MenuConce2(playerid,500000,557);
			}
			else if(listitem == 9)
			{
			    MenuConce2(playerid,225000,470);
			}
			else if(listitem == 10)
			{
			    MenuConce2(playerid,89000,489);
			}
			else
			{
			    MenuConce2(playerid,110000,495);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 5)  //Sedans
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,27000,445);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,60000,504);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,20000,401);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,32000,518);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,35000,527);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,20000,542);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,35000,507);
			}
			else if(listitem == 7)
			{
			    MenuConce2(playerid,150000,562);
			}
			else if(listitem == 8)
			{
			    MenuConce2(playerid,35000,585);
			}
			else if(listitem == 9)
			{
			    MenuConce2(playerid,45000,419);
			}
			else if(listitem == 10)
			{
			    MenuConce2(playerid,30000,526);
			}
			else if(listitem == 11)
			{
			    MenuConce2(playerid,60000,466);
			}
			else if(listitem == 12)
			{
			    MenuConce2(playerid,50000,492);
			}
			else if(listitem == 13)
			{
			    MenuConce2(playerid,80000,474);
			}
			else if(listitem == 14)
			{
			    MenuConce2(playerid,33000,546);
			}
			else if(listitem == 15)
			{
			    MenuConce2(playerid,56000,517);
			}
			else if(listitem == 16)
			{
			    MenuConce2(playerid,18000,410);
			}
			else if(listitem == 17)
			{
			    MenuConce2(playerid,35000,551);
			}
			else if(listitem == 18)
			{
			    MenuConce2(playerid,32000,516);
			}
			else
			{
			    ShowPlayerDialog(playerid, DialogMenuConce2 + 6, DIALOG_STYLE_LIST, "Carros Sedan",
      			"Oceanic(R$27.000)\nPremier(R$35.000)\nPrevion(R$25.000)\nPrimo(R$25.000)\nSentinel(R$43.000)\nStafford(R$170.000)\nSultan(R$150.000)\nSunrise(R$60.000)\nTampa(R$25.000)\nVincent(R$45.000)\nVirgo(R$40.000)\nWillard(R$30.000)\nWashington(R$55.000)", "OK", "Voltar");
			}
		}
	}
    else if(dialogid == DialogMenuConce2 + 6)  //Sedans proxima pagina
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,60000,467);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,35000,426);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,25000,436);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,25000,547);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,43000,405);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,170000,580);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,150000,560);
			}
			else if(listitem == 7)
			{
			    MenuConce2(playerid,60000,550);
			}
			else if(listitem == 8)
			{
			    MenuConce2(playerid,25000,549);
			}
			else if(listitem == 9)
			{
			    MenuConce2(playerid,45000,540);
			}
			else if(listitem == 10)
			{
			    MenuConce2(playerid,40000,491);
			}
			else if(listitem == 11)
			{
			    MenuConce2(playerid,30000,529);
			}
			else
			{
			    MenuConce2(playerid,55000,421);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 7)  //Sports
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,50000,602);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,335000,429);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,30000,496);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,225000,402);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,800000,541);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,500000,415);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,70000,589);
			}
			else if(listitem == 7)
			{
			    MenuConce2(playerid,130000,587);
			}
			else if(listitem == 8)
			{
			    MenuConce2(playerid,75000,565);
			}
			else if(listitem == 9)
			{
			    MenuConce2(playerid,225000,494);
			}
			else if(listitem == 10)
			{
			    MenuConce2(playerid,225000,502);
			}
			else if(listitem == 11)
			{
			    MenuConce2(playerid,225000,503);
			}
			else if(listitem == 12)
			{
			    MenuConce2(playerid,1000000,411);
			}
			else if(listitem == 13)
			{
			    MenuConce2(playerid,120000,559);
			}
			else if(listitem == 14)
			{
			    MenuConce2(playerid,350000,603);
			}
			else if(listitem == 15)
			{
			    MenuConce2(playerid,65000,475);
			}
			else if(listitem == 16)
			{
			    MenuConce2(playerid,400000,506);
			}
			else if(listitem == 17)
			{
			    MenuConce2(playerid,1300000,451);
			}
			else if(listitem == 18)
			{
			    MenuConce2(playerid,95000,558);
			}
			else
			{
			    MenuConce2(playerid,300000,477);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 8)  //Station wagons
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,32000,418);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,22000,404);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,26000,479);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,37000,458);
			}
			else
			{
			    MenuConce2(playerid,70000,561);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 9)  //caminhoes
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,30000,422);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,35000,482);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,90000,578);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,300000,403);
			}
			else if(listitem == 4)
			{
			    MenuConce2(playerid,40000,600);
			}
			else if(listitem == 5)
			{
			    MenuConce2(playerid,30000,413);
			}
			else if(listitem == 6)
			{
			    MenuConce2(playerid,40000,543);
			}
			else if(listitem == 7)
			{
			    MenuConce2(playerid,25000,478);
			}
			else
			{
			    MenuConce2(playerid,125000,554);
			}
		}
	}
	else if(dialogid == DialogMenuConce2 + 10)  //veiculos unicos
	{
		if(response == 0)
		{
			ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
			"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		}
		else
		{
		    if(listitem == 0)
			{
			    MenuConce2(playerid,300000,409);
			}
			else if(listitem == 1)
			{
			    MenuConce2(playerid,60000,434);
			}
			else if(listitem == 2)
			{
			    MenuConce2(playerid,29000,483);
			}
			else if(listitem == 3)
			{
			    MenuConce2(playerid,175000,508);
			}
			else
			{
			    MenuConce2(playerid,80000,545);
			}
		}
	}
if(dialogid == DialogMenuConceKarts) //Bikes
	{
      if(response) {
	        switch(listitem) {
		    case 0:
			{
			    MenuConceKarts(playerid,1900,509);
			}
			case 1:
			{
			    MenuConceKarts(playerid,2300,481);
			}
			case 2:
			{
			    MenuConceKarts(playerid,5000,510);
			}
			case 3:
			{
			 if(GetPlayerMoney(playerid) >= 10000)
				{
					new Float:X = 1824.5450,Float:Y = -1404.0785,Float:Z = 12.7135, Float:O = 0.8203; // as cordenadas coloca uma cordenada fixa
					new color1 = random(255), color2 = random(255);
					new Mensagem[128];
					new StringKart[128];
					//new thiscar = CreateVehicle(571,X,Y,Z,O,color1,color2,-1); //cria o objeto
				    new thiscar;
				    for (new i = carsonserver; i < sizeof(CarInfo); i++) {
					if ((strlen(CarInfo[i][cOwner]) != 0)&&(strcmp(CarInfo[i][cOwner], "Dealership", true) == 0)){thiscar = i;break;}
				    else if(i == sizeof(CarInfo) - 1){ return SendClientMessage(playerid,COLOR_GREY,"Desculpe mas no momento não a carros disponíveis para encomendar.");}
					}
					if(PlayerInfo[playerid][pPcarkey] == -1)
					{
						PlayerInfo[playerid][pPcarkey] = thiscar;
					}
					else if(PlayerInfo[playerid][pPcarkey2] == -1)
					{
						PlayerInfo[playerid][pPcarkey2] = thiscar;
					}
					else if(PlayerInfo[playerid][pPcarkey3] == -1)
					{
						PlayerInfo[playerid][pPcarkey3] = thiscar;
					}
					else if(PlayerInfo[playerid][pPcarkey4] == -1)
					{
						PlayerInfo[playerid][pPcarkey4] = thiscar;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Você já possui 4 carros!!!");
						return true;
					}
					DestroyVehicle(thiscar);
					CreateVehicle(571,X,Y,Z,O,color1,color2,-1); //cria o objeto
					CarInfo[thiscar][cOwned] = 1;
					CarInfo[thiscar][cModel] = 571;
					CarInfo[thiscar][cColorOne] = color1;
					CarInfo[thiscar][cColorTwo] = color2;
					CarInfo[thiscar][cLocationx] = X;
					CarInfo[thiscar][cLocationy] = Y;
					CarInfo[thiscar][cLocationz] = Z;
					CarInfo[thiscar][cAngle] = 1;
					CarInfo[thiscar][cValue] = 10000;
					CarInfo[thiscar][cLock] = 0;
					CarInfo[thiscar][paintjob] = -1;

					strmid(CarInfo[thiscar][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 999);
					format(CarInfo[thiscar][cDescription],32,"%s",vehName[GetVehicleModel(thiscar)-400]);

					format(CarInfo[thiscar][cLicense], 32 ,"VENDIDO");
					SetVehicleNumberPlate(thiscar,CarInfo[thiscar][cLicense]);

					GivePlayerMoney(playerid, -10000);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					format(StringKart, sizeof(StringKart), "Parabéns %s você adquiriu um %s por R$%d",PlayerName(playerid),CarInfo[thiscar][cDescription], 10000);
					SendClientMessage(playerid, COLOR_BLUE, StringKart);
					SendClientMessage(playerid, COLOR_BLUE, "Digite /v para ver a lista de comandos do veículo.");
					SetPlayerCheckpoint(playerid, 1824.5541,-1404.0790,13.4297,3.0);//Entrega de Bikes & Karts
					InterpolateCameraPos(playerid, 1831.554809, -1397.169677, 14.516956, 1821.305541, -1398.426147, 14.516956, 3000);
					InterpolateCameraLookAt(playerid, 1829.124267, -1400.553222, 11.752052, 1824.268188, -1402.018920, 12.696504, 3000);
					CameraConce[playerid] = SetTimerEx("PainelCamConce", 5000, 0, "i", playerid);
					SBizzInfo[24][sbTill] += (10000 / 4);
					ExtortionSBiz(24, (10000 / 8));
					format(Mensagem, sizeof(Mensagem), "%s comprou um carro de ID [%d] Modelo: (%s) no painel da conce (%d/%d/%d - %d:%d)",PlayerName(playerid),thiscar,CarInfo[thiscar][cDescription],day, month, year,hour, minute);
					ConceLog(Mensagem);

					OnPropUpdate2();
					SavePlayerData(playerid);

					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "  Você não tem dinheiro suficiente ! ");
					return 1;
				}
			}
		}
	}
}
	if(dialogid == 9998) {
	    if(response) {
	        switch(listitem) {
	            case 0: {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Você comprou 10 Pass Via Fácil!");
		            ViaFacil[playerid] += 10;
		            GivePlayerMoney(playerid, -1000);
			 	} case 1: {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Você comprou 20 Pass Via Fácil!");
		            ViaFacil[playerid] += 20;
		            GivePlayerMoney(playerid, -1900);
			 	} case 2: {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Você comprou 30 Pass Via Fácil!");
		            ViaFacil[playerid] += 30;
		            GivePlayerMoney(playerid, -2800);
				} case 3: {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Você comprou 50 Pass Via Fácil!");
		            ViaFacil[playerid] += 50;
		            GivePlayerMoney(playerid, -5000);
			 	} case 4: {
		            SendClientMessage(playerid, 0xFFFFFFFF, "Você comprou 100 Pass Via Fácil!");
		            ViaFacil[playerid] += 100;
		            GivePlayerMoney(playerid, -9000);
			 	}
			}
	    }
	}


 
      if(dialogid == Tutorial) { 
	 	  
	   if(response)
		{
		  SendClientMessage(playerid,0x008000FF, "Enjoy your stay!"); 
		  TutTime[playerid] = 125;
		}
		else
		{
		  SendClientMessage(playerid, 0xFF0000FF, "You selected 'Quit', therefore you got kicked. Goodbye!");
		  Kick(playerid);
		}
		return true;

}

			if(dialogid == 8899){if(response){if(listitem == 0){
            DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
            //blue
            SetPVarInt(playerid, "Status", 1);
            SetPVarInt(playerid, "neon", CreateObject(18648,0,0,0,0,0,0));
            SetPVarInt(playerid, "neon1", CreateObject(18648,0,0,0,0,0,0));
            AttachObjectToVehicle(GetPVarInt(playerid, "neon"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachObjectToVehicle(GetPVarInt(playerid, "neon1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            SendClientMessage(playerid, COLOR_DBLUE, "Neon Azul Instalado no seu Carro.");}
            if(listitem == 1){
            DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
			//red
			SetPVarInt(playerid, "Status", 1);
			SetPVarInt(playerid, "neon2", CreateObject(18647,0,0,0,0,0,0));
			SetPVarInt(playerid, "neon3", CreateObject(18647,0,0,0,0,0,0));
			AttachObjectToVehicle(GetPVarInt(playerid, "neon2"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			AttachObjectToVehicle(GetPVarInt(playerid, "neon3"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Neon Vermelho Instalado no seu Carro.");}
            if(listitem == 2){
            DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
			//green
			SetPVarInt(playerid, "Status", 1);
   			SetPVarInt(playerid, "neon4", CreateObject(18649,0,0,0,0,0,0));
   			SetPVarInt(playerid, "neon5", CreateObject(18649,0,0,0,0,0,0));
			AttachObjectToVehicle(GetPVarInt(playerid, "neon4"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
   			AttachObjectToVehicle(GetPVarInt(playerid, "neon5"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, "Neon Verde Instalado no seu Carro.");}
   			if(listitem == 3){
            DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
			//COLOR_WHITE
   			SetPVarInt(playerid, "Status", 1);
   			SetPVarInt(playerid, "neon6", CreateObject(18652,0,0,0,0,0,0));
   			SetPVarInt(playerid, "neon7", CreateObject(18652,0,0,0,0,0,0));
   			AttachObjectToVehicle(GetPVarInt(playerid, "neon6"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
   			AttachObjectToVehicle(GetPVarInt(playerid, "neon7"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
   			SendClientMessage(playerid, COLOR_WHITE, "Neon Branco Instalado no seu Carro.");}
			if(listitem == 4){
			DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
            //pink
            SetPVarInt(playerid, "Status", 1);
            SetPVarInt(playerid, "neon8", CreateObject(18651,0,0,0,0,0,0));
            SetPVarInt(playerid, "neon9", CreateObject(18651,0,0,0,0,0,0));
            AttachObjectToVehicle(GetPVarInt(playerid, "neon8"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachObjectToVehicle(GetPVarInt(playerid, "neon9"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            SendClientMessage(playerid, COLOR_GRAD3, "Neon Rosa Instalado no seu Carro.");}
			if(listitem == 5){
            DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
			//yellow
            SetPVarInt(playerid, "Status", 1);
            SetPVarInt(playerid, "neon10", CreateObject(18650,0,0,0,0,0,0));
            SetPVarInt(playerid, "neon11", CreateObject(18650,0,0,0,0,0,0));
            AttachObjectToVehicle(GetPVarInt(playerid, "neon10"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            AttachObjectToVehicle(GetPVarInt(playerid, "neon11"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
            SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Neon Amarelo Instalado no seu Carro.");}
            if(listitem == 6){//remove neon
            DestroyObject(GetPVarInt(playerid, "neon"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon2"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon3"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon4"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon5"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon6"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon7"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon8"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon9"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon10"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon11"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon12"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "neon13"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "interior1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "back1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "front1"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover"));
            DeletePVar(playerid, "Status");
            DestroyObject(GetPVarInt(playerid, "undercover1"));
            DeletePVar(playerid, "Status");
            }}return 0;}

 	if(dialogid == DIALOGID)
	{
		if(response)
		{
			if(listitem == 0) //Cores
			{
				ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1) //Rodas
			{
				ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 2) //Volume do rádio
			{
				ShowPlayerDialog(playerid, DIALOGID+3, DIALOG_STYLE_LIST, "Selecione o Volume do Rádio", "Alto\nSuper Alto\nUltra Alto\nKing Alto\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 3) //Tunar menu do carro
			{
				ShowPlayerDialog(playerid, DIALOGID+4, DIALOG_STYLE_LIST, "Tunar carro", "Suspenção\nNitro x10\nArrumar o Carro\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 4) //Rodas 2
			{
				ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
			}
       }
	}

	if(dialogid == DIALOGID+1) //Cores
    {
		if(response)
		{
			if(listitem == 0)
			{
		            new car = GetPlayerVehicleID(playerid);
		            ChangeVehicleColor(car,0,0);//Preto
		            PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		            SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Preto.");
		            ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 1)
			{
			        new car = GetPlayerVehicleID(playerid);
			        ChangeVehicleColor(car,1,1);//Branco
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Branco.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 2)
			{
			        new car = GetPlayerVehicleID(playerid);
			        ChangeVehicleColor(car,3,3);//Vermelho
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Vermelho.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 3)
			{
			        new car = GetPlayerVehicleID(playerid);
		 	        ChangeVehicleColor(car,79,79); //Azul
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Azul.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 4)
			{
			        new car = GetPlayerVehicleID(playerid);
			        ChangeVehicleColor(car,86,86);//Verde
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Verde.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 5)
			{
			        new car = GetPlayerVehicleID(playerid);
			        ChangeVehicleColor(car,6,6);//Amarelo
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Amarelo.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");

			}
			if(listitem == 6)
           {
			        new car = GetPlayerVehicleID(playerid);
			        ChangeVehicleColor(car,126,126);//Rosa
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			        SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Rosa.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 7)
			{
			        new car = GetPlayerVehicleID(playerid);
			        ChangeVehicleColor(car,66,66);//Marrom
			        PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          		SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você Pintou seu carro de Marrom.");
			        ShowPlayerDialog(playerid, DIALOGID+1, DIALOG_STYLE_LIST, "Selecione a Cor", "Preto\nBranco\nVermelho\nAzul\nVerde\nAmarelo\nRosa\nMarrom\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 8)
			{
        		    ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Tunar carro","Cores\nRodas\nVolume do Carro\nTunar Carro", "Selecionar", "Sair");
            }
		}
    }

    if(dialogid == DIALOGID+2)//Rodas
    {
		if(response)
		{
			if(listitem == 0)//Offroad
			{
                 new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1025);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                 SendClientMessage(playerid,COLOR_YELLOW,"[BRNM] Você adicionou Offroad Rodas.");
	             ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
	        }
            if(listitem == 1)//
			{
                 new car = GetPlayerVehicleID(playerid);
			     AddVehicleComponent(car,1074);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Rodas .");
			     ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
            if(listitem == 2)//Wires
			{
                 new car = GetPlayerVehicleID(playerid);
	             AddVehicleComponent(car,1076);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Wires Rodas.");
			     ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
	        if(listitem == 3)//Twist
			{
                 new car = GetPlayerVehicleID(playerid);
			     AddVehicleComponent(car,1078);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Twist Rodas.");
			     ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 4)//Groove
			{
                 new car = GetPlayerVehicleID(playerid);
			     AddVehicleComponent(car,1081);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Groove Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 5)//Import
			{
                 new car = GetPlayerVehicleID(playerid);
                 AddVehicleComponent(car,1082);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			     SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Import Rodas.");
			     ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 6)//Atomic
			{
                 new car = GetPlayerVehicleID(playerid);
			     AddVehicleComponent(car,1085);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			     SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Atomic Rodas.");
                 ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 7)//Ahab
			{
                 new car = GetPlayerVehicleID(playerid);
			     AddVehicleComponent(car,1096);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	          	 SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Ahab Rodas.");
			     ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 8)//Virtual
			{
                 new car = GetPlayerVehicleID(playerid);
                 AddVehicleComponent(car,1097);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	           	 SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Virtual Rodas");
                 ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 9)//Access
			{
                 new car = GetPlayerVehicleID(playerid);
			     AddVehicleComponent(car,1098);
			     PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
	         	 SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Access Rodas.");
			     ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 10)//Proxima página (menu de rodas 2)
			{
                 ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 11)//Voltar
            {
                 ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Tunar carro","Cores\nRodas\nVolume do Carro\nTunar Carro", "Selecionar", "Sair");
            }

		}
    }
    if(dialogid == DIALOGID+3)//Volume do rádio
    {
		if(response)
		{
			if(listitem == 0)//Alto
			{
                 new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Volume Alto sistema.");
		         ShowPlayerDialog(playerid, DIALOGID+3, DIALOG_STYLE_LIST, "Selecione o Volume do Rádio", "Alto\nSuper Alto\nUltra Alto\nKing Alto\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1)//Super Alto
			{
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Volume Super Alto sistema.");
		         ShowPlayerDialog(playerid, DIALOGID+3, DIALOG_STYLE_LIST, "Selecione o Volume do Rádio", "Alto\nSuper Alto\nUltra Alto\nKing Alto\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 2)//Ultra Alto
			{
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1086);
                 PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Volume Ultra Alto sistema.");
		         ShowPlayerDialog(playerid, DIALOGID+3, DIALOG_STYLE_LIST, "Selecione o Volume do Rádio", "Alto\nSuper Alto\nUltra Alto\nKing Alto\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 3)//King Alto
			{
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1086);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Volume King Alto sistema.");
		         ShowPlayerDialog(playerid, DIALOGID+3, DIALOG_STYLE_LIST, "Selecione o Volume do Rádio", "Alto\nSuper Alto\nUltra Alto\nKing Alto\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 4)//Voltar
            {
                 ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Tunar carro","Cores\nRodas\nVolume do Carro\nTunar Carro", "Selecionar", "Sair");
            }
		}
    }
    if(dialogid == DIALOGID+4)//Tunar carro 2
    {
		if(response)
		{
			if(listitem == 0)//Suspenção
			{
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1087);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]:Você adicionou Suspenção para o carro.");
		         ShowPlayerDialog(playerid, DIALOGID+4, DIALOG_STYLE_LIST, "Tunar carro", "Suspenção\nNitro x10\nArrumar o Carro\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 1)//Nitro x10
			{
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1010);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Nitro 10x de carro.");
		         ShowPlayerDialog(playerid, DIALOGID+4, DIALOG_STYLE_LIST, "Tunar carro", "Suspenção\nNitro x10\nArrumar o Carro\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 2)//Reparar carro
			{
		         new car = GetPlayerVehicleID(playerid);
		         RepairVehicle(car);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você tem reparado com êxito carro.");
		         ShowPlayerDialog(playerid, DIALOGID+4, DIALOG_STYLE_LIST, "Tunar carro", "Suspenção\nNitro x10\nArrumar o Carro\nVoltar", "Selecionar", "Sair");
			}
			if(listitem == 3)//Voltar
            {
                 ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Tunar carro","Cores\nRodas\nVolume do Carro\nTunar Carro", "Selecionar", "Sair");
            }
		}
 	}
    if(dialogid == DIALOGID+5)
    {
		if(response)
		{
			if(listitem == 0)//Trance
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1084);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Trance Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 1)//Shadow
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1073);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Shadow Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 2)//Rimshine
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1075);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Rimshine Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 3)//Classic
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1077);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Classic Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 4)//Cutter
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1079);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Cutter Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 5)//Switch
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1080);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Switch Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 6)//Dollar
            {
		         new car = GetPlayerVehicleID(playerid);
		         AddVehicleComponent(car,1083);
		         PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
		         SendClientMessage(playerid,COLOR_YELLOW,"[BRNM]: Você adicionou Dollar Rodas.");
		         ShowPlayerDialog(playerid, DIALOGID+5, DIALOG_STYLE_LIST, "Selecione o tipo da Roda", "Trance\nShadow\nRimshine\nClassic\nCutter\nSwitch\nDollar\nVoltar", "Selecionar", "Sair");
            }
            if(listitem == 7)//Voltar
            {
		         ShowPlayerDialog(playerid, DIALOGID+2, DIALOG_STYLE_LIST, "Selecione o Tipo da Roda", "Offroad\n\nWires\nTwist\nGrove\nImport\nAtomic\nAhab\nVirtual\nAccess\nProxima Página\nVoltar", "Selecionar", "Sair");
            }
		}
	}

    if(dialogid == 5025)
    {
		if(response == 1)
		{
              OnPlayerCommandText(playerid,"/desalugarheli");
              Controle(playerid, 1);
              SendClientMessage(playerid, COLOR_GRAD1, "Helicoptero desalugado");
              RemovePlayerFromVehicle(playerid);
	          return 0;
	    }
		else if(response == 0)
		{
              RemovePlayerFromVehicle(playerid);
			  Controle(playerid, 1);
	          return 0;
        }
        return 0;
    }
    if(dialogid == DIALOG_ALUGAR)
    {
		if(response == 1)
		{
              OnPlayerCommandText(playerid,"/alugarcarro");
              Controle(playerid, 1);
	          return 0;
	    }
		else if(response == 0)
		{
			  SendClientMessage(playerid, COLOR_GRAD1, "Você optou por não alugar");
			  Controle(playerid, 1);
			  RemovePlayerFromVehicle(playerid);
	          return 0;
        }
        return 0;
	}
    if(dialogid == DIALOG_ALUGAR2)
	{
		if(response == 1)
		{
              OnPlayerCommandText(playerid,"/alugarheli");
              Controle(playerid, 1);
	          return 0;
	    }
		else if(response == 0)
		{
			  SendClientMessage(playerid, COLOR_GRAD1, "Você optou por não alugar");
			  Controle(playerid, 1);
			  RemovePlayerFromVehicle(playerid);
	          return 0;
        }
        return 0;
	}
 	if(dialogid == 2624)
	{
		if(response == 1)
		{
              OnPlayerCommandText(playerid,"/veiculo comprar");
              Controle(playerid, 1);
	          return 0;
	    }
		else if(response == 0)
		{
			  SendClientMessage(playerid, COLOR_GREY, "Você optou por não comprar o veiculo");
			  Controle(playerid, 1);
			  RemovePlayerFromVehicle(playerid);
	          return 0;
        }
        return 0;
	}
    if(dialogid == 1)
	{
        if(response == 0)
		{
            SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Ok, Caso queira fazer login posteriormente use /logar [senha]!");
            return true;
        }
        if(response >= 1)
		{
  		if(strlen(inputtext) == 0)
		{
		SetPlayerCameraPos(playerid, 1835.8206, -1030.4900, 156.1523); 
        SetPlayerCameraLookAt(playerid, 1835.1846, -1031.2672, 156.0911); 
		SetPlayerPos(playerid, 1852.4108,-1022.1168,24.0716);
		SetPlayerInterior(playerid, 0);
        ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Fazendo Seu Login:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil {FFD700}Novo{00B2EE}Mundo {FFFFFF}.\n\n{FFFFFF}Status da Conta: {00FF00}Registrada\n\n\n{FFFFFF}Acesse Nosso Portal:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/portal\n\n\n{FFFFFF}Acesse Nosso Fórum:\nwww.{FFD700}BRNM{FFFFFF}.forumeiros.com/forum\n\n\n{0000FF}Por Favor Digite Sua Senha Para Logar", "Logar", "Esperar");
        return true;
        }
        format(gstring,sizeof(gstring),"/logar %s",inputtext);
        OnPlayerCommandText(playerid,gstring);
        return true;
        }
        return true;
    }

    if(dialogid == dhitman) //dialog
    {
        if(response)
		{
            if(listitem == 0)
			{
                SetPlayerSkin(playerid, 23);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COLOR_WHITE);
            }
            if(listitem == 1)
            {
                SetPlayerSkin(playerid, 285);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_BOPE);
            }
            if(listitem == 2)
            {
                SetPlayerSkin(playerid, 117);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_YAK);
            }
            if(listitem == 3)
            {
                SetPlayerSkin(playerid, 113);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_COSA);
            }
            if(listitem == 4)
            {
                SetPlayerSkin(playerid, 270);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_GRO);
            }
            if(listitem == 5)
            {
                SetPlayerSkin(playerid, 274);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_SAMU);
            }
            if(listitem == 6)
            {
                 SetPlayerSkin(playerid, 286);
                 Controle(playerid, 1);
                 SetPlayerColor(playerid,COR_PF);
            }
            if(listitem == 7)
            {
                SetPlayerSkin(playerid, 284);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_PM);
            }
            if(listitem == 8)
            {
                SetPlayerSkin(playerid, 287);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_EXE);
            }
            if(listitem == 9)
            {
                SetPlayerSkin(playerid, 179);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_AL);
            }
            if(listitem == 10)
            {
                SetPlayerSkin(playerid, 122);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_Taliban);
            }
            if(listitem == 11)
            {
                SetPlayerSkin(playerid, 103);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_BALLAS);
            }
            if(listitem == 12)
            {
                SetPlayerSkin(playerid, 109);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_VAGOS);
            }
            if(listitem == 13)
            {
                SetPlayerSkin(playerid, 115);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_AZTECAS);
            }
            if(listitem == 14)
            {
                SetPlayerSkin(playerid, 19);
                Controle(playerid, 1);
                SetPlayerColor(playerid,0xF6000000);
            }
            if(listitem == 15)
            {
                SetPlayerSkin(playerid, 247);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_SONS);
            }
        }
        return true;
    }
    if(dialogid == 1520) //dialog
    {
        if(response)
		{
            if(listitem == 0)
			{
                SetPlayerSkin(playerid, 23);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COLOR_WHITE);
            }
            if(listitem == 1)
            {
                SetPlayerSkin(playerid, 2);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COLOR_WHITE);
            }
            if(listitem == 2)
            {
                SetPlayerSkin(playerid, 119);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COLOR_WHITE);
            }
            if(listitem == 3)
            {
                SetPlayerSkin(playerid, 286);
                Controle(playerid, 1);
                SetPlayerColor(playerid,COR_PF);
            }
        }
        return true;
    }
    if(dialogid == DIALOGID+7)
	{
        if(response)
		{
            if(listitem == 0)
			{
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
                PlayerInfo[playerid][pLuta] = 1;
            }
            if(listitem == 1)
			{
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
                PlayerInfo[playerid][pLuta] = 2;
            }
            if(listitem == 2)
			{
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
                PlayerInfo[playerid][pLuta] = 3;
            }
            if(listitem == 3)
			{
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
                PlayerInfo[playerid][pLuta] = 4;
            }
            if(listitem == 4)
			{
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
                PlayerInfo[playerid][pLuta] = 5;
            }
            if(listitem == 5)
			{
                SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
                PlayerInfo[playerid][pLuta] = 6;
            }
        }
        return true;
    }
    if(dialogid == 2)
	{
        if(response == 0)
		{
            SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Ok, Caso queira se registrar posteriormente use /registrar [senha]!");
            return true;
        }
        if(response >= 1)
		{
            if(strlen(inputtext) == 0)
			{
				PlayerPlaySound(playerid, 1183, 0.0, 0.0, 0.0);
		        SetPlayerCameraPos(playerid, 1835.8206, -1030.4900, 156.1523); 
				SetPlayerCameraLookAt(playerid, 1835.1846, -1031.2672, 156.0911); 
				SetPlayerPos(playerid, 1852.4108,-1022.1168,24.0716);
				SetPlayerInterior(playerid, 0);
                ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Fazendo Seu Registro:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil Novo Mundo{FFD700}.\n\nStatus da Conta: {FF0000}Não Registrada\n\n{FFFFFF}Use: {00FF00}Nome_Sobrenome\n\n{FFFFFF}Exemplo: {ffff00}Guru_Josh{FFFFFF}\n\n\n     www.{FFD700}brnm{FFFFFF}.forumeiros.com\n\n\n{FFFFFF}Digite Sua Senha Para Registrar !", "Registrar", "Cancelar");
                return true;
            }
            format(gstring,sizeof(gstring),"/registrar %s",inputtext);
            OnPlayerCommandText(playerid,gstring);
            return true;
        }
        return true;
    }

    if(dialogid == 900)
	{
    if(response == 1) {
        ShowPlayerDialog(playerid, 901, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Informações Básicas ::.", "Este é um servidor de RPG, Simulação de vida real.\n\n\nVocê Não mata ninguem na vida real, nao rouba ninguem na vida real.\n\n\nSe você for um civil, jogue como um civil. Se for gangster... Ai Sim, Poderá Matar e Roubar.\n\n\nNão Mate pessoas Que Não Fizeram Nada Com Você.", "Avançar", "Cancelar");
        PlayerInfo[playerid][pEmprego] = 0;       //Desbuga o emprego
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
        return 0;
    }
    else if(response == 0) {
        Kick(playerid);
        return 0;
    }
    return 0;
}
    if(dialogid == 901)
	{
	if(response == 1)
	{
			PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		  ShowPlayerDialog(playerid, 902, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Regras Básicas ::.", "Sempre respeite um adminnistrador ou helper, eles estão fazendo o melhor por você.\n\n\nNão abuse da boa vontade de nossos admins e helpers.\n\n\nNão peça admin ou helper, e nem peça para que eles aumentem seus cargos.\n\n\nNão cause terrorismo, DM, DB, não abuse de BUG's, e nunca use xiter.", "Avançar", "Cancelar");
	      return 0;
    }
	else if(response == 0)
	{
		  Kick(playerid);
          return 0;
    }
    return 0;
	}

    if(dialogid == 902)
    {
    if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
        ShowPlayerDialog(playerid, 9934, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Comando Uteis ::.", "/relatorio - Entra na fila para atendimento, /duvida - Esclareça uma duvida para um helper, /gps - Veja onde ficar os lugares importantes.\n\n\n/rg - Ver seus status, /ajuda, /meuskin - Vá até uma binco.\n\n\nDigitando /ajuda você todos esses comandos e mais alguns que você utilizará.\n\n\nNo /ajuda tem vários outros comandos que podem te ajudar.", "Avançar", "Cancelar");
        return 0;
    }
    else if(response == 0) {
        Kick(playerid);
        return 0;
    }
    return 0;
}
    if(dialogid == 9934)
    {
    if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
        ShowPlayerDialog(playerid, 903, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Tipos de Contas ::.", "Temos conta VIP Premium a partir de R$15,00 (mensal).\n\n\nEm nosso forum está todos os benefícios, use: /forum.", "Avançar", "Cancelar");
        return 0;
    }
    else if(response == 0) {
        Kick(playerid);
        return 0;
    }
    return 0;
}

  	if(dialogid == 903)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 904, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Lugares Importantes ::.", "Nosso proximo tópico, mostrará alguns lugares importantes.\n\n\nOnde você passará perto o jogo inteiro, e partes fundamentais do servidor.\n\n\nComo: Prefeitura, D.E.T.R.A.N, DP, Banco, Binco, Morro, entre outros...\n\n\nPreste muita atenção!", "Avançar", "Cancelar");
	return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}
    if(dialogid == 904)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 905, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Prefeitura ::.", "Neste local, você poderá pegar empregos.\n\n\nAqui também será onde o nosso Prefeito ficará quando eleito.", "Avançar", "Cancelar");
   		SetPlayerCameraPos(playerid, 1526.39, -1716.32, 39.36);
		SetPlayerCameraLookAt(playerid, 1522.81, -1719.80, 37.50);
		SetPlayerInterior(playerid, 0);
	return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
    return 0;
    }
    return 0;
	}

    if(dialogid == 905)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 906, DIALOG_STYLE_MSGBOX, "{00FF00}.:: D.E.T.R.A.N ::.", "Neste local, você deverá fazer a prova para tirar sua carteira de motorista.\n\n\nAqui você fará a prova, passando no teste terá sua carteira de motorista.", "Avançar", "Cancelar");
   		SetPlayerCameraPos(playerid,962.4185,-960.7972,48.3208);
		SetPlayerCameraLookAt(playerid,952.5886,-909.2940,45.7656);
		SetPlayerPos(playerid, 948.7169,-936.0564,61.4628);
		SetPlayerInterior(playerid, 0);
		return 0;
    }
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}

 if(dialogid == 906)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 907, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Centro de Licencas ::.", "Neste local, você deverá comprar todas as suas licencas.\n\n\nSeja um cidadão comprando suas licencas e respeitando a LEI.", "Avançar", "Cancelar");
   		SetPlayerCameraPos(playerid,1432.708,-1717.265,18.743);
		SetPlayerCameraLookAt(playerid,1415.447,-1702.804,13.539);
		SetPlayerPos(playerid, 1409.3607,-1713.2329,30.7422);
		SetPlayerInterior(playerid, 0);
		return 0;
    }
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}

    if(dialogid == 907)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 908, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Departamento de Policia ::.", "Neste local, ficarão os policiais de plantão e trabalhando.\n\n\nSe não souber como chamar um admin é só vir até aqui que eles vão te ajudar\n\n\nDentro dela tem portões onde apenas policias poderão abrir\n\n\nBusque por ajuda, ou denuncie crimes aqui !", "Avançar", "Cancelar");
  		SetPlayerCameraPos(playerid, 1523.97, -1644.84, 25.53);
		SetPlayerCameraLookAt(playerid, 1527.19, -1648.18, 23.67);
	    SetPlayerPos(playerid,1547.1060,-1693.2738,13.9214);
		return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}

 	if(dialogid == 908)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 909, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Hospital ::.", "Neste local, você irá se curar de qualquer doença.\n\n\nAqui fica a SA-MU, caso precise de um médico, USE: /servico samu.", "Avançar", "Cancelar");
		SetPlayerCameraPos(playerid, 2007.24, -1468.44, 38.83);
		SetPlayerCameraLookAt(playerid, 2008.82, -1464.09, 36.94);
		SetPlayerPos(playerid, 2093.5591,-1417.8904,23.9816);
		SetPlayerInterior(playerid, 0);
	return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
    return 0;
    }
    return 0;
	}

	if(dialogid == 909)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 910, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Mercado ::.", "Neste local, você poderá comprar todos seus acessórios.\n\n\nAqui você poderá comprar celular, créditos, agenda, entre outros.", "Avançar", "Cancelar");
		SetPlayerCameraPos(playerid, 1358.352,-1735.810,25.052);
		SetPlayerCameraLookAt(playerid,1351.701,-1755.566,13.346);
		SetPlayerPos(playerid, 1345.8433,-1722.0212,31.8440);
		SetPlayerInterior(playerid, 0);
	return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
    return 0;
    }
    return 0;
	}

    if(dialogid == 910)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 911, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Banco ::.", "Neste local, você pode transferir sua grana, aumentar, sacar, depositar( também há caixas eletrônicos com essas funções ).\n\n\nComo na vida real, banco aqui é feito para pagamentos, juros, saques, salários, etc...\n\n\nDica: Mantenha o máximo de grana em sua conta, pois a cada pagamento( PayDay ) os juros vão ser maiores.", "Avançar", "Cancelar");
		SetPlayerCameraPos(playerid,1463.9277,-1043.5249,31.3181);
		SetPlayerCameraLookAt(playerid,1461.7306,-1014.2181,26.6566);
		SetPlayerPos(playerid,1424.6486,-1020.7975,23.8281);
		SetPlayerInterior(playerid, 0);
		return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}
    if(dialogid == 911)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 912, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Binco ::.", "Neste local, você poderá mudar sua roupa ( skin ) para um que você goste.\n\n\nCada roupa ( skin ) que você escolher, será cobrado uma grana\n\n\nÉ só você entrar e digitar /meuskin [ ID da SKIN ] que irá mudar !", "Avançar", "Cancelar");
		SetPlayerPos(playerid, 2243.7371,-1668.1760,15.4766);
		SetPlayerCameraPos(playerid, 2264.1365,-1653.5085,19.6254);
	    SetPlayerCameraLookAt(playerid, 2243.7371,-1668.1760,15.4766);
		SetPlayerInterior(playerid, 0);
		return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}

 	if(dialogid == 912)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 913, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Ammu Nation ::.", "Neste local, você poderá comprar armas.\n\n\nAmmu Nation é para pessoas comprar armas sómente com licencas.\n\n\nUse suas armas sómente em legítima defesa, caso contrário, será preso.", "Avançar", "Cancelar");
		SetPlayerCameraPos(playerid, 1345.323,-1281.302,17.135);
	    SetPlayerCameraLookAt(playerid,1364.857,-1279.588,13.546);
	    SetPlayerPos(playerid, 1370.8888,-1279.6008,40.6484);
		SetPlayerInterior(playerid, 0);
		return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}


    if(dialogid == 913)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		ShowPlayerDialog(playerid, 914, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Morro ::.", "Neste local, é onde vão ocorrer muitas guerras entre gangs.\n\n\nPois querem dominar o morro ou por território de trafico!\n\n\nMuitas vezes é invadido pela B.O.P.E/Policia Civil/Policia Militar\n\n\nNão fique de bobeira no morro, pode ser vitima de bala perdida !", "Avançar", "Cancelar");
		SetPlayerPos(playerid, 2144.1062,-970.9034,80.0703);
		SetPlayerCameraPos(playerid,2212.5364,-989.5125,83.3038);
		SetPlayerCameraLookAt(playerid,2151.6057,-1014.4344,67.1739);
		SetPlayerInterior(playerid, 0);
		return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}
    if(dialogid == 914)
	{
	if(response == 1)
	{
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
        ShowPlayerDialog(playerid, 915, DIALOG_STYLE_MSGBOX, "{00FF00}.:: Seja Bem Vindo(a) ::.", "{FFFFFF}Seja Bem Vindo(a)\n{00EE00}Brasil{FFD700}Novo{00B2EE}Mundo{FFFFFF}.\n\n            www.{FFD700}brnm{FFFFFF}.forumeiros.com\n\n\nTenha um excelente jogo!", "Avançar", "Cancelar");
		SetPlayerCameraPos(playerid,1519.4929,-1675.6611,21.0900);
		SetPlayerPos(playerid,1547.1060,-1693.2738,13.9214);
		SetPlayerCameraLookAt(playerid,1557.2080,-1675.8904,16.1953);
		SetPlayerInterior(playerid, 0);
	return 0;
	}
	else if(response == 0)
	{
    Kick(playerid);
	return 0;
    }
    return 0;
	}
     	if(dialogid == 915 )
	    {
		if(response == 1)
		{
		SetPlayerCameraPos(playerid,1519.4929,-1675.6611,21.0900);
		SetPlayerCameraLookAt(playerid,1557.2080,-1675.8904,16.1953);
        Controle(playerid, 1);
	    ClearChatbox(playerid, 100);
		PlayerInfo[playerid][pTut] = 1;
		gNews[playerid] = 0; gFam[playerid] = 0;
		Controle(playerid, 1);
		SetPlayerVirtualWorld(playerid,0);
		MedicBill[playerid] = 0;
		SetPlayerSpawn(playerid);
		SetCameraBehindPlayer(playerid);
		PlayerInfo[playerid][pConta] = 1000;
		PlayerInfo[playerid][pCreditos] += 20;
        PlayerPlayMusic(playerid);
        RegistrationStep[playerid] = 4;
	    ResetPlayerMoney(playerid);
		GivePlayerMoney(playerid, 1000);
		SendClientMessage(playerid, 0xC1FF08AA, "==============================================");
		SendClientMessage(playerid, COLOR_WHITE, "1º:Missão: {FFD39B}Tire Sua Carteira De Motorista No D.E.T.R.A.N.");
		SendClientMessage(playerid, COLOR_WHITE, "Atenção: {FFD39B}Ícone Marcado No Mapa.");
		SendClientMessage(playerid, COLOR_WHITE, "{FFD700}Você ganhou R$1.000 reais para começar sua nova vida.");
		SetPlayerCheckpoint(playerid, 1247.9219,-1566.4723,13.5580,8.0);//detran
		SendClientMessage(playerid, 0xC1FF08AA, "==============================================");
        return 0;
	    }
		else if(response == 0)
		{
        Kick(playerid);
	    return 0;
        }
        return 0;
	    }


    if(dialogid == 3)
    {
        if(response == 0)
		{
            ThiagoInfo[playerid][Tels] = 0;
            return true;
        }
        if(response >= 1)
		{
            if(listitem == 0)
			{
                if (PlayerInfo[playerid][pPhoneBook] == 1)
				{
                    format(gstring,sizeof(gstring),"/ligar %d",ThiagoInfo[playerid][Tels]);
                    OnPlayerCommandText(playerid,gstring);
                    return true;
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "   Você não tem lista telefônica !");
                    return true;
                }
            }
            if(listitem == 1)
			{
                if (PlayerInfo[playerid][pPhoneBook] == 1)
				{
                    ShowPlayerDialog(playerid, 4, DIALOG_STYLE_INPUT, "Menu SMS", "Digite a Mensagem", "Enviar", "Cancelar");
                    return true;
                }
                else
				{
                    SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma agenda !");
                    return true;
                }
            }
            return true;
        }
    return true;
    }
    if(dialogid == 4)
	{
        if(response == 0)
		{
            ThiagoInfo[playerid][Tels] = 0;
            return true;
        }
        if(response >= 1)
		{
            format(gstring,sizeof(gstring),"/sms %d %s",ThiagoInfo[playerid][Tels],inputtext);
            OnPlayerCommandText(playerid,gstring);
            return true;
        }
        return true;
    }
    if(dialogid == 9)
	{
	    	if(response == 0)
     		{
			Controle(playerid, 0);
        	ClearChatbox(playerid, 100);
            PlayerInfo[playerid][pSex] = 2;
            SetPlayerSkin(playerid, 226);
            PlayerInfo[playerid][pSkin] = 226;
            SendClientMessage(playerid, COLOR_GREEN, "Certo, Você é Mulher, agora faremos um breve tutorial.");
            PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
            RegistrationStep[playerid] = 0;
            SetPlayerInterior(playerid, 0);
    		TutTime[playerid] = 1;
    		ComandoTutorial[playerid] = 1;
            //ShowPlayerDialog(playerid, 900, DIALOG_STYLE_MSGBOX, "{00FF00}Bem Vindo", "Este servidor é extremamente feito para você !\n\n\nTudo que foi feito aqui até hoje, tem a finalidade de que vocês possam ter uma jogabilidade altamente boa.\n\n\nAqui você vai ter uma segunda vida, com amigos, esposas, tráfico, roubo, sequestros, etc...\n\n\nNossa equipe está disposta a te ajudar, vamos fazer o possivel para agradar vocês.", "Avançar", "Cancelar");
            return true;
	    	}
	    	if(response == 1)
     		{
  			Controle(playerid, 0);
        	ClearChatbox(playerid, 100);
            PlayerInfo[playerid][pSex] = 1;
            SetPlayerSkin(playerid, 60);
            PlayerInfo[playerid][pSkin] = 60;
            SendClientMessage(playerid, COLOR_GREEN, "Certo, Você é Homem, agora faremos um breve tutorial.");
            PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
            RegistrationStep[playerid] = 0;
            SetPlayerInterior(playerid, 0);
    		TutTime[playerid] = 1;
    		ComandoTutorial[playerid] = 1;
			//ShowPlayerDialog(playerid, 900, DIALOG_STYLE_MSGBOX, "{00FF00}Bem Vindo", "Este servidor é extremamente feito para você !\n\n\nTudo que foi feito aqui até hoje, tem a finalidade de que vocês possam ter uma jogabilidade altamente boa.\n\n\nAqui você vai ter uma segunda vida, com amigos, esposas, tráfico, roubo, sequestros, etc...\n\n\nNossa equipe está disposta a te ajudar, vamos fazer o possivel para agradar vocês.", "Avançar", "Cancelar");
			return true;
	    	}
        return true;
    }


	if(dialogid == 10)
	{
	  	if(response)
		{
			if(listitem == 0)
			{
			SendClientMessage(playerid, 0x6F60FFAA, "|________________________[ Regras ]________________________|");
        	SendClientMessage(playerid, COLOR_GRAD2, "Nossas Regras:");
        	SendClientMessage(playerid, COLOR_GRAD3, "Não cometa Death-Match(DM) e Drive-By(DB).");
        	SendClientMessage(playerid, COLOR_GRAD4, "Não cometa Revenge Kill (RK).");
        	SendClientMessage(playerid, COLOR_GRAD5, "Respeite todos os Administradores e Helpers.");
        	SendClientMessage(playerid, COLOR_GRAD6, "Não use Cheater's ou programas ilegais para se beneficiar.");
        	SendClientMessage(playerid, COLOR_GRAD4, "Em caso de bug, DB, DM, RK e até mesmo cheater's, contate à um Administrador.");
        	SendClientMessage(playerid, COLOR_GRAD5, "Para entrar em uma organização use: /lideres ou /sublideres e contate um.");
        	SendClientMessage(playerid, COLOR_GRAD6, "Desejamos um bom jogo à todos, Conte Conosco!");
			SendClientMessage(playerid, 0x6F60FFAA,"______________________________________________________________________________________________");
			}
			if(listitem == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Player ]______________|");
				SendClientMessage(playerid, COLOR_WHITE,"Digite o comando desejado para mais informações!");
				SendClientMessage(playerid, 0xACFF48AA,"/logar /rg /regras /forum /relatorio /comprarnivel /profs (/orgs) /mostrarrg");
				SendClientMessage(playerid, 0xACFF48AA,"/meuskin /pagar /horas /gps /mostrarlicencas /loteria /setint /empregos /orelhao /animes");
				SendClientMessage(playerid, 0xACFF48AA,"/trancar /mudarlocal /minhaslicencas /comprararma /beber /caridade /desligarorelhao");
				SendClientMessage(playerid, 0xACFF48AA,"/abastecer /contrato /aceitar /cancelar /ejetar /servico /alugarcarro");
	  			SendClientMessage(playerid, 0xACFF48AA,"(/g)ritar (/s)usurro (/an)uncio /eu /alugarheli /alugarquarto /desalugar");
				SendClientMessage(playerid, 0xACFF48AA,"/saldo /sacar /depositar /transferir");
				SendClientMessage(playerid, 0xACFF48AA,"/laseron /laseroff /lasercor /cveiculo /capacete /tirarcapacete /oculos /bandana /larma /parma");
				SendClientMessage(playerid, 0x6F60FFAA,"______________________________________________________________________________________________");
			}
			if(listitem == 2)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Empresa ]______________|");
				SendClientMessage(playerid, COLOR_WHITE,"Digite o comando desejado para mais informações!");
				SendClientMessage(playerid, 0xACFF48AA,"/ajudaempresa (/entradaemp)resa (/nomeemp)resa /extorcao /infoempresa");
				SendClientMessage(playerid, 0xACFF48AA,"/entrar /sair /chave /venderemp (/depositaremp)resa /sacarempresa");
				SendClientMessage(playerid, 0x6F60FFAA,"______________________________________________________________________________");
			}
			if(listitem == 3)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Casa ]______________|");
				SendClientMessage(playerid, COLOR_WHITE,"Digite o comando desejado para mais informações!");
				SendClientMessage(playerid, 0xACFF48AA,"/entrar /sair /chave /vida /moveis(/mv) /mapacasa(Mostra No Mapa)");
				SendClientMessage(playerid, 0xACFF48AA,"/despejartodos /mudarcasa(1 a 10)");
				SendClientMessage(playerid, 0xACFF48AA,"/aluguel /despejar /cofrecasa  /alugada");
				SendClientMessage(playerid, 0x6F60FFAA,"______________________________________________________________________");
			}
			if(listitem == 4)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Aluguel ]______________|");
				SendClientMessage(playerid, 0xACFF48AA,"Aluguel > /desalugar /entrar /sair /trancar /mapacasa");
				SendClientMessage(playerid, 0x6F60FFAA,"______________________________________________________");
		    }
			if(listitem == 5)
			{
				if (PlayerInfo[playerid][pPnumber] > 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Celular ]______________|");
					SendClientMessage(playerid, COLOR_WHITE,"Digite o comando desejado para mais informações!");
					SendClientMessage(playerid, 0xACFF48AA,"/ligar /sms (/at)ender (/des)ligar /agenda /desativar celular");
					SendClientMessage(playerid, COLOR_WHITE,"Não se esqueça de comprar créditos na 24-7!");
					SendClientMessage(playerid, 0x6F60FFAA,"______________________________________________________________________");
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY,"Você não tem um telefone, compre um na 24-7, USE: /gps");
				}
			}
			if(listitem == 6)
			{
			    if (PlayerInfo[playerid][pLider] >= 1)
			    {
					SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Lider ]______________|");
					SendClientMessage(playerid, COLOR_WHITE,"Digite o comando desejado para mais informações!");
					SendClientMessage(playerid, 0xACFF48AA,"/convidar /demitir /limparvaga /promover /contaslider( Pedir Contas )");
					SendClientMessage(playerid, 0x6F60FFAA,"____________________________________________________________________________");
					if(PlayerInfo[playerid][pLider] == 7)
					{
						SendClientMessage(playerid, COLOR_GRAD3,"Prefeito > (/pre)feito /setartaxa /darbolsa (Distribui A bolsa familia) /desviarbolsa (Você desvia o bolsa familia)");
					}
					SendClientMessage(playerid, COLOR_DBLUE,"____________________________________________");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Líder!");
				}
			}
			if(listitem == 7)
			{
	   			SendClientMessage(playerid,COLOR_WHITE, "|______________[ Ajuda Emprego ]______________|");
      			if(PlayerInfo[playerid][pEmprego] == 1)
				{
		    		SendClientMessage(playerid,COLOR_YELLOW,"Detetive < /procurar");
				}
		    	if(PlayerInfo[playerid][pEmprego] == 2)
				{
		    		SendClientMessage(playerid,COLOR_YELLOW,"Prof. do Sexo < /transar");
		    	}
		    	else if(PlayerInfo[playerid][pEmprego] == 3)
				{
		    		SendClientMessage(playerid,COLOR_YELLOW," Vendedor de Drogas < /sistemadedrogas");
				}
		    	else if(PlayerInfo[playerid][pEmprego] == 4)
				{
		    			SendClientMessage(playerid,COLOR_LIGHTBLUE,"Mecânicos <  /guinchar /reparar /abastecercarro /bcmec");
				}
		    	else if(PlayerInfo[playerid][pEmprego] == 5)
				{
		    		SendClientMessage(playerid,COLOR_YELLOW,"Segurança < /proteger");
				}
		    	else if(PlayerInfo[playerid][pEmprego] == 6)
				{
		    		SendClientMessage(playerid,COLOR_YELLOW,"Vendedor de Armas < /pegararmasv(Morro) /trocararmasv(Trazeira da Loja de Armas) /venderarma");
				}
		    	else if(PlayerInfo[playerid][pEmprego] == 7)
				{
		    		SendClientMessage(playerid,COLOR_GREEN,"Lutador de Boxe < /lutar /statusluta");
		    	}
		    	else if(PlayerInfo[playerid][pEmprego] == 8)
				{
		    		SendClientMessage(playerid,COLOR_YELLOW,"Motorista de Ônibus < /corrida Entrar e Sair do Trabalho! /cancelar onibus(Cancelar a Corrida)  /cancelarcorrida");
				}
				else if(PlayerInfo[playerid][pEmprego] == 9)
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Mendigo < /esmola /pbarraca(por barraca) /rbarraca(retirar barraca)");
				}
				else if(PlayerInfo[playerid][pEmprego] == 10)
				{
					SendClientMessage(playerid,COLOR_YELLOW,"Caminhoneiro < /mercadorials /mercadoriasf /mercadorialv");
				}
				if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > (/r)adio (/d)epartmento (/m)egafone (/su)speito /ficha /prender /batercartao /procurados /algemar /arrastar /reforco");
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > /revistar /retirar /prender (/gov)erno /arrombar (/do)minar /desalgemar /arrombar /bafometro /multar /infoorg /ronda /tazer /rtazer");
					SendClientMessage(playerid, 0xE8FFEAAA, "Portões  > /pe - P Estacionamento | /pg - P Garagem | /pr - P Recepção | /pp - P Presos | /pv - P Vestiário");
					SendClientMessage(playerid, 0xE8FFEAAA, "Barreira > /br - Criar Barreira | /rbr - Retirar Barreira | /rbrall - Retirar Todas As Barreiras");
					SendClientMessage(playerid, 0xE8FFEAAA, "Bloqueio > /bq - Criar Bloqueio | /rbq - Retirar Bloqueio | /rbqall - Retirar Todas Os Bloqueios");
					SendClientMessage(playerid, 0xE8FFEAAA, "Para ajustar o tempo de um preso -> USE: /ajustar (no local de ajuste) | /grampear (celular de alguém)");
				}
				if(PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Governo: /equipargov (/r)adio - (/d)epartamento - (/m)egafone - /algemar - /arrastar /infoorg /tazer /rtazer");
					SendClientMessage(playerid, 0xE8FFEAAA, "Governo: /revistar - /retirar - /pp - /pgov - Portão dos Carros - /ppre - Porta Prefeitura");
					SendClientMessage(playerid, 0xE8FFEAAA, "Prefeito: (/pre)feito /darbolsa (Distribui A bolsa familia)  /desviarbolsa (Você desvia o bolsa familia)");
					SendClientMessage(playerid, 0xE8FFEAAA, "Governo: /recompensanuclear [Preço] (Colocar uma recompensa para matar o terrorista)");
				}
				if(PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10)
				{
    				SendClientMessage(playerid, 0xE8FFEAAA, "Taxistas: /corrida Entrar e Sair do Trabalho! /cancelar onibus(Cancelar a Corrida) /antaxi");
                    SendClientMessage(playerid, 0xE8FFEAAA, "Taxistas: /ptaxi - Para abrir o portao");
				}
				if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > (/r)adio (/d)epartmento (/m)egafone (/su)speito /ficha /detento /batercartao /procurados /algemar /arrastar /reforco /infoorg /tazer /rtazer");
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > /revistar /retirar /prender (/gov)erno /camera /arrombar (/do)minar /desalgemar /arrombar /bafometro /multar");
					SendClientMessage(playerid, 0xE8FFEAAA, "Portões  > /pb - Garagens");
					SendClientMessage(playerid, 0xE8FFEAAA, "Barreira > /br - Criar Barreira | /rbr - Retirar Barreira | /rbrall - Retirar Todas As Barreiras");
					SendClientMessage(playerid, 0xE8FFEAAA, "Bloqueio > /bq - Criar Bloqueio | /rbq - Retirar Bloqueio | /rbqall - Retirar Todas Os Bloqueios");
					SendClientMessage(playerid, 0xE8FFEAAA, "Para ajustar o tempo de um preso -> USE: /ajustar (no local de ajuste) | /grampear (celular de alguém)");
				}
				if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Exército > (/r)adio (/d)epartmento (/m)egafone (/su)speito /ficha /prender /batercartao /infoorg /tazer /rtazer");
					SendClientMessage(playerid, 0xE8FFEAAA, "Exército > /revistar /retirar (/gov)erno /camera /arrombar /algemar /br /rb /multar /procurados");
					SendClientMessage(playerid, 0xE8FFEAAA, "Exército > /abrirgn - Portão Principal /equipar /algemar /arrastar /desalgemar /reforco /bafometro");
					SendClientMessage(playerid, 0xE8FFEAAA, "Exército > /guerra /pontos(ver pontuação da guerra) /tirarbombas - Bloqueia os Homens Bombas");
					SendClientMessage(playerid, 0xE8FFEAAA, "Exército > /dsbombanuclear (Desarmar a bomba nuclear) /localizarbomba (Localizar bomba nuclear)");
					SendClientMessage(playerid, 0xE8FFEAAA, "Barreira > /br - Criar Barreira | /rbr - Retirar Barreira | /rbrall - Retirar Todas As Barreiras");
					SendClientMessage(playerid, 0xE8FFEAAA, "Bloqueio > /bq - Criar Bloqueio | /rbq - Retirar Bloqueio | /rbqall - Retirar Todas Os Bloqueios");
					SendClientMessage(playerid, 0xE8FFEAAA, "Para ajustar o tempo de um preso -> USE: /ajustar (no local de ajuste) | /grampear (celular de alguém)");
 		   		}
				if (PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "S.A.M.U > | (/r)adio | (/d)epartamento | /vida | /bcsamu | /infoorg | (/gov)erno");
				}
				if (PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Groove Street >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar | /ang(anuncio)");
				}
				if (PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Taliban <  /equipar /homembomba /carrobomba /tal");
					SendClientMessage(playerid, 0xE8FFEAAA, "Taliban <  (/ga)ngue /guerra /pontos(ver pontuação da guerra) /infoorg");
					SendClientMessage(playerid, 0xE8FFEAAA, "Taliban <  /sequestrar e /libertar - Fazer um sequestro");
					SendClientMessage(playerid, 0xE8FFEAAA, "Taliban <  /plantarnuclear [Tempo] [Dinheiro] /detonarnuclear");
				}
				if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Al'Qaeda <  /equipar /homembomba /carrobomba /alq");
					SendClientMessage(playerid, 0xE8FFEAAA, "Al'Qaeda <  (/ga)ngue /guerra /pontos(ver pontuação da guerra) /infoorg");
					SendClientMessage(playerid, 0xE8FFEAAA, "Al'Qaeda <  /sequestrar e /libertar - Fazer um sequestro");
					SendClientMessage(playerid, 0xE8FFEAAA, "Al'Qaeda <  /plantarnuclear [Tempo] [Dinheiro] /detonarnuclear");
					
				}
    			if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "F.A.R.C <  /equipar /homembomba /carrobomba /FARC");
					SendClientMessage(playerid, 0xE8FFEAAA, "F.A.R.C <  (/ga)ngue /guerra /pontos(ver pontuação da guerra) /infoorg");
					SendClientMessage(playerid, 0xE8FFEAAA, "F.A.R.C <  /sequestrar e /libertar - Fazer um sequestro");
				}
				if (PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > (/r)adio (/d)epartmento (/m)egafone (/su)speito /ficha /prender /batercartao /procurados /algemar /arrastar /infoorg /tazer /rtazer");
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > /revistar /retirar /prender (/gov)erno /deliver /camera /arrombar /desalgemar /bafometro /reforco /multar /ronda");
					SendClientMessage(playerid, 0xE8FFEAAA, "Portões  > /pc(Portão PC) | /ptpc (Portao Solto) | DP > /pv - Vestiário(DP) | /pr | /pp - Portao DP");
					SendClientMessage(playerid, 0xE8FFEAAA, "Barreira > /br - Criar Barreira | /rbr - Retirar Barreira | /rbrall - Retirar Todas As Barreiras");
					SendClientMessage(playerid, 0xE8FFEAAA, "Bloqueio > /bq - Criar Bloqueio | /rbq - Retirar Bloqueio | /rbqall - Retirar Todas Os Bloqueios");
					SendClientMessage(playerid, 0xE8FFEAAA, "Para ajustar o tempo de um preso -> USE: /ajustar (no local de ajuste) | /grampear (celular de alguém)");
				}
				if (PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Cosa Nostra <  /(ga)ngue /mafia /mafiavarma /mafiavkit /amarrar /desamarrar /infoorg /anmafia /abastecerhq");
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Cosa Nostra <  Portão = /acn ");
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Cosa Nostra <  Para saber como pegar seus materiais = /ajudamateriais");
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Cosa Nostra <  Para pegar ou esconder materiais va a HQ ou um territorio");
				}
				if (PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Yakuza <  /(ga)ngue /mafia /mafiavarma /mafiavkit /amarrar /desamarrar /infoorg /anmafia /abastecerhq");
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Yakuza <  Portão = /pyakuza ");
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Yakuza <  /ajudamateriais = Para saber como pegar seus materiais.");
					SendClientMessage(playerid, 0xE8FFEAAA, "Máfia Yakuza <  Para pegar ou esconder materiais va a HQ ou um territorio");
				}
				if (PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Los Aztecas >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar | /ang(anuncio) ");
				}
				if (PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Hitmans > /laptop - Computador Hitman | /arrombar(Porta das Casas) | /anhitmans");
					SendClientMessage(playerid, 0xE8FFEAAA,"Comandos > /ga - Chat Hitmans | /infoorg | /infocontratos");
					SendClientMessage(playerid, 0xE8FFEAAA,"Portão > /phit - Portão Hitmans");
				}
				if (PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
           		{
					SendClientMessage(playerid, 0xE8FFEAAA,"Ballas >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar ");
					SendClientMessage(playerid, 0xE8FFEAAA,"Ballas >  | /pballas (Abrir Portão da HQ) | (/ang)agster (Anunciar Algo");
				}
				if (PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Los Vagos >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar | /ang(anuncio) ");
				}
				if (PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Repórter >  | /noticias | /aovivo | (/preporter = Portão)");
					SendClientMessage(playerid, 0xE8FFEAAA,"Comandos >  | (/ga)ngue) | /live | /noticias [texto] | /infoorg");
				}
				if (PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Policia Federal > (/m)egafone /equipar /batercartao /procurados /presos /reforco /multar /infoorg");
					SendClientMessage(playerid, 0xE8FFEAAA,"Comandos > (/su)spect /limpar /revistar /r(adio) /d(epartamento) /do(minar) /arrombar /bafometro");
					SendClientMessage(playerid, 0xE8FFEAAA,"Portões  >  | Portôes DP LS(/pr /pp /pv /pe /pg) /ppfd (garagem)");
					SendClientMessage(playerid, 0xE8FFEAAA,"Barreira > /br - Criar Barreira | /rbr - Retirar Barreira | /rbrall - Retirar Todas As Barreiras");
					SendClientMessage(playerid, 0xE8FFEAAA,"Bloqueio > /bq - Criar Bloqueio | /rbq - Retirar Bloqueio | /rbqall - Retirar Todas Os Bloqueios");
					SendClientMessage(playerid, 0xE8FFEAAA, "Para ajustar o tempo de um preso -> USE: /ajustar (no local de ajuste) | /grampear (celular de alguém)");
				}
				if (PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Comando Vermelho >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar | /ang(anuncio) ");
				}
				if (PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Sons of Anarchy >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar | (/ang)ang ");
				}
				if (PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Drifters >  | (/ga)ng | /sequestrar & /libertar | /do(minar) | /assaltar | /infoorg | /roubar | /ang(anuncio)");
                    SendClientMessage(playerid, 0xE8FFEAAA,"Drifters >  | /tunar - Para tunar o carro");
				}
				if (PlayerInfo[playerid][pMembro] == 22 || PlayerInfo[playerid][pLider] == 22)
				{
					SendClientMessage(playerid, 0xE8FFEAAA,"Triad > /laptop - Computador Triad | /arrombar(Porta das Casas) | /antriad");
					SendClientMessage(playerid, 0xE8FFEAAA,"Comandos > /ga - Chat Triad | /infoorg | /infocontratos");
					SendClientMessage(playerid, 0xE8FFEAAA,"Portão > /ptriad - Portão Triads");
				}
				if (PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)
				{
					SendClientMessage(playerid, COR_DETRAN,"D.E.T.R.A.N>>> /r (radio) /d (departamento) /br (barreira) /rbr /bq (bloqueio) /rbq");
					SendClientMessage(playerid, COR_DETRAN,"D.E.T.R.A.N>>> /apreender (aprende um veiculo no deposito) /liberarcarro /guinchar /membros /infoorg");
					SendClientMessage(playerid, COR_DETRAN,"D.E.T.R.A.N>>> /m (megafone) /multar [id] [preço] [motivo] /govd (Anuncio da Org)");
					SendClientMessage(playerid, COR_DETRAN,"D.E.T.R.A.N>>> /retirardetran habilitacao [id] (retira a cnh do motorista, somente cargo 4+)");
					SendClientMessage(playerid, COR_DETRAN,"D.E.T.R.A.N>>> /pdeposito (Abre o portão do deposito para apreender veículos)");
					SendClientMessage(playerid, COR_DETRAN,"D.E.T.R.A.N>>  /freio(Para remover freio de mão do veiculo que vai guinchar!)");
				}
				if(PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25)
				{
					SendClientMessage(playerid, 0xE8FFEAAA, "Comandos > (/r)adio (/d)epartmento /gov /pp(Portao DP) /ptpc (Portao Solto) /soltar /autorizacao ");
				}
			}
			if(listitem == 8)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Pesca ]______________|");
				SendClientMessage(playerid, 0xACFF48AA,"Pescaria > /pescar (Tente pegar um peixe)   /peixes (Mostrar os peixes que você pegou)");
				SendClientMessage(playerid, 0xACFF48AA,"Pescaria > /soltarultimo(Jogue o último peixe Você pegou de volta) /soltartodos(jogue todos seus peixes de volta)");
				SendClientMessage(playerid, 0xACFF48AA,"Pescaria > /soltarpeixe (Liberação de uma de suas barbatanas) /vender(+ de 20 LBs | 24-7) /comer( Casas de Comida )");
				SendClientMessage(playerid, 0x6F60FFAA,"_______________________________________________________________________________________________________________________");
			}
			if(listitem == 9)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Cozinha ]______________|");
				SendClientMessage(playerid, 0xACFF48AA,"Cozinha > /cozinhar (Mostra as opcoes disponiveis) /cozido (Mostra o que ja foi cozinhado)");
				SendClientMessage(playerid, 0xACFF48AA,"Cozinha > /comer ( Come o que ja foi cozinhado )");
				SendClientMessage(playerid, 0x6F60FFAA,"____________________________________________________________________________________________");
			}
			if(listitem == 10)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Casamento ]______________|");
				SendClientMessage(playerid, 0xACFF48AA,"/padrinho (cada 1 tem que ter 1 padrinho!)");
				SendClientMessage(playerid, 0xACFF48AA,"/casar (quem pedir tem que ter 1 casa!)");
				SendClientMessage(playerid, COLOR_WHITE,"Não sabe o local? digite /gps - Igreja");
				SendClientMessage(playerid, 0xACFF48AA,"Separação(Digite: /separacao)");
				SendClientMessage(playerid, 0x6F60FFAA,"____________________________________________________");
			}
			if(listitem == 11)
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Forum ]______________|");
		   		SendClientMessage(playerid, 0xACFF48AA,"www.brnm.forumeiros.com");
		   		SendClientMessage(playerid, 0xACFF48AA,"Cadastre-se em nosso forum e veja as contas VIP.");
				SendClientMessage(playerid, 0x6F60FFAA,"__________________________________________________________________________");
			}
			if(listitem == 12)
			{
				if (PlayerInfo[playerid][pVIP] >= 0)
				{
		    		SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda VIP ]______________|");
					SendClientMessage(playerid, 0xCDB38BAA, "-> /kitvip /mala /desativar celular");
					SendClientMessage(playerid, 0xACFF48AA, "-> Localizar Carro: /v comandos do carro VIP");
					SendClientMessage(playerid, 0xACFF48AA, "-> Casas VIPS: /ajudacasa");
					SendClientMessage(playerid, 0x6F60FFAA,"___________________________________________________________________________");
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "Você não é um jogador VIP");
				}
			}
			if(listitem == 13)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Veiculos ]______________|");
		   		SendClientMessage(playerid, 0xACFF48AA,"Depois De Adquirir Seu carro na Concessionaria:");
			    SendClientMessage(playerid, 0xACFF48AA,"Use /v ");
			    SendClientMessage(playerid, 0x6F60FFAA,"____________________________________________________");
			}
			if(listitem == 14)
			{
				if(PlayerInfo[playerid][pLider] == 3 || PlayerInfo[playerid][pMembro] == 3)
				{
				   SendClientMessage(playerid, COR_EXE, "[Exército Bomba Nuclear] /dsbombanuclear (Para desarmar a bomba nuclear)");
				   SendClientMessage(playerid, COR_EXE, "[Exército Bomba Nuclear] A bomba só poderá ser detonada com as regras do servidor sujeito a punição.");
				   return true;
				}
				if(PlayerInfo[playerid][pLider] == 6 || PlayerInfo[playerid][pMembro] == 6)
				{
				   SendClientMessage(playerid, COR_Taliban, "[Taliban Bomba Nuclear] /plantarnuclear (Plantar a bomba nuclear) /desarmarnuclear (Desarmar a bomba) /detonarnuclear (Detonar a bomba)");
				   SendClientMessage(playerid, COR_Taliban, "[Taliban Bomba Nuclear] A bomba só poderá ser detonada com as regras do servidor sujeito a punição.");
				   return true;
				}
				if(PlayerInfo[playerid][pLider] == 7 || PlayerInfo[playerid][pMembro] == 7)
				{
                  SendClientMessage(playerid, COR_PRE, "[Prefeitura Bomba Nuclear] /recompensanuclear (Caso a bomba estiver ativa colocar uma recompensa para matar o terrorista)");
	              SendClientMessage(playerid, COR_PRE, "[Prefeitura Bomba Nuclear] A bomba só poderá ser detonada com as regras do servidor sujeito a punição.");
				  return true;
				}
				if(PlayerInfo[playerid][pLider] == 15 || PlayerInfo[playerid][pMembro] == 15)
				{
				   SendClientMessage(playerid, 0xEDE187, "[Al'Qaeda Bomba Nuclear] /plantarnuclear (Plantar a bomba nuclear) /desarmarnuclear (Desarmar a bomba) /detonarnuclear (Detonar a bomba)");
				   SendClientMessage(playerid, 0xEDE187, "[Al'Qaeda Bomba Nuclear] A bomba só poderá ser detonada com as regras do servidor sujeito a punição.");
				   return true;
				}

			}
			if(listitem == 15)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Seja PREMIUM ]______________|");
		   		SendClientMessage(playerid, 0xACFF48AA,"Vip Premium a partir de: {6AB4E6}R$15,00");
		   		SendClientMessage(playerid, COLOR_LIGHTRED,"Dúvidas,acesse {6AB4E6}www.brnm.forumeiros.com");
			}
            if(listitem == 16)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda PREMIUM ]______________|");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Vip Premium > /neon | /kitpremium(equipamento) | /jetpack (mochila a jato)");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Vip Premium > /kitpremium2 (kit de armas 2) | /mudarcelular");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Orgs >/orgpm(Policia Militar) | /orgbope(B.O.P.E) | /orggn(Exercito) | /orgpc(Policia Civil)");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Orgs >/orgaztecas(Los Aztecas) | /orgtaliban(Taliban) | /orghitman(Hitman) | /orgreporter(Reportagem)");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Orgs >/orgtaxista(Taxistas) | /orgcosa(Cosa Nostra) | /orgyakuza(Yakuza) | /orgpf(Policia Federal)");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Orgs >/orggroove(Groove Street) | /orgalqaeda(Al'qaeda) | /orgballas(Ballas) | /orgvagos(Los Vagos)");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Orgs >/orgcv(Comando Vermelho) | /orgspunks(Sons of Anarchy) | /orgdrift(Drifters)");
		   		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Orgs >/orgtriad(Triads) | /orgFARC (F.A.R.C) | /orgdetran(D.E.T.R.A.N) | /orgadv(Advogados)");
			}
		}
		return true;
	}

	if(dialogid == 5)
	{
		if(response == 0)
	    {
	    	ThiagoInfo[playerid][PpLoja2472] = 0;
	        return true;
      	}
	    if(response >= 1)
	    {
	    	if(listitem == 0)
		    {
      			OnPlayerCommandText(playerid,"/comprar 1");
      			ThiagoInfo[playerid][PpLoja2472] = 0;
     			return true;
		    }
		    if(listitem == 1)
		    {
	    		OnPlayerCommandText(playerid,"/comprar 2");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 2)
		    {
			   	OnPlayerCommandText(playerid,"/comprar 3");
			   	ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 3)
		    {
	    		OnPlayerCommandText(playerid,"/comprar 4");
		    	ThiagoInfo[playerid][PpLoja2472] = 0;
       			return true;
		    }
		    if(listitem == 4)
		    {
	    		OnPlayerCommandText(playerid,"/comprar 5");
	    		ThiagoInfo[playerid][PpLoja2472] = 0;
      			return true;
		    }
		    if(listitem == 5)
		    {
			    OnPlayerCommandText(playerid,"/comprar 6");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 6)
		    {
			    OnPlayerCommandText(playerid,"/comprar 7");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 7)
		    {
			    OnPlayerCommandText(playerid,"/comprar 8");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 8)
		    {
			    OnPlayerCommandText(playerid,"/comprar 9");
		    	ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 9)
		    {
	    		OnPlayerCommandText(playerid,"/comprar 10");
	    		ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 10)
		    {
	    		OnPlayerCommandText(playerid,"/comprar 11");
	    		ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 11)
		    {
			    OnPlayerCommandText(playerid,"/comprar 12");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 12)
		    {
			    OnPlayerCommandText(playerid,"/comprar 13");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    if(listitem == 13)
		    {
			    OnPlayerCommandText(playerid,"/comprar 14");
			    ThiagoInfo[playerid][PpLoja2472] = 0;
			    return true;
		    }
		    ThiagoInfo[playerid][PpLoja2472] = 0;
      		return true;
      	}
	}
	if(dialogid == 6)
	{
		if(response == 0)
		{
    	    ThiagoInfo[playerid][PLojaA1] = 0;
		    ThiagoInfo[playerid][PLojaA2] = 0;
		    return true;
		}
		if(response == 1)
		{
			if(listitem == 0)
		    {
   				ShowPlayerDialog(playerid, 8, DIALOG_STYLE_LIST, "Escolha seu Kit Vip", "Kit Vip\nKit Premium\nKit Premium Nº2", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 1)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "eagle", 0, strlen("eagle"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 2)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "mp5", 0, strlen("mp5"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 3)
		    {
		    	strmid(ThiagoInfo[playerid][ArmaLoja], "shotgun", 0, strlen("shotgun"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 4)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "ak47", 0, strlen("ak47"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 5)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "m4", 0, strlen("m4"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 6)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "rifle", 0, strlen("rifle"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 7)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "parachute", 0, strlen("parachute"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 8)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "golfclub", 0, strlen("golfclub"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 9)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "nightstick", 0, strlen("nightstick"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 10)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "baseballbat", 0, strlen("baseballbat"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 11)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "shovel", 0, strlen("shovel"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 12)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "poolcue", 0, strlen("poolcue"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 13)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "purpledildo", 0, strlen("purpledildo"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 14)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "whitedildo", 0, strlen("whitedildo"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 15)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "longwhitedildo", 0, strlen("longwhitedildo"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 16)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "whitedildo2", 0, strlen("whitedildo2"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 17)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "flowers", 0, strlen("flowers"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 18)
		    {
		        strmid(ThiagoInfo[playerid][ArmaLoja], "cane", 0, strlen("cane"), 255);
		        ShowPlayerDialog(playerid, 7, DIALOG_STYLE_INPUT, "Escolha a quantidade de Munição", "Digite a quantidade de Munição que você deseja!", "Confirmar", "Cancelar");
		        return true;
		    }
		    if(listitem == 19)
		    {
				SetPlayerArmour(playerid, 100);
				GivePlayerMoney(playerid,-3000);
				SendClientMessage(playerid, COLOR_WHITE,"Você comprou um colete por R$3.000");

		        return true;
		    }
		    ThiagoInfo[playerid][PLojaA1] = 0;
		    ThiagoInfo[playerid][PLojaA2] = 0;
		    return true;
		}
        return true;
    }
    if(dialogid == 7)
    {
        if(response == 0)
        {
            ThiagoInfo[playerid][PLojaA1] = 0;
		    ThiagoInfo[playerid][PLojaA2] = 0;
		    ThiagoInfo[playerid][ArmaLoja] = 0;
            return true;
        }
        if(response == 1)
        {
            format(gstring,sizeof(gstring),"/comprararma %s %d",ThiagoInfo[playerid][ArmaLoja],strval(inputtext));
            OnPlayerCommandText(playerid,gstring);
            ThiagoInfo[playerid][PLojaA1] = 0;
		    ThiagoInfo[playerid][PLojaA2] = 0;
		    ThiagoInfo[playerid][ArmaLoja] = 0;
            return true;
        }
        ThiagoInfo[playerid][PLojaA1] = 0;
    	ThiagoInfo[playerid][PLojaA2] = 0;
    	ThiagoInfo[playerid][ArmaLoja] = 0;
        return true;
    }
    if(dialogid == 8)
    {
        if(response == 0)
        {
            ThiagoInfo[playerid][PLojaA1] = 0;
		    ThiagoInfo[playerid][PLojaA2] = 0;
            return true;
        }
        if(response == 1)
        {
            if(listitem == 0)
		    {
            	OnPlayerCommandText(playerid,"/kitvip");
            	ThiagoInfo[playerid][PLojaA1] = 0;
		    	ThiagoInfo[playerid][PLojaA2] = 0;
		    	ThiagoInfo[playerid][ArmaLoja] = 0;
            	return true;
			}
   			if(listitem == 1)
		    {
            	OnPlayerCommandText(playerid,"/kitpremium");
            	ThiagoInfo[playerid][PLojaA1] = 0;
		    	ThiagoInfo[playerid][PLojaA2] = 0;
		    	ThiagoInfo[playerid][ArmaLoja] = 0;
            	return true;
			}
			if(listitem == 2)
		    {
            	OnPlayerCommandText(playerid,"/kitpremium2");
            	ThiagoInfo[playerid][PLojaA1] = 0;
		    	ThiagoInfo[playerid][PLojaA2] = 0;
		    	ThiagoInfo[playerid][ArmaLoja] = 0;
            	return true;
			}
			return true;
        }
        ThiagoInfo[playerid][PLojaA1] = 0;
    	ThiagoInfo[playerid][PLojaA2] = 0;
    	ThiagoInfo[playerid][ArmaLoja] = 0;
        return true;
    }

   	if(dialogid == TELEPORTE){Controle(playerid, 1);if(!response) { return true; }
	switch(listitem){
	case 0:{ShowPlayerDialog(playerid,TELEPORTE+1,DIALOG_STYLE_LIST,"Head Quarters","Policia Militar\nB.O.P.E\nExército\nS.A.M.U\nLos Aztecas\nTaliban\nPrefeitura\nHitmans\nRede Globo\nTaxistas\nPolicia Federal\nMafia Cosa Nostra\nMafia Yakuza\nGroove Street\nAl'Qaeda\nPolicia Civil\nBallas\nLos Vagos\nComando Vermelho\nSons of Anarchy\nDrifters\nTriads\nF.A.R.C\nMecanicos\nCaminhoneiros\nD.E.T.R.A.N\nAdvogados","Selecionar","Cancelar");}
	case 1:{ShowPlayerDialog(playerid,TELEPORTE+2,DIALOG_STYLE_LIST,"Territorios","Favela (Gang)\nPista de Skate (Gang)\nPraca do Aeroporto (Gang)\nPark Glen (Gang)\nEstacao Unity (Mafia)\nCasarao (Mafia)","Selecionar","Cancelar");}
 	case 2:{ShowPlayerDialog(playerid,TELEPORTE+3,DIALOG_STYLE_LIST,"Locais em Geral","Prefeitura\nDepartamento de Policia\nMercado de Commerce\nLoja de Armas\nAmmu Nation\nBinco (Loja de Roupas)\nAluguel de Carros\nCentro de Licencas\nHospital\nPosto de Idlewood\nBanco\nLoterica\nConcessionaria\nZIP (Loja de Roupas)\nVICTIM (Loja de Roupas)\nPosto de Dillimore\nPosto de Temple\nMercado de Ganton\nAuto Escola","Selecionar","Cancelar");}
    case 3:{ShowPlayerDialog(playerid,TELEPORTE+4,DIALOG_STYLE_LIST,"Eventos","Aeroporto de Los Santos\nAeroporto de San Fierro\nAeroporto de Las Venturas\nEvento Rally\nEvento Kart\nArena x1\nEvento Bate-Bate\nMonte de San Andreas\nPredio","Selecionar","Cancelar");}}}
   	if(dialogid == TELEPORTE+1){Controle(playerid, 1);EmDialog[playerid] = 0;if(response == 0) { return SendClientMessage(playerid,COLOR_WHITE,"Você cancelou o menu de teleportes."); }
	switch(listitem){
 	case 0:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1538.2189,-1681.6970,5.8906);}
 	case 1:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1289.5243,-1646.7668,13.5469);}
 	case 2:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-1347.0657,498.5268,11.1953);}
    case 3:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1194.0302,-1323.0651,13.3984);}
 	case 4:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1691.0067,-2112.9229,13.3828);}
    case 5:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1108.5941,-306.8200,73.9922);}
 	case 6:{SetPlayerInterior(playerid,3);
    SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,355.4489,162.4052,1025.7964);}
    case 7:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,954.4877,-1533.4193,13.5780);}
 	case 8:{SetPlayerInterior(playerid,0);
    SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,740.3707,-1348.3239,13.5100);}
 	case 9:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1001.5851,-1447.9072,13.5469);}
 	case 10:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,611.1056,-583.5060,18.2109);}
 	case 11:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,309.4009,-1161.1469,80.9141);}
 	case 12:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,681.2902,-1274.3928,13.5805);}
 	case 13:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2511.3423,-1671.1489,13.4475);}
 	case 14:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,404.9639,2535.7507,16.5460);}
 	case 15:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,939.5961,-1224.0160,16.2889);}
 	case 16:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1145.1360,-1179.8810,32.0275);}
	case 17:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2814.3884,-1182.9852,25.2631);}
 	case 18:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2185.1260,-1765.0551,13.3761);}
 	case 19:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,681.3267,-481.9659,16.1875);}
 	case 20:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2794.2378,-1604.6234,10.9283);}
 	case 21:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1620.6208,-1868.0526,13.3828);}
 	case 22:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-395.0352,1746.6198,42.4297);}
	case 23:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1805.0187,-1712.6077,13.5424);}
	case 24:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-76.2681,-1125.6843,1.0781);}
	case 25:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1681.9291,-1634.4017,13.5469);}
	case 26:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1368.3641,-1090.2063,24.5433);}}}

	if(dialogid == TELEPORTE+2){Controle(playerid, 1);EmDialog[playerid] = 0;if(response == 0) { return SendClientMessage(playerid,COLOR_WHITE,"Você cancelou o menu de teleportes."); }
	switch(listitem){
	case 0:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2155.7847,-1010.8846,62.9648);}
	case 1:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1919.1139,-1411.3921,13.5703);}
	case 2:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1437.7145,-2287.4380,13.5469);}
	case 3:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1869.9398,-1182.6571,23.8281);}
	case 4:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1741.1454,-1945.1676,13.5640);}
	case 5:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1242.5569,-2036.5902,60.0824);}}}


	if(dialogid == TELEPORTE+3){Controle(playerid, 1);EmDialog[playerid] = 0;if(response == 0) { return SendClientMessage(playerid,COLOR_WHITE,"Você cancelou o menu de teleportes."); }
	switch(listitem){
	case 0:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1481.1926,-1764.2736,18.7958);}
 	case 1:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1546.2761,-1675.5995,13.5620);}
 	case 2:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1350.4865,-1753.2505,13.3582);}
 	case 3:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1790.5725,-1167.3705,23.8281);}
 	case 4:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1362.2240,-1279.7227,13.3828);}
	case 5:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2244.7954,-1663.5021,15.4766);}
 	case 6:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2155.4363,-1171.3413,23.8206);}
 	case 7:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1411.5593,-1699.5270,13.5395);}
 	case 8:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2003.4354,-1444.1321,13.5621);}
 	case 9:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1928.826904,-1776.405517,13.546895);}
	case 10:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1462.395751,-1012.391174,26.843799);}
 	case 11:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1631.8547,-1172.5637,24.0843);}
 	case 12:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1637.6385,-1148.0294,23.90636);}
 	case 13:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1460.6941,-1142.9766,24.3906);}
 	case 14:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,454.1039,-1501.5459,30.8761);}
 	case 15:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,661.0214,-573.4525,16.3359);}
 	case 16:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1003.0009,-941.7861,41.6509);}
 	case 17:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2420.6565,-1738.9923,13.5469);}
 	case 18:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1247.9219,-1566.4723,13.5580);}}}

   	if(dialogid == TELEPORTE+4){Controle(playerid, 1);EmDialog[playerid] = 0;if(response == 0) { return SendClientMessage(playerid,COLOR_WHITE,"Você cancelou o menu de teleportes."); }
	switch(listitem){
	case 0:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2038.5096,-2628.2659,13.5469);}
 	case 1:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-1417.0,-295.8,14.1);}
 	case 2:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1699.2,1435.1, 10.7);}
 	case 3:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-2390.8176,-2203.0850,33.2891);}
 	case 4:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-2415.3999,2219.0083,4.9844);}
	case 5:{SetPlayerInterior(playerid,1);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1416.107000,0.268620,1000.926000);}
	case 6:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,2739.1577,-1745.2816,43.7656);}
 	case 7:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,-2233.7336,-1736.8186,480.8216);}
 	case 8:{SetPlayerInterior(playerid,0);
	SetPlayerVirtualWorld(playerid,0);
	SetPlayerPos(playerid,1547.6465,-1355.1556,329.4779);}}}

 	if(dialogid == 2568)
	{
	    Controle(playerid, 1);
	    if(!response) { return true; }
		switch(listitem)
        {
            case 0:
			{
			    ShowPlayerDialog(playerid,2587,DIALOG_STYLE_LIST,"GPS Locais em Geral","Prefeitura\nDepartamento de Policia\nMercado de Commerce\nLoja de Armas 1\nAmmu Nation\nBinco (Loja de Roupas)\nAluguel de Carros\nCentro de Licencas\nHospital\nPosto de Idlewood\nBanco\nLoterica\nConcessionaria\nZIP (Loja de Roupas)\nVICTIM (Loja de Roupas)\nPosto de Dillimore\nPosto de Temple\nMercado de Ganton\nAuto-escola\nAbrigo Nuclear","Selecionar","Voltar");
			}
			case 1:
			{
			    ShowPlayerDialog(playerid,2588,DIALOG_STYLE_LIST,"GPS Head Quarters","Policia Militar\nB.O.P.E\nExército\nS.A.M.U\nLos Aztecas\nTaliban\nPrefeitura\nHitmans\nRede Globo\nTaxistas\nPolicia Federal\nMafia Cosa Nostra\nMafia Yakuza\nGroove Street\nAl'Qaeda\nPolicia Civil\nBallas\nLos Vagos\nComando Vermelho\nSons of Anarchy\nDrifters\nTriads\nF.A.R.C\nCaminhoneiros\nD.E.T.R.A.N\nAdvogados","Selecionar","Voltar");
			}
			case 2:
			{
			    ShowPlayerDialog(playerid,2570,DIALOG_STYLE_LIST,"GPS Territorios","Favela (Gang)\nPista de Skate (Gang)\nPraca do Aeroporto (Gang)\nPark Glen (Gang)\nEstacao Unity (Mafia)\nCasarao (Mafia)","Selecionar","Voltar");
			}
			case 3:
			{
				ShowPlayerDialog(playerid, DialogCasaGPS, DIALOG_STYLE_INPUT, "GPS Casas", "Digite o numero da Casa !", "Confirmar", "Cancelar");
			}
			case 4:
			{
				ShowPlayerDialog(playerid, DialogEmpresaGPS, DIALOG_STYLE_LIST, "GPS Empresas e Mini Empresas", "Empresas\nMini Empresas", "Confirmar", "Cancelar");
			}
			case 5:
			{
                SetPlayerCheckpoint(playerid, -1440.6678, -1540.6213, 101.7578, 5.0);
                SendClientMessage(playerid, COLOR_LIGHTBLUE, "Mercado Negro marcado no mapa!");
			}
			case 6:
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "O GPS foi desligado!");
			    DisablePlayerCheckpoint(playerid);
			}
		}
	}
	if(dialogid == DialogCasaGPS)
 	{
		if(response == 0)
	    {
	         return true;
	    }
	    if(response == 1)
	    {
	        new CasaThiago = strval(inputtext);
    		if(CasaThiago < 0 || CasaThiago > 235) { SendClientMessage(playerid, COR_CINZA1, "Casas de 0 à 235."); return true; }
    		TruckMission[playerid] = 0;
            format(string, sizeof(string), "A casa %d foi marcada de vermelho no mapa!",strval(inputtext));
            SendClientMessage(playerid, VERDE2, string);
		    SetPlayerCheckpoint(playerid, HouseInfo[strval(inputtext)][hEntrancex], HouseInfo[strval(inputtext)][hEntrancey], HouseInfo[strval(inputtext)][hEntrancez], 3.0);
			return true;
   		}
	    return true;
   	}
   	if(dialogid == DialogEmpresaGPS)
    {
    	if(response == 0)
	    {
	    	return true;
      	}
       	if(response >= 1)
        {
	    	if(listitem == 0)
			{
   				ShowPlayerDialog(playerid, PegandoEmpresaTH, DIALOG_STYLE_INPUT, "GPS", "Digite o numero da Empresa !", "Confirmar", "Cancelar");
       			return true;
   			}
		    if(listitem == 1)
		    {
      			ShowPlayerDialog(playerid, PegandoMiniEmpresaTH, DIALOG_STYLE_INPUT, "GPS", "Digite o numero da Mini Empresa !", "Confirmar", "Cancelar");
      			return true;
		    }
   			return true;
      	}
       	return true;
   	}
    if(dialogid == PegandoEmpresaTH)
    {
   		if(response == 0)
     	{
      		return true;
        }
        if(response == 1)
        {
			new EmpresaThiago = strval(inputtext);
        	if(EmpresaThiago < 0 || EmpresaThiago > 9) { SendClientMessage(playerid, COR_CINZA1, "Empresas de 0 à 9."); return true; }
         	/*{
          		format(string, sizeof(string), "Empresas de 0 à 9.");
          		SendClientMessage(playerid, COR_CINZA1, string);
          		return true;
            }*/
            TruckMission[playerid] = 0;
            format(string, sizeof(string), "A Empresa %d foi marcada de vermelho no radar!",strval(inputtext));
            SendClientMessage(playerid, VERDE2, string);
            //PoderosoInfo[playerid][pGps] = 1;
		    SetPlayerCheckpoint(playerid,BizzInfo[strval(inputtext)][bEntranceX],BizzInfo[strval(inputtext)][bEntranceY],BizzInfo[strval(inputtext)][bEntranceZ], 3.0);
			return true;
   		}
  		return true;
	}
	if(dialogid == PegandoMiniEmpresaTH)
	{
		if(response == 0)
	    {
	    	return true;
      	}
       	if(response == 1)
        {
            new MEmpresaThiago = strval(inputtext);
        	if(MEmpresaThiago < 0 || MEmpresaThiago > 26) { SendClientMessage(playerid, COR_CINZA1, "Mini Empresas de 0 à 26."); return true; }
         	/*{
         	    format(string, sizeof(string), "Mini Empresas de 0 à 23.");
          		SendClientMessage(playerid, COR_CINZA1, string);
          		return true;
           	}*/
           	TruckMission[playerid] = 0;
           	format(string, sizeof(string), "A Mini Empresa %d foi marcada de vermelho no radar!",strval(inputtext));
            SendClientMessage(playerid, VERDE2, string);
            //PoderosoInfo[playerid][pGps] = 1;
		    SetPlayerCheckpoint(playerid,SBizzInfo[strval(inputtext)][sbEntranceX],SBizzInfo[strval(inputtext)][sbEntranceY],SBizzInfo[strval(inputtext)][sbEntranceZ], 3.0);
			return true;
   		}
     	return true;
	}
//FIM SISTEMA DE BANCO
	if(dialogid == 2587)
	{
		Controle(playerid, 1);
		EmDialog[playerid] = 0;
		if(response == 0) { return ShowPlayerDialog(playerid,2568,DIALOG_STYLE_LIST,"{D54DF0}GPS do {00EE00}Brasil {FFD700}Novo {00B2EE}Mundo{FFFFFF}","Locais em Geral\nHead Quarters\nTerritorios\nCasas Por ID\nEmpresas Por ID\nMercado Negro\nDesligar GPS","Aceitar","Cancelar");}
		switch(listitem)
        {
            case 0:
			{
                TruckMission[playerid] = 0;
            	SetPlayerCheckpoint(playerid, 1481.1926,-1764.2736,18.7958,8.0);//prefeitura
            }
            case 1:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1546.2761,-1675.5995,13.5620,8.0);//DP
            }
            case 2:
			{
                TruckMission[playerid] = 0;
 				SetPlayerCheckpoint(playerid, 1350.4865,-1753.2505,13.3582,8.0);//24-7
            }
            case 3:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1790.5725,-1167.3705,23.8281,8.0);//Loja de armas
            }
            case 4:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1362.2240,-1279.7227,13.3828,8.0);//Ammu Nation
            }
            case 5:
			{
                TruckMission[playerid] = 0;
            	SetPlayerCheckpoint(playerid, 2244.7954,-1663.5021,15.4766,8.0);//Binco
            }
            case 6:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 2155.4363,-1171.3413,23.8206,8.0);//Aluguel de Carros
            }
            case 7:
			{
                TruckMission[playerid] = 0;
 				SetPlayerCheckpoint(playerid, 1411.5593,-1699.5270,13.5395,8.0);//Centro de Licencas
            }
            case 8:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 2003.4354,-1444.1321,13.5621,8.0);//Hospital
            }
            case 9:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1928.826904,-1776.405517,13.546895,8.0);//Posto Idlewood
            }
            case 10:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1462.395751,-1012.391174,26.843799,8.0);//Banco
            }
            case 11:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1631.8547,-1172.5637,24.0843,8.0);//Loterica
            }
            case 12:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1637.6385,-1148.0294,23.90636,8.0);//Concessionaria
            }
            case 13:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1460.6941,-1142.9766,24.3906,8.0);//zip
            }
            case 14:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 454.1039,-1501.5459,30.8761,8.0);//victim
            }
            case 15:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 661.0214,-573.4525,16.3359,8.0);//posto dilli
            }
            case 16:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1003.0009,-941.7861,41.6509,8.0);//posto temple
            }
            case 17:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 2420.6565,-1738.9923,13.5469,8.0);//mercado ganton
            }
            case 18:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1247.9219,-1566.4723,13.5580,8.0);//detran
            }
            case 19:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1081.5096,-1701.0925,13.5469,8.0);//Abrigo Nuclear
            }

        }
	}
	if(dialogid == 2588)
	{
		Controle(playerid, 1);
		EmDialog[playerid] = 0;
		if(response == 0) { return ShowPlayerDialog(playerid,2568,DIALOG_STYLE_LIST,"{D54DF0}GPS do {00FF04}LosSantos","Locais em Geral\nHead Quarters\nTerritorios\nCasas Por ID\nEmpresas Por ID\nMercado Negro\nDesligar GPS","Aceitar","Sair"); }
		switch(listitem)
        {
            case 0:
			{
                TruckMission[playerid] = 0;
            	SetPlayerCheckpoint(playerid, 1554.2512,-1675.5313,16.1953,10.0);//pm
            }
            case 1:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1289.5243,-1646.7668,13.5469,10.0);//BOPE
            }
            case 2:
			{
                TruckMission[playerid] = 0;
 				SetPlayerCheckpoint(playerid, -1531.4238,481.8620,7.1875,10.0);//exercito
            }
            case 3:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1176.7383,-1323.5166,14.0361,10.0);//S.A.M.U
            }
            case 4:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1691.0067,-2112.9229,13.3828,10.0);//aztecas
            }
            case 5:
			{
                TruckMission[playerid] = 0;
            	SetPlayerCheckpoint(playerid, 2721.3413,-2405.5291,13.4609,10.0);//Taliban
            }
            case 6:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1480.9232,-1772.3057,18.7958,10.0);//prefeitura
            }
            case 7:
			{
                TruckMission[playerid] = 0;
 				SetPlayerCheckpoint(playerid, 956.1540,-1496.8230,13.5363,10.0);//hitmans
            }
            case 8:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 777.1924,-1331.4585,13.5471,10.0);//Rede Globo
            }
            case 9:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 959.2765,-1416.2083,13.5469,10.0);//taxistas
            }
            case 10:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 634.3665,-571.7362,16.3359,10.0);//pf
            }
            case 11:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 324.1488,-1191.0472,76.1912,10.0);//cosa nostra
            }
            case 12:
			{
                TruckMission[playerid] = 0;
			 	SetPlayerCheckpoint(playerid, 664.3810,-1309.7341,13.4609,10.0);//yakuza
            }
            case 13:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 2495.1697,-1690.5923,14.7656,10.0);//groove
            }
            case 14:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 414.1553,2527.6807,16.5741,10.0);//al'qaeda
            }
            case 15:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 939.5961,-1224.0160,16.2889,10.0);//PC
            }
            case 16:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1119.2783,-1159.2039,23.5971,10.0);//Ballas
            }
            case 17:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 2828.2498,-1184.3743,24.9464,10.0);//vagos
            }
            case 18:
			{
				SetPlayerCheckpoint(playerid, 2185.1260,-1765.0551,13.3761,10.0);//Comando Vermelho
            }
            case 19:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 681.3267,-481.9659,16.1875,10.0);//Sons of Anarchy
            }
            case 20:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 2838.2292,-1582.7854,11.0860,10.0);//drifters
            }
            case 21:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1620.6208,-1868.0526,13.3828,10.0);//Triads
            }
            case 22:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, -395.0352,1746.6198,42.4297,10.0);//FARC
            }
            case 23:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, -76.2681,-1125.6843,1.0781,10.0);//Caminhoneiros
            }
            case 24:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1681.9291,-1634.4017,13.5469,10.0);//Caminhoneiros
            }
            case 25:
			{
                TruckMission[playerid] = 0;
				SetPlayerCheckpoint(playerid, 1381.4417,-1088.7937,27.4795,10.0);//Advogados
            }
        }
	}
	if(dialogid == 2569)
	{
	    Controle(playerid, 1);
	    EmDialog[playerid] = 0;
	    if(response == 0) { return true; }
		switch(listitem)
        {
            case 0:
			{
		    	ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00} BR{FFD700}NM","* Você está prestes a se tornar um(a) Detetive, terá que cumprir 5 horas de contrato.\nPara se tornar Detetive, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 1;
		    	Controle(playerid, 1);
            }
            case 1:
			{
   				ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Profissional do sexo, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Profissional do sexo, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 2;
				Controle(playerid, 1);
            }
            case 2:
			{
   				ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Vendedor De Drogas, terá que cumprir 5 horas de contrato.\nPara aceitar o emprego, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 3;
				Controle(playerid, 1);
            }
            case 3:
			{
  				ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","*Você está prestes a se tornar um(a) Mecânico, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Mecânico, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 4;
		    	Controle(playerid, 1);
            }
            case 4:
			{
            	ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Segurança, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Segurança, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 5;
				Controle(playerid, 1);
            }
            case 5:
			{
   				ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Vendedor De Armas, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Vendedor De Armas, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 6;
				Controle(playerid, 1);
            }
            case 6:
			{
   				ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Boxeador, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Boxeador, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 7;
				Controle(playerid, 1);
            }
            case 7:
			{
            	ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Motorista de Onibus, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Motorista de Onibus, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 8;
				Controle(playerid, 1);
            }
            case 8:
			{
            	ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Mendigo, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Mendigo, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 9;
		    	Controle(playerid, 1);
            }
            case 9:
			{
            	ShowPlayerDialog(playerid,2586,DIALOG_STYLE_MSGBOX,"{00EE00}BR{FFD700}NM","* Você está prestes a se tornar um(a) Caminhoneiro, terá que cumprir 5 horas de contrato.\nPara se tornar um(a) Caminhoneiro, clique em aceitar.","Aceitar","Sair");
		    	GettingEmprego[playerid] = 10;
		    	Controle(playerid, 1);
            }
	     }
	}
   	if(dialogid == 2586)
	{
	    if(!response)
		{
			GettingEmprego[playerid] = 0;
			return SendClientMessage(playerid, COLOR_GREY, "Você cancelou o emprego.");
		}
		else
		{
			PlayerInfo[playerid][pEmprego] = GettingEmprego[playerid];
		    SendClientMessage(playerid, VERDE2, "Parabéns com o seu emprego, Digite /ajuda para ver os comandos do seu emprego !");
		}
	}
	if(dialogid == 2570)
	{
	    Controle(playerid, 1);
	    EmDialog[playerid] = 0;
	    if(response == 0) { return ShowPlayerDialog(playerid,2568,DIALOG_STYLE_LIST,"GPS","Locais em Geral\nHead Quarters\nTerritorios\nDesligar GPS","Aceitar","Cancelar"); }
		switch(listitem)
        {
        	case 0:
			{
            	SetPlayerCheckpoint(playerid, 2155.7847,-1010.8846,62.9648,8.0);//Favela
            }
            case 1:
			{
				SetPlayerCheckpoint(playerid, 1919.1139,-1411.3921,13.5703,8.0);//Pista de Skate
            }
            case 2:
			{
				SetPlayerCheckpoint(playerid, 1437.7145,-2287.4380,13.5469,8.0);//Praça do Aeroporto
            }
            case 3:
			{
				SetPlayerCheckpoint(playerid, 1869.9398,-1182.6571,23.8281,8.0);//Park Glen
            }
            case 4:
			{
				SetPlayerCheckpoint(playerid, 1741.1454,-1945.1676,13.5640,8.0);//Estacao Unity
            }
            case 5:
			{
            	SetPlayerCheckpoint(playerid, 1242.5569,-2036.5902,60.0824,8.0);//Casarao
            }
        }
	}
	if(dialogid == 2571)
	{
	    Controle(playerid, 1);
	    EmDialog[playerid] = 0;
	    if(response == 0) { return true; }
        switch(listitem)
        {
            case 0:
			{
                //Voo
                if(GetPlayerMoneyEx(playerid) < 800) return SendClientMessage(playerid,COLOR_GREY,"Você não tem R$800 para comprar");
                Controle(playerid, 1);
                GivePlayerMoneyEx(playerid,-800);
                BizzInfo[5][bTill] += 800;
			    ExtortionBiz(5, 800);
                PlayerInfo[playerid][pFlyLic] = 1;
                SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Comprou a Licença De Voo!");
            }
            case 1:
			{
                //Navegacao
                if(GetPlayerMoneyEx(playerid) < 800) return SendClientMessage(playerid,COLOR_GREY,"Você não R$800 para comprar!");
                Controle(playerid, 1);
                GivePlayerMoneyEx(playerid,-800);
                BizzInfo[5][bTill] += 800;
			    ExtortionBiz(5, 800);
                PlayerInfo[playerid][pBoatLic] = 1;
                SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Comprou a Licença De Navegação!");
            }
            case 2:
			{
                //Pesca
                if(GetPlayerMoneyEx(playerid) < 400) return SendClientMessage(playerid,COLOR_GREY,"Você não tem R$400 para comprar!");
                Controle(playerid, 1);
                GivePlayerMoneyEx(playerid,-400);
                BizzInfo[5][bTill] += 400;
			    ExtortionBiz(5, 400);
                PlayerInfo[playerid][pFishLic] = 1;
                SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Comprou a Licença De Pesca!");
            }
            case 3:
			{
                //Armas
                if(GetPlayerMoneyEx(playerid) < 1200) return SendClientMessage(playerid,COLOR_GREY,"Você não tem R$1200 para comprar!");
                Controle(playerid, 1);
                GivePlayerMoneyEx(playerid,-1200);
                BizzInfo[5][bTill] += 1200;
			    ExtortionBiz(5, 1200);
                PlayerInfo[playerid][pGunLic] = 1;
                SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Comprou a Licença De Armas!");
            }
        }
	}
	if(dialogid == 2572)
	{
	    Controle(playerid, 1);
	    if(!response) { return true; }
	    switch(listitem)
    	{
	       	case 0:
		    {
	            ShowPlayerDialog(playerid,2573,DIALOG_STYLE_INPUT,"Pegar Maconha","Digite a quantia de maconha em gramas","Pegar","Voltar");
 			}
 			case 1:
	        {
		    	ShowPlayerDialog(playerid,2574,DIALOG_STYLE_INPUT,"Pegar Cocaina","Digite a quantia de cocaina em gramas","Pegar","Voltar");
 			}
 			case 2:
    		{
	        	ShowPlayerDialog(playerid,2575,DIALOG_STYLE_INPUT,"Pegar Crack","Digite a quantia de crack em gramas","Pegar","Voltar");
 			}
	 		case 3:
		    {
	            ShowPlayerDialog(playerid,2576,DIALOG_STYLE_INPUT,"Esconder Maconha","Digite a quantia de maconha em gramas","Pegar","Voltar");
 			}
 			case 4:
	        {
		    	ShowPlayerDialog(playerid,2577,DIALOG_STYLE_INPUT,"Esconder Cocaina","Digite a quantia de cocaina em gramas","Pegar","Voltar");
 			}
 			case 5:
    		{
	        	ShowPlayerDialog(playerid,2578,DIALOG_STYLE_INPUT,"Esconder Crack","Digite a quantia de crack em gramas","Pegar","Voltar");
 			}
 			case 6:
		    {
	            ShowPlayerDialog(playerid,2579,DIALOG_STYLE_INPUT,"Pegar Safe Maconha","Digite a quantia de safe maconha em gramas","Pegar","Voltar");
 			}
 			case 7:
	        {
		    	ShowPlayerDialog(playerid,2580,DIALOG_STYLE_INPUT,"Pegar Safe Cocaina","Digite a quantia de safe cocaina em gramas","Pegar","Voltar");
 			}
 			case 8:
    		{
	        	ShowPlayerDialog(playerid,2581,DIALOG_STYLE_INPUT,"Pegar Safe Crack","Digite a quantia de safe crack em gramas","Pegar","Voltar");
 			}
		}
	}
	if(dialogid == 2573)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2573,DIALOG_STYLE_INPUT,"Pegar Maconha","Digite a quantia de maconha em gramas","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new price, tel;
		new level = PlayerInfo[playerid][pDrogasSkill];
        if(level >= 0 && level <= 50)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 100) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 100 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 51 && level <= 100)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 200) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 200 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 101 && level <= 200)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 350) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 350 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 201 && level <= 400)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 500) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 500 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 401)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 999) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 999 graças ao lvl de sua Habilidade!"); return true; } }
		if(PlayerInfo[playerid][pDrogas] > 4)
		{
			format(gstring, sizeof(gstring), "  Você ainda tem %d gramas de maconha, Venda tudo primeiro !", PlayerInfo[playerid][pDrogas]);
			SendClientMessage(playerid, COLOR_GREY, gstring);
		    return true;
		}
		price = strval(inputtext) * tel;
		if(GetPlayerMoney(playerid) > strval(inputtext))
		{
			format(gstring, sizeof(gstring), "* Você comprou %d gramas por R$%d.", strval(inputtext), price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			GivePlayerMoney(playerid, -price);
			SBizzInfo[17][sbTill] += price;
		    ExtortionSBiz(17, price);
			PlayerInfo[playerid][pDrogas] = strval(inputtext)+PlayerInfo[playerid][pDrogas];
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você não tem dinheiro para isso !");
		}
	}
	if(dialogid == 2574)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2574,DIALOG_STYLE_INPUT,"Pegar Cocaina","Digite a quantia de cocaina em gramas","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new price, tel;
		new level = PlayerInfo[playerid][pDrogasSkill];
        if(level >= 0 && level <= 50)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 100) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode pegar abaixo de 1 ou superior 100 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 51 && level <= 100)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 200) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode pegar abaixo de 1 ou superior 200 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 101 && level <= 200)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 350) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode pegar abaixo de 1 ou superior 350 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 201 && level <= 400)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 500) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode pegar abaixo de 1 ou superior 500 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 401)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 999) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode pegar abaixo de 1 ou superior 999 graças ao lvl de sua Habilidade!"); return true; } }
		if(PlayerInfo[playerid][pDrogas2] > 4)
		{
			format(gstring, sizeof(gstring), "  Você ainda tem %d gramas de cocaina, Venda tudo primeiro !", PlayerInfo[playerid][pDrogas2]);
			SendClientMessage(playerid, COLOR_GREY, gstring);
		    return true;
		}
		price = strval(inputtext) * tel;
		if(GetPlayerMoney(playerid) > strval(inputtext))
		{
			format(gstring, sizeof(gstring), "* Você comprou %d gramas por R$%d.", strval(inputtext), price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			GivePlayerMoney(playerid, -price);
			SBizzInfo[14][sbTill] += price;
		    ExtortionSBiz(14, price);
			PlayerInfo[playerid][pDrogas2] = strval(inputtext)+PlayerInfo[playerid][pDrogas2];
   		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você não tem dinheiro para isso !");
		}
	}
	if(dialogid == 2575)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2575,DIALOG_STYLE_INPUT,"Pegar Crack","Digite a quantia de crack em gramas","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new price, tel;
		new level = PlayerInfo[playerid][pDrogasSkill];
        if(level >= 0 && level <= 50)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 100) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 100 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 51 && level <= 100)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 200) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 200 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 101 && level <= 200)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 350) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 350 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 201 && level <= 400)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 500) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 500 graças ao lvl de sua Habilidade!"); return true; } }
		else if(level >= 401)
		{ tel = 30; if(strval(inputtext) < 1 || strval(inputtext) > 999) { SendClientMessage(playerid, COLOR_GREY, "   Você não pode ir abaixo de 1 ou superior 999 graças ao lvl de sua Habilidade!"); return true; } }
		if(PlayerInfo[playerid][pDrogas3] > 4)
		{
			format(gstring, sizeof(gstring), "  Você ainda tem %d gramas de crack, Venda tudo primeiro !", PlayerInfo[playerid][pDrogas3]);
			SendClientMessage(playerid, COLOR_GREY, gstring);
		    return true;
		}
		price = strval(inputtext) * tel;
		if(GetPlayerMoney(playerid) > strval(inputtext))
		{
			format(gstring, sizeof(gstring), "* Você comprou %d gramas por R$%d.", strval(inputtext), price);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			GivePlayerMoney(playerid, -price);
			SBizzInfo[15][sbTill] += price;
		    ExtortionSBiz(15, price);
			PlayerInfo[playerid][pDrogas3] = strval(inputtext)+PlayerInfo[playerid][pDrogas3];
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você não tem dinheiro para isso !");
		}
	}
	if(dialogid == 2576)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2576,DIALOG_STYLE_INPUT,"Esconder Maconha","Digite a quantia de crack em gramas","Esconder","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode esconder menos de 1 e nem mais de 10000");
			return true;
		}
        if(PlayerInfo[playerid][pDrogas] >= ammount)
		{
			PlayerInfo[playerid][pDrogas] = PlayerInfo[playerid][pDrogas]-ammount;
			PlayerInfo[playerid][pSafeDrogas] = PlayerInfo[playerid][pSafeDrogas]+ammount;
			format(gstring, sizeof(gstring), "* Você escondeu %d gramas!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2577)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2577,DIALOG_STYLE_INPUT,"Esconder Cocaina","Digite a quantia de cocaina em gramas","Esconder","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode esconder menos de 1 e nem mais de 10000");
			return true;
		}
        if(PlayerInfo[playerid][pDrogas2] >= ammount)
		{
			PlayerInfo[playerid][pDrogas2] = PlayerInfo[playerid][pDrogas2]-ammount;
			PlayerInfo[playerid][pSafeDrogas2] = PlayerInfo[playerid][pSafeDrogas2]+ammount;
			format(gstring, sizeof(gstring), "* Você escondeu %d gramas!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2578)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2578,DIALOG_STYLE_INPUT,"Esconder Crack","Digite a quantia de crack em gramas","Esconder","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode esconder menos de 1 e nem mais de 10000");
			return true;
		}
        if(PlayerInfo[playerid][pDrogas3] >= ammount)
		{
			PlayerInfo[playerid][pDrogas3] = PlayerInfo[playerid][pDrogas3]-ammount;
			PlayerInfo[playerid][pSafeDrogas3] = PlayerInfo[playerid][pSafeDrogas3]+ammount;
			format(gstring, sizeof(gstring), "* Você escondeu %d gramas!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2579)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2579,DIALOG_STYLE_INPUT,"Pegar Safe Maconha","Digite a quantia de maconha em gramas","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode pegar menos de 1 e nem mais de 10000");
			return true;
		}
		if(PlayerInfo[playerid][pSafeDrogas] >= ammount)
		{
			PlayerInfo[playerid][pDrogas] = PlayerInfo[playerid][pDrogas]+ammount;
			PlayerInfo[playerid][pSafeDrogas] = PlayerInfo[playerid][pSafeDrogas]-ammount;
			format(gstring, sizeof(gstring), "* Você pegou %d gramas de maconha no esconderijo!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2580)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2580,DIALOG_STYLE_INPUT,"Pegar Safe Cocaina","Digite a quantia de cocaina em gramas","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode pegar menos de 1 e nem mais de 10000");
			return true;
		}
		if(PlayerInfo[playerid][pSafeDrogas2] >= ammount)
		{
			PlayerInfo[playerid][pDrogas2] = PlayerInfo[playerid][pDrogas2]+ammount;
			PlayerInfo[playerid][pSafeDrogas2] = PlayerInfo[playerid][pSafeDrogas2]-ammount;
			format(gstring, sizeof(gstring), "* Você pegou %d gramas de cocaína no esconderijo!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2581)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2581,DIALOG_STYLE_INPUT,"Pegar Safe Crack","Digite a quantia de crack em gramas","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode pegar menos de 1 e nem mais de 10000");
			return true;
		}
		if(PlayerInfo[playerid][pSafeDrogas3] >= ammount)
		{
			PlayerInfo[playerid][pDrogas3] = PlayerInfo[playerid][pDrogas3]+ammount;
			PlayerInfo[playerid][pSafeDrogas3] = PlayerInfo[playerid][pSafeDrogas3]-ammount;
			format(gstring, sizeof(gstring), "* Você pegou %d gramas de crack no esconderijo!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2582)
	{
	    if(!response) { return true; }
		switch(listitem)
    	{
	       	case 0:
		    {
	            OnPlayerCommandText(playerid, "/equiparm");
 			}
 			case 1:
	        {
		    	ShowPlayerDialog(playerid,2583,DIALOG_STYLE_INPUT,"Pegar Safe Materiais","Digite a quantia de safe materiais que deseja pegar","Pegar","Voltar");
 			}
 			case 2:
    		{
	        	ShowPlayerDialog(playerid,2584,DIALOG_STYLE_INPUT,"Esconder Materiais","Digite a quantia de materiais para esconder","Esconder","Voltar");
 			}
		}
	}
	if(dialogid == 2583)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2582, DIALOG_STYLE_LIST, "Mafia Menu", "Equipar\nPegar Materiais\nEsconder Materiais", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2583,DIALOG_STYLE_INPUT,"Pegar Safe Materiais","Digite a quantia de safe materiais que deseja pegar","Pegar","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new quantidade = strval(inputtext);
        if(quantidade < 1 || quantidade > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode pegar menos de 1 e nem mais de 10000");
			return true;
		}
		if(PlayerInfo[playerid][psMats] >= quantidade)
		{
			PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]+quantidade;
			PlayerInfo[playerid][psMats] = PlayerInfo[playerid][psMats]-quantidade;
			format(gstring, sizeof(gstring), "* Você pegou %d materiais no esconderijo!",quantidade);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2584)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 2582, DIALOG_STYLE_LIST, "Mafia Menu", "Equipar\nPegar Materiais\nEsconder Materiais", "Confirma", "Cancela"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid,2584,DIALOG_STYLE_INPUT,"Esconder Materiais","Digite a quantia de materiais para esconder","Esconder","Voltar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor,use números !");
        	return true;
        }
        new ammount = strval(inputtext);
        if(ammount < 1 || ammount > 10000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "não pode pegar menos de 1 e nem mais de 10000");
			return true;
		}
		if(PlayerInfo[playerid][pMats] >= ammount)
		{
			PlayerInfo[playerid][pMats] = PlayerInfo[playerid][pMats]-ammount;
			PlayerInfo[playerid][psMats] = PlayerInfo[playerid][psMats]+ammount;
			format(gstring, sizeof(gstring), "* Você escondeu %d materiais!",ammount);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			return true;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não tem tudo isso!");
			return true;
		}
	}
	if(dialogid == 2585)
	{
		if(!response) { return true; }
		switch(listitem)
    	{
	       	case 0:
		    {
		        SetPlayerInterior(playerid, 0);
	            SetPlayerPos(playerid, 1524.4977,-1677.9469,6.2188);
 			}
 			case 1:
	        {
	            SetPlayerInterior(playerid, 6);
		    	SetPlayerPos(playerid, 246.2975,87.4735,1003.6406);
 			}
 			case 2:
    		{
                SetPlayerInterior(playerid, 0);
	        	SetPlayerPos(playerid, 1565.1235,-1666.9944,28.3956);
 			}
		}
	}
	if(dialogid == 99999)
	{
	 	if(!response) { return ShowPlayerDialog(playerid, 99999, DIALOG_STYLE_INPUT, "Pegar Materiais", "Digite a quantidade de materiais/nque deseja pegar", "Pegar", "Cancelar"); }
     	else if(!IsNumero(inputtext))
        {
			ShowPlayerDialog(playerid, 99999, DIALOG_STYLE_INPUT, "Pegar Materiais", "Digite a quantidade de materiais/nque deseja pegar", "Pegar", "Cancelar");
        	SendClientMessage(playerid,COLOR_GREY,"Porfavor, use números!");
        	return true;
        }
        new ammount = strval(inputtext);
        if(MatsHolding[playerid] >= 10)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você já tem pacotes !");
			return true;
        }
        if(ammount < 1 || ammount > 10)
		{
			SendClientMessage(playerid, COLOR_GREY, "   Número de pacotes mínimo 1 máximo 10 !");
	    	return true;
        }
        new price = ammount * 100;
		if(GetPlayerMoney(playerid) > price)
		{
  			format(gstring, sizeof(gstring), "* Você recebeu %d materiais por R$%d.", ammount, price);
	    	SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
	    	SendClientMessage(playerid, COLOR_GREY, "Vá até o casarão e troque pelos pacotes !");
	    	SetPlayerCheckpoint(playerid, 1241.2263,-2036.9213,60.0082,8.0);//casarao
		    GivePlayerMoney(playerid, - price);
		    MatsHolding[playerid] = ammount;
		}
		else
		{
  			format(gstring, sizeof(gstring), "   Você não tem R$%d !", price);
  			SendClientMessage(playerid, COLOR_GREY, gstring);
		}
	}
//Sistema de Cofre ORG
	if(dialogid == 12)
	{
	    if(!response) return true;
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
			if(listitem == 0)
			{
			    format(string,sizeof(string),"O Saldo da Sua Organização é de R$%d\nO que você deseja fazer ?",CofreOrg[org][Dinheiro]);
			    ShowPlayerDialog(playerid, 13, DIALOG_STYLE_MSGBOX, "Cofre da Organização", string, "Sacar", "Depositar");
			    return true;
			}
			if(listitem == 1)
			{
			    format(string,sizeof(string),"A Sua Organização tem %d de Materiais\nO que você deseja fazer ?",CofreOrg[org][Materiais]);
			    ShowPlayerDialog(playerid, 14, DIALOG_STYLE_MSGBOX, "Cofre da Organização", string, "Sacar", "Depositar");
			    return true;
			}
			if(listitem == 2)
			{
			    format(string,sizeof(string),"A Sua Organização tem %d de Maconha\nO que você deseja fazer ?",CofreOrg[org][Maconha]);
			    ShowPlayerDialog(playerid, 15, DIALOG_STYLE_MSGBOX, "Cofre da Organização", string, "Sacar", "Depositar");
			    return true;
			}
			if(listitem == 3)
			{
			    format(string,sizeof(string),"A Sua Organização tem %d de Cocaina\nO que você deseja fazer ?",CofreOrg[org][Cocaina]);
			    ShowPlayerDialog(playerid, 16, DIALOG_STYLE_MSGBOX, "Cofre da Organização", string, "Sacar", "Depositar");
			    return true;
			}
			if(listitem == 4)
			{
			    format(string,sizeof(string),"A Sua Organização tem %d de Crack\nO que você deseja fazer ?",CofreOrg[org][Crack]);
			    ShowPlayerDialog(playerid, 17, DIALOG_STYLE_MSGBOX, "Cofre da Organização", string, "Sacar", "Depositar");
			    return true;
			}
            if(listitem == 5)
			{
			    OnPlayerCommandText(playerid,"/equiparg");
			    return true;
            }
		}
	    return true;
	}
	if(dialogid == 13)
	{
	    new org = GetPlayerOrg(playerid);
	    if(response == 0)
		{
		    format(string,sizeof(string),"O Saldo da Sua Organização é de R$%d\nQuantos você deseja Depositar ?",CofreOrg[org][Dinheiro]);
		    ShowPlayerDialog(playerid, 18, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Depositar", "Cancelar");
			return true;
		}
		if(response >= 1)
		{
		    format(string,sizeof(string),"O Saldo da Sua Organização é de R$%d\nQuantos você deseja Sacar ?",CofreOrg[org][Dinheiro]);
		    ShowPlayerDialog(playerid, 19, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Sacar", "Cancelar");
			return true;
		}
	    return true;
	}
	if(dialogid == 14)
	{
	    new org = GetPlayerOrg(playerid);
	    if(response == 0)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Materiais\nQuantos você deseja Depositar ?",CofreOrg[org][Materiais]);
		    ShowPlayerDialog(playerid, 20, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Depositar", "Cancelar");
			return true;
		}
		if(response >= 1)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Materiais\nQuantos você deseja Sacar ?",CofreOrg[org][Materiais]);
		    ShowPlayerDialog(playerid, 21, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Sacar", "Cancelar");
			return true;
		}
	    return true;
	}
	if(dialogid == 15)
	{
	    new org = GetPlayerOrg(playerid);
	    if(response == 0)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Maconha\nQuantos você deseja Depositar ?",CofreOrg[org][Maconha]);
		    ShowPlayerDialog(playerid, 22, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Depositar", "Cancelar");
			return true;
		}
		if(response >= 1)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Maconha\nQuantos você deseja Sacar ?",CofreOrg[org][Maconha]);
		    ShowPlayerDialog(playerid, 23, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Sacar", "Cancelar");
			return true;
		}
	    return true;
	}
	if(dialogid == 16)
	{
	    new org = GetPlayerOrg(playerid);
	    if(response == 0)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Cocaina\nQuantos você deseja Depositar ?",CofreOrg[org][Cocaina]);
		    ShowPlayerDialog(playerid, 24, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Depositar", "Cancelar");
			return true;
		}
		if(response >= 1)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Cocaina\nQuantos você deseja Sacar ?",CofreOrg[org][Cocaina]);
		    ShowPlayerDialog(playerid, 25, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Sacar", "Cancelar");
			return true;
		}
	    return true;
	}
	if(dialogid == 17)
	{
	    new org = GetPlayerOrg(playerid);
	    if(response == 0)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Crack\nQuantos você deseja Depositar ?",CofreOrg[org][Crack]);
		    ShowPlayerDialog(playerid, 26, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Depositar", "Cancelar");
			return true;
		}
		if(response >= 1)
		{
		    format(string,sizeof(string),"A Sua Organização tem %d de Crack\nQuantos você deseja Sacar ?",CofreOrg[org][Crack]);
		    ShowPlayerDialog(playerid, 27, DIALOG_STYLE_INPUT, "Cofre da Organização", string, "Sacar", "Cancelar");
			return true;
		}
	    return true;
	}
	if(dialogid == 18)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new depgrana = strval(inputtext);
			if(GetPlayerMoneyEx(playerid) < depgrana)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Você não tem tudo isso!");
			    return true;
			}
			if(depgrana > 0)
			{
			    if(GetPlayerMoneyEx(playerid) >= depgrana)
			    {
			        GivePlayerMoneyEx(playerid, -depgrana);
		    		DepositarGranaOrg(org,depgrana);
		    		format(string,sizeof(string),"Você Depositou R$%d, o Novo Saldo é de R$%d",depgrana,CofreOrg[org][Dinheiro]);
		    		SendClientMessage(playerid,COLOR_YELLOW,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 19)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new sacgrana = strval(inputtext);
			if(sacgrana > CofreOrg[org][Dinheiro])
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Sua Organização não tem tudo isso!");
			    return true;
			}
			if(PlayerInfo[playerid][pCargo] < 5 && PlayerInfo[playerid][pLider] < 1)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Somente Líder e Sub-Líder Podem Sacar Dinheiro");
			    return true;
			}
			if(sacgrana > 0)
			{
			    if(sacgrana <= CofreOrg[org][Dinheiro])
			    {
   					GivePlayerMoneyEx(playerid, sacgrana);
		    		SacarGranaOrg(org,sacgrana);
		    		format(string,sizeof(string),"Você Sacou R$%d, o Novo Saldo é de R$%d",sacgrana,CofreOrg[org][Dinheiro]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 20)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new depmat = strval(inputtext);
		    new pMateriais = PlayerInfo[playerid][pMats];
			if(pMateriais < depmat)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Você não tem tudo isso!");
			    return true;
			}
			if(depmat > 0)
			{
			    if(pMateriais >= depmat)
			    {
			        PlayerInfo[playerid][pMats] = pMateriais-depmat;
		    		DepositarMaterialOrg(org,depmat);
		    		format(string,sizeof(string),"Você Depositou %d de Materiais, o Novo Saldo de Materiais é de %d",depmat,CofreOrg[org][Materiais]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 21)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new sacmat = strval(inputtext);
		    new pMateriais = PlayerInfo[playerid][pMats];
			if(sacmat > CofreOrg[org][Materiais])
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Sua Organização não tem tudo isso!");
			    return true;
			}
			if(PlayerInfo[playerid][pCargo] < 5 && PlayerInfo[playerid][pLider] < 1)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Somente Líder e Sub-Líder Podem Sacar Materiais");
			    return true;
			}
			if(sacmat > 0)
			{
			    if(sacmat <= CofreOrg[org][Materiais])
			    {
			        PlayerInfo[playerid][pMats] = pMateriais+sacmat;
		    		SacarMaterialOrg(org,sacmat);
		    		format(string,sizeof(string),"Você Sacou %d Materiais, o Novo Saldo de Materiais é %d",sacmat,CofreOrg[org][Materiais]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 22)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new depmac = strval(inputtext);
		    new pMaconha = PlayerInfo[playerid][pDrogas];
			if(pMaconha < depmac)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Você não tem tudo isso!");
			    return true;
			}
			if(depmac > 0)
			{
			    if(pMaconha >= depmac)
			    {
			        PlayerInfo[playerid][pDrogas] = pMaconha-depmac;
		    		DepositarMaconhaOrg(org,depmac);
		    		format(string,sizeof(string),"Você Depositou %d de Maconha, o Novo Saldo de Maconha é de %d",depmac,CofreOrg[org][Maconha]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 23)
	{
	    if(response == 0)
		{
			return true;
		}
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new sacmac = strval(inputtext);
		    new pMaconha = PlayerInfo[playerid][pDrogas];
			if(sacmac > CofreOrg[org][Maconha])
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Sua Organização não tem tudo isso!");
			    return true;
			}
			if(PlayerInfo[playerid][pCargo] < 5)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Somente Lider e Sub-Lider Podem Sacar Maconha");
			    return true;
			}
			if(sacmac > 0)
			{
			    if(sacmac <= CofreOrg[org][Maconha])
			    {
			        PlayerInfo[playerid][pDrogas] = pMaconha+sacmac;
		    		SacarMaconhaOrg(org,sacmac);
		    		format(string,sizeof(string),"Você Sacou %d de Maconha, o Novo Saldo de Maconha é de %d",sacmac,CofreOrg[org][Maconha]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 24)
	{
		if(response >= 1)
		{
      		new org = GetPlayerOrg(playerid);
		    new depcoca = strval(inputtext);
		    new pCocaina = PlayerInfo[playerid][pDrogas2];
			if(pCocaina < depcoca)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Você não tem tudo isso!");
			    return true;
			}
			if(depcoca > 0)
			{
			    if(pCocaina >= depcoca)
			    {
			        PlayerInfo[playerid][pDrogas2] = pCocaina-depcoca;
		    		DepositarCocainaOrg(org,depcoca);
		    		format(string,sizeof(string),"Você Depositou %d de Cocaina, o Novo Saldo de Cocaina é de %d",depcoca,CofreOrg[org][Cocaina]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 25)
	{
		if(response >= 1)
		{
      		new org = GetPlayerOrg(playerid);
		    new saccoca = strval(inputtext);
		    new pCocaina = PlayerInfo[playerid][pDrogas2];
			if(saccoca > CofreOrg[org][Cocaina])
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Sua Organização não tem tudo isso!");
			    return true;
			}
			if(PlayerInfo[playerid][pCargo] < 5 && PlayerInfo[playerid][pLider] < 1)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Somente Líder e Sub-Líder Podem Sacar Cocaína");
			    return true;
			}
			if(saccoca > 0)
			{
			    if(saccoca <= CofreOrg[org][Cocaina])
			    {
			        PlayerInfo[playerid][pDrogas2] = pCocaina+saccoca;
		    		SacarCocainaOrg(org,saccoca);
		    		format(string,sizeof(string),"Você Sacou %d de Cocaína, o Novo Saldo de Cocaína é de %d",saccoca,CofreOrg[org][Cocaina]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 26)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new depcrac = strval(inputtext);
		    new pCrack = PlayerInfo[playerid][pDrogas3];
			if(pCrack < depcrac)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Você não tem tudo isso!");
			    return true;
			}
			if(depcrac > 0)
			{
			    if(pCrack >= depcrac)
			    {
			        PlayerInfo[playerid][pDrogas3] = pCrack-depcrac;
		    		DepositarCrackOrg(org,depcrac);
		    		format(string,sizeof(string),"Você Depositou %d de Crack, o Novo Saldo de Crack é de %d",depcrac,CofreOrg[org][Crack]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 27)
	{
		if(response >= 1)
		{
		    new org = GetPlayerOrg(playerid);
		    new saccrac = strval(inputtext);
		    new pCrack = PlayerInfo[playerid][pDrogas3];
			if(saccrac > CofreOrg[org][Crack])
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Sua Organização não tem tudo isso!");
			    return true;
			}
			if(PlayerInfo[playerid][pCargo] < 5 && PlayerInfo[playerid][pLider] < 1)
			{
			    SendClientMessage(playerid,COLOR_GRAD1,"Somente Líder e Sub-Líder Podem Sacar Crack");
			    return true;
			}
			if(saccrac > 0)
			{
			    if(saccrac <= CofreOrg[org][Crack])
			    {
			        PlayerInfo[playerid][pDrogas3] = pCrack+saccrac;
		    		SacarCrackOrg(org,saccrac);
		    		format(string,sizeof(string),"Você Sacou %d de Crack, o Novo Saldo de Crack é de %d",saccrac,CofreOrg[org][Crack]);
		    		SendClientMessage(playerid,COLOR_GRAD1,string);
		    		return true;
	    		}
		    }
			return true;
		}
	    return true;
	}
	if(dialogid == 28)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return true;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			GameTextForPlayer(playerid, "~r~Voce nao tem dinheiro", 5000, 1);
			return true;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s come um espetinho de coração.", sendername);
				GivePlayerMoneyEx(playerid, -2);
				SetPlayerHealth(playerid, health + 20);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s come um churrasco de carne de vaca.", sendername);
				GivePlayerMoneyEx(playerid, -4);
				SetPlayerHealth(playerid, health + 50);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s come um churrasco de picanha.", sendername);
				GivePlayerMoneyEx(playerid, -5);
				SetPlayerHealth(playerid, health + 80);
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s come um churrasco de frango.", sendername);
				GivePlayerMoneyEx(playerid, -3);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s bebeu água.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(listitem == 5)
			{
				format(string, sizeof(string), "* %s bebeu suco.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return true;
	}
	if(dialogid == 29)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return true;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			GameTextForPlayer(playerid, "~r~Voce nao tem dinheiro", 5000, 1);
			return true;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s come um X-BAYCON.", sendername);
				GivePlayerMoneyEx(playerid, -2);
				SetPlayerHealth(playerid, health + 20);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s come um X-TUDO.", sendername);
				GivePlayerMoneyEx(playerid, -4);
				SetPlayerHealth(playerid, health + 50);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s come um X-ESPECIAL.", sendername);
				GivePlayerMoneyEx(playerid, -5);
				SetPlayerHealth(playerid, health + 80);
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s come um X-FRANGO.", sendername);
				GivePlayerMoneyEx(playerid, -3);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s bebeu água.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(listitem == 5)
			{
				format(string, sizeof(string), "* %s bebeu suco.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	} 
	 
	if(dialogid == sorveteria)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return 1;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem Dinheiro suficiente.");
			return 1;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Palito.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Palito e Gastou R$ 10.");
				GivePlayerMoneyEx(playerid, -10);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Copinho.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Copinho e Gastou R$ 15.");
				GivePlayerMoneyEx(playerid, -15);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Casquinha.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Casquinha e Gastou R$ 20.");
				GivePlayerMoneyEx(playerid, -20);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s toma um Sorvete na Taça.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete na Taça e Gastou R$ 8.");
				GivePlayerMoneyEx(playerid, -8);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Limão.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Limão e Gastou R$ 8.");
				GivePlayerMoneyEx(playerid, -8);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 5)
			{
				format(string, sizeof(string), "* %s toma um Sorvete De Uva.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Uva e Gastou R$ 7.");
				GivePlayerMoneyEx(playerid, -7);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 6)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Morango.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Morango e Gastou R$ 6.");
				GivePlayerMoneyEx(playerid, -6);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 7)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Flocos.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Flocos e Gastou R$ 10.");
				GivePlayerMoneyEx(playerid, -10);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 8)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Dois Amores.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Dois Amores e Gastou R$ 11.");
				GivePlayerMoneyEx(playerid, -11);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 9)
			{
				format(string, sizeof(string), "* %s toma um Sorvete de Chocolate.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você tomou um sorvete de Chocolate e Gastou R$ 15.");
				GivePlayerMoneyEx(playerid, -15);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 10)
			{
				format(string, sizeof(string), "* %s bebeu um Água com gás.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você Bebeu um Água com Gás e Gastou R$ 5.");
				GivePlayerMoneyEx(playerid, -5);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(listitem == 11)
			{
				format(string, sizeof(string), "* %s bebeu uma Coca-Cola.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você Bebeu uma Coca-Cola e Gastou R$ 20.");
				GivePlayerMoneyEx(playerid, -20);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(listitem == 12)
			{
				format(string, sizeof(string), "* %s bebeu uma Cerveja.", sendername);
				SendClientMessage(playerid, COR_TCP, "Você Bebeu um Serveja e Gastou R$ 30.");
				GivePlayerMoneyEx(playerid, -30);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
                SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
if(dialogid == DialogRestaurant)
	{
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem Dinheiro suficiente.");
			return 1;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
               ShowPlayerDialog(playerid, DialogRestaurant + 1, DIALOG_STYLE_LIST, "Cardápio Massa",
			   "Lasanha(R$25,00)\nPizza Quatro Queijos(R$30,00)\nPizza Mussarela(R$30,00)\nPizza Calabresa(R$30,00)\nPizza Portuguesa(R$30,00)\nPizza Marguerita(R$30,00)\nRisotto Especial(R$35,00)\nBatata Frita(R$13,00)\nBolinho De Bacalhau(R$20,00)\nEscondidinho(R$20,00)", "Comprar", "Voltar");
			}
			if(listitem == 1)
			{
              ShowPlayerDialog(playerid, DialogRestaurant  + 2, DIALOG_STYLE_LIST, "Cardápio Frutos Do Mar",
			  "Peixe Branco(R$20,00)\nCamarão(R$20,00)\nLagosta(R$40,00)\nSalmão Grelhado(R$30,00)\nPolvo(R$50,00)\nLula(R$50,00)", "Comprar", "Voltar");
			}
			if(listitem == 2)
			{
              ShowPlayerDialog(playerid, DialogRestaurant  + 3, DIALOG_STYLE_LIST, "Cardápio Saladas E Sopas",
			  "Salada De Alface(R$15,00)\nSopa De Legumes(R$5,00)", "Comprar", "Voltar");
			}
			if(listitem == 3)
			{
               ShowPlayerDialog(playerid, DialogRestaurant + 4, DIALOG_STYLE_LIST,
			   "Cardápio Carne's", "Pato No Forno c/ Laranja(R$40,00)\nBife a Milanesa(R$15,00)\nFilé(R$10,00)\nChurrasco a Campanha(R$30,00)\nPicanha(R$25,00)\nCostela Suina(R$20,00)\nStrogonoff(R$10,00)\nCheeseburger(R$6,00)", "Comprar", "Voltar");
			}
			if(listitem == 4)
			{
				ShowPlayerDialog(playerid, DialogRestaurant + 5, DIALOG_STYLE_LIST, "Cardápio Sobremesas",
				"Sorvete Chocolate(R$4,00)\nSorvete Morango(R$4,00)\nSorvete Creme(R$4,00)\nSorvete Baunilha(R$4,00)\nMousse Maracuja(R$5,00)\nMousse Chocolate(R$5,00)\nSundae Caramelo(R$8,00)\nSundae Chocolate(R$8,00)\nSundae Morango(R$8,00)\nSundae Creme(R$8,00)\nMilk Shake(R$6,00)\nPudim De Leite(R$4,00)\nBrownie(R$8,00)\nMorango Com Creme De Chanitly(R$10,00)", "Comprar", "Voltar");
			}
			if(listitem == 5)
			{
               ShowPlayerDialog(playerid, DialogRestaurant + 6, DIALOG_STYLE_LIST, "Cardápio Bebida's",
			   "Agua Mineral(R$2,00)\nSuco Del Vale(R$4,00)\nCoca-Cola(R$7,00)\nPepsi(R$6,00)\nCachaça(R$7,00)\nRum(R$16,00)\nIce(R$4,00)\nRed Bull(R$10,00)\nVinho Tinto(R$70,00)\nVinho Branco(R$55,00)\nLicor(R$85,00)\nConhaque(R$87,00)\nTequila(R$92,00)\nVodka Martini(R$265,00)\nVodka Smirnoff(R$35,00)\nVodka Ciroc(R$200,00)\nBacardi Big Apple(R$200,00)\nWhisky Johnnie Walker Blue Label(R$700,00)\nCaipirinha(R$15,00)\nChampagne(R$360,00)\nCappuccino(R$15,00)\nCafé Expresso(R$5,00)", "Comprar", "Voltar");
			}
		}
		return 1;
	}
	if(dialogid == DialogRestaurant + 1)
	{
	   if(response == 0)
	   {
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }else {
	   new Float: health;
	   GetPlayerHealth(playerid, health);
	   if(listitem == 0)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Lasanha.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Lasanha 25R$.");
			 GivePlayerMoneyEx(playerid, -25);
			 SetPlayerHealth(playerid, health + 25);
		 }
		 if(listitem == 1)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Pizza Quatro Queijos.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Pizza Quatro Queijos 30R$.");
			 GivePlayerMoneyEx(playerid, -30);
			 SetPlayerHealth(playerid, health + 15);
		 }
		 if(listitem == 2)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Pizza Mussarela.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Pizza Mussarela 30R$.");
			 GivePlayerMoneyEx(playerid, -30);
			 SetPlayerHealth(playerid, health + 15);
		 }
		 if(listitem == 3)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Pizza Calabresa.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Pizza Calabresa 30R$.");
			 GivePlayerMoneyEx(playerid, -30);
			 SetPlayerHealth(playerid, health + 15);
		 }
		 if(listitem == 4)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Pizza Portuguesa.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Pizza Portuguesa 30R$.");
			 GivePlayerMoneyEx(playerid, -30);
			 SetPlayerHealth(playerid, health + 15);
		 }
		 if(listitem == 5)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Pizza Marguerita.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Pizza Marguerita 30R$.");
			 GivePlayerMoneyEx(playerid, -30);
			 SetPlayerHealth(playerid, health + 15);
		 }
		 if(listitem == 6)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Risotto Especial.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Risotto Especial 35R$.");
			 GivePlayerMoneyEx(playerid, -35);
			 SetPlayerHealth(playerid, health + 20);
		 }
		 if(listitem == 7)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Batata Frita.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Batata Frita 13R$.");
			 GivePlayerMoneyEx(playerid, -13);
			 SetPlayerHealth(playerid, health + 10);
		 }
		 if(listitem == 8)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Bolinho De Bacalhau.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Bolinho De Bacalhau 20R$.");
			 GivePlayerMoneyEx(playerid, -20);
			 SetPlayerHealth(playerid, health + 20);
		 }
 	    if(listitem == 9)
		 {
             format(string, sizeof(string), "* %s comeu um(a) Escondidinho.", PlayerName(playerid));
			 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Escondidinho 20R$.");
			 GivePlayerMoneyEx(playerid, -20);
			 SetPlayerHealth(playerid, health + 20);
		 }
		 ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	   }
    	return 1;
	}
	if(dialogid == DialogRestaurant  + 2)
	{
	   if(response == 0)
	   {
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }
	   else {
	   new Float: health;
	   GetPlayerHealth(playerid, health);
	   if(listitem == 0)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Peixe Branco.", PlayerName(playerid));
         SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Peixe Branco 20R$.");
         GivePlayerMoneyEx(playerid, -20);
		 SetPlayerHealth(playerid, health + 25);
	   }
	    if(listitem == 1)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Camarão.", PlayerName(playerid));
         SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Camarão 20R$.");
         GivePlayerMoneyEx(playerid, -20);
		 SetPlayerHealth(playerid, health + 15);
	   }
	    if(listitem == 2)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Lagosta.", PlayerName(playerid));
         SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Lagosta 40R$.");
         GivePlayerMoneyEx(playerid, -40);
		 SetPlayerHealth(playerid, health + 25);
	   }
        if(listitem == 3)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Salmão Grelhado.", PlayerName(playerid));
         SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Salmão Grelhado 30R$.");
         GivePlayerMoneyEx(playerid, -30);
		 SetPlayerHealth(playerid, health + 20);
	   }
	   if(listitem == 4)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Polvo.", PlayerName(playerid));
         SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Polvo 50$.");
         GivePlayerMoneyEx(playerid, -50);
		 SetPlayerHealth(playerid, health + 30);
	   }
	   if(listitem == 5)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Lula.", PlayerName(playerid));
         SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Lula 50$.");
         GivePlayerMoneyEx(playerid, -50);
		 SetPlayerHealth(playerid, health + 30);
	   }
	  ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return true;
}
	if(dialogid == DialogRestaurant  + 3)
	{
	   if(response == 0)
	   {
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }
	   else {
	   new Float: health;
	   GetPlayerHealth(playerid, health);
	   if(listitem == 0)
	   {
        format(string, sizeof(string), "* %s comeu um(a) Salada De Alface.", PlayerName(playerid));
		SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Salada De Alface 15R$.");
		GivePlayerMoneyEx(playerid, -15);
		SetPlayerHealth(playerid, health + 20);
	   }
	   if(listitem == 1)
	   {
        format(string, sizeof(string), "* %s toma um(a) sopa de Legumes.", PlayerName(playerid));
		SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sopa De Legumes 5R$.");
		GivePlayerMoneyEx(playerid, -5);
		SetPlayerHealth(playerid, health + 10);
	   }
        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return true;
}
    if(dialogid == DialogRestaurant  + 4)
	{
	   if(response == 0)
	   {
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }
	   else {
	   new Float: health;
	   GetPlayerHealth(playerid, health);
	   if(listitem == 0)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Pato No Forno c/ Laranja.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Pato No Forno c/ Laranja 45R$.");
		 GivePlayerMoneyEx(playerid, -40);
		 SetPlayerHealth(playerid, health + 25);
	   }
	   if(listitem == 1)
	   {
         format(string, sizeof(string), "* %s comeu um(a) toma um Bife a Milanesa.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Bife a Milanesa 15R$.");
		 GivePlayerMoneyEx(playerid, -15);
		 SetPlayerHealth(playerid, health + 10);
	   }
	   if(listitem == 2)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Filé.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Filé 10R$.");
		 GivePlayerMoneyEx(playerid, -15);
		 SetPlayerHealth(playerid, health + 10);
	   }
	   if(listitem == 3)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Churrasco a Campanha.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Churrasco a Campanha 30R$.");
		 GivePlayerMoneyEx(playerid, -30);
		 SetPlayerHealth(playerid, health + 15);
	   }
      if(listitem == 4)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Picanha.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Picanha 25R$.");
		 GivePlayerMoneyEx(playerid, -25);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 5)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Costela Suina.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Costela Suina 20R$.");
		 GivePlayerMoneyEx(playerid, -20);
		 SetPlayerHealth(playerid, health + 15);
	   }
       if(listitem == 6)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Strogonoff.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Strogonoff 10R$.");
		 GivePlayerMoneyEx(playerid, -10);
		 SetPlayerHealth(playerid, health + 10);
	   }
       if(listitem == 7)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Cheeseburger.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Cheeseburger 6R$.");
		 GivePlayerMoneyEx(playerid, -6);
		 SetPlayerHealth(playerid, health + 10);
	   }
          ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return true;
}
	if(dialogid == DialogRestaurant  + 5)
	{
	   if(response == 0)
	   {
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }
	   else {
	   new Float: health;
	   GetPlayerHealth(playerid, health);
	   if(listitem == 0)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sorvete Chocolate.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sorvete Chocolate 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 5);
	   }
       if(listitem == 1)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sorvete Morango", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sorvete Morango 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 5);
	   }
       if(listitem == 2)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sorvete Creme.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sorvete Creme 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 5);
	   }
      if(listitem == 3)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sorvete Baunilha.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sorvete Chocolate 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 5);
	   }
      if(listitem == 4)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Mousse Maracuja.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Mousse Maracuja 5R$.");
		 GivePlayerMoneyEx(playerid, -5);
		 SetPlayerHealth(playerid, health + 5);
	   }
       if(listitem == 5)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Mousse Chocolate.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Mousse Chocolate 5R$.");
		 GivePlayerMoneyEx(playerid, -5);
		 SetPlayerHealth(playerid, health + 5);
	   }
	    if(listitem == 6)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sundae Caramelo.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sundae Caramelo 8R$.");
		 GivePlayerMoneyEx(playerid, -8);
		 SetPlayerHealth(playerid, health + 10);
	   }
	    if(listitem == 7)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sundae Chocolate.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sundae Chocolate 8R$.");
		 GivePlayerMoneyEx(playerid, -8);
		 SetPlayerHealth(playerid, health + 10);
	   }
	    if(listitem == 8)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sundae Morango.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sundae Morango 8R$.");
		 GivePlayerMoneyEx(playerid, -8);
		 SetPlayerHealth(playerid, health + 10);
	   }
	    if(listitem == 9)
	   {
         format(string, sizeof(string), "* %s toma um(a) Sundae Creme.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Sundae Creme 8R$.");
		 GivePlayerMoneyEx(playerid, -8);
		 SetPlayerHealth(playerid, health + 10);
	   }
	    if(listitem == 10)
	   {
         format(string, sizeof(string), "* %s toma um(a) Milk Shake.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Milk Shake 6R$.");
		 GivePlayerMoneyEx(playerid, -6);
		 SetPlayerHealth(playerid, health + 8);
	   }
      if(listitem == 11)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Pudim De Leite.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comou um(a) Pudim De Leite 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 5);
	   }
      if(listitem == 12)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Brownie.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Brownie 8R$.");
		 GivePlayerMoneyEx(playerid, -8);
		 SetPlayerHealth(playerid, health + 10);
	   }
	   if(listitem == 13)
	   {
         format(string, sizeof(string), "* %s comeu um(a) Morango Com Creme De Chanitly.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você comeu um(a) Morango Com Creme De Chanitly 10R$.");
		 GivePlayerMoneyEx(playerid, -10);
		 SetPlayerHealth(playerid, health + 15);
	   }
       ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return true;
}
if(dialogid == DialogRestaurant  + 6)
	{
	   if(response == 0)
	   {
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }
	   else {
	   new Float: health;
	   GetPlayerHealth(playerid, health);
	   if(listitem == 0)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Agua Mineral.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Agua Mineral 6R$.");
		 GivePlayerMoneyEx(playerid, -2);
		 SetPlayerHealth(playerid, health + 10);
	   }
	   if(listitem == 1)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Suco Del Vale.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Suco Del Vale 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 5);
	   }
	   if(listitem == 2)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Coca-Cola.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Coca-Cola 6R$.");
		 GivePlayerMoneyEx(playerid, -6) ;
		 SetPlayerHealth(playerid, health + 4);
	   }
	   if(listitem == 3)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Pepsi.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Pepsi 6R$.");
		 GivePlayerMoneyEx(playerid, -6);
		 SetPlayerHealth(playerid, health + 4);
       }
	   if(listitem == 4)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Cachaça.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Cachaça 7R$.");
		 GivePlayerMoneyEx(playerid, -7);
		 SetPlayerHealth(playerid, health + 6);
	   }
	   if(listitem == 5)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Rum.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Rum 16R$.");
		 GivePlayerMoneyEx(playerid, -16);
		 SetPlayerHealth(playerid, health + 8);
	   }
	   if(listitem == 6)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Ice.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Ice 4R$.");
		 GivePlayerMoneyEx(playerid, -4);
		 SetPlayerHealth(playerid, health + 6);
	   }
	   if(listitem == 7)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Red Bull.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Red Bull 10R$.");
		 GivePlayerMoneyEx(playerid, -10);
		 SetPlayerHealth(playerid, health + 7);
	   }
	   if(listitem == 8)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Vinho Tinto.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Vinho Tinto 70R$.");
		 GivePlayerMoneyEx(playerid, -70);
		 SetPlayerHealth(playerid, health + 15);
       }
	   if(listitem == 9)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Vinho Branco.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Vinho Branco 55R$.");
		 GivePlayerMoneyEx(playerid, -55);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 10)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Licor.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Licor 85R$.");
		 GivePlayerMoneyEx(playerid, -85);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 11)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Conhaque.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Conhaque 87R$.");
		 GivePlayerMoneyEx(playerid, -87);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 12)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Tequila.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Tequila 97R$.");
		 GivePlayerMoneyEx(playerid, -97);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 13)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Vodka Martini.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Vodka Martini 265R$.");
		 GivePlayerMoneyEx(playerid, -265);
		 SetPlayerHealth(playerid, health + 20);
	   }
	   if(listitem == 14)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Vodka Smirnoff.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Vodka Smirnoff 35R$.");
		 GivePlayerMoneyEx(playerid, -87);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 15)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Vodka Ciroc.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Vodka Ciroc 200R$.");
		 GivePlayerMoneyEx(playerid, -200);
		 SetPlayerHealth(playerid, health + 20);
	   }
	   if(listitem == 16)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Bacardi Big Apple.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Bacardi Big Apple 200R$.");
		 GivePlayerMoneyEx(playerid, -200);
		 SetPlayerHealth(playerid, health + 20);
	   }
	   if(listitem == 17)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Whisky Johnnie Walker Blue Label.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Whisky Johnnie Walker Blue Label 700R$.");
		 GivePlayerMoneyEx(playerid, -700);
		 SetPlayerHealth(playerid, health + 35);
	   }
	   if(listitem == 18)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Caipirinha.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Caipirinha 15R$.");
		 GivePlayerMoneyEx(playerid, -15);
		 SetPlayerHealth(playerid, health + 10);
	   }
       if(listitem == 19)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Champagne.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Champagne 360R$.");
		 GivePlayerMoneyEx(playerid, -360);
		 SetPlayerHealth(playerid, health + 15);
	   }
	   if(listitem == 20)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Cappuccino.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Cappuccino 15R$.");
		 GivePlayerMoneyEx(playerid, -15);
		 SetPlayerHealth(playerid, health + 10);
	   }
	   if(listitem == 21)
	   {
         format(string, sizeof(string), "* %s tomou um(a) Café Expresso.", PlayerName(playerid));
		 SendClientMessage(playerid, COR_TCP, "Você tomou um(a) Café Expresso 5R$.");
		 GivePlayerMoneyEx(playerid, -5);
		 SetPlayerHealth(playerid, health + 10);
	   }
	  ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	return true;
}
	if(dialogid == dialogcomerchurrasco)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return 1;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem Dinheiro suficiente.");
			return 1;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s Comeu um churrasco de Coração no Espeto.", sendername);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s Comeu um churrasco de Carne de Vaca.", sendername);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s Comeu um churrasco de Carne de Jacaré.", sendername);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s Comeu um churrasco de Carne de Frango.", sendername);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s bebeu água.", sendername);
				SetPlayerHealth(playerid, health + 10);
			}
			if(listitem == 5)
			{
				format(string, sizeof(string), "* %s bebeu suco.", sendername);
				SetPlayerHealth(playerid, health + 10);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
	if(dialogid == 30)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return true;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			GameTextForPlayer(playerid, "~r~Voce nao tem dinheiro", 5000, 1);
			return true;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s come uma pizza pequena de presunto e mussarela.", sendername);
				GivePlayerMoneyEx(playerid, -2);
				SetPlayerHealth(playerid, health + 20);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s come uma pizza grande de presunto e mussarela.", sendername);
				GivePlayerMoneyEx(playerid, -4);
				SetPlayerHealth(playerid, health + 50);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s come uma pizza extra grande.", sendername);
				GivePlayerMoneyEx(playerid, -5);
				SetPlayerHealth(playerid, health + 80);
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s come uma pizza de Bacon e Chocolate.", sendername);
				GivePlayerMoneyEx(playerid, -3);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s bebeu água.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(listitem == 5)
			{
				format(string, sizeof(string), "* %s bebeu suco.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	} 
	if(dialogid == cabeloshopping)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return 1;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Você não tem Dinheiro suficiente.");
			return 1;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s cortou o Cabelo.", sendername); 
				GivePlayerMoney(playerid, -100);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você cortou o cabelo e gastou R$100");
				SetPlayerAttachedObject( playerid, 6, 18640, 2, 0.081841, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s cortou o Cabelo.", sendername);
				GivePlayerMoney(playerid, -100); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você cortou o cabelo e gastou R$100");
				SetPlayerAttachedObject( playerid, 6, 18975, 2, 0.128191, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s cortou o Cabelo.", sendername);
				GivePlayerMoney(playerid, -100); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você cortou o cabelo e gastou R$100");
				SetPlayerAttachedObject( playerid, 6, 19077, 2, 0.124588, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s cortou o Cabelo.", sendername);
				GivePlayerMoney(playerid, -100); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você cortou o cabelo e gastou R$100");
				SetPlayerAttachedObject( playerid, 6, 19136, 2, 0.141113, 0.006911, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s cortou o Cabelo.", sendername);
				GivePlayerMoney(playerid, -100); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você cortou o cabelo e gastou R$100");
				SetPlayerAttachedObject( playerid, 6, 19274, 2, 0.099879, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			}
			if(listitem == 5)
			{
				SetPlayerAttachedObject( playerid, 6, 0, 2, 0.099879, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 );
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
    if(dialogid == 31)
	{
		new Float:health;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, health);
		if(!response) return true;
		if (GetPlayerMoneyEx(playerid) <= 0)
		{
			GameTextForPlayer(playerid, "~r~Voce nao tem dinheiro", 5000, 1);
			return true;
		}
	    if(response)
	    {
	        if(listitem == 0)
			{
				format(string, sizeof(string), "* %s come uma rosquinha pequena.", sendername);
				GivePlayerMoneyEx(playerid, -2);
				SetPlayerHealth(playerid, health + 20);
			}
			if(listitem == 1)
			{
				format(string, sizeof(string), "* %s come uma rosquinha normal.", sendername);
				GivePlayerMoneyEx(playerid, -4);
				SetPlayerHealth(playerid, health + 50);
			}
			if(listitem == 2)
			{
				format(string, sizeof(string), "* %s come uma rosquinha de chefe.", sendername);
				GivePlayerMoneyEx(playerid, -5);
				SetPlayerHealth(playerid, health + 80);
			}
			if(listitem == 3)
			{
				format(string, sizeof(string), "* %s come uma super rosquinha.", sendername);
				GivePlayerMoneyEx(playerid, -3);
				SetPlayerHealth(playerid, health + 35);
			}
			if(listitem == 4)
			{
				format(string, sizeof(string), "* %s bebeu água.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			if(listitem == 5)
			{
				format(string, sizeof(string), "* %s bebeu suco.", sendername);
				GivePlayerMoneyEx(playerid, -1);
				SetPlayerHealth(playerid, health + 10);
				ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,0,1);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
	}
	if(dialogid == DialogNPC)
	{
      if(!response) return 1;
      if(response)
      {
		 if(listitem == 0)
		 {
			ShowPlayerDialog(playerid, DialogNPC + 1, DIALOG_STYLE_LIST, "Fórum, Regras e Facebook", "1.1 Fórum\n1.2 Regras\n1.3 Facebook", "Selecionar", "Cancelar");
		 }
		 if(listitem == 1)
		 {
			ShowPlayerDialog(playerid, DialogNPC + 5, DIALOG_STYLE_LIST, "Conta VIP Premium", "2.1 Seja VIP Premium\n2.2 Vantagens VIP Premium\n2.3 Regras do VIP Premium", "Selecionar", "Cancelar");
		 }
		 if(listitem == 2)
		 {
			 new dialog[1500];
			 strcat(dialog, "Sem os comandos você não pode fazer praticamente nada, por\n");
			 strcat(dialog, "esse motivo vou estar te informando os comandos fundamentais\n");
			 strcat(dialog, "para seu começo no servidor, e explicar qual a função de cada um.\n\n");
			 strcat(dialog, "/relatorio [Texto] - Comando utilizado pra quem necessita da\n");
			 strcat(dialog, "ajuda de um administrado. Só use pra reportar infrações\n");
			 strcat(dialog, "cometidas por outros players, bugs ou exclarecer duvidas caso\n");
			 strcat(dialog, "não tiver nenhum helper online\n\n");
			 strcat(dialog, "/duvida [Texto] - Comando utilizado pra quem necessita da ajuda\n");
			 strcat(dialog, "de um helper. Caso for novato e estiver precisando de ajuda ou\n");
			 strcat(dialog, "tiver alguma duvida relacionada ao servidor é só mandar /duvida.\n\n");
			 strcat(dialog, "/assinar [Código] - Comando utilizado pra assinar seu salário que sai\n");
			 strcat(dialog, "hora em hora cada /assinar [Código] representa 1 hora jogada e 1 de respeito\n");
			 strcat(dialog, "para você poder passar de level e ter mais habilidades.\n\n");
			 strcat(dialog, "/gps - Comando utilizado para quem deseja ir em algum lugar\n");
			 strcat(dialog, "importante da cidade e não sabe como.\n\n");
			 strcat(dialog, "/ajuda - Comando que contém boa parte dos comandos do\n");
			 strcat(dialog, "servidor, até os do seu emprego(se tiver algum, caso não tiver é\n");
			 strcat(dialog, "só pegar na prefeitura).\n");
			 ShowPlayerDialog(playerid, DialogNPC + 9, DIALOG_STYLE_MSGBOX, "Primeiros Comandos", dialog, "Ok", "");
		 }
		 if(listitem == 3)
		 {
           ShowPlayerDialog(playerid, DialogNPC + 10, DIALOG_STYLE_LIST, "Tutoriais dos Empregos", "4.1 - Detetive\n4.2 - Profissional do sexo\n4.3 - Vendedor de drogas\n4.4 - Mecânico\n4.5 - Segurança\n4.6 - Vendedor de armas\n4.7 - Boxer\n4.8 - Motorista de onibus\n4.9 - Mendigo\n4.10 - Caminhoneiro", "Selecionar", "Cancelar");
		 }
		 if(listitem == 4)
		 {
              new dialog[1000];
	          strcat(dialog,"Se você precisar de ajuda não perca tempom tire suas duvidas no\n");
	          strcat(dialog, "/duvida. Os helpers sempre estarão prontos pra te ajudarm ensinando\n");
	          strcat(dialog, "tudo o que precisa saber sobre o servidor. Caso não tiver nenhum\n");
	          strcat(dialog, "helper online use o /relatorio e fale com um administrador, mas só\n");
	          strcat(dialog, "use o /relatorio pra pedir esse tipo de ajuda caso não tiver nenhum\n");
	          strcat(dialog, "helper online, pois o /relatorio só deve ser utilizado pra reportar\n");
	          strcat(dialog, "infrações cometidas por players no servidor ou pra reportar bugs.");
	          ShowPlayerDialog(playerid, DialogNPC + 21, DIALOG_STYLE_MSGBOX, "Como obter ajuda", dialog , "Ok", "");
		 }
		 if(listitem == 5)
		 {
              new dialog[1500];
	          strcat(dialog,"Como você deve saber o BRNM é um servidor RPG, ele tenta\n");
	          strcat(dialog,"simular a vida real, por esse motivo existem ocupações que são\n");
	          strcat(dialog,"chamadas de organizações e gangs.\n\n");
	          strcat(dialog,"Policia Militar\nB.O.P.E\nExercito\nS.A.M.U\nLos Astecas\nTaliban\nPrefeito\nHitmans\nRede Globo\nTaxista\nPolicia Federal\nMáfia Cosa Nostra\nMáfia Yakuza\nGroove Street\nAl'qaeda\nPolicia Civil\nBallas\n\
			  Los Vagos\nComando Vermelho\nSons of Anarchy\nDrifters\nTriads\nF.A.R.C\nDetran\nAdvogados\n\n");
	          strcat(dialog,"A maioria das organizações e gangs pedem como requistio, bom\n");
	          strcat(dialog,"x1, manual decorado, ser RPG, ativo e ter level que eles\n");
	          strcat(dialog,"estipularem. Se você atender todos os requesitos cobrados pela\n");
	          strcat(dialog,"organização ou gang que quer entrar e tiver vaga ligue para o líder\n");
	          strcat(dialog,"ou o sub-líder pedingo vaga, caso quiserem eles te chamarão\npara fazer um teste.\n");
	          strcat(dialog,"Dependendo da organização você não precisa fazer teste de x1\n");
	          strcat(dialog,"(pra ver se é bom em matar), mas todas fazem teste teórico, por\n");
	          strcat(dialog,"esse motivo você deve ler o manual deles que se encontra no\nfórum.");
	          ShowPlayerDialog(playerid, DialogNPC + 22, DIALOG_STYLE_MSGBOX, "Como entrar em uma Organização", dialog , "Ok", "");
		 }
		 if(listitem == 6)
		 {
              new dialog[800];
			  strcat(dialog, "O celular é uma ferramenta fundamental pra seu começo no servidor,\né com ele que você vai se comunicar com os outros players a\n");
			  strcat(dialog, "distância. É fundamental porque é através dele que você vai se\n");
			  strcat(dialog, "comunicar com os líderes ou sub-líderes pra pedir vagas nas\norganizações ou gangs.\n\n");
			  strcat(dialog, "Antes de usar o celular você precisa saber o número do player pra\npoder ligar ou mandar SMS, pra isso você precisa de uma agenda\n");
			  strcat(dialog, "telefonica que pode ser adquirida na 24/7 (caso não sabia onde fica\nuse /gps). Tendo a agenda em mãos use /telefone [ID ou parte do\nnick]");
			  strcat(dialog, "pra saber o número de quem quer ligar. Após isso digite /ligar\n[número] ou /sms [número] [texto].\n\n");
			  strcat(dialog, "Se alguém ligar pra você use /at(ender) e pra finalizar a chamada e\nguardar o celular no bolso use /des(ligar).\n");
			  strcat(dialog, "Se você não quiser ser pertubado pelos outros jogadores use o comando /desativar celular, impedido que\nqualquer pessoa ligue ou mande SMS pra você\n\n");
			  strcat(dialog, "Qualquer outra duvida sobre o assunto use /duvida e fale com um helper.");
			  ShowPlayerDialog(playerid, DialogNPC + 24, DIALOG_STYLE_MSGBOX, "Utilizando o celular", dialog , "Ok", "");
		 }
		 if(listitem == 7)
		 {
			  new dialog[800];
			  strcat(dialog, "O seu RG é onde vai conter todas as informações sobre seu\n");
		      strcat(dialog, "personagem, para ver seu RG digite /rg.\n\n");
		      strcat(dialog, "Vou estar explicando partes do RG que você deve estar em duvida do\nque se trata.\n\n");
		      strcat(dialog, "Seu /rg e um registro unico com ele você pode ver todas as suas informações\n");
		      strcat(dialog, "Ex: Como casa, veículos, data que seu VIP Premum sera expirado, empregos ect...\n");
		      strcat(dialog, "Qualquer duvida sobre seu RG use /duvida.\n");
			  ShowPlayerDialog(playerid, DialogNPC + 24, DIALOG_STYLE_MSGBOX, "Entendendo o seu RG", dialog , "Ok", "");
		 }
		 if(listitem == 8)
		 {
              new dialog[800];
			  strcat(dialog, "Para conseguir dinheiro no servidor não é tão facil assim, mas vou\n");
			  strcat(dialog, "estar te dado algumas dicas de como começar bem no servidor.\n\n");
			  strcat(dialog, "Vendedor de armas: É o emprego que se consegue mais dinheiro,\n");
			  strcat(dialog, "porém tem que ter muita paciéncia e tempo.\n\n");
			  strcat(dialog, "Caminhoneiro: Você pode transporta as mercadorias e ganhar uma grana\n");
			  strcat(dialog, "Cada entrega varia de R$1000 a R$2000.\n\n");
			  strcat(dialog, "Para saber como trabalhar com os empregos, consulte o\ntutorial de empregos.\n");
			  strcat(dialog, "Outra forma de ganhar bastante dinheiro é negociando casas, mas\npra fazer isso você precisa ter pelo menos uma casa, você pode\ntrabalhar com os empregos acima até conseguir dinheiro pra\ncomprar uma.");
			  ShowPlayerDialog(playerid, DialogNPC + 25, DIALOG_STYLE_MSGBOX, "Ganhando dinheiro", dialog , "Ok", "");
		 }
      }
    }
    if(dialogid == DialogNPC + 10)
    {
	   if(!response) return 1;
	   if(response)
	   {
		  if(listitem == 0)
		  {
		      new dialog[150];
	          strcat(dialog,"Detetive:  Profissão indicada a cops e assassinos de alugel para procurar suspeitos e contratos. Use: /Procurar [ID].\n");
	          ShowPlayerDialog(playerid, DialogNPC + 11, DIALOG_STYLE_MSGBOX, "Detetive", dialog , "Ok", "");
		  
		  }
		  if(listitem == 1)
		  {
			  new dialog[150];
			  strcat(dialog, "Profissional do sexo: Sua função é se prostituir para conseguir algum dinheiro. Use: /Transar [ID]\n\
			  para ter relações com quem lhe solicitou.");
			  ShowPlayerDialog(playerid, DialogNPC + 12, DIALOG_STYLE_MSGBOX, "Profissional do sexo", dialog, "Ok", "");
		  }
          if(listitem == 2)
		  {
             new dialog[600];
	         strcat(dialog,"Vendedor de drogas: Profissão indicada para gangsters, você pode vender drogas como:\n");
	         strcat(dialog,"maconha,cocaina e crack. voce pode pega-las em qualquer gangzone,\n");
	         strcat(dialog,"apos pegar as drogas  Use: /Vendermaconha [ID] [Quantidade] [Preço], /Vendercocaina [ID] [Quantidade] [Preço]\n\
			 Ou /Vendercrack [ID] [Quantidade] [Preço].\n");
			 strcat(dialog,"Mas cuidado para não ser pego pela policia com drogas, você pode esconde-las no seu safe.");
             ShowPlayerDialog(playerid, DialogNPC + 13, DIALOG_STYLE_MSGBOX, "Vendedor de drogas", dialog , "Ok", "");
		  }
          if(listitem == 3)
		  {
              new dialog[600];
			  strcat(dialog, "Mecanico: Otima profissão para os novatos, você pode bater o cartão na HQ dos mecanicos e pegar um guincho.\n\
			  Assim que você aceitar uma chamada de mecanico,");
			  strcat(dialog, "sera marcado no mapa o local onde a pessoa esta, dirija se até ela com o seu guincho.\n\
			  Para reparar o veiculo de alguem use: /Reparar [ID] [Preço] e para abastecer");
			  strcat(dialog, "o veiculo use: /Abastecercarro [ID] [Preço] e para guinchar o veiculo pare o seu\n\
			  guincho em frente ao veiculo e use /Guinchar.");
			  ShowPlayerDialog(playerid, DialogNPC + 14, DIALOG_STYLE_MSGBOX, "Mecânico", dialog, "Ok", "");
		  }
		  if(listitem == 4)
		  {
              new dialog[150];
			  strcat(dialog, "Segurança: Segurança Particular, seu dever é proteger seu cliente mesmo que isso custe sua vida,\n\
			  para proteger alguem, use: /Proteger [ID] [Preço].");
			  ShowPlayerDialog(playerid, DialogNPC + 15, DIALOG_STYLE_MSGBOX, "Segurança", dialog, "Ok", "");
		  }
		  if(listitem == 5)
		  {
              new dialog[300];
			  strcat(dialog, "Vendedor De Armas: Profissão indicada para a mafia, você pode pegar armas no morro (Favela)\n\
			  com o comando /Pegararmasv 55 55  , apos pegar as armas você pode ");
			  strcat(dialog, "troca-las por materias atrás da loja de armas 1, você  tambem pode vender as\n\
			  armas usando o comando /Venderarma [ID] [Arma].");
			  ShowPlayerDialog(playerid, DialogNPC + 16, DIALOG_STYLE_MSGBOX, "Vendedor de armas", dialog, "Ok", "");
		  }
		  if(listitem == 6)
		  {
              new dialog[300];
			  strcat(dialog, "Boxeador: Você pode lutar contra outras pessoas e disputar o cinturão,\n\
			  use: /Lutar para desafiar alguem e use: /Statusluta para ver seu titulo atual, seu nome atual,");
			  strcat(dialog, "total de vitorias e derrotas e para ver o atual campeão.");
			  ShowPlayerDialog(playerid, DialogNPC + 17, DIALOG_STYLE_MSGBOX, "Boxer", dialog, "Ok", "");
		  }
		  if(listitem == 7)
		  {
              new dialog[250];
			  strcat(dialog, "Motorista de onibus: Para começar a trabalhar como motorista de onibus, pegue\n\
			  um onibus no terminal, e digite /Corrida [Preço] e para parar de trabalhar digite /Cancelarcorrida.");
			  ShowPlayerDialog(playerid, DialogNPC + 18, DIALOG_STYLE_MSGBOX, "Motorista de onibus", dialog, "Ok", "");
		  }
		  if(listitem == 8)
		  {
              new dialog[250];
			  strcat(dialog, "Mendigo: Profissão indicada para quem tem preguiça de trabalhar, voce pode pedir\n\
			  esmola para outros players usando o /Esmola, você tambem pode montar uma barraca\n\
		      usando o /Pbarraca  e para removê la use: /Rbarraca.");
			  ShowPlayerDialog(playerid, DialogNPC + 19, DIALOG_STYLE_MSGBOX, "Mendigo", dialog, "Ok", "");
		  }
		  if(listitem == 9)
		  {
              new dialog[600];
			  strcat(dialog, "Caminhoneiro: Otima profissão para novatos, você pode pegar um\n\
			  caminhão na HQ dos caminhoneiros, para localizar a HQ  use /Gps > Head Quarters > HQ dos caminhoneiros,\n");
			  strcat(dialog, "pegue um caminhão e a carga e use:   /mercadorials para entregar sua carga em\n\
			  los santos,  /mercadoriasf  para entregar sua carga em são fierro e  /mercadorialv\n");
			  strcat(dialog, "egar sua carga em las venturas.");
			  ShowPlayerDialog(playerid, DialogNPC + 20, DIALOG_STYLE_MSGBOX, "Caminhoneiro", dialog, "Ok", "");
		  }
	   
	   }

    }
    if(dialogid == DialogNPC + 1)
    {
	  if(!response) return 1;
	  if(response)
	  {
		if(listitem == 0)
		{

		  ShowPlayerDialog(playerid, DialogNPC + 2, DIALOG_STYLE_MSGBOX, "Fórum",
		  "Acesse nosso fórum e fique por dentro de todos os assuntos\nrelacionados ao servidor.\
	      No fórum você pode ler regras, fazer\ndenuncias, participar de votações e discussões sobre o servidor,\n\
		  relatar bugs e problemas com sua conta, compartilhar vídeos e\nimagens com outros players e até falar sobre outros assuntos\n\
		  que não estão relacionados ao nosso servidor\n\n\
		  Não perca tempo, acesse: brnm.forumeiros.com", "Ok", "");
		}
		if(listitem == 1)
		{
          new dialog[2200];
		  strcat(dialog,"Não Faça Deathmatch(DM) O objetivo do servidor é Role Playing , ou seja de interpretação de personagens. É\n");
		  strcat(dialog,"um tipo de jogo que os jogadores assumem os papéis de personagens da vida real e dependendo das escolhas determinam a direção\n");
		  strcat(dialog,"para que seu jogo irá tomar.Devido a isso a e proibido o Deathmarch(DM),um modo de jogo onde os jogadores matam uns aos Outros.\n");
		  strcat(dialog,"Punição : Cadeia Admin ou Advertência(caso leve 3 advertência e BAN automática)\n\n");
	      strcat(dialog,"Não Faça Drive-by (DB) Drive-by é atirar em um player a pé estando dentro de um carro\n");
          strcat(dialog,"Nota: É proibido ficar com o carro em cima do jogador pra mata-lo isso também é considerado drive-by\n");
          strcat(dialog,"Nota: Atirar de veiculo para veículo para veículo não é passível de punição\n");
          strcat(dialog,"Nota: O jogador só não e punido caso a vítima diga que não foi proposital do contrario:\n");
          strcat(dialog,"Punição: Cadeia de Admin ou Advertência (caso leve 3 advertência e BAN automática)\n\n");
          strcat(dialog,"Não anuncie indevidamente Anúncios não são chat, são para fazer propaganda do seu negócio,para anunciar uma troca de serviço/venda ou recrutamento\n");
          strcat(dialog,"Punição: Kick ou Cadeia de Admin\n\n");
          strcat(dialog,"Não saia do jogo em combate para não ser preso/morto, não equipe em combate e não reaja a 3 ou mais indivíduos em prisão ou sequestro\n");
          strcat(dialog,"Punição: Cadeia de Admin ou Ban\n\n");
          strcat(dialog,"Não aperte ESC em combate, Gang Zone ou em Assaltos.\n");
          strcat(dialog,"Punição: Kick ou Cadeia de Admin\n\n");
          strcat(dialog,"Nunca Ande em cima de um carro (Surf)\n");
          strcat(dialog,"Punição : Cadeia Admin\n\n");
          strcat(dialog,"Não invada HQs\n");
          strcat(dialog,"Nota: Quando o Player Estiver como PROCURADO, a policia poderá ir atrás dele em qualquer lugar caso o cop já estiver em perseguição ou com /gov avisando sobre a operação.\n");
          strcat(dialog,"Punição: Cadeia de Admin\n\n");
          strcat(dialog,"Sempre seja RPG \n");
          strcat(dialog,"Anti RPG é executar qualquer ação que não seria possível na vida real\n");
          strcat(dialog,"Punição: Cadeia de Admin ou Ban\n\n");
          strcat(dialog,"Quando há mais de 3 indivíduos tentando te sequestrar ou mandando você se render e proibido reagir. A não ser Se estiver Acompanhado\n");
          strcat(dialog,"Punição : Cadeia de Admin\n\n");
          strcat(dialog,"Não matar jogadores em atendimento por administrador ou Helper\n");
		  strcat(dialog,"Punição: Cadeia de Admin\n\n\n");
		  strcat(dialog,"Para ver as regras completas em: http://brnm.forumeiros.com/t1-regras-do-servidor");
          ShowPlayerDialog(playerid, DialogNPC + 3, DIALOG_STYLE_MSGBOX, "Regras Basicas", dialog , "Ok", "");
		}
		if(listitem == 2)
		{
		   new dialog[226];
		   strcat(dialog,"E não se esqueça de que temos também uma página no facebook, aonde são postadas também\n");
		   strcat(dialog,"novidades e humor acesse www.facebook.com/brnmrpg");
		   ShowPlayerDialog(playerid, DialogNPC + 4, DIALOG_STYLE_MSGBOX, "Facebook", dialog, "Ok", "");

		}
	  }
    }
    if(dialogid == DialogNPC + 5)
    {
	   if(!response) return 1;
	   if(response)
	   {
		  if(listitem == 0)
		  {
		      new dialog[2500];
			  strcat(dialog,"Com uma doação ao servidor de R$ 15,00 você ganhará o benefício vip premium que durará o periodo de 1 mês no servidor mediante o cumprimento dos termos e regras. É bom \n");
			  strcat(dialog,"lembrar programa de doações não é um produto ou serviço à venda são somente incentivos para ajudar o servidor e como o próprio nome já diz é somente uma doação que é\n");
			  strcat(dialog,"recompensada com o benefício vip premium, se não concorda com isso não efetue nenhum pagamento ao servidor.\n\n");
			  strcat(dialog,"ATENÇÃO: Ao efetuar a doação para se tornar vip premium pelo período de 1 mês você diz que leu e concorda com os termos abaixo, caso não concorde com os termos NÃO faça a doação.\n\n");
			  strcat(dialog,"1-Os benefícios fornecidos são somente os descritos nesse tópico.\n");
			  strcat(dialog,"2-Não aceitamos requisições ou pedidos de agregação de beneficios 'extras' a sua conta vip premium. (Por exemplo: 'pedir para ganhar leveis ou respeitos')\n");
			  strcat(dialog,"3-Em hipótese alguma o dinheiro de qualquer pagamento feito por você ao servidor será devolvido, ao clicar em 'Declaro que li e aceito' você isenta o servidor BRNM de qualquer\n");
			  strcat(dialog,"4-Nosso servidor é provido como é e está sem quaisquer tipo de garantias de funcionamento. \n");
			  strcat(dialog,"5-Todos os jogadores doadores ou não estão sujeitos a cumprir todas as regras sob qualquer circunstância e a receber punições.\n");
			  strcat(dialog,"6-Descumprimento de qualquer termo ou violação das regras do servidor irão acarretar na remoção total do seu beneficio e banimento da sua conta sem a devolução do dinheiro.\n");
			  strcat(dialog,"7-Ao expirar o período de 1 mês todos os beneficios do vip premium são perdidos. \n");
			  strcat(dialog,"8-Uma vez ativado o benefício não é transferível ou pausavel. \n");
			  strcat(dialog,"9- A doação não desbane a conta de nenhum jogador. \n");
			  strcat(dialog,"10-Reservamos o direito de efetuar alterações no servidor e benefícios sem prévio aviso. \n");
			  strcat(dialog,"11-O doador se compromete a cumprir e a se manter atualizado com todas as REGRAS e Termos do servidor. (Leia: http://brnm.forumeiros.com/t3-regras-geral-do-forum,\n");
		      strcat(dialog,"http://brnm.forumeiros.com/t16-termos-e-condicoes-de-uso-do-servidor)\n");
			  strcat(dialog,"12-Ao efetuar pagamentos ao servidor você declara ser maior de 18 anos ou ter a supervisão de um responsável.\n\n");
			  strcat(dialog,"Seja VIP Premium: http://brnm.forumeiros.com/t8-seja-vip-premium\n\n\n");
			  strcat(dialog,"Estamos sempre tentando fazer o melhor para você doador para o servidor ou não! duvidas? sugestões? abra um tópico no fórum. Se precisar de suporte relacionado a doação abra\n");
			  strcat(dialog,"um tópico no fórum. Obrigado e Bom Jogo.\n");
		      ShowPlayerDialog(playerid, DialogNPC + 6, DIALOG_STYLE_MSGBOX, "Facebook", dialog, "Ok", "");
		  }
		  if(listitem == 1)
		  {
			  new dialog[1000];
			  strcat(dialog,"Com uma doação para o servidor você pode ser jogador vip premium pelo perído de 1 mês, que vai te permitir usufruir dos seguintes banefícios no jogo: \n");
			  strcat(dialog,"Ter um total de 4 veículos comprados na concessionária\n");
			  strcat(dialog,"A compra de uma mansão ou casa vip premium [Número Limitado Verifique a Disponibilidade]\n");
			  strcat(dialog,"Mansão ou casa vip premium com portão automático [Número Limitado Verifique a Disponibilidade]\n");
			  strcat(dialog,"Jetpack (Mochila a jato)\n");
			  strcat(dialog,"Ingresso a Orgs com um comando (Ex: /orgdetran /orgpm)\n");
			  strcat(dialog,"Kit de armas Vip Premium I e II com 5 Granadas, 3 Bazookas, TEC-9, Combat Shotgun\n");
			  strcat(dialog,"Neon em seu veículos\n");
			  strcat(dialog,"R$3000000 = 3kk na conta do seu personagem por cada doação efetuada\n");
			  strcat(dialog,"Juros de 0.4% e Salário mais alto\n");
			  strcat(dialog,"Número de celular personalizado \n");
			  strcat(dialog,"Variedade de skins na loja mesmo quando integrante de uma ORG\n\n");
			  strcat(dialog,"Seja VIP Premium: http://brnm.forumeiros.com/t8-seja-vip-premium");
		      ShowPlayerDialog(playerid, DialogNPC + 7, DIALOG_STYLE_MSGBOX, "Vantagens VIP Premium", dialog, "Ok", "");
		  }
		  if(listitem == 2)
		  {
			  new dialog[3000];
			  strcat(dialog, "-Assim como qualquer outro jogador o vip premium deve conhecer e cumprir não só as regras do vip premium mas todas as regras oficias do servidor\n");
			  strcat(dialog, "que se aplicam a todos os jogadores que incluem as REGRAS GERAIS DO SERVIDOR, REGRAS GERAIS DAS ORGS E REGRAS GERAIS DO LÍDER.\n\n");
			  strcat(dialog, "-É proibido o uso de /jetpack em situações de combate ou para fins de combate (Ex: Usar /jetpack para invadir uma hq, para dar fuga ou subir em\n");
			  strcat(dialog, "lugares altos para matar são violações da regra) -Nunca abusar do comando /org de ingresso a organizações\n\n");
			  strcat(dialog, "Caso seja demitido injustamente de uma org ingressada pelo comando /org não criar discussões, comunique imediatamente a um administrador para\n");
			  strcat(dialog, "que o fato seja verificado\n\n");
			  strcat(dialog, "-O uso das 3 cargas de bazooka é permitida em combate -Seu /relatório é de importância igual ao de qualquer outro player\n\n");
			  strcat(dialog, "-Não chamar administradores ou utilizar relatório para fazer pedidos de benefícios 'extras' para sua conta ou para fazer sugestões, toda a parte de\n");
			  strcat(dialog, "equillibrio/balanceamento ou 'scripting' que é a construção do jogo em geral como hq's ou portões de casas e outras funcionalidades são decididas e\n");
			  strcat(dialog, "criadas independentemente, portanto não insista em pedir.\n\n");
			  strcat(dialog, "-Não falar com administradores por /par /sms ou celular, somente utilize /relatorio\n\n");
			  strcat(dialog, "-Ser vip premium não te isenta de cumprir todas as regras e levar punições mesmo que algum player quebre regras em você, poste ss de regras\n");
			  strcat(dialog, "violadas no tópico de denúncias para que o responsável seja punido caso haja provas suficientes\n\n");
			  strcat(dialog, "-Não cobiçar casas de outros jogadores vip premium, a medida que novos jogadores vip premium vão surgindo o número de casas vip premium com e\n");
			  strcat(dialog, "sem portão se limita e adicionar novas não estão em questão, na lista de benefícios do vip premium existe um aviso de verificar primeiramente a\n");
			  strcat(dialog, "disponibilidade da casa que esteja interessado em comprar para que verifique antes de efetuar a doação\n\n");
			  strcat(dialog, "-Nunca criticar o servidor ou qualquer administrador -Nunca pensar que só porque é jogador doador poderá fazer oque bem entender, o objetivo do\n");
			  strcat(dialog, "sistema de doação é somente recompensar o player doador com alguns benefícios previamente estabelecidos que melhoram a jogabilidade\n\n");
			  strcat(dialog, "Caso não for renovar seu Vip Premium, venda antes do vencimento seus veículos número 2 3 e 4 e também sua casa premium para evitar a perda do\n");
			  strcat(dialog, "seu dinheiro do jogo.\n\n");
			  strcat(dialog, "Violações destas e outras regras do servidor acarretarão na perda do seu benefício e banimento da sua conta, note que o servidor possui sistema de\n");
			  strcat(dialog, "registro de logs que são arquivos que registram quase tudo que acontece no servidor, portanto quase tudo que um jogador faz e fala está sendo\n");
			  strcat(dialog, "registrado, arquivado e catalogado para futuras consultas, provas que não serão possíveis contestar futuramente.\n\n");
			  strcat(dialog,"Seja VIP Premium: http://brnm.forumeiros.com/t8-seja-vip-premium");
			  ShowPlayerDialog(playerid, DialogNPC + 8, DIALOG_STYLE_MSGBOX, "Regras do VIP Premium", dialog, "Ok", "");
		  }
	   }
    }
//FIM Sistema de Cofre ORG
	return true;
}

public Spectator()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				SetPlayerToTeamColor(i);
				//Controle(i, 0);
				new targetid = Spectate[i];
				if(IsPlayerConnected(targetid))
				{
				    TogglePlayerSpectating(i, 1);
				    if(PlayerInfo[i][pAdmin] >= 1)
				    {
				        new Float:health;
					    GetPlayerHealth(targetid, health);
					    format(gstring, sizeof(gstring), "~n~~n~~n~~n~~n~~n~~y~%s(ID:%d)~n~~y~Vida:%.1f",PlayerName(targetid),targetid,health);
					    GameTextForPlayer(i, gstring, 2500, 3);
				    }
				    if(IsPlayerInAnyVehicle(targetid))
					{
					    new carid = GetPlayerVehicleID(targetid);
					    PlayerSpectateVehicle(i, carid);
					}
					else
					{
					    PlayerSpectatePlayer(i, targetid);
					}
					if(GetPlayerInterior(targetid) == 0)
					{
						SetPlayerInterior(i,0);
					}
					else if(GetPlayerInterior(targetid) > 0)
					{
						SetPlayerInterior(i,GetPlayerInterior(targetid));
					}
				}//Targetid connected
			}
			if(Spectate[i] == 253)
			{
				Controle(i, 1);
				TogglePlayerSpectating(i, 0);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pSkin], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				gTeam[i] = PlayerInfo[i][pTeam];
				SetPlayerToTeamColor(i);
				MedicBill[i] = 0;
				if(PlayerInfo[i][pVIP] > 0)
		        {
		            SetSpawnInfo(i, PlayerInfo[i][pTeam], PlayerInfo[i][pSkin], Unspec[i][Coords][0], Unspec[i][Coords][1], Unspec[i][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(i);
					SetCameraBehindPlayer(i);
		        }
		        else
		        {
					SpawnPlayer(i);
				}
				Spectate[i] = 255;
			}
			if(Spectate[i] == 254)
			{
				Controle(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
}

//------------------------------------------------------------------------------------------------------
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
new string[256];
GetPlayerName(playerid, sendername, sizeof(sendername));
format(string, sizeof(string), "* %s Entra no veiculo.", sendername);
ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
if(CarInfo[vehicleid][VeiculoAprendido] >= 1) {

if(IsADetran(playerid))
	{
 	GetPlayerName(playerid, sendername, sizeof(sendername));
 	format(string, sizeof(string), "* Funcionário do Detran %s destranca o veículo usando sua chave mestra.", sendername);
 	ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	} else {
	new Float:cx, Float:cy, Float:cz;
  	GetPlayerPos(playerid, cx, cy, cz);
    SetPlayerPos(playerid, cx, cy, cz);
    SendClientMessage(playerid, COR_DETRAN, "Esse veículo foi lacrado pelo D.E.T.R.A.N");
    
    }

}
if(IsAnOwnableCar(vehicleid) && CarInfo[vehicleid][cLock] == 1 && CarInfo[vehicleid][cOwned] == 1)
	{
	if(IsADetran(playerid))
{
 GetPlayerName(playerid, sendername, sizeof(sendername));
 format(string, sizeof(string), "* Funcionário do Detran %s destranca o veículo usando sua chave mestra.", sendername);
 ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
}
	if(admtrampando[playerid] < 1 && admhide[playerid] < 1)
	     {
	     if(!IsADetran(playerid))
			{
		if(IsPlayerAdmin(playerid)) { }
		else
		{
			new Float:cx, Float:cy, Float:cz;
  			GetPlayerPos(playerid, cx, cy, cz);
    		SetPlayerPos(playerid, cx, cy, cz);
    		SendClientMessage(playerid, COLOR_WHITE, "[BRNM]: Este veículo está trancado!");
		}
      } 
    }
  }
	return 1;
}
public IsAMember(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==5 || member==6 || member==8)
		{
		    return true;
		}
		if(lider==5 || lider==6 || lider==8)
		{
		    return true;
		}
	}
	return 0;
}
public IsACop(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==1 || member==2 || member==3 || member==16 || member==11)
		{
		    return true;
		}
		else if(lider==1 || lider==2 || lider==3 || lider==16 || lider==11)
		{
		    return true;
		}
	}
	return 0;
}

public IsAtClothShop(playerid)
{
    if(IsPlayerConnected(playerid))
	{
        if(PlayerToPoint(25.0,playerid,207.5627,-103.7291,1005.2578) || PlayerToPoint(25.0,playerid,203.9068,-41.0728,1001.8047))
		{//Binco & Suburban
		    return true;
		}
		else if(PlayerToPoint(30.0,playerid,214.4470,-7.6471,1001.2109) || PlayerToPoint(50.0,playerid,161.3765,-83.8416,1001.8047) || PlayerToPoint(50.0,playerid,162.6288,-86.3102,1001.8047))
		{//Zip & Victim
		    return true;
		}
		else if(PlayerToPoint(30.0,playerid,210.7969,-7.6347,1001.2109))
		{//Victim
		    return true;
		}
	}
	return 0;
}

public IsAtGasStation(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(15.0,playerid,1941.9850,-1774.6639,19.7006))
	    {
	        if(IsAPlane(GetPlayerVehicleID(playerid)))
	        {
	            return true;
	        }
		}
		if(PlayerToPoint(6.0,playerid,1004.0070,-939.3102,42.1797) || PlayerToPoint(6.0,playerid,1944.3260,-1772.9254,13.3906) || PlayerToPoint(6.0,playerid,1400.6882,-1680.5344,42.4339) || PlayerToPoint(6.0,playerid,1496.5316,-1544.0677,23.5481) || PlayerToPoint(6.0,playerid,2737.3364,-1774.2123,43.7973))
		{//LS
		    return true;
		}
		else if(PlayerToPoint(6.0,playerid,-90.5515,-1169.4578,2.4079) || PlayerToPoint(6.0,playerid,-1609.7958,-2718.2048,48.5391) || PlayerToPoint(6.0,playerid,1211.4377,-1832.1793,13.4035))
		{//LS
		    return true;
		}
		else if(PlayerToPoint(6.0,playerid,-2029.4968,156.4366,28.9498) || PlayerToPoint(8.0,playerid,-2408.7590,976.0934,45.4175))
		{//SF
		    return true;
		}
		else if(PlayerToPoint(6.0,playerid,1380.4712,462.7467,20.1107) || PlayerToPoint(8.0,playerid,1385.0475,460.5417,20.1068))
		{//PC
		    return true;
		}
		else if(PlayerToPoint(6.0,playerid,1383.5532,457.1286,19.9561) || PlayerToPoint(8.0,playerid,1379.1952,459.1295,19.9587))
		{//PC
		    return true;
		}
		else if(PlayerToPoint(5.0,playerid,-2243.9629,-2560.6477,31.8841) || PlayerToPoint(8.0,playerid,-1676.6323,414.0262,6.9484))
		{//Between LS and SF
		    return true;
		}
		else if(PlayerToPoint(6.0,playerid,2202.2349,2474.3494,10.5258) || PlayerToPoint(10.0,playerid,614.9333,1689.7418,6.6968))
		{//LV
		    return true;
		}
		else if(PlayerToPoint(8.0,playerid,-1328.8250,2677.2173,49.7665) || PlayerToPoint(6.0,playerid,70.3882,1218.6783,18.5165))
		{//LV
		    return true;
		}
		else if(PlayerToPoint(8.0,playerid,677.1299,-2866.3892,13.0944) || PlayerToPoint(6.0,playerid,-1327.7218,2678.8723,50.0625))
		{//LV
		    return true;
		}
		else if(PlayerToPoint(6.0,playerid, 654.9556,-570.4192,16.5015) || PlayerToPoint(6.0,playerid,654.9702,-559.7487,16.5015) || PlayerToPoint(6.0,playerid,2114.1804,920.5062,10.8203) || PlayerToPoint(6.0,playerid,-1470.8165,1863.8408,32.6328) || PlayerToPoint(6.0,playerid,-1606.2137,-2713.9841,48.5335) || PlayerToPoint(6.0,playerid,-1603.4417,-2709.1326,48.5335))
		{ // Novos Postos
		    return true;
		}
	}
	return 0;
}
public IsAtFishPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(1.0,playerid,403.8266,-2088.7598,7.8359) || PlayerToPoint(1.0,playerid,398.7553,-2088.7490,7.8359))
		{//Fishplace at the bigwheel
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,396.2197,-2088.6692,7.8359) || PlayerToPoint(1.0,playerid,391.1094,-2088.7976,7.8359))
		{//Fishplace at the bigwheel
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,383.4157,-2088.7849,7.8359) || PlayerToPoint(1.0,playerid,374.9598,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,369.8107,-2088.7927,7.8359) || PlayerToPoint(1.0,playerid,367.3637,-2088.7925,7.8359))
		{//Fishplace at the bigwheel
		    return true;
		}
		else if(PlayerToPoint(1.0,playerid,362.2244,-2088.7981,7.8359) || PlayerToPoint(1.0,playerid,354.5382,-2088.7979,7.8359))
		{//Fishplace at the bigwheel
		    return true;
		}
        else if(PlayerToPoint(1.0,playerid,1990.4675,-1183.3180,20.5116) || PlayerToPoint(1.0,playerid,1991.7828,-1183.4724,20.5116) || PlayerToPoint(1.0,playerid,1949.8274,-1215.4484,20.5019) || PlayerToPoint(1.0,playerid,1948.1309,-1215.2512,20.5019))
		{//Parque Gleen
		    return true;
		}
	}
	return 0;
}

public IsAtCookPlace(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
	    {//Cluckin Bell
	        return true;
	    }
	    else if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078) || PlayerToPoint(4.0,playerid,681.5817,-456.0235,-25.6099))
		{//Burgershot
		    return true;
		}
		else if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
		{//Well Stacked Pizza
		    return true;
		}
	}
	return 0;
}

public IsAtBar(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0,playerid,495.7801,-76.0305,998.7578) || PlayerToPoint(4.0,playerid,499.9654,-20.2515,1000.6797) || PlayerToPoint(4.0,playerid,1254.0154,-792.7376,1084.2344) || PlayerToPoint(15.0,playerid,942.4760,4.9500,1000.9297))
		{//In grove street bar (with girlfriend), and in Havanna
		    return true;
		}
		else if(PlayerToPoint(4.0,playerid,1215.9480,-13.3519,1000.9219) || PlayerToPoint(10.0,playerid,-2658.9749,1407.4136,906.2734) || PlayerToPoint(10.0,playerid,378.5476,-189.0421,1000.6328) || PlayerToPoint(10.0,playerid,968.8497,-46.3663,1001.1172) || PlayerToPoint(6.0,playerid,2372.4138,-1133.9048,1050.8750))
		{//PIG Pen
		    return true;
		}
		else if(PlayerToPoint(4.0,playerid,1271.0212,-1247.5483,13.5869) || PlayerToPoint(4.0,playerid,1231.4076,-1262.7483,13.5294) || PlayerToPoint(4.0, playerid,499.9720,-20.3109,1000.6797) || PlayerToPoint(4.0, playerid,1292.0604,-827.6722,83.1798))
		{
		    return true;
		}
		else if(PlayerToPoint(4.0,playerid,1203.3342,-1873.7017,13.5266) || PlayerToPoint(4.0,playerid,1172.4803,-1873.2429,13.5266) || PlayerToPoint(4.0, playerid,1141.5674,-1873.9248,13.5465) || PlayerToPoint(4.0, playerid,1110.6575,-1873.6936,13.5465) || PlayerToPoint(4.0, playerid,1079.5389,-1873.2064,13.5465))
		{
		    return true;
		}
		// beber Balada Praia LS
		else if(PlayerToPoint(4.0,playerid,383.4798,-1842.7611,7.8359) || PlayerToPoint(4.0,playerid,401.8212,-1826.3898,7.8409) || /*/beber abrigo nuclear ->*/PlayerToPoint(4.0,playerid,114.3598,1334.4587,1131.8562))
		{
		    return true;
		}
		else if(PlayerToPoint(4.0,playerid,931.6966,-1586.8280,13.5503) || PlayerToPoint(4.0,playerid,997.9523,-1606.4858,13.5212) || PlayerToPoint(4.0, playerid, 997.9354,-1616.9598,13.5212) || PlayerToPoint(4.0, playerid, 982.6809,-1722.5463,13.5772))
		{
			return true;
		}
	}
	return 0;
}
public IsABoat(carid)
{
    new oo = GetVehicleModel(carid);
 	if((oo >= 445) && (oo <= 447))
	{
		return true;
	}
	return 0;
}

public IsAPlane(carid)
{
	new oo = GetVehicleModel(carid);
	if((oo == 417) && (oo == 425) && (oo == 447) && (oo == 460) && (oo == 469) && (oo == 476) && (oo == 487) && (oo == 488) && (oo == 497) && (oo == 511)&& (oo == 512) && (oo == 513) && (oo == 519) && (oo == 520) && (oo == 548) && (oo == 553)  && (oo == 563) && (oo == 577) && (oo == 592) && (oo == 593))
	{
		return true;
	}
	return 0;
}
public IsAAutoescola(carid)
{
	if((carid >= 454) && (carid <= 459))
	{
		return true;
	}
	return 0;
}

public IsACopCar(carid)//copcarroo
{
	if((carid >= 1) && (carid <= 24))
	{
		return true;
	}
	return 0;
}

public IsAEnforcerCar(carid) // Enforcers
{
	if((carid == 7) || (carid == 8) || (carid == 31) || (carid == 32) || (carid == 51) || (carid == 52) || (carid == 53) || (carid == 151) || (carid == 152) || (carid == 228) || (carid == 229))
	{
		return true;
	}
	return 0;
}
public IsACaminhaozinhoCar(carid) // Trocar e Pegar Materiais
{
	if((carid == 175) || (carid == 176) || (carid == 181) || (carid == 182))
	{
		return true;
	}
	return 0;
}
public IsAAmbu(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==4 || member==4)
		{
		    return true;
		}
		else if(lider==4 || lider==4)
		{
		    return true;
		}
	}
	return 0;
}
public IsAnAmbulanceCar(carid)
{
	if((carid >= 69) && (carid <= 75))
	{
		return true;
	}
	return 0;
}

public IsAGatev(carid)
{
	if((carid == 0) || (carid == 0) || (carid == 0) || (carid == 0))
	{
		return true;
	}
	return 0;
}

//------------------------------------------------------------------------------------------------------

public OnPlayerConnect(playerid)
{

  if(IsPlayerNPC(playerid))
  	{
        SpawnPlayer(playerid);
        new Text3D:NPCLabel = Create3DTextLabel("{FFFF00}Olá Novato(a), meu nome é [NPC]Reginaldo\nestou aqui para lhe ajudar\naperte 'F' em minha frente.", -1, 30.0, 40.0, 50.0, 10.0, 0);
        Attach3DTextLabelToPlayer(NPCLabel, 0, 0.0, 0.0, 0.2);
     	return 1;
    }
    CreatePlayerObject(playerid, 8168, 55.97, -1532.31, 6.07,   0.00, 0.00, 8.00);
	CreatePlayerObject(playerid, 966, 56.05, -1528.62, 3.93,   0.00, 0.00, 262.00);
	CreatePlayerObject(playerid, 966, 56.05, -1535.86, 3.93,   0.00, 0.00, 82.00);

	Cancela[playerid][0] = CreatePlayerObject(playerid, 968, 56.05, -1528.62, 4.67,   0.00, 270.00, 262.00);
	Cancela[playerid][1] = CreatePlayerObject(playerid, 968, 56.05, -1535.82, 4.71,   0.00, 90.00, 262.00);
	Pedagio[playerid] = false;

    RemovePlayerAttachedObject(playerid, 4);
    TextDrawShowForPlayer(playerid, Entrada[playerid]);
    DisablePlayerCheckpoint(playerid);
    KillTimer(timer[playerid]);
    FloodAlert[playerid] = 0; FloodTimer[playerid] = 0;
    if(PlayerInfo[playerid][pCargo] == 0)
    {
    	BugSpawn[playerid] = 1;
    }
    new connecting_ip[32+1];
    GetPlayerIp(playerid,connecting_ip,32);
    new num_players_on_ip = GetNumberOfPlayersOnThisIP(connecting_ip);

    if(num_players_on_ip > MAX_CONNECTIONS_FROM_IP) {
        printf("MAXIPs: Connecting player(%d) exceeded %d IP connections from %s.", playerid, MAX_CONNECTIONS_FROM_IP, connecting_ip);
        Ban(playerid);
        return 1;
    }
    PlayerInfo[playerid][pPcarkey] = -1;
	PlayerInfo[playerid][pPcarkey2] = -1;
	PlayerInfo[playerid][pPcarkey3] = -1;
	PlayerInfo[playerid][pPcarkey4] = -1;
	for(new i = carsonserver; i < sizeof(CarInfo); i++)
	{
		SetVehicleParamsForPlayer(i,playerid,0,CarInfo[i][cLock]);
	}
    FilaAtendimentoText[playerid] = TextDrawCreate(500 ,150 , "_");
	TextDrawFont(FilaAtendimentoText[playerid] , 1);
	TextDrawLetterSize(FilaAtendimentoText[playerid] , 0.399999, 1.300000);
	TextDrawColor(FilaAtendimentoText[playerid] , 0xc4ff00FF);
	TextDrawSetOutline(FilaAtendimentoText[playerid] , 1);
	TextDrawSetProportional(FilaAtendimentoText[playerid] , true);
	TextDrawSetShadow(FilaAtendimentoText[playerid] , 1);
    TextDrawHideForPlayer(playerid,FilaAtendimentoText[playerid]);

	TempoAtendimento2Text[playerid] = TextDrawCreate(500 ,165 , "_");
	TextDrawFont(TempoAtendimento2Text[playerid] , 1);
	TextDrawLetterSize(TempoAtendimento2Text[playerid] , 0.399999, 1.300000);
	TextDrawColor(TempoAtendimento2Text[playerid] , 0xc4ff00FF);
	TextDrawSetOutline(TempoAtendimento2Text[playerid] , 1);
	TextDrawSetProportional(TempoAtendimento2Text[playerid] , true);
	TextDrawSetShadow(TempoAtendimento2Text[playerid] , 1);
    TextDrawHideForPlayer(playerid,TempoAtendimento2Text[playerid]);
    TextDrawHideForPlayer(playerid, Textdraw0[playerid]); // Relogio nuclear
    FilaAtendimento[playerid] = 999;
    TempoAtendimento2[playerid] = 0;
    SetTimerEx("OnPlayerUpdateEx", 1000, true, "i", playerid);
   	//DP DA POLICIA CIVIL
	//RemoveBuildingForPlayer(playerid, 3777, 831.9609, -1191.1406, 25.0391, 0.25);
	//RemoveBuildingForPlayer(playerid, 3777, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5926, 816.3359, -1217.1484, 26.4453, 0.25);
	//RemoveBuildingForPlayer(playerid, 3777, 902.3359, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 6005, 895.2578, -1256.9297, 31.2344, 0.25);
	RemoveBuildingForPlayer(playerid, 5836, 816.3359, -1217.1484, 26.4453, 0.25);
	//RemoveBuildingForPlayer(playerid, 3776, 831.9609, -1191.1406, 25.0391, 0.25);
	//RemoveBuildingForPlayer(playerid, 3776, 868.1328, -1191.1406, 25.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 5838, 895.2578, -1256.9297, 31.2344, 0.25);
	//RemoveBuildingForPlayer(playerid, 3776, 902.3359, -1191.1406, 25.0391, 0.25);
	//Los Santos

	// Poste na frente do restaurante
	RemoveBuildingForPlayer(playerid, 1294, 1313.8594, -1276.8672, 17.0781, 0.25);

	// Balada Praia
    RemoveBuildingForPlayer(playerid, 6456, 397.5391, -1848.4922, 12.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1874.0313, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1855.5234, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1215, 384.4297, -1837.9766, 7.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1368, 381.7969, -1834.9219, 7.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1371, 387.1328, -1831.4453, 7.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 6288, 397.5391, -1848.4922, 12.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 1500, 387.5625, -1817.0859, 6.8203, 0.25);

	// Casas VIP Premium perto da Praia
	RemoveBuildingForPlayer(playerid, 6072, 952.7109, -1599.5391, 20.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 6073, 1003.8906, -1598.0391, 17.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6074, 1003.2734, -1666.1563, 20.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 6075, 1003.4219, -1737.5000, 17.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6207, 956.1953, -1689.6016, 12.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 6208, 954.2734, -1720.7969, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 931.8594, -1703.9766, 11.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 726, 975.1016, -1763.4688, 10.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 726, 958.0391, -1678.0547, 10.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 940.9297, -1668.8594, 11.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 729, 970.0234, -1718.0000, 11.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 930.0703, -1649.4063, 4.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 930.1406, -1662.2969, 4.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 930.0859, -1704.4766, 12.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 931.2734, -1705.6250, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 931.2734, -1702.5313, 12.3906, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 932.3203, -1751.1172, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 932.4688, -1709.7266, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 933.2578, -1731.4844, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 934.3438, -1635.8672, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 933.1016, -1634.8516, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 939.7109, -1761.0000, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 937.2656, -1696.8359, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 936.4219, -1651.6641, 12.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 942.7969, -1653.4531, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 942.3516, -1656.1797, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 942.6641, -1651.6094, 15.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 942.7969, -1649.8672, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 942.2422, -1647.0313, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 955.8828, -1747.4297, 12.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 943.5000, -1656.2344, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 6203, 956.1953, -1689.6016, 12.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 6205, 954.2734, -1720.7969, 20.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 955.9063, -1656.2344, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 954.7578, -1656.1797, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 949.0313, -1651.6641, 12.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 943.5000, -1647.0313, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 955.0547, -1651.6094, 15.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 955.3281, -1653.4531, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 955.3281, -1649.8672, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 954.6484, -1647.0313, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 955.9063, -1647.0313, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 943.2734, -1640.3203, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 951.8672, -1639.4063, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 944.7344, -1637.1484, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 945.2656, -1638.8047, 20.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 960.1563, -1764.6953, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 958.6875, -1747.4297, 12.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 964.9922, -1761.2500, 8.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 961.5469, -1749.0859, 12.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 976.5625, -1771.3516, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 971.5234, -1760.0781, 12.3281, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 968.7266, -1757.6328, 8.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 973.3828, -1763.3906, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 976.0781, -1747.7734, 8.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 972.3359, -1675.5391, 11.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 975.7266, -1705.5859, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 975.6094, -1689.2656, 11.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 979.4922, -1710.5938, 10.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 979.5078, -1708.9922, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 979.5078, -1715.3203, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 979.5469, -1698.1094, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 979.6250, -1693.5938, 10.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 979.5469, -1687.3281, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 979.5703, -1680.3047, 11.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 978.9609, -1674.7344, 11.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 960.9922, -1651.6641, 12.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 966.8750, -1651.6094, 15.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 967.0313, -1653.4531, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 967.6719, -1656.2344, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 966.5234, -1656.1797, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 968.2266, -1665.6875, 12.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 979.5469, -1665.4766, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 975.6094, -1662.2109, 11.3828, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 979.2031, -1650.7500, 11.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 979.9688, -1656.8672, 11.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 973.5625, -1651.6641, 12.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 638, 967.0313, -1649.8672, 13.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 966.4141, -1647.0313, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 967.6719, -1647.0313, 12.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 982.0156, -1640.8281, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 963.5469, -1639.4063, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 968.9063, -1635.2109, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 971.0000, -1634.7813, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 968.2578, -1634.1094, 20.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1010.7266, -1779.5156, 12.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 1012.2109, -1779.2813, 13.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 621, 1019.0156, -1781.1094, 11.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 1019.7891, -1782.5000, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 1019.6563, -1778.2734, 12.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 1016.0781, -1779.9531, 12.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 1022.7656, -1780.0938, 12.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 998.2266, -1775.9844, 12.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 994.5547, -1775.3906, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 1007.1250, -1777.6953, 12.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 760, 1004.7031, -1776.7969, 13.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 1001.9531, -1776.5938, 13.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 994.9297, -1774.8672, 8.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 999.9219, -1775.3359, 13.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 6037, 1003.4219, -1737.5000, 17.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 6044, 984.0938, -1668.5859, 20.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 6038, 1003.2734, -1666.1563, 20.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 929.2813, -1632.7109, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 931.2734, -1631.9219, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 932.1016, -1632.8984, 20.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 930.8438, -1615.9844, 12.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 930.8750, -1616.7188, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 940.6641, -1616.2031, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 943.3906, -1619.9688, 8.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 951.8906, -1619.9688, 4.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 949.9219, -1624.7188, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 961.1172, -1624.7188, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 959.4766, -1616.7188, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 944.8516, -1615.9844, 12.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 958.6953, -1615.9844, 12.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 954.5078, -1616.2031, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 6047, 952.7109, -1599.5391, 20.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 6043, 955.1484, -1612.2500, 20.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 748, 966.5625, -1630.7891, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 634, 967.0391, -1616.7188, 11.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 967.6094, -1632.0000, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 969.6328, -1616.2031, 12.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 759, 973.8281, -1615.9844, 12.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 6036, 1003.8906, -1598.0391, 17.8438, 0.25);
	// Fim
	RemoveBuildingForPlayer(playerid, 727, 972.07813,-936.78125,40.4375, 20.0);//Auto escola
    RemoveBuildingForPlayer(playerid, 956, 1634.1487,-2238.2810,13.5077, 20.0); //Snack vender @ LS Airport
    RemoveBuildingForPlayer(playerid, 717, 1625.82654,-1081.38391,23.58987,20.0);//sm_bevhiltreepv (1)
    RemoveBuildingForPlayer(playerid, 1300, 1624.27332,-1081.66809,24.03077,0.0);//bin1 (1)
	RemoveBuildingForPlayer(playerid, 956, 2480.9885,-1958.5117,13.5831, 20.0); //Snack vender @ Sushi Shop in Willowfield
	RemoveBuildingForPlayer(playerid, 955, 1729.7935,-1944.0087,13.5682, 20.0); //Sprunk machine @ Unity Station
	RemoveBuildingForPlayer(playerid, 955, 2060.1099,-1898.4543,13.5538, 20.0); //Sprunk machine opposite Tony's Liqour in Willowfield
	RemoveBuildingForPlayer(playerid, 955, 2325.8708,-1645.9584,14.8270, 20.0); //Sprunk machine @ Ten Green Bottles
	RemoveBuildingForPlayer(playerid, 955, 1153.9130,-1460.8893,15.7969, 20.0); //Sprunk machine @ Market
	RemoveBuildingForPlayer(playerid, 955,1788.3965,-1369.2336,15.7578, 20.0); //Sprunk machine in Downtown Los Santos
	RemoveBuildingForPlayer(playerid, 955, 2352.9939,-1357.1105,24.3984, 20.0); //Sprunk machine @ Liquour shop in East Los Santos
	RemoveBuildingForPlayer(playerid, 1775, 2224.3235,-1153.0692,1025.7969, 20.0); //Sprunk machine @ Jefferson Motel
	RemoveBuildingForPlayer(playerid, 956, 2140.2566,-1161.7568,23.9922, 20.0); //Snack machine @ pick'n'go market in Jefferson
	RemoveBuildingForPlayer(playerid, 956, 2154.1199,-1015.7635,62.8840, 20.0); //Snach machine @ Carniceria El Pueblo in Las Colinas
	RemoveBuildingForPlayer(playerid, 956, 662.5665,-551.4142,16.3359, 20.0); //Snack vender at Dillimore Gas Station
	RemoveBuildingForPlayer(playerid, 955, 200.2010,-107.6401,1.5513, 20.0); //Sprunk machine @ Blueberry Safe House
	RemoveBuildingForPlayer(playerid, 956, 2271.4666,-77.2104,26.5824, 20.0); //Snack machine @ Palomino Creek Library
	RemoveBuildingForPlayer(playerid, 955, 1278.5421,372.1057,19.5547, 20.0); //Sprunk machine @ Papercuts in Montgomery
	RemoveBuildingForPlayer(playerid, 955, 1929.5527,-1772.3136,13.5469, 20.0); //Sprunk machine @ Idlewood Gas Station
	//San Fierro
	RemoveBuildingForPlayer(playerid, 1302, -2419.5835,984.4185,45.2969, 20.0); //Soda machine 1 @ Juniper Hollow Gas Station
	RemoveBuildingForPlayer(playerid, 1209, -2419.5835,984.4185,45.2969, 20.0); //Soda machine 2 @ Juniper Hollow Gas Station
	RemoveBuildingForPlayer(playerid, 956, -2229.2075,287.2937,35.3203, 20.0); //Snack vender @ King's Car Park
	RemoveBuildingForPlayer(playerid, 955, -1349.3947,493.1277,11.1953, 20.0); //Sprunk machine @ SF Aircraft Carrier
	RemoveBuildingForPlayer(playerid, 956, -1349.3947,493.1277,11.1953, 20.0); //Snack vender @ SF Aircraft Carrier
	RemoveBuildingForPlayer(playerid, 955, -1981.6029,142.7232,27.6875, 20.0); //Sprunk machine @ Cranberry Station
	RemoveBuildingForPlayer(playerid, 955, -2119.6245,-422.9411,35.5313, 20.0); //Sprunk machine 1/2 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2097.3696,-397.5220,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2068.5593,-397.5223,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2039.8802,-397.5214,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2011.1403,-397.5225,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2005.7861,-490.8688,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2034.5267,-490.8681,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2063.1875,-490.8687,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
	RemoveBuildingForPlayer(playerid, 955, -2091.9780,-490.8684,35.5313, 20.0); //Sprunk machine 3 @ SF Stadium
    //Las Venturas
	RemoveBuildingForPlayer(playerid, 956, -1455.1298,2592.4138,55.8359, 20.0); //Snack vender @ El Quebrados GONE
	RemoveBuildingForPlayer(playerid, 955, -252.9574,2598.9048,62.8582, 20.0); //Sprunk machine @ Las Payasadas GONE
	RemoveBuildingForPlayer(playerid, 956, -252.9574,2598.9048,62.8582, 20.0); //Snack vender @ Las Payasadas GONE
	RemoveBuildingForPlayer(playerid, 956, 1398.7617,2223.3606,11.0234, 20.0); //Snack vender @ Redsands West GONE
	RemoveBuildingForPlayer(playerid, 955, -862.9229,1537.4246,22.5870, 20.0); //Sprunk machine @ The Smokin' Beef Grill in Las Barrancas GONE
	RemoveBuildingForPlayer(playerid, 955, -14.6146,1176.1738,19.5634, 20.0); //Sprunk machine @ Fort Carson GONE
	RemoveBuildingForPlayer(playerid, 956, -75.2839,1227.5978,19.7360, 20.0); //Snack vender @ Fort Carson GONE
	RemoveBuildingForPlayer(playerid, 955, 1519.3328,1055.2075,10.8203, 20.0); //Sprunk machine @ LVA Freight Department GONE
	RemoveBuildingForPlayer(playerid, 956, 1659.5096,1722.1096,10.8281, 20.0); //Snack vender near Binco @ LV Airport GONE
	RemoveBuildingForPlayer(playerid, 955, 2086.5872,2071.4958,11.0579, 20.0); //Sprunk machine @ Sex Shop on The Strip
	RemoveBuildingForPlayer(playerid, 955, 2319.9001,2532.0376,10.8203, 20.0); //Sprunk machine @ Pizza co by Julius Thruway (North)
	RemoveBuildingForPlayer(playerid, 955, 2503.2061,1244.5095,10.8203, 20.0); //Sprunk machine @ Club in the Camels Toe
	RemoveBuildingForPlayer(playerid, 956, 2845.9919,1294.2975,11.3906, 20.0); //Snack vender @ Linden Station
	//Interiors: 24/7 and Clubs
	RemoveBuildingForPlayer(playerid, 1775, 496.0843,-23.5310,1000.6797, 20.0); //Sprunk machine 1 @ Club in Camels Toe
	RemoveBuildingForPlayer(playerid, 1775, 501.1219,-2.1968,1000.6797, 20.0); //Sprunk machine 2 @ Club in Camels Toe
	RemoveBuildingForPlayer(playerid, 1776, 501.1219,-2.1968,1000.6797, 20.0); //Snack vender @ Club in Camels Toe
	RemoveBuildingForPlayer(playerid, 1775, -19.2299,-57.0460,1003.5469, 20.0); //Sprunk machine @ Roboi's type 24/7 stores
	RemoveBuildingForPlayer(playerid, 1776, -35.9012,-57.1345,1003.5469, 20.0); //Snack vender @ Roboi's type 24/7 stores
	RemoveBuildingForPlayer(playerid, 1775, -17.0036,-90.9709,1003.5469, 20.0); //Sprunk machine @ Other 24/7 stores
	RemoveBuildingForPlayer(playerid, 1776, -17.0036,-90.9709,1003.5469, 20.0); //Snach vender @ Others 24/7 stores
	
	// Casa Hospital
	RemoveBuildingForPlayer(playerid, 5967, 1259.4375, -1246.8125, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1388, 1238.3750, -1258.2813, 57.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1391, 1238.3750, -1258.2734, 44.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 1283, 1269.5469, -1280.3203, 15.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1294, 1254.6875, -1276.1641, 17.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 5857, 1259.4375, -1246.8125, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 3737, 271.5469, -1257.7422, 75.4297, 0.25);
	RemoveBuildingForPlayer(playerid, 3735, 261.0703, -1281.3125, 78.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 705, 299.6719, -1266.6484, 69.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1297.3750, -831.8359, 74.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 236.8203, -1280.0703, 71.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 247.2031, -1269.9609, 71.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 261.0625, -1299.5156, 73.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 255.1250, -1303.6953, 73.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3603, 261.0703, -1281.3125, 78.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 253.7891, -1263.5625, 71.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 261.3281, -1257.3984, 71.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 271.9922, -1247.0156, 76.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 3604, 271.5469, -1257.7422, 75.4297, 0.25);

	//Casa Vips Normal
    RemoveBuildingForPlayer(playerid, 713, 1304.7734, -1839.8672, 12.4375, 0.25);
	RemoveBuildingForPlayer(playerid, 4893, 1120.9688, -1875.8516, 24.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 4899, 1236.2031, -1876.1563, 21.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 1071.1406, -1863.7891, 14.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 5057, 1110.6250, -1849.9922, 24.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1092.0078, -1881.2813, 13.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1092.8438, -1879.6016, 12.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 1091.8828, -1878.3750, 16.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1220, 1093.5391, -1878.6094, 12.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1175.3828, -1877.5625, 13.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 4877, 1120.9688, -1875.8516, 24.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1091.9844, -1876.8281, 13.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1101.9922, -1874.9766, 13.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1227, 1117.4688, -1874.9766, 13.3047, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 1142.1328, -1877.0078, 14.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 1164.4609, -1877.0078, 14.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1635, 1191.2891, -1877.0078, 14.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 4888, 1236.2031, -1876.1563, 21.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1076.9375, -1856.7031, 15.9297, 0.25);

	// Restaurant
    RemoveBuildingForPlayer(playerid, 5955, 1301.187, -1257.062, 21.507, 0.250);
    RemoveBuildingForPlayer(playerid, 5709, 1301.187, -1257.062, 21.507, 0.250);

	// Mecanica de Som
	RemoveBuildingForPlayer(playerid, 1413, 1879.9922, -1879.8906, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1885.2578, -1879.8984, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1864.1797, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1413, 1869.4609, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1874.7344, -1879.6641, 13.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1412, 1890.5234, -1879.6641, 13.6797, 0.25);
	
	// Departamento BOPE
	RemoveBuildingForPlayer(playerid, 6105, 1223.7188, -1616.3203, 19.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 6106, 1226.9531, -1656.1563, 24.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 6149, 1170.0781, -1668.5625, 18.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 6196, 1225.3359, -1642.7500, 25.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1525, 1271.4844, -1662.3203, 20.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1190.9844, -1686.3125, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1190.9844, -1691.3906, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1191.7891, -1691.9063, 12.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1190.9844, -1681.5234, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1191.4063, -1674.4219, 12.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1190.9844, -1674.1484, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1196.7266, -1691.3906, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1202.4141, -1691.3906, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1202.4141, -1686.3125, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1204.3906, -1692.3203, 12.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1202.4141, -1681.5234, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1258.5781, -1675.5000, 14.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1267.6719, -1675.5000, 14.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1203.6406, -1674.4844, 12.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1202.4141, -1674.1484, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1197.2734, -1674.1484, 13.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 6150, 1170.0781, -1668.5625, 18.9219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1181.3125, -1665.4688, 14.7969, 0.25);
	RemoveBuildingForPlayer(playerid, 1281, 1197.2344, -1667.0547, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1281, 1189.6016, -1667.3125, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1208.2813, -1665.4688, 14.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 1281, 1195.1797, -1661.5000, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1281, 1187.7422, -1661.4219, 13.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1188.3438, -1655.8203, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1200.3125, -1655.8203, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 6102, 1226.9531, -1656.1563, 24.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1258.5781, -1659.8750, 14.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1267.6719, -1659.8750, 14.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1292.1797, -1660.1719, 15.8906, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1237.5000, -1643.4297, 14.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1233.4688, -1643.4297, 14.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1245.5625, -1643.4297, 14.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1241.5313, -1643.4297, 14.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1258.5781, -1643.3672, 14.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1267.6719, -1643.3672, 14.6016, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1219.1172, -1640.4609, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1231.3125, -1640.4609, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1243.5078, -1640.4609, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1255.7109, -1640.4609, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1282.8281, -1639.9609, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1155.7344, -1599.9844, 13.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1169.9297, -1577.8828, 12.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1186.7344, -1578.0000, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1206.9141, -1578.0000, 12.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1211.6016, -1632.8672, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1219.1172, -1632.8672, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1231.3125, -1632.8672, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 6103, 1223.7188, -1616.3203, 19.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1243.5078, -1632.8672, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1255.7109, -1632.8672, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1282.8281, -1619.8516, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 626, 1282.8281, -1629.1094, 28.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1292.3125, -1592.5781, 15.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1159.6094, -1566.4375, 12.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1185.5313, -1566.4375, 12.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1561.3359, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1545.6016, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1547.8984, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1219.8516, -1534.4688, 12.6172, 0.25);
	
	//Prefeitura 
	RemoveBuildingForPlayer(playerid, 4057, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 4210, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1457.9375, -1620.6953, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 713, 1496.8672, -1707.8203, 13.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1713.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 1226, 1505.1797, -1727.6719, 16.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1713.7031, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1289, 1504.7500, -1711.8828, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1704.7656, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1445.0078, -1692.2344, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1445.8125, -1650.0234, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.7266, -1710.0625, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.6563, -1707.6875, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1704.6406, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1701.5703, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1457.5547, -1697.2891, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1694.0469, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 4186, 1479.5547, -1693.1406, 19.5781, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1461.1250, -1687.5625, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1463.0625, -1690.6484, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1458.6172, -1684.1328, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.2734, -1666.2969, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1471.4063, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1458.2578, -1659.2578, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1449.8516, -1655.9375, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1477.9375, -1652.7266, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.6094, -1653.2500, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1457.3516, -1650.5703, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1454.4219, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.8516, -1646.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.8984, -1651.5078, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1465.9375, -1639.8203, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1231, 1466.4688, -1637.9609, 15.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1449.5938, -1635.0469, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1467.7109, -1632.8906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8906, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1472.6641, -1627.8828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1479.4688, -1626.0234, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 3985, 1479.5625, -1631.4531, 12.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 4206, 1479.5547, -1639.6094, 13.6484, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1465.8359, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1704.5938, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 700, 1494.2109, -1694.4375, 13.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1693.7344, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1496.9766, -1686.8516, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 641, 1494.1406, -1689.2344, 11.1016, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1480.6094, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1488.2266, -1666.1797, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.4063, -1651.3906, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.3672, -1646.3828, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1493.1328, -1639.4531, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1486.1797, -1627.7656, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1280, 1491.2188, -1632.6797, 13.4531, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.4141, -1629.9766, 15.5313, 0.25);
	RemoveBuildingForPlayer(playerid, 1232, 1494.3594, -1608.3750, 15.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 1288, 1504.7500, -1705.4063, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1287, 1504.7500, -1704.4688, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1286, 1504.7500, -1695.0547, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 1285, 1504.7500, -1694.0391, 13.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.9609, -1684.6094, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.1641, -1662.0156, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1504.7188, -1670.9219, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1503.1875, -1621.1250, 11.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1501.2813, -1624.5781, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 673, 1498.3594, -1616.9688, 12.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1508.4453, -1668.7422, 22.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1505.6953, -1654.8359, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1508.5156, -1647.8594, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 625, 1513.2734, -1642.4922, 13.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 1258, 1510.8906, -1607.3125, 13.6953, 0.25);  
	
	// Car Park Hospital 
	
	RemoveBuildingForPlayer(playerid, 5929, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1341.8516, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1328.0938, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 739, 1231.1406, -1356.2109, 12.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 1297, 1231.6406, -1389.8672, 15.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1374.6094, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1356.5547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5812, 1230.8906, -1337.9844, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1335.0547, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1317.7422, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1222.6641, -1300.9219, 12.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1240.9219, -1300.9219, 12.2969, 0.25);
	
	//Shoow na praia
	RemoveBuildingForPlayer(playerid, 4245, 272.4844, -2012.1953, -15.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 4380, 272.4844, -2012.1953, -15.4766, 0.25);
	
	//Roda Gigante
     RemoveBuildingForPlayer(playerid, 6463, 389.7734, -2028.4688, 19.8047, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5000, 32.2266, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6406, 29.9297, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4531, 24.0313, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2017.4297, 16.8516, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2021.6328, 10.9844, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2028.5156, 8.7813, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3984, 10.9453, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6406, 16.8438, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2039.6563, 24.1094, 0.25);
	 RemoveBuildingForPlayer(playerid, 3751, 389.8750, -2035.3828, 29.9531, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6406, 16.8438, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2039.6563, 24.1094, 0.25);
	 RemoveBuildingForPlayer(playerid, 6298, 389.7734, -2028.4688, 19.8047, 0.25);
	 RemoveBuildingForPlayer(playerid, 6461, 389.7734, -2028.5000, 20.1094, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5000, 32.2266, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6406, 29.9297, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4531, 24.0313, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2017.4297, 16.8516, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2021.6328, 10.9844, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2028.5156, 8.7813, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3984, 10.9453, 0.25);
	 RemoveBuildingForPlayer(playerid, 3752, 389.8750, -2035.3828, 29.9531, 0.25);
	 
	 // Computadores exercito
 	 RemoveBuildingForPlayer(playerid, 3791, -1289.9766, 494.7734, 10.6719, 0.25);
     RemoveBuildingForPlayer(playerid, 3795, -1294.1172, 499.3359, 10.5469, 0.25);
	 RemoveBuildingForPlayer(playerid, 3791, -1290.5000, 496.4375, 10.6719, 0.25);
	 RemoveBuildingForPlayer(playerid, 3787, -1290.2656, 499.9609, 10.7734, 0.25);
	 RemoveBuildingForPlayer(playerid, 3787, -1290.3125, 497.9609, 10.7734, 0.25);
	 RemoveBuildingForPlayer(playerid, 3792, -1294.5938, 497.3750, 10.3359, 0.25);
	 RemoveBuildingForPlayer(playerid, 3787, -1300.6406, 504.0391, 10.7734, 0.25);
	 RemoveBuildingForPlayer(playerid, 3789, -1301.5859, 511.1094, 10.5469, 0.25);
	 RemoveBuildingForPlayer(playerid, 3792, -1301.5859, 511.9688, 10.7500, 0.25);
	 RemoveBuildingForPlayer(playerid, 3794, -1305.3359, 511.1953, 10.7188, 0.25);
	 RemoveBuildingForPlayer(playerid, 3793, -1305.2891, 512.1484, 10.8203, 0.25);
	 RemoveBuildingForPlayer(playerid, 3800, -1298.2109, 503.1641, 10.2031, 0.25);
	 RemoveBuildingForPlayer(playerid, 3798, -1297.7422, 501.6172, 10.2031, 0.25);
	 RemoveBuildingForPlayer(playerid, 3788, -1294.0156, 509.2188, 10.7188, 0.25);
	 RemoveBuildingForPlayer(playerid, 3793, -1294.0156, 510.1563, 10.8203, 0.25);
	 RemoveBuildingForPlayer(playerid, 3794, -1294.6172, 501.3281, 10.7188, 0.25);
	 RemoveBuildingForPlayer(playerid, 3798, -1293.2344, 512.4531, 10.2031, 0.25);
	 RemoveBuildingForPlayer(playerid, 3795, -1290.3984, 503.4688, 10.5469, 0.25);
	 RemoveBuildingForPlayer(playerid, 3792, -1289.7031, 503.9922, 10.7500, 0.25);
	 RemoveBuildingForPlayer(playerid, 3793, -1294.3750, 503.1094, 10.4297, 0.25);
 
    if(IsPlayerNPC(playerid)){SpawnPlayer(playerid);return true;}
   	IPlog(playerid);
    if(strfind(PlayerName(playerid), "_", false) == -0 || strfind(PlayerName(playerid), "[", false) == -0 || strfind(PlayerName(playerid), "]", false) == -0 || strfind(PlayerName(playerid), "lixo", false) == -0 || strfind(PlayerName(playerid), "buceta", false) == -0 || strfind(PlayerName(playerid), "caralho", false) == -0 || strfind(PlayerName(playerid), "[", false) == -0 || strfind(PlayerName(playerid), "server", false) == -0
	|| strfind(PlayerName(playerid), "servidor", false) == -0 || strfind(PlayerName(playerid), "crash", false) == -0 || strfind(PlayerName(playerid), "bpl", false) == -0 || strfind(PlayerName(playerid), "gamerx", false) == -0 || strfind(PlayerName(playerid), "[", false) == -0 || strfind(PlayerName(playerid), "189", false) == -0 || strfind(PlayerName(playerid), "201", false) == -0 || strfind(PlayerName(playerid), "200", false) == -0 || strfind(PlayerName(playerid), ".", false) == -0
	|| strfind(PlayerName(playerid), "*", false) == -0 || strfind(PlayerName(playerid), "(", false) == -0 || strfind(PlayerName(playerid), ")", false) == -0 || strfind(PlayerName(playerid), "@", false) == -0 || strfind(PlayerName(playerid), "amx", false) == -0 || strfind(PlayerName(playerid), "prn", false) == -0 || strfind(PlayerName(playerid), "__", false) == -0){
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você Foi Kickado por usar algum nome incorreto!");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu nome deve ser no formato Nome_Sobrenome Ex: Guru_Josh");
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Troque-o e volte, Obrigado.");
 	format(gstring,64,"Contas/%s.ini",PlayerName(playerid));Kick(playerid);fremove(gstring);return true;}
	if(strcmp("BRNM",PlayerName(playerid),true)==0){SendClientMessage(playerid,COLOR_AZULBB,"Não tente imitar BRNM ele não gosta disso!");
	SendClientMessage(playerid,COLOR_AZULBB,"BRNM te kickou!");Kick(playerid);}
	for(new i; i<sizeof(NicksProibidos); i++){if(strcmp(NicksProibidos[i],PlayerName(playerid),true)==0){SendClientMessage(playerid,COLOR_WHITE,"Você está usando um nome que é proibido.");
	SendClientMessage(playerid,COLOR_AZULBB,"Você foi banido!");getdate(Ano, Mes, Dia);
	SBan(playerid, "Pego Usando um nome que é proibido no servidor.", "Automático");}}
	gActivePlayers[playerid]++;numplayers++;
	strmid(BanInfo[playerid][pMotivo], "Nenhum", 0, strlen("Nenhum"), 256);
	strmid(BanInfo[playerid][pAdmBan], "Nenhum", 0, strlen("Nenhum"), 256);
	strmid(BanInfo[playerid][pData], "0/0/0", 0, strlen("0/0/0"), 256);
	strmid(BanInfo[playerid][pHora], "0:0:0", 0, strlen("0:0:0"), 256);
	pban[playerid] = 0;
	TaCongelado[playerid] = false;
	FoiDesban[playerid] = 0;
	Hospital[playerid] = 0;
	Voted[playerid] = 0;
	equiparammu[playerid] = 0;
	Reduzido[playerid] = 0; // pedagio
	ReduzidoBot[playerid] = 0; //bot
	var1[playerid] = 0;
	EmDialog[playerid] = 0;
	gmsg[playerid] = 0; 
	PlayerInfo[playerid][pGun1] = 0;
	TruckMission[playerid] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	HaveTaser[playerid] = 0;
	storeexit[playerid] = 0;
	PlayerInfo[playerid][pGrampo] = INVALID_PLAYER_ID;
	barexit[playerid] = 0;
	lotericaexit[playerid] = 0;
	away[playerid] = 0;
	pCofreOrg[playerid] = 0;
	InviteOffer[playerid] = 999;
	InviteJob[playerid] = 0;
	cdivulgar[playerid] = 0;
	PlayerInfo[playerid][pGun5] = 0;
	mudandonick[playerid] = 0;
	gpTimes[playerid] = 0;
	PlayerInfo[playerid][pGun6] = 0;
	PlayerInfo[playerid][pGun7] = 0;
	PlayerInfo[playerid][pGun8] = 0;
	PlayerInfo[playerid][pGun9] = 0;
	PlayerInfo[playerid][pGun10] = 0;
	gPlayerTerminal[playerid] = 0;
	PlayerInfo[playerid][pGun11] = 0;
	PlayerInfo[playerid][pGun12] = 0;
	PlayerInfo[playerid][pAmmo1] = 0;
	PlayerInfo[playerid][pCheckInfoOrg] = 0;
	PlayerInfo[playerid][pAmmo2] = 0;
	gSpamCount[playerid][0] = 0;
	gSpamCount[playerid][1] = 0;
	PlayerInfo[playerid][pAmmo3] = 0;
	PlayerInfo[playerid][pAmmo4] = 0;
	PlayerInfo[playerid][pAmmo5] = 0;
	PlayerInfo[playerid][pAmmo6] = 0;
	PlayerInfo[playerid][pAmmo7] = 0;
	PlayerInfo[playerid][pAmmo8] = 0;
	PlayerInfo[playerid][pAmmo9] = 0;
	PlayerInfo[playerid][pAmmo10] = 0;
	PlayerInfo[playerid][pAmmo11] = 0;
	PlayerInfo[playerid][pAmmo12] = 0;
 	PlayerInfo[playerid][pDiaVIP] = 0;
    PlayerInfo[playerid][pMesVIP] = 0;
    PlayerInfo[playerid][pAnoVIP] = 0;
    PlayerInfo[playerid][pHoraVIP] = 0;
	HidePM[playerid] = 0;
    PlayerInfo[playerid][pCaixinha] = 0;
	PlayerUpdateInfo[playerid][posxafk] = 0; PlayerUpdateInfo[playerid][posyafk] = 0; PlayerUpdateInfo[playerid][poszafk] = 0;
    PlayerUpdateInfo[playerid][angleafk] = 0; PlayerInactivity[playerid] = 0;
	SelectChar[playerid] = 0; PhoneOnline[playerid] = 0; OfAssalto[playerid] = 999; precoassalto[playerid] = 0;
	SelectCharID[playerid] = 0; SelectCharPlace[playerid] = 0; ChosenSkin[playerid] = 0; SemBombas[playerid] = 0;
	GettingEmprego[playerid] = 0; GuardOffer[playerid] = 999; GuardPrice[playerid] = 0;
    ApprovedAdvogado[playerid] = 0; CallAdvogado[playerid] = 0; WantAdvogado[playerid] = 0;
	KickPlayer[playerid] = 0; CurrentMoney[playerid] = 0; UsedFind[playerid] = 0;
	CP[playerid] = 0; Robbed[playerid] = 0; PlayerInfo[playerid][pSpawn] = 0;
	CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; CarCalls[playerid] = 0;
	RobbedTime[playerid] = 0; MoneyMessage[playerid] = 0; Condom[playerid] = 0;
	SexOffer[playerid] = 999; SexPrice[playerid] = 0; MendigoOffer[playerid] = 999; MendigoPrice[playerid] = 0;
	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0;
	TalkingLive[playerid] = 255; LiveOffer[playerid] = 999;
	RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; MapIconsShown[playerid] = 0;
	DrugOffer[playerid] = 999; PlayerCuffed[playerid] = 0; PlayerCuffedTime[playerid] = 0;
	DrugPrice[playerid] = 0; RegistrationStep[playerid] = 0;
	DrugGram[playerid] = 0; ConnectedToPC[playerid] = 0; OrderReady[playerid] = 0;
	JailPrice[playerid] = 0; MedicTime[playerid] = 0; NeedMedicTime[playerid] = 0; MedicBill[playerid] = 0; GotHit[playerid] = 0;
	WantedPoints[playerid] = 0; SetPlayerWantedLevel(playerid, 0); GoChase[playerid] = 999; GetChased[playerid] = 999; PlacedNews[playerid] = 0;
	OnDuty[playerid] = 0; TestFishes[playerid] = 0;
	BoxWaitTime[playerid] = 0; ChangePos2[playerid][1] = 0;
	SafeTime[playerid] = 60; TransportDuty[playerid] = 0; PlayerTied[playerid] = 0;
	BusCallTime[playerid] = 0; CopsrondaCallTime[playerid] = 0; TaxiCallTime[playerid] = 0; MedicCallTime[playerid] = 0;  MechanicCallTime[playerid] = 0;
	BusrouteEast[playerid][0] = 0; BusrouteWest[playerid][0] = 0; BusShowLocation[playerid][0] = 0; BusShowLocationC[playerid] = 0;
	FindTimePoints[playerid] = 0; FindTime[playerid] = 0; EmpregoDuty[playerid] = 0;
	Mobile[playerid] = 255; Music[playerid] = 0; BoxOffer[playerid] = 999; PlayerBoxing[playerid] = 0;
	Spectate[playerid] = 255; PlayerDrunk[playerid] = 0; PlayerDrunkTime[playerid] = 0;
	Unspec[playerid][sLocal] = 255; FishCornt[playerid] = 0; ConsumingMoney[playerid] = 0;
    gLastCar[playerid] = 0;
	gNews[playerid] = 0; BigEar[playerid] = 0; gDice[playerid] = 0; gFam[playerid] = 0;
	gPlayerLogged[playerid] = 0; gPlayerLogTries[playerid] = 0; gPlayerConta[playerid] = 0;
	gPlayerSpawned[playerid] = 0;
	PlayerTazeTime[playerid] = 0; PlayerStoned[playerid] = 0; TicketOffer[playerid] = 999; TicketMoney[playerid] = 0;
	MatsHolding[playerid] = 0;
	gPlayerMission[playerid] = 0; TaxiAccepted[playerid] = 999; BusAccepted[playerid] = 999; MedicAccepted[playerid] = 999; MechanicAccepted[playerid] = 999; CopsrondaAccepted[playerid] = 999;
	PlayerInfo[playerid][pCash] = 1000; NoFuel[playerid] = 0;
	HireCar[playerid] = 0;
	TransportValue[playerid] = 0; TransportMoney[playerid] = 0; TransportTime[playerid] = 0; TransportCost[playerid] = 0; TransportDriver[playerid] = 999;
	Locator[playerid] = 0;
	WatchingTV[playerid] = 0;
	Fishes[playerid][pLastFish] = 0; Fishes[playerid][pFishID] = 0;
	ProposeOffer[playerid] = 999; MarryWitness[playerid] = 999; MarryWitnessOffer[playerid] = 999; MarriageCeremoney[playerid] = 0; ProposedTo[playerid] = 999; GotProposedBy[playerid] = 999; DivorceOffer[playerid] = 999;
	GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
	MudarNickAceito[playerid] = 0;
	MudarSenhaAceito[playerid] = 0;
	InAFoodPlace[playerid] = 0;
	OnEquipado[playerid] = 0;
	OnMafiaEquipado[playerid] = 0;
	ThiagoInfo[playerid][PLojaA1] = 0;
	ThiagoInfo[playerid][PLojaA2] = 0;
	ThiagoInfo[playerid][PpLoja247] = 0;
	ThiagoInfo[playerid][PpLoja2472] = 0;
	PlayerInfo[playerid][pLevel] = 0;
	PlayerInfo[playerid][pAdmin] = 0; 
	PlayerInfo[playerid][pHelper] = 0;
	PlayerInfo[playerid][pCidadania] = 0;
	PlayerInfo[playerid][pVIP] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pConnectTime] = 0;
	PlayerInfo[playerid][pReg] = 0;
	PlayerInfo[playerid][pSex] = 0;
	PlayerInfo[playerid][pAge] = 0;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][pConta] = 0;
	PlayerInfo[playerid][pCrimes] = 0;
	PlayerInfo[playerid][pDeaths] = 0;
	PlayerInfo[playerid][pPhoneBook] = 0;
	PlayerInfo[playerid][pLottoNr] = 0;
	PlayerInfo[playerid][pFishes] = 0;
	PlayerInfo[playerid][pBiggestFish] = 0;
	PlayerInfo[playerid][pEmprego] = 0;
	PlayerInfo[playerid][pSalario] = 0;
	PlayerInfo[playerid][pHeadValue] = 0;
	PlayerInfo[playerid][pHeadValueT] = 0;
	PlayerInfo[playerid][pCapacete] = 0;
	PlayerInfo[playerid][pJailed] = 0;
	PlayerInfo[playerid][pJailTime] = 0;
	PlayerInfo[playerid][pMats] = 0;
	PlayerInfo[playerid][pDorgado] = 0;
	PlayerInfo[playerid][pDorgado2] = 0;
	PlayerInfo[playerid][pDoenca] = 0;
	PlayerInfo[playerid][pCreditos] = 0;
	PlayerInfo[playerid][pDrogas] = 0;
	PlayerInfo[playerid][pDrogas2] = 0;
	PlayerInfo[playerid][pDrogas3] = 0;
	PlayerInfo[playerid][pSafeDrogas] = 0;
	PlayerInfo[playerid][pSafeDrogas2] = 0;
	PlayerInfo[playerid][pSafeDrogas3] = 0;
	PlayerInfo[playerid][pLider] = 0;
	PlayerInfo[playerid][pMembro] = 0;
	PlayerInfo[playerid][pCargo] = 0;
	PlayerInfo[playerid][pContractTime] = 0;
	PlayerInfo[playerid][pDetSkill] = 0;
	PlayerInfo[playerid][pSexSkill] = 0;
	PlayerInfo[playerid][pBoxSkill] = 0;
	PlayerInfo[playerid][pLawSkill] = 0;
	PlayerInfo[playerid][pMechSkill] = 0;
	PlayerInfo[playerid][pNewsSkill] = 0;
	PlayerInfo[playerid][pDrogasSkill] = 0;
	PlayerInfo[playerid][pCookSkill] = 0;
	PlayerInfo[playerid][pFishSkill] = 0;
	PlayerInfo[playerid][pSHealth] = 0.0;
 	PlayerInfo[playerid][pPos_x] = 2246.6;
	PlayerInfo[playerid][pPos_y] = -1161.9;
	PlayerInfo[playerid][pPos_z] = 1029.7;
	PlayerInfo[playerid][pInt] = 0;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pSkin] = 0;
	PlayerInfo[playerid][pPlantei] = 0;
	admtrampando[playerid] = 0;
	admhide[playerid] = 0;
	helperhide[playerid] = 0;
	helpertrampando[playerid] = 0;
	new randphone = 1000 + random(9999);//minimum 1000  max 9999 //giving one at the start
	PlayerInfo[playerid][pPnumber] = randphone;
	PlayerInfo[playerid][pPHousekey] = 255;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pCarLic] = 0;
	PlayerInfo[playerid][pAutorizado] = 0;
	PlayerInfo[playerid][pAutorizado2] = 0;
	PlayerInfo[playerid][pFlyLic] = 0;
	PlayerInfo[playerid][pBoatLic] = 0;
	PlayerInfo[playerid][pFishLic] = 0;
	PlayerInfo[playerid][pGunLic] = 0;
	PlayerInfo[playerid][pPayDay] = 0;
	PlayerInfo[playerid][pCDPlayer] = 0;
	PlayerInfo[playerid][pWins] = 0;
	PlayerInfo[playerid][pLoses] = 0;
	PlayerInfo[playerid][pAlcoholPerk] = 0;
	PlayerInfo[playerid][pDrugPerk] = 0;
	PlayerInfo[playerid][pMiserPerk] = 0;
	PlayerInfo[playerid][pPainPerk] = 0;
	PlayerInfo[playerid][pTraderPerk] = 0;
	PlayerInfo[playerid][pTut] = 0;
	PlayerInfo[playerid][pWarns] = 0;
	pRoadblock[playerid] = 0;
	PlayerInfo[playerid][pParedao] = 0;
	pRoadCones[playerid] = 0;
	SpikeInfo[playerid][sCreated] = 0;
	PlayerInfo[playerid][pRequestingBackup] = 0;
	PlayerInfo[playerid][pMask] = 0;
	PlayerInfo[playerid][pMaskuse] = 0;
	PlayerInfo[playerid][pBarraca] = 0;
	PlayerInfo[playerid][pLuta] = 0; 
	PlayerInfo[playerid][pLastDia] = 0;
    PlayerInfo[playerid][pLastMes] = 0;
    PlayerInfo[playerid][pLastAno] = 1012;
    PlayerInfo[playerid][pLastHora] = 0;
    PlayerInfo[playerid][pLastMinuto] = 0;
	strmid(PlayerInfo[playerid][pLastLogin], "0/0/0/0/0/0", 0, strlen("0/0/0/0/0/0"),255);
	ClearCrime(playerid);
	ClearFishes(playerid);
	ClearCooking(playerid);
	ClearGroceries(playerid);
	ClearMarriage(playerid);
	/*localizardppm[playerid] = 0;
	localizardppc[playerid] = 0;
	localizardppf[playerid] = 0;
	localizardpbope[playerid] = 0;
	localizarbanco[playerid] = 0;
	localizarprefeitura[playerid] = 0;*/
	SetPlayerColor(playerid,COLOR_GRAD2);
	TextShow[playerid] = false;
	HouseEntered[playerid] = 255;
	new string2[64];
	format(string2, sizeof(string2), "Contas/%s.ini", PlayerName(playerid));
	SendClientMessage(playerid, COLOR_YELLOW, "Carregando...");
	SetPlayerMapIcon(playerid, 1,1552.6703,-1675.5068,16.1953, 30, 0xE6E6E6E6);//dp ls
	SetPlayerMapIcon(playerid, 2,1480.9403,-1770.8481,18.7958, 56, 0xE6E6E6E6);//Prefeitura
	SetPlayerMapIcon(playerid, 3,2243.6750,-1669.8136,21.0313, 45, 0xE6E6E6E6);//Binco
	SetPlayerMapIcon(playerid, 4,1456.9010,-1137.6941,23.9617, 45, 0xE6E6E6E6);//ZIP
	SetPlayerMapIcon(playerid, 5,1461.8320,-1010.3407,26.8438, 52, 0xE6E6E6E6);//Banco
	SetPlayerMapIcon(playerid, 6,1367.3584,-1287.9617,35.3292, 18, 0xE6E6E6E6);//Ammu Nation
	SetPlayerMapIcon(playerid, 7,1415.8468,-1693.0602,13.5469, 32, 0xE6E6E6E6); // centro de licencas
	SetPlayerMapIcon(playerid, 8,334.0479,-1507.9438,36.0391, 30, 0xE6E6E6E6); //dp bope
	SetPlayerMapIcon(playerid, 9,918.9910,-1252.1665,16.2109, 30, 0xE6E6E6E6); //dp pc
	SetPlayerMapIcon(playerid, 10,1791.212036,-1164.631713,23.828100, 18 , 0xE6E6E6E6);//Loja de Armas 1
	SetPlayerMapIcon(playerid, 11,608.4645,-592.8484,17.2330, 30 , 0xE6E6E6E6);//cp PF
	SetPlayerMapIcon(playerid, 12,2104.2051,-1806.5345,13.5547, 29 , 0xE6E6E6E6);//PIZZARIA LS
    SetPlayerMapIcon(playerid, 13,550.7012,-1278.5721,17.2482, 19 , 0xE6E6E6E6);//Carros Aluguel 1
    SetPlayerMapIcon(playerid, 14,2158.1355,-1172.6049,23.8200, 19 , 0xE6E6E6E6);//Carros Aluguel 2
    SetPlayerMapIcon(playerid, 15,1219.2595,-1812.4048,16.5938, 19 , 0xE6E6E6E6); //aluguel de carros perto spawn
    SetPlayerMapIcon(playerid, 16,1330.193603,-984.074523,33.896598, 19 , 0xE6E6E6E6); //aluguel de carros 2
   	SetPlayerMapIcon(playerid, 17,-1968.559814,296.269592,35.171901, 19 , 0xE6E6E6E6); //wang cars
    SetPlayerMapIcon(playerid, 18,-1529.5208,476.5718,7.1875, 30 , 0xE6E6E6E6); // HQ EXERCITO
	SetPlayerMapIcon(playerid, 19,1703.2197,-1470.1509,13.5469, 51 , 0xE6E6E6E6); //produtos
	SetPlayerMapIcon(playerid, 21,1833.6124,-1842.4968,13.5781, 17 , 0xE6E6E6E6); //mercado
	SetPlayerMapIcon(playerid, 22,1000.5861,-919.8832,42.3281, 17 , 0xE6E6E6E6); //mercado
	SetPlayerMapIcon(playerid, 23,1928.6006,-1776.4480,13.5469, 17 , 0xE6E6E6E6); //mercado
	SetPlayerMapIcon(playerid, 24,1315.5110,-898.9860,39.5781, 17 , 0xE6E6E6E6); //mercado
	SetPlayerMapIcon(playerid, 25,1352.4357,-1759.0243,13.5078, 17 , 0xE6E6E6E6); //mercado
	SetPlayerMapIcon(playerid, 26,1837.0278,-1682.3890,13.3233, 48 , 0xE6E6E6E6); //alhambra
	SetPlayerMapIcon(playerid, 27,1173.1270,-1323.4219,15.3960, 22 , 0xE6E6E6E6); //samu hospital
	SetPlayerMapIcon(playerid, 28,2027.6760,-1405.0399,16.7958, 22 , 0xE6E6E6E6); //hospital pista
	//SetPlayerMapIcon(playerid, 29,1440.1481,-2229.0723,13.5469, 55 , 0xE6E6E6E6); //MECANICOS
	SetPlayerMapIcon(playerid, 30,1203.9453,-921.0353,42.6221, 10 , 0xE6E6E6E6); //BURGER SHOT ls
	SetPlayerMapIcon(playerid, 31,1450.0607,-1965.0198,29.8656, 23, 0xE6E6E6E6);//Madeiras Ilegais
	SetPlayerMapIcon(playerid, 32,929.5987,-939.8140,42.7128, 53, 0xE6E6E6E6);//D.E.T.R.A.N
	SetPlayerMapIcon(playerid, 33,461.3484,-1500.9084,31.0592, 45, 0xE6E6E6E6);//VICTIM

	if(donocomplexo == 0)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, 0xC0C0C0AA);
	}
	if(donocomplexo == 14)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, TEAM_GROVE_COLOR);
	}
	if(donocomplexo == 11)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, COLORGZ_PF);
	}
	if(donocomplexo == 21)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, COR_DRIFTERS);
	}
	if(donocomplexo == 20)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, COR_SONS);
	}
	if(donocomplexo == 19)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, 0xF60000AA);
	}
	if(donocomplexo == 17)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, TEAM_BALLAS_COLOR);
	}
	if(donocomplexo == 18)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, TEAM_VAGOS_COLOR);
	}
	if(donocomplexo == 5)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, TEAM_AZTECAS_COLOR);
	}
	if(donocomplexo == 2)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, COR_BOPE);
	}
	if(donocomplexo == 1)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, GCOP_COLOR);
	}
	if(donocomplexo == 16)
	{
		GangZoneShowForPlayer(playerid, GZComplexo, COR_PC);
	}
	if(donoestacao == 0)
	{
    	GangZoneShowForPlayer(playerid, GZEstacao, 0xC0C0C0AA);
    }
    if(donoestacao == 1)
	{
    	GangZoneShowForPlayer(playerid, GZEstacao, COLORGZ_LH);
    }
    if(donoestacao == 2)
	{
    	GangZoneShowForPlayer(playerid, GZEstacao, COLORGZ_YAKUZA);
    }
    if(donoestacao == 3)
	{
    	GangZoneShowForPlayer(playerid, GZEstacao, COLORGZ_PF);
    }
    if(donocasarao == 0)
    {
    	GangZoneShowForPlayer(playerid, GZCasarao, 0xC0C0C0AA);
    }
    if(donocasarao == 1)
    {
    	GangZoneShowForPlayer(playerid, GZCasarao, COLORGZ_LH);
    }
    if(donocasarao == 2)
    {
    	GangZoneShowForPlayer(playerid, GZCasarao, COLORGZ_YAKUZA);
    }
    if(donocasarao == 3)
    {
    	GangZoneShowForPlayer(playerid, GZCasarao, COLORGZ_PF);
    }
	if(donoFavela == 0)
	{
		GangZoneShowForPlayer(playerid, GZFavela, 0xC0C0C0AA);
	}
	if(donoFavela == 1)
	{
		GangZoneShowForPlayer(playerid, GZFavela, TEAM_GROVE_COLOR);
	}
	if(donoFavela == 2)
	{
		GangZoneShowForPlayer(playerid, GZFavela, TEAM_BALLAS_COLOR);
	}
	if(donoFavela == 3)
	{
		GangZoneShowForPlayer(playerid, GZFavela, TEAM_VAGOS_COLOR);
	}
	if(donoFavela == 4)
	{
		GangZoneShowForPlayer(playerid, GZFavela, TEAM_AZTECAS_COLOR);
	}
	if(donoFavela == 5)
	{
		GangZoneShowForPlayer(playerid, GZFavela, COR_BOPE);
	}
	if(donoFavela == 6)
	{
		GangZoneShowForPlayer(playerid, GZFavela, GCOP_COLOR);
	}
	if(donoFavela == 7)
	{
		GangZoneShowForPlayer(playerid, GZFavela, 0xF6000000);
	}
	if(donoFavela == 8)
	{
		GangZoneShowForPlayer(playerid, GZFavela, COR_SONS);
	}
	if(donoFavela == 9)
	{
		GangZoneShowForPlayer(playerid, GZFavela, COR_PR);
	}
	if(donoFavela == 10)
	{
		GangZoneShowForPlayer(playerid, GZFavela, COR_DRIFTERS);
	}

	if(donoskate == 0)
	{
		GangZoneShowForPlayer(playerid, GZSkate, 0xC0C0C0AA);
	}
	if(donoskate == 1)
	{
		GangZoneShowForPlayer(playerid, GZSkate, TEAM_GROVE_COLOR);
	}
	if(donoskate == 2)
	{
		GangZoneShowForPlayer(playerid, GZSkate, TEAM_BALLAS_COLOR);
	}
	if(donoskate == 3)
	{
		GangZoneShowForPlayer(playerid, GZSkate, TEAM_VAGOS_COLOR);
	}
	if(donoskate == 4)
	{
		GangZoneShowForPlayer(playerid, GZSkate, TEAM_AZTECAS_COLOR);
	}
	if(donoskate == 5)
	{
		GangZoneShowForPlayer(playerid, GZSkate, COR_BOPE);
	}
	if(donoskate == 6)
	{
		GangZoneShowForPlayer(playerid, GZSkate, GCOP_COLOR);
	}
	if(donoskate == 7)
	{
		GangZoneShowForPlayer(playerid, GZSkate, 0xF6000000);
	}
	if(donoskate == 8)
	{
		GangZoneShowForPlayer(playerid, GZSkate, COR_SONS);
	}
	if(donoskate == 9)
	{
		GangZoneShowForPlayer(playerid, GZSkate, COR_PR);
	}
	if(donoskate == 10)
	{
		GangZoneShowForPlayer(playerid, GZSkate, COR_DRIFTERS);
	}

	if(donoaero == 0)
	{
		GangZoneShowForPlayer(playerid, GZAero, 0xC0C0C0AA);
	}
	if(donoaero == 1)
	{
		GangZoneShowForPlayer(playerid, GZAero, TEAM_GROVE_COLOR);
	}
	if(donoaero == 2)
	{
		GangZoneShowForPlayer(playerid, GZAero, TEAM_BALLAS_COLOR);
	}
	if(donoaero == 3)
	{
		GangZoneShowForPlayer(playerid, GZAero, TEAM_VAGOS_COLOR);
	}
	if(donoaero == 4)
	{
		GangZoneShowForPlayer(playerid, GZAero, TEAM_AZTECAS_COLOR);
	}
	if(donoaero == 5)
	{
		GangZoneShowForPlayer(playerid, GZAero, COR_BOPE);
	}
	if(donoaero == 6)
	{
		GangZoneShowForPlayer(playerid, GZAero, GCOP_COLOR);
	}
	if(donoaero == 7)
	{
		GangZoneShowForPlayer(playerid, GZAero, 0xF6000000);
	}
	if(donoaero == 8)
	{
		GangZoneShowForPlayer(playerid, GZAero, COR_SONS);
	}
	if(donoaero == 9)
	{
		GangZoneShowForPlayer(playerid, GZAero, COR_PR);
	}
	if(donoaero == 10)
	{
		GangZoneShowForPlayer(playerid, GZAero, COR_DRIFTERS);
	}

	if(donopark == 0)
	{
		GangZoneShowForPlayer(playerid, GZPark, 0xC0C0C0AA);
	}
	if(donopark == 1)
	{
		GangZoneShowForPlayer(playerid, GZPark, TEAM_GROVE_COLOR);
	}
	if(donopark == 2)
	{
		GangZoneShowForPlayer(playerid, GZPark, TEAM_BALLAS_COLOR);
	}
	if(donopark == 3)
	{
		GangZoneShowForPlayer(playerid, GZPark, TEAM_VAGOS_COLOR);
	}
	if(donopark == 4)
	{
		GangZoneShowForPlayer(playerid, GZPark, TEAM_AZTECAS_COLOR);
	}
	if(donopark == 5)
	{
		GangZoneShowForPlayer(playerid, GZPark, COR_BOPE);
	}
	if(donopark == 6)
	{
		GangZoneShowForPlayer(playerid, GZPark, GCOP_COLOR);
	}
	if(donopark == 7)
	{
		GangZoneShowForPlayer(playerid, GZPark, 0xF6000000);
	}
	if(donopark == 8)
	{
		GangZoneShowForPlayer(playerid, GZPark, COR_SONS);
	}
	if(donopark == 9)
	{
		GangZoneShowForPlayer(playerid, GZPark, COR_PR);
	}
	if(donopark == 10)
	{
		GangZoneShowForPlayer(playerid, GZPark, COR_DRIFTERS);
	}

	ClearChatbox(playerid, 100);
	if(fexist(string2))
	{
		gPlayerConta[playerid] = 1;
	}
	else
	{
		gPlayerConta[playerid] = 0;
	}
	return true;
}

forward CheckDesbanAuto(playerid);
public CheckDesbanAuto(playerid)
{
	new string3[128];
	new string4[128];
	new ANO, MES, DIA;
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(string3, sizeof(string3), "BanidosTemp/%s.ini", PlayerName(playerid));
	format(string4, sizeof(string4), "IPsBanidosTemp/%s.ini", ip);
	if(fexist(string3))
	{
	    getdate(ANO, MES, DIA);
		if(DIA >= PlayerInfo[playerid][pDiaBanTemp] && MES >= PlayerInfo[playerid][pMesBanTemp] && ANO >= PlayerInfo[playerid][pAnoBanTemp])
		{
			dini_Remove(string3);
			FoiDesban[playerid] = 1;
			NaoPodeLogar[playerid] = 0;
			if(fexist(string4))
			{
			    NaoPodeLogar[playerid] = 0;
				dini_Remove(string4);
			}
		}
		else
		{
		    NaoPodeLogar[playerid] = 1;
		    ForceClassSelection(playerid);
	   	 	SetTimerEx("BanAuto2", 1300, 0, "i", playerid);
		}
	}
	else
	{
	    NaoPodeLogar[playerid] = 0;
	}
	if(fexist(string4))
	{
	    NaoPodeLogar[playerid] = 1;
	    ForceClassSelection(playerid);
		SetTimerEx("BanAuto2", 1300, 0, "i", playerid);
	}
	else
	{
	    NaoPodeLogar[playerid] = 0;
	}
	return true;
}


forward BanAuto2(playerid);
public BanAuto2(playerid)
{
	new string[128];
   	new DialogBPH[1500];
	new string3[128];
	new string4[128];
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(string3, sizeof(string3), "BanidosTemp/%s.ini", PlayerName(playerid));
	if(fexist(string3)) //autoban
	{
   		ClearChatbox(playerid, 100);
		strmid(BanInfo[playerid][pMotivo], dini_Get(string3,"Motivo"), 0, strlen(dini_Get(string3,"Motivo")), 255);
		strmid(BanInfo[playerid][pAdmBan], dini_Get(string3,"Admin"), 0, strlen(dini_Get(string3,"Admin")), 255);
	   	strmid(BanInfo[playerid][pData], dini_Get(string3,"Data"), 0, strlen(dini_Get(string3,"Data")), 255);
	   	strmid(BanInfo[playerid][pHora], dini_Get(string3,"Hora"), 0, strlen(dini_Get(string3,"Hora")), 255);
	   	
  	   	strmid(BanInfo[playerid][BanDia], dini_Get(string3,"DiaBanTemp"), 0, strlen(dini_Get(string3,"DiaBanTemp")), 255);
	   	strmid(BanInfo[playerid][BanMes], dini_Get(string3,"MesBanTemp"), 0, strlen(dini_Get(string3,"MesBanTemp")), 255);
	   	strmid(BanInfo[playerid][BanAno], dini_Get(string3,"AnoBanTemp"), 0, strlen(dini_Get(string3,"AnoBanTemp")), 255);
	   	
		format(string, 128, "{FF0000}Você está Banido do Servidor.\n\n");
		strcat(DialogBPH,string);
 		format(string, 128, "{FFFFFF}*******[INFORMAÇÕES]*******\n\n");
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Nick: %s\n\n", PlayerName(playerid));
		strcat(DialogBPH,string);
 		format(string, sizeof(string), "{00FFFF}IP: %s\n\n", ip);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Motivo: %s\n\n", BanInfo[playerid][pMotivo]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Admin: %s\n\n", BanInfo[playerid][pAdmBan]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Dia: %s\n\n", BanInfo[playerid][pData]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Hora: %s\n\n", BanInfo[playerid][pHora]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Data Desban: {00FF00}%s/%s/%s\n\n", BanInfo[playerid][BanDia], BanInfo[playerid][BanMes], BanInfo[playerid][BanAno], BanInfo[playerid][pHora]);
		strcat(DialogBPH,string);
 		format(string, 128, "{FFFFFF}************************************\n");
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{FF0000}Obs: Para fazer uma revisão acesse\n{FFFFFF}brnm.forumeiros.com/f6-revisao-de-ban");
		strcat(DialogBPH,string);
		ShowPlayerDialog(playerid, 8723, DIALOG_STYLE_MSGBOX, "{FFFFFF}Informações do ban", DialogBPH, "Sair", "");
		ForceClassSelection(playerid);
	  	//Kick(playerid);
    	SetTimerEx("KickBanido", 1000, 0, "i", playerid);
  		//NaoPodeLogar[playerid] = 1;
  		return true;
	}
	format(string4, sizeof(string4), "IPsBanidosTemp/%s.ini", ip);
	if(fexist(string4)) //autoban
	{
   		ClearChatbox(playerid, 100);
		strmid(BanInfo[playerid][pMotivo], dini_Get(string4,"Motivo"), 0, strlen(dini_Get(string4,"Motivo")), 255);
		strmid(BanInfo[playerid][pAdmBan], dini_Get(string4,"Admin"), 0, strlen(dini_Get(string4,"Admin")), 255);
	   	strmid(BanInfo[playerid][pData], dini_Get(string4,"Data"), 0, strlen(dini_Get(string4,"Data")), 255);
	   	strmid(BanInfo[playerid][pHora], dini_Get(string4,"Hora"), 0, strlen(dini_Get(string4,"Hora")), 255);
	   	strmid(BanInfo[playerid][pNick], dini_Get(string4,"Nick"), 0, strlen(dini_Get(string4,"Nick")), 255);
	   	
  	   	strmid(BanInfo[playerid][BanDia], dini_Get(string4,"DiaBanTemp"), 0, strlen(dini_Get(string4,"DiaBanTemp")), 255);
	   	strmid(BanInfo[playerid][BanMes], dini_Get(string4,"MesBanTemp"), 0, strlen(dini_Get(string4,"MesBanTemp")), 255);
	   	strmid(BanInfo[playerid][BanAno], dini_Get(string4,"AnoBanTemp"), 0, strlen(dini_Get(string4,"AnoBanTemp")), 255);

		format(string, 128, "{FF0000}Você está Banido do Servidor.\n\n");
		strcat(DialogBPH,string);
 		format(string, 128, "*******[INFORMAÇÕES]*******\n");
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Nick: %s\n\n", BanInfo[playerid][pNick]);
		strcat(DialogBPH,string);
 		format(string, sizeof(string), "{00FFFF}IP: %s\n\n", ip);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Motivo: %s\n\n", BanInfo[playerid][pMotivo]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Admin: %s\n\n", BanInfo[playerid][pAdmBan]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Dia: %s\n\n", BanInfo[playerid][pData]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Hora: %s\n\n", BanInfo[playerid][pHora]);
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{00FFFF}Data Desban: {00FF00}%s/%s/%s\n\n", BanInfo[playerid][BanDia], BanInfo[playerid][BanMes], BanInfo[playerid][BanAno], BanInfo[playerid][pHora]);
		strcat(DialogBPH,string);
  		format(string, 128, "************************************\n");
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{FFFFFF}Este IP só será desbanido com a mesma conta.\n");
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{FF0000}Obs: Para fazer uma revisão acesse\n");
		strcat(DialogBPH,string);
		format(string, sizeof(string), "{FFFFFF}brnm.forumeiros.com/f6-revisao-de-ban\n");
		strcat(DialogBPH,string);
		ShowPlayerDialog(playerid, 8723, DIALOG_STYLE_MSGBOX, "{FFFFFF}Informações do ban", DialogBPH, "Sair", "");
  		//Kick(playerid);
    	SetTimerEx("KickBanido", 1000, 0, "i", playerid);
  		//NaoPodeLogar[playerid] = 1;
  		return true;
	}
	return true;
}

public ClearMarriage(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		strmid(PlayerInfo[playerid][pMarriedTo], "Ninguem", 0, strlen("Ninguem"), 255);
		PlayerInfo[playerid][pMarried] = 0;
	}
	return true;
}
public ClearCrime(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "********");
		strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
		strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	}
	return true;
}

public FishCost(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new cost = 0;
		switch (fish)
		{
		    case 1:
		    {
		        cost = 1;
		    }
		    case 2:
		    {
		        cost = 3;
		    }
		    case 3:
		    {
		        cost = 3;
		    }
		    case 5:
		    {
		        cost = 5;
		    }
		    case 6:
		    {
		        cost = 2;
		    }
		    case 8:
		    {
		        cost = 8;
		    }
		    case 9:
		    {
		        cost = 12;
		    }
		    case 11:
		    {
		        cost = 9;
		    }
		    case 12:
		    {
		        cost = 7;
		    }
		    case 14:
		    {
		        cost = 12;
		    }
		    case 15:
		    {
		        cost = 9;
		    }
		    case 16:
		    {
		        cost = 7;
		    }
		    case 17:
		    {
		        cost = 7;
		    }
		    case 18:
		    {
		        cost = 10;
		    }
		    case 19:
		    {
		        cost = 4;
		    }
		    case 21:
		    {
		        cost = 3;
		    }
		}
		return cost;
	}
	return 0;
}

public ClearFishes(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Fishes[playerid][pFid1] = 0; Fishes[playerid][pFid2] = 0; Fishes[playerid][pFid3] = 0;
		Fishes[playerid][pFid4] = 0; Fishes[playerid][pFid5] = 0;
		Fishes[playerid][pWeight1] = 0; Fishes[playerid][pWeight2] = 0; Fishes[playerid][pWeight3] = 0;
		Fishes[playerid][pWeight4] = 0; Fishes[playerid][pWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
	}
	return true;
}

public ClearFishID(playerid, fish)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		switch (fish)
		{
		    case 1:
		    {
		        strmid(Fishes[playerid][pFish1], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight1] = 0;
		        Fishes[playerid][pFid1] = 0;
		    }
		    case 2:
		    {
		        strmid(Fishes[playerid][pFish2], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight2] = 0;
		        Fishes[playerid][pFid2] = 0;
		    }
		    case 3:
		    {
		        strmid(Fishes[playerid][pFish3], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight3] = 0;
		        Fishes[playerid][pFid3] = 0;
		    }
		    case 4:
		    {
		        strmid(Fishes[playerid][pFish4], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight4] = 0;
		        Fishes[playerid][pFid4] = 0;
		    }
		    case 5:
		    {
		        strmid(Fishes[playerid][pFish5], string, 0, strlen(string), 255);
		        Fishes[playerid][pWeight5] = 0;
		        Fishes[playerid][pFid5] = 0;
		    }
		}
	}
	return true;
}

public ClearCooking(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Cooking[playerid][pCookID1] = 0; Cooking[playerid][pCookID2] = 0; Cooking[playerid][pCookID3] = 0;
		Cooking[playerid][pCookID4] = 0; Cooking[playerid][pCookID5] = 0;
		Cooking[playerid][pCWeight1] = 0; Cooking[playerid][pCWeight2] = 0; Cooking[playerid][pCWeight3] = 0;
		Cooking[playerid][pCWeight4] = 0; Cooking[playerid][pCWeight5] = 0;
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
	}
	return true;
}

public ClearCookingID(playerid, cook)
{
	if(IsPlayerConnected(playerid))
	{
		new string[MAX_PLAYER_NAME];
		format(string, sizeof(string), "Nenhum");
		switch (cook)
		{
		    case 1:
		    {
		        strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight1] = 0;
		        Cooking[playerid][pCookID1] = 0;
		    }
		    case 2:
		    {
		        strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight2] = 0;
		        Cooking[playerid][pCookID2] = 0;
		    }
		    case 3:
		    {
		        strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight3] = 0;
		        Cooking[playerid][pCookID3] = 0;
		    }
		    case 4:
		    {
		        strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight4] = 0;
		        Cooking[playerid][pCookID4] = 0;
		    }
		    case 5:
		    {
		        strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
		        Cooking[playerid][pCWeight5] = 0;
		        Cooking[playerid][pCookID5] = 0;
		    }
		}
	}
	return true;
}
public ClearGroceries(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
	    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
	    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
	}
	return true;
}

public Lotto(number)
{
	new JackpotFallen = 0;
	format(gstring, sizeof(gstring), "Loterica: Hoje o numero sorteado foi o nº %d.", number);
    OOCNews(COLOR_WHITE, gstring);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pLottoNr] > 0)
		    {
			    if(PlayerInfo[i][pLottoNr] == number)
			    {
			        JackpotFallen = 1;
					format(gstring, sizeof(gstring), "Loterica: %s ganhou R$%d com seu bilhete.", PlayerName(i), Jackpot);
					OOCNews(COLOR_WHITE, gstring);
					format(gstring, sizeof(gstring), "* Você ganhou R$%d com seu bilhete de loteria.", Jackpot);
					SendClientMessage(i, COLOR_YELLOW, gstring);
					ConsumingMoney[i] = 1;
					GivePlayerMoney(i, Jackpot);
			    }
			    else
			    {
			        SendClientMessage(i, COLOR_GREY, " Você não tem um bilhete.");
			    }
			}
			PlayerInfo[i][pLottoNr] = 0;
		}
	}
	if(JackpotFallen)
	{
	    Jackpot += 1500;
	    SaveStuff();
	    format(gstring, sizeof(gstring), "Loterica: O prêmio acumulou para: R$%d.", Jackpot);
		OOCNews(COLOR_WHITE, gstring);
	}
	else
	{
	   // new rand = random(15000); rand += 2158;
	    //Jackpot += rand;
	    Jackpot += 1000;
	    SaveStuff();
	    format(gstring, sizeof(gstring), "Loterica: O prêmio acumulou para: R$%d.", Jackpot);
		OOCNews(COLOR_WHITE, gstring);
	}
	return true;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDisconnect(playerid, reason)
{

for(new i; i != 5; i++) DestroyPlayerObject(playerid, i); 
 
    TutTime[playerid] = 0;
    ComandoTutorial[playerid] = 0;
    equiparammu[playerid] = 0;
    Voted[playerid] = 0;
	RemovePlayerAttachedObject(playerid,3);
	RemovePlayerAttachedObject(playerid, 3);
	DisablePlayerCheckpoint(playerid);
 	TextDrawDestroy(Text:FilaAtendimentoText[playerid]);
    TextDrawDestroy(Text:TempoAtendimento2Text[playerid]);
	KillTimer(timer[playerid]);
 	FilaAtendimento[playerid] = 999;
    TempoAtendimento2[playerid] = 0;
	OnPlayerSave(playerid);
	OnPlayerUpdateEx(playerid);
	KillTimer(tempotd[playerid]);
    new caller = Mobile[playerid];
    OnPlayerSave(playerid);
    DestroyObject(GetPVarInt(playerid, "neon"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon1"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon2"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon3"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon4"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon5"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon6"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon7"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon8"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon9"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon10"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon11"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon12"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "neon13"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "interior"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "interior1"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "back"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "back1"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "front"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "front1"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "undercover"));
    DeletePVar(playerid, "Status");
    DestroyObject(GetPVarInt(playerid, "undercover1"));
    DeletePVar(playerid, "Status");
    if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "A ligação caiu...");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	if(HireCar[playerid] > 0)
	{
		VTrancado[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
		SetVehicleToRespawn(HireCar[playerid]);
		HireCar[playerid] = 0;
	}
    if (PlayerInfo[playerid][pBarraca] != 0)
	{
		RemoveBarraca(playerid);
	}
	if (PlayerInfo[playerid][pParedao] != 0)
	{
		RemoveParedao(playerid);
	}
	if(pRoadblock[playerid] != 0)
	{
		RemoveRoadblock(playerid);
	}
    if(SpikeInfo[playerid][sCreated] != 0)
	{
		RemoveRoadPregos(playerid);
	}
	if(pRoadCones[playerid] != 0)
	{
		RemoveRoadCones(playerid);
	}
    switch(reason)
    {
        case 0: format(gstring, sizeof(gstring), "%s saiu do servidor por erro de conexão ou crash.", PlayerName(playerid));
        case 1: format(gstring, sizeof(gstring), "%s saiu por vontade propria.", PlayerName(playerid));
        case 2: format(gstring, sizeof(gstring), "%s saiu do servidor kickado ou banido.", PlayerName(playerid));
    }
    ProxDetector(100.0, playerid, gstring,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE,COLOR_LIGHTBLUE);
	gActivePlayers[playerid]--;
	numplayers--;
	if(MudarSenhaAceito[playerid] == 1)
	{
		MudarSenhaAceito[playerid] = 0;
	}
	if(MudarNickAceito[playerid] == 1)
	{
		MudarNickAceito[playerid] = 0;
	}
	if(ProvocoCasarao[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZCasarao);
		GangZoneShowForAll(GZCasarao, 0xFFFFFF96);
		GuerranoCasarao = 0;
		ProvocoCasarao[playerid] = 0;
		donocasarao = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraCasarao);
	}
	if(ProvocoEstacao[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZEstacao);
		GangZoneShowForAll(GZEstacao, 0xFFFFFF96);
		GuerranaEstacao = 0;
		ProvocoEstacao[playerid] = 0;
		donoestacao = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraEstacao);
	}
	if(ProvocoFavela[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZFavela);
		GangZoneShowForAll(GZFavela, 0xFFFFFF96);
		GuerranaFavela = 0;
		ProvocoFavela[playerid] = 0;
		donoFavela = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraFavela);
	}
	if(ProvocoSkate[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZSkate);
		GangZoneShowForAll(GZSkate, 0xFFFFFF96);
		GuerranoSkate = 0;
		ProvocoSkate[playerid] = 0;
		donoskate = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraSkate);
	}
	if(ProvocoAero[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZAero);
		GangZoneShowForAll(GZAero, 0xFFFFFF96);
		GuerranoAero = 0;
		ProvocoAero[playerid] = 0;
		donoaero = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraAero);
	}
	if(ProvocoPark[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZPark);
		GangZoneShowForAll(GZPark, 0xFFFFFF96);
		GuerranoPark = 0;
		ProvocoPark[playerid] = 0;
		donopark = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraPark);
	}

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        if(TaxiAccepted[i] < 999)
	        {
		        if(TaxiAccepted[i] == playerid)
		        {
		            TaxiAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~O Cliente~n~~r~Saiu do jogo", 5000, 1);
		            TaxiCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(CopsrondaAccepted[i] < 999)
	        {
		        if(CopsrondaAccepted[i] == playerid)
		        {
		            CopsrondaAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~Policial o player~n~~r~Deixou o jogo", 5000, 1);
		            CopsrondaCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(MedicAccepted[i] < 999)
	        {
		        if(MedicAccepted[i] == playerid)
		        {
		            MedicAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~O Cliente~n~~r~Saiu do jogo", 5000, 1);
		            MedicCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(MechanicAccepted[i] < 999)
	        {
		        if(MechanicAccepted[i] == playerid)
		        {
		            MechanicAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~O Cliente~n~~r~Saiu do jogo", 5000, 1);
		            MechanicCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	        else if(BusAccepted[i] < 999)
	        {
		        if(BusAccepted[i] == playerid)
		        {
		            BusAccepted[i] = 999;
		            GameTextForPlayer(i, "~w~O Cliente~n~~r~Saiu do jogo", 5000, 1);
		            BusCallTime[i] = 0;
		            DisablePlayerCheckpoint(i);
		        }
	        }
	    }
	}
	if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
	{
	    if(IsPlayerConnected(TransportDriver[playerid]))
		{
		    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
		    TransportTime[TransportDriver[playerid]] = 0;
		    TransportCost[TransportDriver[playerid]] = 0;
		    format(gstring, sizeof(gstring), "~w~Passageiro saiu~n~~g~ganhou R$%d",TransportCost[playerid]);
		    GameTextForPlayer(TransportDriver[playerid], gstring, 5000, 1);
		}
	}
	if(GotHit[playerid] > 0)
	{
	    if(GetChased[playerid] < 999)
	    {
	        if(IsPlayerConnected(GetChased[playerid]))
	        {
	        	SendClientMessage(GetChased[playerid], COLOR_YELLOW, "Seu contrato saiu do servidor.");
	            GoChase[GetChased[playerid]] = 999;
			}
	    }
	}

	if(HireCar[playerid] != 299)
	{
		gLastDriver[HireCar[playerid]] = 300;
		VTrancado[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pPHousekey] != gLastCar[playerid]-1)
		{
			VTrancado[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
	if(PlayerBoxing[playerid] > 0)
	{
	    if(Boxer1 == playerid)
	    {
	        if(IsPlayerConnected(Boxer2))
	        {
	        	PlayerBoxing[Boxer2] = 0;
	        	SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer2, 5);
	        	GameTextForPlayer(Boxer2, "~r~Luta interrompida", 5000, 1);
			}
	    }
	    else if(Boxer2 == playerid)
	    {
	        if(IsPlayerConnected(Boxer1))
	        {
	        	PlayerBoxing[Boxer1] = 0;
	        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186);
	        	SetPlayerInterior(Boxer1, 5);
	        	GameTextForPlayer(Boxer1, "~r~Luta interrompida", 5000, 1);
			}
	    }
	    InRing = 0;
     	RorndStarted = 0;
		Boxer1 = 255;
		Boxer2 = 255;
		TBoxer = 255;
	}
    if(TransportDuty[playerid] == 1)
	{
		TaxiDrivers -= 1;
	}
    else if(TransportDuty[playerid] == 2)
	{
		BusDrivers -= 1;
	}
	if(IsACop(playerid))
	{
	    if(EmpregoDuty[playerid] == 2) { Copsronda -= 1; }
	}
	if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)//1 daki pr baixo os 3
	{
	    if(EmpregoDuty[playerid] == 2) { Medics -= 1; }
	}
	else if(IsAMec(playerid))
	{
	    if(EmpregoDuty[playerid] == 2) { Mechanics -= 1; }
	}
	//CurrentMoney[playerid] = 0;
	OnPlayerSave(playerid);
	BusrouteEast[playerid][0] = 0;
	BusrouteWest[playerid][0] = 0;
	
	return true;
}
public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
	{
	    if(sincronizando[playerid] == 1)
		{
			return true;
  		} 
		if(MedicBill[playerid] >= 2 && PlayerInfo[playerid][pJailed] == 0)
		{
		    if(PlayerInfo[playerid][pVIP] < 0)
			{
		    	format(gstring, 128, "Hospital: Você foi recuperado e perdeu R$%d.", precomorte);
		    	SendClientMessage(playerid, TEAM_CYAN_COLOR, gstring);
		    	GivePlayerMoney(playerid, -precomorte);
			}
			SBizzInfo[12][sbTill] += precomorte;
		    ExtortionSBiz(12, precomorte);
		    ResetPlayerWeaponsEx(playerid);
			MedicBill[playerid] = 0;
			MedicTime[playerid] = 0;
			NeedMedicTime[playerid] = 0;
			PlayerInfo[playerid][pDeaths] += 1;
			CofreOrg[4][Dinheiro] += precomorte;
			if(WantedPoints[playerid] > 0)
			{
				new wanted = WantedPoints[playerid];
				new diecash = WantedPoints[playerid]*200;
		    	format(gstring, sizeof(gstring), "Você perdeu R$%d por morrer com Nivel De Procura: %d.", diecash, wanted);
		    	SendClientMessage(playerid, COLOR_YELLOW, gstring);
		    	GivePlayerMoney(playerid, - diecash);
		    	//WantedPoints[playerid] = 2;
      			//SetPlayerWantedLevel(playerid, 2);
			}
		}
		SetPlayerHealth(playerid, 100.0);
  		spawnado[playerid] = 1;
	    MedicBill[playerid] ++;
	    SetPlayerToTeamColor(playerid);
	    if(PlayerInfo[playerid][pTut] == 0)
	    {
						gNews[playerid] = 1; gFam[playerid] = 1;			TogglePlayerControllable(playerid, 0);
			RegistrationStep[playerid] = 1;
			ClearChatbox(playerid, 8);
			SetPlayerVirtualWorld(playerid,playerid+1);
			SendClientMessage(playerid, COLOR_WHITE, "Seja Bem Vindo a Brasil Novo Mundo");
			ShowPlayerDialog(playerid,9,DIALOG_STYLE_MSGBOX,"BRNM - Registro","{00EE00}Seja Bem Vindo \n{5CACEE}Qual o seu sexo ?\n ","Masculino","Feminino");
			PlayerPlaySound(playerid, 1131, 0.0, 0.0, 0.0);
            PlayAudioStreamForPlayer(playerid, "https://www.dropbox.com/s/zjd8l2y9xq91uss/tutorial.mp3?dl=1");
            ClearChatbox(playerid, 100);
	    }
		new rand;
		new House = PlayerInfo[playerid][pPHousekey];
		if(PlayerInfo[playerid][pLuta] == 1)
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_ELBOW);
		}
		if(PlayerInfo[playerid][pLuta] == 2)
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_BOXING);
		}
		if(PlayerInfo[playerid][pLuta] == 3)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_GRABKICK);
		}
		if(PlayerInfo[playerid][pLuta] == 4)
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_KNEEHEAD);
		}
		if(PlayerInfo[playerid][pLuta] == 5)
		{
		    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);
		}
		if(PlayerInfo[playerid][pLuta] == 6)
		{
			SetPlayerFightingStyle (playerid, FIGHT_STYLE_NORMAL);
		}
		if(PlayerInfo[playerid][pJailed] == 1)
		{
		    SetPlayerInterior(playerid, 6);
			rand = random(sizeof(gPresoPmSpawns));
			SetPlayerPos(playerid, gPresoPmSpawns[rand][0], gPresoPmSpawns[rand][1], gPresoPmSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, gPresoPmSpawns[rand][3]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
		if(PlayerInfo[playerid][pJailed] == 2)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,268.5777,1857.9351,9.8133);
			SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
			return true;
		}
		/*if(PlayerInfo[playerid][pJailed] == 9)
		{
		    SetPlayerInterior(playerid, 18);
			SetPlayerPos(playerid, 1302.519897,-1.787510,1001.028259);//SetPlayerPos(playerid,1175.6014,-1179.9524,87.0427);
			//SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
            SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Cadeia!");
			return true;
		}*/
		if(PlayerInfo[playerid][pJailed] == 9)
		{
		    if(PlayerInfo[playerid][pAgendado] == 1)
		    {
		       	new motivoagendou[128];
				strmid(motivoagendou, PlayerInfo[playerid][pMotivoAgendou], 0, strlen(PlayerInfo[playerid][pMotivoAgendou]), 255);
		       	new adminagendou[64];
				strmid(adminagendou, PlayerInfo[playerid][pAdminAgendou], 0, strlen(PlayerInfo[playerid][pAdminAgendou]), 255);
		        format(stringagendou, sizeof(stringagendou), "Cadeia Agendada: %s foi preso pelo Admin %s por %d minutos, Motivo: %s", PlayerName(playerid), adminagendou, PlayerInfo[playerid][pTempoAgendado], motivoagendou);
		        SendClientMessageToAll(0xF83100AA, stringagendou);  
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você foi colocado no presidio por um administrador por violar uma ou mais regras do servidor."); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pode ter sido preso por ter pego em flagrante por um administrador ou por uma denúncia feita com provas no forum."); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Caso tenha screenshoots ou videos de violações de regras ou alguma dûvida sobre a sua punição poste no forum na área de denúncias."); 
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Digite /ajuda regras e tenha certeza de não mais violá-las sob nenhuma circunstância ou poderá acabar sendo banido.");
				WantedPoints[playerid] = 0;
      			SetPlayerWantedLevel(playerid, 0);
		  		PlayerInfo[playerid][pAgendado] = 0;
			} 
			GameTextForPlayer(playerid, "~b~Bem Vindo a ~n~~r~Cadeia dos Admins", 5000, 3);
			SetPlayerInterior(playerid, 18);
		    //SetPlayerInterior(playerid, 1);
			SetPlayerPos(playerid, 1302.519897,-1.787510,1001.028259);//SetPlayerPos(playerid,1175.6014,-1179.9524,87.0427);
			//SetPlayerWorldBounds(playerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
            SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Cadeia!");
			return true;
		}
 	if(PlayerInfo[playerid][pJailed] == 3)
		{
		    SetPlayerInterior(playerid, 10);
			rand = random(sizeof(gPresoBopeSpawns));
			SetPlayerPos(playerid, gPresoBopeSpawns[rand][0], gPresoBopeSpawns[rand][1], gPresoBopeSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, gPresoBopeSpawns[rand][3]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
  		if(PlayerInfo[playerid][pJailed] == 4)
		{
		    SetPlayerInterior(playerid, 3);
		    rand = random(sizeof(gPresoPcSpawns));
			SetPlayerPos(playerid, gPresoPcSpawns[rand][0], gPresoPcSpawns[rand][1], gPresoPcSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, gPresoPcSpawns[rand][3]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
		if(PlayerInfo[playerid][pJailed] == 5)
		{
		    SetPlayerInterior(playerid, 5);
			rand = random(sizeof(gPresoPfSpawns));
			SetPlayerPos(playerid, gPresoPfSpawns[rand][0], gPresoPfSpawns[rand][1], gPresoPfSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, gPresoPfSpawns[rand][3]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
		if(PlayerInfo[playerid][pJailed] == 6)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2695.6262,-2126.2393,13.5488);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
		if(PlayerInfo[playerid][pJailed] == 7)
		{
		    SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,-1293.2203,490.5885,11.1953);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
		if(PlayerInfo[playerid][pJailed] == 8)
		{
		    SetPlayerInterior(playerid, 6);
			SetPlayerPos(playerid,264.4160,87.2363,1001.0391);
			SendClientMessage(playerid, COLOR_LIGHTRED, "Sentença incompleta,Você voltou para Prisão");
			return true;
		}
        if(House !=255 && PlayerInfo[playerid][pSpawn] == 1)
		{
		    SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,HouseInfo[House][hInt]);
			SetPlayerVirtualWorld(playerid,HouseInfo[House][hWorld]);
			SetPlayerPos(playerid, HouseInfo[House][hExitx], HouseInfo[House][hExity],HouseInfo[House][hExitz]); // Warp the player
			PlayerInfo[playerid][pLocal] = House;
			PlayerInfo[playerid][pInt] = HouseInfo[House][hInt];
			HouseEntered[playerid] = House;
			return true;
		}
	    if(House !=255 && PlayerInfo[playerid][pSpawn] == 2)
		{
		    SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,HouseInfo[House][hInt]);
			SetPlayerVirtualWorld(playerid,HouseInfo[House][hWorld]);
			SetPlayerPos(playerid, HouseInfo[House][hExitx], HouseInfo[House][hExity],HouseInfo[House][hExitz]); // Warp the player
			PlayerInfo[playerid][pLocal] = House;
			PlayerInfo[playerid][pInt] = HouseInfo[House][hInt];
			HouseEntered[playerid] = House;
			return true;
		}
		if (PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10)// Taxistas Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
		}
		if (PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)//Policia Militar Nascimento
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerWantedLevel(playerid, 0);
			return true;
	    }
		if (PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)//ROTA Nascimento
		{
            SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerWantedLevel(playerid, 0);
			return true;
	    }
		if (PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)//Exército Nascimento
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerWantedLevel(playerid, 0);
		    return true;
		}
		if (PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)//MEDICO Nascimento
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerWantedLevel(playerid, 0);
		    return true;
		}
		if (PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)//Aztecas Nascimento
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    return true;
		}
		if (PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)//Taliban Nascimento
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    return true;
		}
		if(PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7)//Prefeito Nascimento
		{
		    SetPlayerVirtualWorld(playerid,0);
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerArmour(playerid, 100);
			PlayerInfo[playerid][pLocal] = 241;
			SetPlayerWantedLevel(playerid, 0);
		    return true;
		}
	    if (PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8) //Hitmans Nascimento
	    {
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if (PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9) //Repórters Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			GivePlayerWeapon(playerid, 43, 120);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14) //Groove Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
        if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15) //GI Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16) //Policia Civil Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
 			SetPlayerWantedLevel(playerid, 0);
	        return true;
	    }
	    if (PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17) //Ballas Membros  Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if (PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18) //Vagos Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if (PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13) //Máfia Yakuza Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if (PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12) //Máfia Cosa Nostra Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
  		if (PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)//Policia Federal Nascimento
		{
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    SetPlayerVirtualWorld(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
		    SetPlayerWantedLevel(playerid, 0);
		    return true;
		}
	    if (PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19) //Comando Vermelho
	    {
		    SetPlayerInterior(playerid, 0);
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    SetPlayerVirtualWorld(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
		    return true;
		}
        if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20) //Sons of Anarchy Nascimento
	    {
	        SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    SetPlayerVirtualWorld(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
     	if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21) //Drifters Nascimento
	    {
	        SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    SetPlayerVirtualWorld(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
        if(PlayerInfo[playerid][pMembro] == 22 || PlayerInfo[playerid][pLider] == 22) //Triads Nascimento
	    {
	        SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
		    SetPlayerVirtualWorld(playerid,0);
		    PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
        if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23) //FARC Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24) //DETRAN Nascimento
	    {
			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
	        return true;
	    }
	    if (PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25)//Advogados nascimento
		{
		    SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
		    return true;
		}
	    if ((gTeam[playerid]) == 1)
	    {
			SetPlayerToTeamColor(playerid);
			rand = random(sizeof(gMedPlayerSpawns));
			SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // Warp the player
			SetPlayerFacingAngle(playerid, 270.0); // 270.0
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return true;
		}
		else
		{
		    // Spawn Player Hotel
  			SetPlayerPos(playerid,2231.8311,-1159.7533,25.8906);
  			SetPlayerFacingAngle(playerid, 91.25);//270
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			return true;
		}
	}
	return true;
}

//------------------------------------------------------------------------------------------------------
public OnPlayerDeath(playerid, killerid, reason)
{
  new string[256];
  if( pbombanuclear2[playerid] == 1 )
  {
      if( killerid == INVALID_PLAYER_ID )
      {
	    format(string, sizeof(string), "[Terrorista]: %s Suicidou-se e a bomba nuclear foi desarmada todos salvos!", PlayerName(playerid));
	    SendClientMessageToAll(GetPlayerColor(playerid), string);
	    new Float:x,Float:y,Float:z;
		GetObjectPos(NuclearBomb, x, y, z);
		DestroyObject(NuclearBomb);
		KillTimer(TimeT);
		TimeM = 0;
		TimeS = 0;
		BOMBAON = 0;
		KillTimer(TimeT);
		KillTimer(VERVIDA);
		pbombanuclear[playerid] = 0;
		pbombanuclear2[playerid] = 0;
		SetWeather(10);
		RecompensaNuclear = 0;
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
		    {
			   pBombNuclear[playerid] = 0;
			}
			PlantouBombaNuclear[i] = 1;
			StopAudioStreamForPlayer(i);
			TextDrawHideForPlayer(i, Textdraw0[i]);
		 }
      }
      else if( killerid != INVALID_PLAYER_ID )
      {
        format(string, sizeof(string), "[Notícias]: %s matou o terrorista %s e recebeu uma recompensa de R$%d, todos salvos!", PlayerName(killerid), PlayerName(playerid), RecompensaNuclear);
	    SendClientMessageToAll(COLOR_YELLOW, string);
	    new Float:x,Float:y,Float:z;
		GetObjectPos(NuclearBomb, x, y, z);
		DestroyObject(NuclearBomb);
		KillTimer(TimeT);
		TimeM = 0;
		TimeS = 0;
		BOMBAON = 0;
		KillTimer(TimeT);
		KillTimer(VERVIDA);
		pbombanuclear[playerid] = 0;
		pbombanuclear2[playerid] = 0;
		SetWeather(10);
		GivePlayerMoneyEx(killerid, RecompensaNuclear);
		SBizzInfo[25][sbTill] -= RecompensaNuclear;
		SaveStuff();
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
		    {
			   pBombNuclear[playerid] = 0;
	        }
		    PlantouBombaNuclear[i] = 1;
		    StopAudioStreamForPlayer(i);
		    TextDrawHideForPlayer(i, Textdraw0[i]);
		   }
         }
   }
	RemovePlayerAttachedObject(playerid,3);
	RemovePlayerAttachedObject(playerid, 3);
	new Float:px,Float:py,Float:pz;
	PlayerInactivity[playerid] = 0;
	HaveTaser[playerid] = 0;
	Hospital[playerid] = 1;
	if (gPlayerTerminal[playerid] != 0)
	{
		BusrouteEnd(playerid);
	}
	gPlayerSpawned[playerid] = 0;
	SBizzInfo[12][sbTill] += 100;
	ExtortionSBiz(12, 100);
	GetPlayerPos(playerid, px, py, pz);
	spawnado[playerid] = 0;
	SetPlayerCriminal(killerid, 255, "Assasinato");
	PlayerInfo[killerid][pKills] += 1;
	if(gettime() - GetPVarInt(playerid,"PlayerLastDeath") < 1)
	{
	    Kick(playerid);
     	SetPVarInt(playerid,"PlayerLastDeath",gettime());
	}
	if(TendoGuerra == 1 && IsPlayerInTerritorio(playerid) && IsPlayerInTerritorio(killerid))
	{
		if(PlayerInfo[killerid][pMembro] == 3 || PlayerInfo[killerid][pLider] == 3)
		{
	    	if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
			{
				Territorio[talmortos] += 1;
			}
			if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
			{
				Territorio[almortos] += 1;
			}
   			if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
			{
				Territorio[FARCmortos] += 1;
			}
		}
		if(PlayerInfo[killerid][pMembro] == 6 || PlayerInfo[killerid][pLider] == 6)
		{
	    	if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
			{
				Territorio[exemortos] += 1;
			}
			if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
			{
				Territorio[almortos] += 1;
			}
      		if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
			{
				Territorio[FARCmortos] += 1;
			}
		}
		if(PlayerInfo[killerid][pMembro] == 15 || PlayerInfo[killerid][pLider] == 15)
		{
	    	if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
			{
				Territorio[exemortos] += 1;
			}
			if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
			{
				Territorio[talmortos] += 1;
			}
      		if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
			{
				Territorio[FARCmortos] += 1;
			}
		}
  		if(PlayerInfo[killerid][pMembro] == 23 || PlayerInfo[killerid][pLider] == 23)
		{
	    	if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
			{
				Territorio[exemortos] += 1;
			}
			if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
			{
				Territorio[talmortos] += 1;
			}
      		if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
			{
				Territorio[almortos] += 1;
			}
		}
	}
//==================================[SUSPEITO MORTO]=========================//
	if(WantedPoints[playerid] >= 1)
	{
	    //if(gTeam[killerid] == 2 && CrimInRange(30.0, playerid,killerid))
	    //{
			new price = WantedPoints[playerid] * 100;
		    if(PlayerInfo[killerid][pMembro] == 1 || PlayerInfo[killerid][pLider] == 1)
		    {
                format(gstring, sizeof(gstring), "~w~Suspeito ~r~Morto~n~Bonus~g~R$%d", price);
				GameTextForPlayer(killerid, gstring, 5000, 1);
				ConsumingMoney[killerid] = 1;
				GivePlayerMoney(killerid, price / 2);
				PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
				GivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pJailed] = 1;
			    PlayerInfo[playerid][pJailTime] = (WantedPoints[playerid])*(60);
			    format(gstring, sizeof(gstring), "* Você está preso por %d Segundos na Policia Militar, e perdeu R$%d por trocar tiros e fugir dos policiais.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
       			WantedPoints[playerid] = 0;
       			SetPlayerWantedLevel(playerid, 0);
				PlayerInfo[playerid][pDrogas] = 0;
                PlayerInfo[playerid][pDrogas2] = 0;
                PlayerInfo[playerid][pDrogas3] = 0;
                PlayerInfo[playerid][pMats] = 0;
			}
			if(PlayerInfo[killerid][pMembro] == 2 || PlayerInfo[killerid][pLider] == 2)
		    {
                format(gstring, sizeof(gstring), "~w~Suspeito ~r~Morto~n~Bonus~g~R$%d", price);
				GameTextForPlayer(killerid, gstring, 5000, 1);
				ConsumingMoney[killerid] = 1;
				GivePlayerMoney(killerid, price / 2);
				PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
				GivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pJailed] = 3;
			    PlayerInfo[playerid][pJailTime] = (WantedPoints[playerid])*(60);
			    format(gstring, sizeof(gstring), "* Você está preso por %d Segundos na HQ BOPE, e perdeu R$%d por trocar tiros e fugir dos policiais.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
       			WantedPoints[playerid] = 0;
       			SetPlayerWantedLevel(playerid, 0);
				PlayerInfo[playerid][pDrogas] = 0;
                PlayerInfo[playerid][pDrogas2] = 0;
                PlayerInfo[playerid][pDrogas3] = 0;
                PlayerInfo[playerid][pMats] = 0;
			}
			if(PlayerInfo[killerid][pMembro] == 3 || PlayerInfo[killerid][pLider] == 3)
		    {
                format(gstring, sizeof(gstring), "~w~Suspeito ~r~Morto~n~Bonus~g~R$%d", price);
				GameTextForPlayer(killerid, gstring, 5000, 1);
				ConsumingMoney[killerid] = 1;
				GivePlayerMoney(killerid, price / 2);
				PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
				GivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pJailed] = 7;
			    PlayerInfo[playerid][pJailTime] = (WantedPoints[playerid])*(60);
			    format(gstring, sizeof(gstring), "* Você está preso por %d Segundos no Exército, e perdeu R$%d por trocar tiros e fugir dos policiais.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
       			WantedPoints[playerid] = 0;
       			SetPlayerWantedLevel(playerid, 0);
				PlayerInfo[playerid][pDrogas] = 0;
                PlayerInfo[playerid][pDrogas2] = 0;
                PlayerInfo[playerid][pDrogas3] = 0;
                PlayerInfo[playerid][pMats] = 0;
			}
			if(PlayerInfo[killerid][pMembro] == 16 || PlayerInfo[killerid][pLider] == 16)
		    {
                format(gstring, sizeof(gstring), "~w~Suspeito ~r~Morto~n~Bonus~g~R$%d", price);
				GameTextForPlayer(killerid, gstring, 5000, 1);
				ConsumingMoney[killerid] = 1;
				GivePlayerMoney(killerid, price / 2);
				PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
				GivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pJailed] = 4;
			    PlayerInfo[playerid][pJailTime] = (WantedPoints[playerid])*(60);
			    format(gstring, sizeof(gstring), "* Você está preso por %d Segundos na Policia Civil, e perdeu R$%d por trocar tiros e fugir dos policiais.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
       			WantedPoints[playerid] = 0;
       			SetPlayerWantedLevel(playerid, 0);
				PlayerInfo[playerid][pDrogas] = 0;
                PlayerInfo[playerid][pDrogas2] = 0;
                PlayerInfo[playerid][pDrogas3] = 0;
                PlayerInfo[playerid][pMats] = 0;
			}
			if(PlayerInfo[killerid][pMembro] == 11 || PlayerInfo[killerid][pLider] == 11)
		    {
                format(gstring, sizeof(gstring), "~w~Suspeito ~r~Morto~n~Bonus~g~R$%d", price);
				GameTextForPlayer(killerid, gstring, 5000, 1);
				ConsumingMoney[killerid] = 1;
				GivePlayerMoney(killerid, price / 2);
				PlayerPlaySound(killerid, 1058, 0.0, 0.0, 0.0);
				GivePlayerMoney(playerid, - price);
				PlayerInfo[playerid][pJailed] = 5;
			    PlayerInfo[playerid][pJailTime] = (WantedPoints[playerid])*(60);
			    format(gstring, sizeof(gstring), "* Você está preso por %d Segundos na Policia Federal, e perdeu R$%d por trocar tiros e fugir dos policiais.", PlayerInfo[playerid][pJailTime], price);
			    SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
       			WantedPoints[playerid] = 0;
       			SetPlayerWantedLevel(playerid, 0);
				PlayerInfo[playerid][pDrogas] = 0;
                PlayerInfo[playerid][pDrogas2] = 0;
                PlayerInfo[playerid][pDrogas3] = 0;
                PlayerInfo[playerid][pMats] = 0;
			}
		//}
	}
//=================[NOVO ROUBAR]================
	if(ProvocoBanco[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre do Banco ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoBanco[playerid] = 0; roubando[playerid] = 0; roubobanco = 0; KillTimer(tempobanco); temporoubobanco = 0;
	}
	if(ProvocoLot[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Lotérica ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoLot[playerid] = 0; roubando[playerid] = 0; roubolot = 0; KillTimer(tempolot); temporoubolot = 0;
	}
	if(ProvocoLoja1[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Loja de Armas 1 ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoLoja1[playerid] = 0; roubando[playerid] = 0; rouboloja1 = 0; KillTimer(tempoloja1); temporouboloja1 = 0;
	}
	if(ProvocoLoja2[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Ammu Nation ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoLoja2[playerid] = 0; roubando[playerid] = 0; rouboloja2 = 0; KillTimer(tempoloja2); temporouboloja2 = 0;
	}
	if(ProvocoBinco[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Binco ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoBinco[playerid] = 0; roubando[playerid] = 0; roubobinco = 0; KillTimer(tempobinco); temporoubobinco = 0;
	}
	if(ProvocoZip[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Zip ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoZip[playerid] = 0; roubando[playerid] = 0; roubozip = 0; KillTimer(tempozip); temporoubozip = 0;
	}
	if(ProvocoVictim[playerid] == 1)
	{
	    format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Victim ! ID:[%d]", PlayerName(playerid), NomeORG(playerid) , playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	ClearAnimations(playerid);
		ProvocoVictim[playerid] = 0; roubando[playerid] = 0; roubovictim = 0; KillTimer(tempovictim); temporoubovictim = 0;
	}
//=======================[FIM ROUBAR]========================
	if(ProvocoCasarao[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZCasarao);
		GangZoneShowForAll(GZCasarao, 0xFFFFFF96);
		GuerranoCasarao = 0;
		ProvocoCasarao[playerid] = 0;
		donocasarao = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraCasarao);
	}
	if(ProvocoEstacao[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZEstacao);
		GangZoneShowForAll(GZEstacao, 0xFFFFFF96);
		GuerranaEstacao = 0;
		ProvocoEstacao[playerid] = 0;
		donoestacao = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraEstacao);
	}
	if(ProvocoFavela[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZFavela);
		GangZoneShowForAll(GZFavela, 0xFFFFFF96);
		GuerranaFavela = 0;
		ProvocoFavela[playerid] = 0;
		donoFavela = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraFavela);
	}
	if(ProvocoSkate[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZSkate);
		GangZoneShowForAll(GZSkate, 0xFFFFFF96);
		GuerranoSkate = 0;
		ProvocoSkate[playerid] = 0;
		donoskate = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraSkate);
	}
	if(ProvocoAero[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZAero);
		GangZoneShowForAll(GZAero, 0xFFFFFF96);
		GuerranoAero = 0;
		ProvocoAero[playerid] = 0;
		donoaero = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraAero);
	}

	if(ProvocoPark[playerid] == 1)
	{
		GangZoneStopFlashForAll(GZPark);
		GangZoneShowForAll(GZPark, 0xFFFFFF96);
		GuerranoPark = 0;
		ProvocoPark[playerid] = 0;
		donopark = 0;
		Dominando[playerid] = 0;
		KillTimer(TempoGuerraPark);
	}

	if(GetPlayerState(killerid) == 2)
	{
        GetPlayerName(killerid,kickname,sizeof(kickname));
		format(gstring,sizeof(gstring),"AdmCmd: %s ID:[%d]será punido por cometer DB em %s ID:[%d]",kickname,killerid,PlayerName(playerid),playerid);
	    SendClientMessageToAll(COLOR_LIGHTRED,gstring);
	}

	if(reason == 36)
	{
		if(IsPlayerConnected(killerid))
		{
			format(gstring, 128, "AdmAviso: [%d]%s usou Bazuka =2= em %s.",killerid,PlayerName(killerid),PlayerName(playerid));
			ABroadCast(COLOR_YELLOW,gstring,1);
			printf("%s", gstring);
		}
	}
 	if(reason == 26)
	{
		if(IsPlayerConnected(killerid))
		{
			format(gstring, 128, "AdmAviso: [%d]%s usou 12 Cano cerrado em %s.",killerid,PlayerName(killerid),PlayerName(playerid));
			ABroadCast(COLOR_YELLOW,gstring,1);
			printf("%s", gstring);
		}
	}

	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_Nenhum;
	}
	new caller = Mobile[playerid];
	new name[MAX_PLAYER_NAME];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "Morreram do outro lado da linha....");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if(PlayerInfo[playerid][pHeadValue] > 0)
	{
	    if(IsPlayerConnected(killerid))
	    {
		    if(GetPlayerOrg(killerid) == 8 || GetPlayerOrg(killerid) == 22)
		    {
		        if(GoChase[killerid] == playerid)
		        {
      		 		if(GetPlayerOrg(killerid) == 8) { CHitman++; }
         		 	if(GetPlayerOrg(killerid) == 22) { CTriad++; }
		            ConsumingMoney[killerid] = 1;
					new killer[MAX_PLAYER_NAME];
					GetPlayerName(killerid, killer, sizeof(killer));
					GivePlayerMoneyEx(killerid, PlayerInfo[playerid][pHeadValue]);
					format(string,128,"<< Assasino %s Completou o contrato em %s pelo preço de R$%d >>",killer,name,PlayerInfo[playerid][pHeadValue]);
					SendFamilyMessage(GetPlayerOrg(killerid), COLOR_YELLOW, string);
					format(string,128,"<< O Matador %s matou você por um contrato de R$%d, então não foi DM. >>",killer,PlayerInfo[playerid][pHeadValue]);
					SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
					format(string,128,"<< O Matador %s matou o seu contrato (%s) pelo preço de: R$%d>>",killer,name,PlayerInfo[playerid][pHeadValue]);
					SendClientMessage(ColocouContrato, COLOR_DBLUE, string);
					PlayerInfo[playerid][pHeadValue] = 0;
					GotHit[playerid] = 0;
					GetChased[playerid] = 999;
					GoChase[killerid] = 999;
				}
			}
		}
	}
	if(PlayerInfo[killerid][pHeadValue] > 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(GetPlayerOrg(playerid) == 8 || GetPlayerOrg(playerid) == 22)
		    {
		        if(GoChase[playerid] == killerid)
		        {
		            ConsumingMoney[playerid] = 1;
					format(gstring,128,"<< O Matador %s foi morto por %s, e perdeu o seu contrato >>",PlayerName(playerid),PlayerName(killerid));
					SendFamilyMessage(GetPlayerOrg(playerid), COLOR_YELLOW, gstring);
					PlayerInfo[killerid][pHeadValue] = 0;
					GotHit[killerid] = 0;
					GetChased[killerid] = 999;
					GoChase[playerid] = 999;
				}
			}
		}
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,COLOR_GRAD2);
	return 1;
}
public OnPlayerSpawn(playerid)
{
    AntiDeAMX();
	HaveTaser[playerid] = 0;
    TextDrawHideForAll(Reloginho1);
    TextDrawShowForPlayer(playerid, Reloginho1);
    TextDrawHideForAll(Reloginho2);
	TextDrawShowForPlayer(playerid, Reloginho2);
	CarKeys(playerid);
    //RecentlyShot[playerid] = 0;
    if(sincronizando[playerid] == 1)
	{
		return true;
	}
	gTeam[playerid] = PlayerInfo[playerid][pTeam]; //Set the Team
	if (gTeam[playerid] == 4) //medic / criminal reset team
	{
		gTeam[playerid] = 3;
	}
	if(gPlayerLogged[playerid] == 0)
	{
    	SendClientMessage(playerid, COLOR_LIGHTRED, "AdmCmd: Você foi kickado por Homem_Aranha, Motivo: Spawn sem login");
    	SendClientMessage(playerid, COLOR_LIGHTRED,"Homem_Aranha te kickou do servidor, e não o contrarie novamente");
       // Kick(playerid);
        return true;
 	}
	CheckInfoOrg(playerid);
	if(gTeam[playerid] == 11 && PlayerInfo[playerid][pLider] < 1)
	{
	    MedicBill[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você não foi aprovado pelo líder, agora é um Civil !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
		SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
		SpawnPlayer(playerid);
	}
	if(gTeam[playerid] == 5)
	{
	    if(PlayerInfo[playerid][pMembro] < 1)
	    {
	        MedicBill[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não faz parte de uma familia, agora é um Civil !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
			if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
            SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 10)
	{
	    if(PlayerInfo[playerid][pMembro] != 8 && PlayerInfo[playerid][pMembro] != 22)
	    {
	        MedicBill[playerid] = 0;
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não faz parte de uma agencia, é um Civil !");
			PlayerInfo[playerid][pTeam] = 3;
			gTeam[playerid] = 3;
			if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
            SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
			SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 2)
	{
		if(PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pMembro] != 24)
	    {
	    MedicBill[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é mais um oficial, é um Civil !");
		PlayerInfo[playerid][pTeam] = 3;
		gTeam[playerid] = 3;
		if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
  		SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
		SpawnPlayer(playerid);
		}
	}
	if(gTeam[playerid] == 3)
	{
	    if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
	    {
			MedicBill[playerid] = 0;
			if(PlayerInfo[playerid][pMembro] == 1) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; }
			else if(PlayerInfo[playerid][pMembro] == 2) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; }
			else if(PlayerInfo[playerid][pMembro] == 3) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; }
			else if(PlayerInfo[playerid][pMembro] == 4) { SetSpawnInfo(playerid, 1, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; }
			else if(PlayerInfo[playerid][pMembro] == 5) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; }
			else if(PlayerInfo[playerid][pMembro] == 6) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; }
			else if(PlayerInfo[playerid][pMembro] == 8) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; }
			else if(PlayerInfo[playerid][pMembro] == 9) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; }
			else if(PlayerInfo[playerid][pMembro] == 10) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; }
			else if(PlayerInfo[playerid][pMembro] == 11) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; }
			else if(PlayerInfo[playerid][pMembro] == 12) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 22; }
            else if(PlayerInfo[playerid][pMembro] == 13) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 20; }
			else if(PlayerInfo[playerid][pMembro] == 14) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 15; }
			else if(PlayerInfo[playerid][pMembro] == 15) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 16; }
			else if(PlayerInfo[playerid][pMembro] == 16) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; }
			else if(PlayerInfo[playerid][pMembro] == 17) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 18; }
			else if(PlayerInfo[playerid][pMembro] == 18) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 19; }
			else if(PlayerInfo[playerid][pMembro] == 19) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 19; }
			else if(PlayerInfo[playerid][pMembro] == 20) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 19; }
			else if(PlayerInfo[playerid][pMembro] == 21) { SetSpawnInfo(playerid, 12, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 19; }
            else if(PlayerInfo[playerid][pMembro] == 22) { SetSpawnInfo(playerid, 10, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 10; gTeam[playerid] = 10; }
            else if(PlayerInfo[playerid][pMembro] == 23) { SetSpawnInfo(playerid, 5, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; }
            else if(PlayerInfo[playerid][pMembro] == 24) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; }
            else if(PlayerInfo[playerid][pMembro] == 25) { SetSpawnInfo(playerid, 2, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 24; gTeam[playerid] = 24; }
            //SPAAWN LIDER
			else if(PlayerInfo[playerid][pLider] == 1) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 2) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 3) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 4) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 5) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 6) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 7) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 8) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 9) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 10) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 11) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 12) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 22; }
			else if(PlayerInfo[playerid][pLider] == 13) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 20; }
			else if(PlayerInfo[playerid][pLider] == 14) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 15; }
			else if(PlayerInfo[playerid][pLider] == 15) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 16; }
			else if(PlayerInfo[playerid][pLider] == 16) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			else if(PlayerInfo[playerid][pLider] == 17) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 18; }
			else if(PlayerInfo[playerid][pLider] == 18) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 19; }
			else if(PlayerInfo[playerid][pLider] == 19) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 19; }
            else if(PlayerInfo[playerid][pLider] == 20) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 19; }
            else if(PlayerInfo[playerid][pLider] == 21) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 19; }
            else if(PlayerInfo[playerid][pLider] == 22) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
            else if(PlayerInfo[playerid][pLider] == 23) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
            else if(PlayerInfo[playerid][pLider] == 24) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
            else if(PlayerInfo[playerid][pLider] == 25) { SetSpawnInfo(playerid, 11, PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0); PlayerInfo[playerid][pTeam] = 11; gTeam[playerid] = 11; }
			SpawnPlayer(playerid);
		}
	}
	if(PlayerInfo[playerid][pSkin] > 0) { SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]); }
	else
	{
		if(PlayerInfo[playerid][pSex] == 1) { SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]); }
		else { PlayerInfo[playerid][pSkin] = 226; SetPlayerSkin(playerid, PlayerInfo[playerid][pSkin]); }
	}
    SetPlayerSpawn(playerid);
	SetPlayerWeapons(playerid);
	SetPlayerToTeamColor(playerid);
	PlayerFixRadio(playerid);
	SetPlayerSkin(0, 217);
	return true;
}
forward PAdminsLog(string[]);
public PAdminsLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/admins.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
forward PHelpersLog(string[]);
public PHelpersLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/helpers.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public PayLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

public KickLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/kick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
forward SBanLog(string[]);
public SBanLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/s_ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public BanLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock fdplog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/fdp.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock desbanlog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/desban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock SmsLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/sms.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock NickLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/nick.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public VipsLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/vips.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public ConceLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/ConceLog.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
public OnPlayerEnterCheckpoint(playerid)
{
	switch(GetPVarInt(playerid,"autoescola"))
    {
        case 1:
        {
            SetPlayerCheckpoint(playerid, 1295.0634,-1840.1569,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",2);
            return 1;
        }
        case 2:
        {
            SetPlayerCheckpoint(playerid,1321.0975,-1854.8523,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",3);
            return 1;
        }
        case 3:
        {
            SetPlayerCheckpoint(playerid, 1410.7513,-1874.5946,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",4);
            return 1;
        }
        case 4:
        {
            SetPlayerCheckpoint(playerid, 1564.9369,-1875.7241,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",5);
            return 1;
        }
        case 5:
        {
            SetPlayerCheckpoint(playerid, 1572.1682,-1842.9088,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",6);
            return 1;
}
case 6:
        {
            SetPlayerCheckpoint(playerid, 1572.0623,-1729.8756,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",7);
            return 1;
}
case 7:
        {
            SetPlayerCheckpoint(playerid,1532.1687,-1677.9474,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",8);
            return 1;
}
case 8:
        {
            SetPlayerCheckpoint(playerid, 1531.5024,-1590.2842,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",9);
            return 1;
}
case 9:
        {
            SetPlayerCheckpoint(playerid, 1433.4531,-1590.1522,13.3906, 8.0);
            SetPVarInt(playerid,"autoescola",10);
            return 1;
}
case 10:
        {
            SetPlayerCheckpoint(playerid, 1441.6705,-1529.7574,13.3817, 8.0);
            SetPVarInt(playerid,"autoescola",11);
            return 1;
}
case 11:
        {
            SetPlayerCheckpoint(playerid, 1457.8906,-1440.4337,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",12);
            return 1;
}
case 12:
        {
            SetPlayerCheckpoint(playerid,1431.2020,-1438.0447,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",13);
            return 1;
}
case 13:
	{
            SetPlayerCheckpoint(playerid,1423.5162,-1418.0282,13.3828, 8.0);
            SetPVarInt(playerid,"autoescola",14);
            return 1;
}
case 14:
	   {
          SetPlayerCheckpoint(playerid,1368.8595,-1394.4031,13.4163, 8.0);
          SetPVarInt(playerid,"autoescola",15);
          return 1;
}
case 15:
	   {
          SetPlayerCheckpoint(playerid,1061.8416,-1397.1559,13.4862, 8.0);
          SetPVarInt(playerid,"autoescola",16);
          return 1;
}
case 16:
	   {
          SetPlayerCheckpoint(playerid,1060.8534,-1421.0526,13.3698, 8.0);
          SetPVarInt(playerid,"autoescola",17);
          return 1;
}
case 17:
	   {
          SetPlayerCheckpoint(playerid,1034.8632,-1573.5063,13.3906, 8.0);
          SetPVarInt(playerid,"autoescola",18);
          return 1;
}
case 18:
	   {
          SetPlayerCheckpoint(playerid,1212.7150,-1575.3098,13.4474, 8.0);
          SetPVarInt(playerid,"autoescola",19);
          SendClientMessage(playerid, COLOR_LIGHTBLUE,"Prepare-se: Mais a frente execute a baliza de forma correta!");
          PlayerInfo[playerid][pAutorizado2] = 1;
          return 1;
}
case 19:
	   {
          SetPlayerCheckpoint(playerid,1274.3601,-1571.3678,13.4491, 7.0);
          SetPVarInt(playerid,"autoescola",20);
          return 1;
}
case 20:
	   {
          SetPlayerCheckpoint(playerid,1273.4250,-1579.1064,13.5269, 6.0);
          SetPVarInt(playerid,"autoescola",21);
          return 1;
}
    }
	if(TaxiCallTime[playerid] > 0 && TaxiAccepted[playerid] < 999)
	{
	    TaxiAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao destino", 5000, 1);
		TaxiCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(BusCallTime[playerid] > 0 && BusAccepted[playerid] < 999)
	{
	    BusAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao destino", 5000, 1);
		BusCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(MedicCallTime[playerid] > 0 && MedicAccepted[playerid] < 999)
	{
	    MedicAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao destino", 5000, 1);
		MedicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(MechanicCallTime[playerid] > 0 && MechanicAccepted[playerid] < 999)
	{
	    MechanicAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao destino", 5000, 1);
		MechanicCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CopsrondaCallTime[playerid] > 0 && CopsrondaAccepted[playerid] < 999)
	{
	    CopsrondaAccepted[playerid] = 999;
		GameTextForPlayer(playerid, "~w~Chegou ao destino", 5000, 1);
		CopsrondaCallTime[playerid] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	else if(CP[playerid] == 5)
	{
	    GameTextForPlayer(playerid, "~y~Complete a Missao indo nos Checkpoint", 2500, 1);
		CP[playerid] = 0;
	    DisablePlayerCheckpoint(playerid);
	}
	else if(TruckMission[playerid] == 1)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você obteve R$1000 por entregar a carga, espere sua recarga por 5 minutos.");
		GivePlayerMoney(playerid, 1000);
		DisablePlayerCheckpoint(playerid);
		TruckMission[playerid] = 0;
		var1[playerid] = 1;
        TempoRecarga = SetTimerEx("ZerarRecarga", 180000, 0, "i", playerid);
	}
	else if(TruckMission[playerid] == 2)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você obteve R$1500 por entregar a carga, espere sua recarga por 5 minutos.");
		GivePlayerMoney(playerid, 1500);
		DisablePlayerCheckpoint(playerid);
		TruckMission[playerid] = 0;
		var1[playerid] = 1;
        TempoRecarga = SetTimerEx("ZerarRecarga", 180000, 0, "i", playerid);
	}
	else if(TruckMission[playerid] == 3)
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você obteve R$2000 por entregar a carga, espere sua recarga por 5 minutos.");
		GivePlayerMoney(playerid, 2000);
		DisablePlayerCheckpoint(playerid);
		TruckMission[playerid] = 0;
		var1[playerid] = 1;
        TempoRecarga = SetTimerEx("ZerarRecarga", 180000, 0, "i", playerid);
	}
	if(PlayerToPoint(8.0,playerid,1481.1926,-1764.2736,18.7958))//Prefeitura
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou na ~b~Prefeitura", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1462.395751,-1012.391174,26.843799))//Banco
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Banco", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1546.2761,-1675.5995,13.5620))//DP
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou ao ~b~Departamento de Policia", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1350.4865,-1753.2505,13.3582))//24-7
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Mercado de Commerce", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1790.5725,-1167.3705,23.8281))//Loja de Armas
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou a ~b~Loja de Armas", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1362.2240,-1279.7227,13.3828))//Ammu Nation
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou a ~b~Ammu Nation", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,2244.7954,-1663.5021,15.4766))//Binco
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou na ~b~Binco", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,2155.4363,-1171.3413,23.8206))//Aluguel de Carros
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Aluguel de Carros", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1411.5593,-1699.5270,13.5395))//Centro de Licencas
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Centro de Licencas", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,2003.4354,-1444.1321,13.5621))//Hospital
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Hospital", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1928.826904,-1776.405517,13.546895))//Posto idlewood
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou ao ~b~Posto de Idlewood", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,2232.5723,-1332.8412,23.9815))//Igreja
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou na ~b~Igreja", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1460.6941,-1142.9766,24.3906))//Zip
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou na ~b~Zip", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,550.7012,-1278.5721,17.2482))//Aluguel de Carros 1
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~p~|Voce chegou no ~b~Aluguel de Carros", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,454.1039,-1501.5459,30.8761))//victim
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou na ~b~VICTIM", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,661.0214,-573.4525,16.3359))//Posto Dillimore
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Posto de Dillimore", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1003.0009,-941.7861,41.6509))//Posto temple
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Posto de Temple", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1637.6385,-1148.0294,23.90636))//Concessionaria
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou na ~b~Concessionaria", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,2420.6565,-1738.9923,13.5469))//mercado ganton
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou no ~b~Mercado de Ganton", 5000, 3);
   	}
   	if(PlayerToPoint(8.0,playerid,1247.9219,-1566.4723,13.5580))//D.E.T.R.A.N
    {
        DisablePlayerCheckpoint(playerid);
        GameTextForPlayer(playerid, " ~w~Voce chegou ao ~b~D.E.T.R.A.N", 5000, 3);
   	}
   	if(PlayerToPoint(1.7,playerid,246.4971,74.3957,1003.6406))//Postao Presos DP
    {
        OnPlayerCommandText(playerid,"/pp");
        GameTextForPlayer(playerid, " ~w~Portao Celas ~b~Aberto", 5000, 3);
   	}
   	if(PlayerToPoint(1.7,playerid,1207.3396,-1441.3483,13.3828))//interfone admin
    {
        OnPlayerCommandText(playerid,"/interfoneadmin");
   	}
   	if(PlayerToPoint(2.0,playerid,367.3167,162.2013,1025.7891))//Postao Interno Prefeitura
    {
        OnPlayerCommandText(playerid,"/ppre");
        GameTextForPlayer(playerid, " ~w~Porta Prefeitura ~b~Aberto", 5000, 3);
   	}
   	//auto escola//
	else
	{
		switch (gPlayerCheckpointStatus[playerid])
		{
			case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_Nenhum;
				GameTextForPlayer(playerid, "~w~Chegou em~n~~y~Casa", 5000, 1);
		    }
		}
	}
	if (gPlayerTerminal[playerid] != 0)
	{
		if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2)
		{
		    switch(gPlayerTerminal[playerid])
		    {
		        case 1:
		        {
   	        		SetPlayerCheckpoint(playerid,1533.1049,-1610.5599,13.4766, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 2:
				{
                    SetPlayerCheckpoint(playerid,1736.9674,-1601.5439,13.5225, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 3:
				{
				    SetPlayerCheckpoint(playerid,1818.3682,-1694.8099,13.4831, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 4:
				{
			    	SetPlayerCheckpoint(playerid,1819.0150,-1872.5851,13.5023, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 5:
				{
				    SetPlayerCheckpoint(playerid,1987.3519,-2169.5242,13.4809, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 6:
				{
				    SetPlayerCheckpoint(playerid,2274.7886,-2274.3623,13.4837, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 7:
				{
				    SetPlayerCheckpoint(playerid,1996.1328,-2163.6931,13.4833, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 8:
				{
				    SetPlayerCheckpoint(playerid,1964.8201,-2077.6494,13.4842, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 9:
				{
				    SetPlayerCheckpoint(playerid,1825.4634,-1906.8052,13.5044, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 10:
				{
				    SetPlayerCheckpoint(playerid,1824.8920,-1705.7137,13.4842, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 11:
			    {
			    	SetPlayerCheckpoint(playerid,1526.6500,-1612.1188,13.4907, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
	    		case 12:
			    {
	    			SetPlayerCheckpoint(playerid,1373.5723,-1729.5554,13.4952, 5.0);
					SetTimerEx("busstoptimer", 10000, false, "i", playerid);
					Controle(playerid, 0);
					SendClientMessage(playerid, COLOR_LIGHTRED, "Aguarde 10 segundos nesse ponto para esperar passageiros.");
				}
				case 13:
				{
				    new conta = gPlayerTerminal[playerid]*50;
				    format(gstring, 128, "Você completou a rota do ônibus e ganhou R$%d, use /cancelarcorrida para iniciar novamente a rota.", conta);
        		    SendClientMessage(playerid, COLOR_YELLOW, gstring);
					SendClientMessage(playerid, COLOR_YELLOW, "Use /saircarro para sair do ônibus.");
				    BusrouteEnd(playerid);
				}
			}
			gPlayerTerminal[playerid]++;
			PlayerPlaySound(playerid, 1056, 0.0, 0.0, 0.0);
			return true;
		}
	} 
	DisablePlayerCheckpoint(playerid);
	return true;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
    new ExpID = GetProxExp(playerid);
    switch(PickupType[pickupid])
	{
	    case PICKUP_TYPE_WEAPON:
	    {
	        GivePlayerWeapon(playerid,PickupWeapon[pickupid],PickupAmmo[pickupid]);
    	    KillTimer(DestroyPickupTimer[pickupid]);
	        DestroyWeaponPickup(pickupid);
	    }
	}

	if(pickupid == picVida)
	{
	    new Float:health;
	    GetPlayerHealth(playerid, health);
		SetPlayerHealth(playerid, health + 15);
    	KillTimer(DestroyPickupVidaTimer[picVida]);
	    DestroyVidaPickup(pickupid);
	    return true;
	}
	if(Pickup[ExpID] == pickupid) {
	    new GranaExp = randomEx(400, 600), Str[55];
	    format(Str, 55, "Você conseguiu roubar R$%i,00", GranaExp);
	    SendClientMessage(playerid, COLOR_YELLOW, Str);
	    GivePlayerMoney(playerid, GranaExp);
	    DestroyPickup(Pickup[ExpID]);
	    Pickup[ExpID] = 0xFFFF;
	}
    if(pickupid == portaodpauto)
    {
    	playerpickup[playerid] = pickupid;
    	OnPlayerCommandText(playerid,"/pp2");
    }
    return true;
}
Function ConstruirCaixa(ExpID) {
    DestroyObject(Caixa[ExpID]);
    CaixaExplodido[ExpID] = false;
    Caixa[ExpID] = CreateObject(2942, EfX[ExpID], EfY[ExpID], EfZ[ExpID], EfrX[ExpID], EfrY[ExpID], EfrZ[ExpID]);
    return 1;
}
Function InfoCaixas(playerid, Float: fX, Float: fY, Float: fZ, Obj, ExpID) {
	CreateExplosion(fX, fY, fZ, 10, 2000.0);
	DestroyObject(Obj);
    DestroyObject(Caixa[ExpID]);
    Caixa[ExpID] = CreateObject(2943, EfX[ExpID], EfY[ExpID], EfZ[ExpID], EfrX[ExpID], EfrY[ExpID], EfrZ[ExpID]);
    SetTimerEx("ConstruirCaixa", (15 * 60000), false, "i", ExpID);

 	if(IsPlayerInRangeOfPoint(playerid, 30.0, EfX[ExpID], EfY[ExpID], EfZ[ExpID])) {
        SendClientMessage(playerid, 0x33AA33AA, "Você explodiu o caixa!");
        CaixaExplodido[ExpID] = true;
        VaiExplodir[ExpID] = false;

        Pickup[ExpID] = CreatePickup(1212, 1, fX, (fY + 0.4), (fZ - 0.55));
	} else {
        SendClientMessage(playerid, 0xAA3333AA,"[ERRO] Você se distanciou do caixa!.");
        CaixaExplodido[ExpID] = true;
        VaiExplodir[ExpID] = false;
    }
	return 1;
}
GetProxExp(playerid) {
	for(new i = (sizeof(Caixa) - 1); i > -1; --i) if(IsPlayerInRangeOfPoint(playerid, 5.0, EfX[i], EfY[i], EfZ[i])) return i;
	return 0xFFFF;
}

randomEx(Min, Max) return (random(((Max - Min) + 1)) + Min);
public OnPlayerSelectedMenuRow(playerid, row)
{
	return 0;
}
public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}
public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return true;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    new string[128];
	new vehicle = GetPlayerVehicleID(playerid);
	new newcar = GetPlayerVehicleID(playerid);
	new vehicleid = GetPlayerVehicleID(playerid);
	new mot, lu, alar, por, cap, porma, ob;
    new carro = GetPlayerVehicleID(playerid);
	if(IsPlayerNPC(playerid)) return true;
    new oldnew;
    xacalaca[playerid] ++;
    SetTimerEx("desxacalaca", 1000,false,"i",playerid);
    PlayerInactivity[playerid] = 0;
    if(Hospital[playerid] == 1)
    {
	    if(PlayerInfo[playerid][pJailed] >= 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você morreu com nível de procurado e foi preso automaticamente.");
			Hospital[playerid] = 0;
			return true;
		}
    	format(string, sizeof(string), "~r~Voce foi parar no hospital...", 20);
        GameTextForPlayer(playerid, string, 8000, 3);
    	SetPlayerCameraPos(playerid, 1227.7773, -1322.8782, 36.1734);
        SetPlayerCameraLookAt(playerid, 1226.7745, -1322.8737, 35.7532);
        SetPlayerFacingAngle(playerid, 271.09);
        SetPlayerPos(playerid, 1157.2249,-1333.3418,31.5106);
        SetPlayerInterior(playerid, 0);
        TaCongelado[playerid] = true;
        TogglePlayerControllable(playerid, false);
        SetTimerEx("Curando", 8000, false, "i", playerid);
        // Você pode acrescentar mais coisas ao seu gosto.
    }
	if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT){
	if(TaCongelado[playerid] == true)
	{ 
	TaCongelado[playerid] = false;  
	TogglePlayerControllable(playerid,true);
	} 
	}
    if(newstate == PLAYER_STATE_DRIVER)
	{
	if(admtrampando[playerid] < 1 && admhide[playerid] < 1) 
	     {
            if(IsAnOwnableCar(newcar))
		    {
		    if(CarInfo[newcar][cOwned]==0)
		    {
		        TogglePlayerControllable(playerid, 0);
		        Controle(playerid, 0); 
				TaCongelado[playerid] = true; 
		        GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
                SetVehicleParamsEx(carro, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
                motor[playerid] = 0;
		        format(string,sizeof(string),"%s Preco: %d /v comprar para comprar este veiculo",CarInfo[newcar][cDescription],CarInfo[newcar][cValue]);
		        SendClientMessage(playerid, COLOR_BLUE, string);
		        SendClientMessage(playerid, COLOR_BLUE, "ou aperte enter para sair do veiculo");
		    }
		    if(CarInfo[newcar][cOwned]==1)
		    {
		        format(string,sizeof(string),"Veículo registrado em nome de %s",CarInfo[newcar][cOwner]);
				SendClientMessage(playerid, COLOR_BLUE, string);
				if(PlayerInfo[playerid][pPcarkey] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey2] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey3] == vehicle) { }
				else if(PlayerInfo[playerid][pPcarkey4] == vehicle) { }
				else
				{
                if(IsPlayerAdmin(playerid))
		            {
					    SendClientMessage(playerid, COLOR_GREY, "  Você pode conduzir este carro, porque você é administrador!");
					}
                    else
				    {
				    	RemovePlayerFromVehicle(playerid);
				    	SendClientMessage(playerid, COLOR_GREY, "Você não tem a chave deste veículo");
					}
				}
		    }
		}
	}
}

	if(newstate == PLAYER_STATE_ONFOOT)
	{
	    if(TransportDuty[playerid] > 0)
		{
		    if(TransportDuty[playerid] == 1)
			{
		        TaxiDrivers -= 1;
			}
			else if(TransportDuty[playerid] == 2)
			{
			    BusDrivers -= 1;
			}
			TransportDuty[playerid] = 0;
			format(gstring, sizeof(gstring), "* Está fora de serviço, ganhou R$%d.", TransportMoney[playerid]);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
			GivePlayerMoney(playerid, TransportMoney[playerid]);
			ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
		}
		if(TransportCost[playerid] > 0 && TransportDriver[playerid] < 999)
		{
		    if(IsPlayerConnected(TransportDriver[playerid]))
			{
			    TransportMoney[TransportDriver[playerid]] += TransportCost[playerid];
			    TransportTime[TransportDriver[playerid]] = 0;
			    TransportCost[TransportDriver[playerid]] = 0;
			    format(gstring, sizeof(gstring), "~w~Custo da corrida~n~~r~R$%d",TransportCost[playerid]);
			    GameTextForPlayer(playerid, gstring, 5000, 1);
			    format(gstring, sizeof(gstring), "~w~Passageiro saiu do taxi~n~~g~ganhou R$%d",TransportCost[playerid]);
			    GameTextForPlayer(TransportDriver[playerid], gstring, 5000, 1);
				GivePlayerMoney(playerid, -TransportCost[playerid]);
				TransportCost[playerid] = 0;
				TransportTime[playerid] = 0;
    			TransportDriver[playerid] = 999;
			}
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
	}
	if (newstate == 2 || newstate == 3)
    {
    if (oldnew == 0)
    	{
        format(gstring, sizeof(gstring), "~g~%s",vehName[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
        GameTextForPlayer(playerid, gstring, 6000, 1);
		}
	}
	if(newstate == PLAYER_STATE_PASSENGER) // TAXI, BUSSES, BOTS
	{
	    new name[MAX_PLAYER_NAME];
	    GetPlayerName(playerid, name, sizeof(name));
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnected(i))
	        {
	            if(IsPlayerInVehicle(i, vehicleid) && GetPlayerState(i) == 2 && TransportDuty[i] > 0)
	            {
	                if(GetPlayerMoney(playerid) < TransportValue[i])
	                {
	                    format(gstring, sizeof(gstring), "* Você precisa de R$%d para entrar.", TransportValue[i]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
						RemovePlayerFromVehicleEx(playerid);
	                }
	                else
	                {
	                    if(TransportDuty[i] == 1)
	                    {
	                        format(gstring, sizeof(gstring), "* Pagou R$%d para o taxista.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
							format(gstring, sizeof(gstring), "* Passageiro %s entrou no Taxi.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, gstring);
							TransportTime[i] = 1;
	                    	TransportTime[playerid] = 1;
	                    	TransportCost[playerid] = TransportValue[i];
	                    	TransportCost[i] = TransportValue[i];
	                    	TransportDriver[playerid] = i;
	                    }
	                    else if(TransportDuty[i] == 2)
	                    {
	                        format(gstring, sizeof(gstring), "* Pagou R$%d para o Motorista De Onibus.", TransportValue[i]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
							format(gstring, sizeof(gstring), "* Passageiro %s entrou no Onibus.", name);
							SendClientMessage(i, COLOR_LIGHTBLUE, gstring);
	                    }
						GivePlayerMoney(playerid, - TransportValue[i]);
						TransportMoney[i] += TransportValue[i];
	                }
	            }
	        }
	    }
	}
	if(newstate == PLAYER_STATE_DRIVER)
	{// 38 / 49 / 56 = SS
		new oldcar = gLastCar[playerid];
		new HouseCar = PlayerInfo[playerid][pPHousekey]+totalveiculos;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		new carid=GetVehicleModel(newcar);
		if(carid == 0 || carid == 0 || carid == 0) { }
		else
		{
			if(IsAAztecaCar(newcar))
			{
		    	if(!IsAAzteca(playerid))
		    	{
					SendClientMessage(playerid, COR_AZTECAS, "Você não é um Azteca, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAOniCar(newcar))
			{
			    if(!IsAOni(playerid))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não é um Motorista De Onibus, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAMecCar(newcar))
			{
			    if(PlayerInfo[playerid][pEmprego] != 4)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não é um Mecânico, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsADriCar(newcar))
			{
		    	if(!IsADri(playerid))
		    	{
					SendClientMessage(playerid, COR_DRIFTERS, "Você não é um Drift, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAComandoVermelhoCar(newcar))
			{
		    	if(GetPlayerOrg(playerid) != 19)
				{
					SendClientMessage(playerid, 0xF6000000, "Você não é dos Comando Vermelho, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsACaminhoneiroCar(newcar))
			{
		    	if(!IsACaminhoneiro(playerid))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não é um Caminhoneiro, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAJornalCar(newcar))
			{
			    if(!IsAJornal(playerid))
				{
					SendClientMessage(playerid, COR_REP, "Você não é um Repórter, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsATalibanCar(newcar))
			{
			    if(!IsATaliban(playerid))
				{
					SendClientMessage(playerid, COR_Taliban, "Você não é do Taliban, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsASonsofAnarchyCar(newcar))
			{
			    if(!IsASonsofAnarchy(playerid))
				{
					SendClientMessage(playerid, COR_SONS, "Você não é dos Sons of Anarchy, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsATriadCar(newcar))
			{
			    if(!IsATriad(playerid))
				{
					SendClientMessage(playerid, COR_TRIADS, "Você não é dos Triads, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsABallasCar(newcar))
			{
			    if(!IsABallas(playerid))
				{
					SendClientMessage(playerid, COR_BALLAS, "Você não é dos Ballas, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAVagosCar(newcar))
			{
			    if(!IsAVagos(playerid))
				{
					SendClientMessage(playerid, COR_VAGOS, "Você não é dos Vagos, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsATaxiCar(newcar))
			{
			    if(!IsATaxi(playerid))
				{
					SendClientMessage(playerid, COLOR_TAXISTA, "Você não é um Taxista, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAGrooveCar(newcar))
			{
			    if(!IsAGroove(playerid))
				{
					SendClientMessage(playerid, COR_GRO, "Você não é da Groove Street, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAAlCar(newcar))
			{
			    if(!IsAAl(playerid))
				{
					SendClientMessage(playerid, COR_AL, "Você não é da Al'Qaeda, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
   			else if(IsAFARCCar(newcar))
			{
			    if(!IsAFARC(playerid))
				{
					SendClientMessage(playerid, COR_FARC, "Você não é da F.A.R.C, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAPoliciaCivilCar(newcar))
			{
			    if(GetPlayerOrg(playerid) != 16)
				{
					SendClientMessage(playerid, COR_PC, "Você não é da Polícia Civil, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COLOR_RED,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsABOPEsCar(newcar))
			{
			    if(GetPlayerOrg(playerid) != 2)
				{
					SendClientMessage(playerid, COR_BOPE, "Você não é do B.O.P.E, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COLOR_RED,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAPFCar(newcar))
			{
			    if(GetPlayerOrg(playerid) != 11)
				{
					SendClientMessage(playerid, COR_PF, "Você não é da Polícia Federal, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COLOR_RED,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAExCar(newcar))
			{
			    if(GetPlayerOrg(playerid) != 3)
				{
					SendClientMessage(playerid, COR_EXE, "Você não é do Exército, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COLOR_RED,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsACopCar(newcar))
			{
			    if(GetPlayerOrg(playerid) != 1)
				{
					SendClientMessage(playerid, COR_PM, "Você não é da Polícia Mílitar, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COLOR_RED,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAAutoescola(newcar))
			{
			    if(PlayerInfo[playerid][pAutorizado] >= 1)
				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Digite /iniciarteste para iniciar o teste de licença de motorista ou digite /saircarro");
					TaCongelado[playerid] = true;
					TogglePlayerControllable(playerid, 0);
				}
				if(PlayerInfo[playerid][pAutorizado] < 1)
				{
				SendClientMessage(playerid,COLOR_LIGHTBLUE,"Você não fez a prova teórica.");
				RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAHitCar(newcar))
			{
			    if(!IsAHit(playerid))
				{
					SendClientMessage(playerid, COR_HITMAN, "Você não é um Hitman, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAYaCar(newcar))
			{
			    if(!IsAYa(playerid))
				{
					SendClientMessage(playerid, COR_YAK, "Você não é da Máfia Yakuza, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
  			else if(IsACosaNostraCar(newcar))
			{
			    if(!IsACosaNostra(playerid))
				{
					SendClientMessage(playerid, COR_COSA, "Você não é da Máfia Cosa Nostra, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
			else if(IsAGOVCar(newcar))
			{
			    if(!IsAGOV(playerid))
				{
					SendClientMessage(playerid, COR_PRE, "Você não é do governo, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
        	}
		     else if(IsAAdvCar(newcar))
			{
			    if(!IsAAdv(playerid))
				{
					SendClientMessage(playerid, COR_ADV, "Você não é do Advogados, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COR_ADV,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
        	}
        	else if(IsADetranCar(newcar))
			{
			    if(!IsADetran(playerid))
				{
					SendClientMessage(playerid, COR_DETRAN, "Você não é do DETRAN, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
				if(OnDuty[playerid] != 1)
				{
				SendClientMessage(playerid,COR_DETRAN,"Você não bateu o cartão.");
				RemovePlayerFromVehicleEx(playerid);
				}
        	}
			else if(IsAnAmbulanceCar(newcar))
			{
			    if(!IsAAmbu(playerid))
				{
					SendClientMessage(playerid, COR_SAMU, "Você não é um Médico, por isso não tem a chave desse veículo !");
					RemovePlayerFromVehicleEx(playerid);
				}
			}
				}
		if(IsAPlane(newcar))
		{
	    	if(PlayerInfo[playerid][pFlyLic] < 1)
			{
		    	SendClientMessage(playerid, COLOR_GREY, "Você não tem licença para Voar!");
		    	SendClientMessage(playerid, COLOR_GREY, "Para Adquirir Licenças Digite /gps Centro de Licencas!");
		    	SetPlayerCriminal(playerid,255,"Voando Sem Licença");
			}
		}
       	else
		{
   	    	if(PlayerInfo[playerid][pCarLic] < 1)
			{
		    	if(PlayerDrunk[playerid] >= 1)
				{
					SetPlayerCriminal(playerid,255, "Dirigindo Bebado");
				}
				if(IsABikeCar(newcar) || IsAAutoescola(newcar))  {  
				
				
				}
				else {
				
					SendClientMessage(playerid, COLOR_GRAD1, "Você não tem licença para dirigir carro!"); 
					SendClientMessage(playerid, COLOR_GRAD1, "Para Adquirir Licenças Digite /gps > Locais em Geral > Auto Escola."); 
					SendClientMessage(playerid, COLOR_GRAD1, "Caso não tire sua licença poderá ser pego pela polícia!");     
					SetPlayerCriminal(playerid,255,"Dirigindo Sem Carteira");
					
               	}
			}
			else if(PlayerDrunk[playerid] >= 1)
			{
				SetPlayerCriminal(playerid,255, "Dirigindo Bêbado");
			}
		}
		if((newcar >= 323 && newcar <=328) || (newcar >= 329 && newcar <=340) || (newcar >= 341 && newcar <=355) || (newcar >= 389 && newcar <=394) || (newcar >= 395 && newcar <=401))
         {
            if (HireCar[playerid] != newcar)
			{
		        new Aluguelbox[256];
                format(Aluguelbox, sizeof(Aluguelbox),"Este Veiculo pode ser alugado Preço:R$%d\nDeseja Aluga-lo ?", SBizzInfo[0][sbEntranceCost], SBizzInfo[0][sbEntranceCost], SBizzInfo[1][sbEntranceCost], SBizzInfo[11][sbEntranceCost], SBizzInfo[20][sbEntranceCost]);
				Controle(playerid, 0);
   				ShowPlayerDialog(playerid,  DIALOG_ALUGAR, DIALOG_STYLE_MSGBOX, "Aluguel de Veiculos", Aluguelbox, "Sim", "Não");
			}
		}
		if((newcar >= 356 && newcar <= 361))
		{
            if (HireCar[playerid] != newcar)
			{
		        new Aluguelbox[256];
                format(Aluguelbox, sizeof(Aluguelbox),"Este Helicóptero pode ser alugado Preço:R$%d\nDeseja Aluga-lo ?", SBizzInfo[19][sbEntranceCost]);
				Controle(playerid, 0);
   				ShowPlayerDialog(playerid,  DIALOG_ALUGAR2, DIALOG_STYLE_MSGBOX, "Aluguel de Helicopteros", Aluguelbox, "Sim", "Não");
			}
		}
		else if(IsABikeCar(newcar))
  		{
		    SendClientMessage(playerid, COR_GRO, "Olá novato, seja bem vindo ao nosso servidor se tiver dúvidas use /relatorio.");
	 		SendClientMessage(playerid, COR_GRO, "Se você quiser saber alguns lugares importantes use /gps.");
	 		SendClientMessage(playerid, COR_GRO, "Obrigado por Jogar aqui,{FFCC00} Brasil Novo Mundo{FFFFFF}.");
		}
		if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
        {
         SendClientMessage(playerid, 0xC8BE00AA, "Ligue ou Desligue seu Veiculo apertando 'CTRL'");
         SendClientMessage(playerid, 0xC8BE00AA, "Digite /cinto para usar o cinto de segurança.");
         SendClientMessage(playerid, 0xC8BE00AA, "Digite /freio para puxar o freio de mão.");
        } 
		if(oldcar != 301)
		{
			if((HouseCar != oldcar && oldcar != 0) && (HireCar[playerid] != oldcar && newcar != HouseCar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 300;
					VTrancado[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}
		gLastCar[playerid] = newcar;
		gLastDriver[newcar] = playerid;
	}

	if(newstate == PLAYER_STATE_SPAWNED && logouagora[playerid] ==0 )
	{
	    if(sincronizando[playerid] == 1)
		{
		return true;
		}
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
		    if(sincronizando[playerid] == 1)
			{
			return true;
			}
			SetPlayerSpawn(playerid);
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
	}
	return true;
}

public HireCost(carid)
{
	switch (carid)
	{
		case 69:
		{
			return 90000; //Ford-GT
		}
		case 70:
		{
			return 130000; //infernus
		}
		case 71:
		{
			return 100000; //Diablo
		}
		case 72:
		{
			return 80000;
		}
		case 73:
		{
			return 70000;
		}
		case 74:
		{
			return 60000;
		}
	}
	return 0;
}

public CarCheck()//ATUAL
{
	for(new j = 0; j<MAX_PLAYERS; j++)
	{
	    if(IsPlayerConnected(j))
	    {
		    new Float:health;
		    GetPlayerHealth(j, health);
			if(PlayerInfo[j][pDoenca]==1)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 4.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Perdeu 4 de Saúde por DST - Vá até um hospital ou procure um médico para se curar");
			}
			else if(PlayerInfo[j][pDoenca]==2)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 8.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Perdeu 8 de Saúde por DST - Vá até um hospital ou procure um médico para se curar");
			}
			else if(PlayerInfo[j][pDoenca]==3)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 12.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Perdeu 12 de Saúde por DST - Vá até um hospital ou procure um médico para se curar");
			}
            else if(PlayerInfo[j][pDoenca]==4)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Perdeu 5 de Saúde por Cirrose - Vá até um hospital ou procure um médico para se curar.");
			}
			else if(PlayerInfo[j][pDoenca]==5)
			{
			    GetPlayerHealth(j, health);
			    SetPlayerHealth(j, health - 5.0);
			    SendClientMessage(j, COLOR_LIGHTBLUE, "* Perdeu 5 de Saúde por Câncer de Pulmão - Vá até um hospital ou procure um médico para se curar.");
			}
			if(PlayerInfo[j][pConta] < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(gstring, sizeof(gstring), "Você esta devendo: R$%d Se não tiver essa grana você vai preso automaticamente!", PlayerInfo[j][pConta]);
					SendClientMessage(j, COLOR_LIGHTRED, gstring);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
			if(GetPlayerMoney(j) < 0)
			{
			    if(MoneyMessage[j]==0)
			    {
				    format(gstring, sizeof(gstring), "Você esta devendo: R$%d Se não tiver essa grana você vai preso automaticamente!", GetPlayerMoney(j));
					SendClientMessage(j, COLOR_LIGHTRED, gstring);
					MoneyMessage[j] = 1;
				}
			}
			else
			{
			    MoneyMessage[j] = 0;
			}
		}
	}
	for(new c = 1; c < 254; c++)
	{
 		if (gLastDriver[c] >= 300)
		{
			gLastDriver[c]++;
		}
		//forndowner = -1;
	}
	return true;
}

public CarInit()
{
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
	}
	gLastDriver[301]=255;
	return true;
}

public CarRespawn(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid) || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	return true;
}
public OnPlayerExitVehicle(playerid, vehicleid)
{
     /*EscutandoMusica[playerid] = 0;
     SendClientMessage(playerid, -1, "Música Desligada.");*/
     //StopAudioStreamForPlayer(playerid); 
     if(Teste[playerid] == 1)
	{
        SendClientMessage(playerid, COR_DRIFTERS, "Você violou as regras do teste, punição: fim de teste.");
		SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		Teste[playerid] = 0;  
		SetPVarInt(playerid,"autoescola",0);
		DisablePlayerCheckpoint(playerid);   
		return true;
	}
 	if (GetPlayerState(playerid) == 1)
	{
		return true;
	}
	
	if(Sequestrado[playerid] == 1)
	{
        PutPlayerInVehicle(playerid, GetPlayerVehicleID(playerid), GetPlayerVehicleSeat(playerid));
	}
	if (gPlayerTerminal[playerid] != 0)
	{
		BusrouteEnd(playerid);
	}
	Controle(playerid, 1);
	return true;
}

public OnPlayerRequestClass(playerid, classid)
{
    if(IsPlayerNPC(playerid))
	{
	    SpawnPlayer(playerid);
		return true;
	}
	new string[128];
	new string3[128];
	new ip[16];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(string3, sizeof(string3), "Banidos/%s.ini", PlayerName(playerid));
	if(fexist(string3)) //autoban
	{
	    ClearChatbox(playerid, 10);
	    strmid(BanInfo[playerid][pMotivo], dini_Get(string3,"Motivo"), 0, strlen(dini_Get(string3,"Motivo")), 255);
	    strmid(BanInfo[playerid][pAdmBan], dini_Get(string3,"Admin"), 0, strlen(dini_Get(string3,"Admin")), 255);
	    strmid(BanInfo[playerid][pData], dini_Get(string3,"Data"), 0, strlen(dini_Get(string3,"Data")), 255);
	    strmid(BanInfo[playerid][pHora], dini_Get(string3,"Hora"), 0, strlen(dini_Get(string3,"Hora")), 255);
	    SendClientMessage(playerid, COLOR_WHITE, "|_______________[ Informações do Ban ]_______________|");
		format(string, sizeof(string), "Seu Nick:[%s] está Banido do Brasil Novo Mundo.", PlayerName(playerid));
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Motivo: %s", BanInfo[playerid][pMotivo]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Admin: %s", BanInfo[playerid][pAdmBan]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Dia: %s, Hora: %s", BanInfo[playerid][pData], BanInfo[playerid][pHora]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_YELLOW, "Para revisão de ban acesse nosso forum: www.brnm.forumeiros.com");
		SendClientMessage(playerid, COLOR_YELLOW, "Atenção: Você só será desbanido caso for inocente !");
		new stri[64], tmp[20], tmp2[20];
		format(stri, sizeof(stri), "IPsBanidos/%s.ini",ip);
		getdate(Ano, Mes, Dia);
		format(tmp, 20, "%d/%d/%d", Dia, Mes, Ano);
		gettime(Hora, Minuto, Segundo);
		format(tmp2, 20, "%d:%d:%d", Hora, Minuto, Segundo);
		if(dini_Exists(stri))
		{
			Kick(playerid);
		}
		else
		{
			dini_Create(stri);
			dini_Set(stri,"Motivo",BanInfo[playerid][pMotivo]);
			dini_Set(stri,"Admin",BanInfo[playerid][pAdmBan]);
			dini_Set(stri,"Data",BanInfo[playerid][pData]);
			dini_Set(stri,"Hora",BanInfo[playerid][pHora]);
			dini_Set(stri,"Nick",PlayerName(playerid));
		}
  		Kick(playerid);
	}
	format(string3, sizeof(string3), "IPsBanidos/%s.ini", ip);
	if(fexist(string3))
	{
   	    ClearChatbox(playerid, 10);
   	    strmid(BanInfo[playerid][pMotivo], dini_Get(string3,"Motivo"), 0, strlen(dini_Get(string3,"Motivo")), 255);
	    strmid(BanInfo[playerid][pAdmBan], dini_Get(string3,"Admin"), 0, strlen(dini_Get(string3,"Admin")), 255);
	    strmid(BanInfo[playerid][pData], dini_Get(string3,"Data"), 0, strlen(dini_Get(string3,"Data")), 255);
	    strmid(BanInfo[playerid][pHora], dini_Get(string3,"Hora"), 0, strlen(dini_Get(string3,"Hora")), 255);
	    strmid(BanInfo[playerid][pNick], dini_Get(string3,"Nick"), 0, strlen(dini_Get(string3,"Nick")), 255);
   	    SendClientMessage(playerid, COLOR_WHITE, "|_______________[ Informações do Ban ]_______________|");
        format(string, sizeof(string), "Seu IP:[%s] está Banido do Brasil Novo Mundo.", ip);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		format(string, sizeof(string), "Motivo: %s", BanInfo[playerid][pMotivo]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		if(strcmp(BanInfo[playerid][pNick],"", true ) == 0)
		{
			format(string, sizeof(string), "Admin: %s", BanInfo[playerid][pAdmBan]);
		}
		else
		{
			format(string, sizeof(string), "Admin: %s, Nick Fake: %s", BanInfo[playerid][pAdmBan], BanInfo[playerid][pNick]);
		}
		SendClientMessage(playerid, COLOR_YELLOW, string);
		format(string, sizeof(string), "Dia: %s, Hora: %s", BanInfo[playerid][pData], BanInfo[playerid][pHora]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
    	SendClientMessage(playerid, COLOR_YELLOW, "Para revisão de ban acesse nosso forum: www.brnm.forumeiros.com");
		SendClientMessage(playerid, COLOR_YELLOW, "Atenção: Você só será desbanido caso for inocente !");
		/*new stri[64], tmp[20], tmp2[20];
		format(stri, sizeof(stri), "Banidos/%s.ini",PlayerName(playerid));
		getdate(Ano, Mes, Dia);
		format(tmp, 20, "%d/%d/%d", Dia, Mes, Ano);
		gettime(Hora, Minuto, Segundo);
		format(tmp2, 20, "%d:%d:%d", Hora, Minuto, Segundo);
		if(dini_Exists(stri))
		{
			Kick(playerid);
		}
		else
		{
			dini_Create(stri);
			dini_Set(stri,"Motivo","IP de Fake");
			dini_Set(stri,"Admin","Homem_Aranha");
			dini_Set(stri,"Data",tmp);
			dini_Set(stri,"Hora",tmp2);
		}*/
       	Kick(playerid);
	 }
	 if (RegistrationStep[playerid] == 0 && gPlayerLogged[playerid] != 1)
	 {
 		new plname[MAX_PLAYER_NAME];
        PlayerPlaySound(playerid, 1183, 0.0, 0.0, 0.0);
		ClearChatbox(playerid, 10);
		SendClientMessage(playerid, COLOR_YELLOW2, " ");
		SendClientMessage(playerid, COLOR_WHITE, "{00FF04}Brasil {FFFF00}Novo {0044FF} Mundo{FA7FEC}·······[ Carregando ]······");
		GetPlayerName(playerid, plname, sizeof(plname));
		format(gstring, 64, "Contas/%s.ini", plname);
        if(fexist(gstring))
		{
		    SendClientMessage(playerid, COLOR_AZULBB, "Você está registrado, digite sua senha para logar.");
			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Fazendo Seu Login:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil {FFD700}Novo{00B2EE}Mundo {FFFFFF}.\n\n{FFFFFF}Status da Conta: {00FF00}Registrada\n\n\n{FFFFFF}Acesse Nosso Portal:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/portal\n\n\n{FFFFFF}Acesse Nosso Fórum:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/forum\n\n\n{0000FF}Por Favor Digite Sua Senha Para Logar", "Logar", "Esperar");
		}
		else
		{
		    SendClientMessage(playerid, COLOR_AZULBB, "Você não está registrado, digite uma sua senha para registrar-se.");
			ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Fazendo Seu Registro:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil {FFD700}Novo {00B2EE}Mundo{FFFFFF}.\n\nStatus da Conta: {FF0000}Não Registrada\n\n{FFFFFF}Use: {00FF00}Nome_Sobrenome\n\n{FFFFFF}Acesse Nosso Fórum\n\n\n     www.{FFD700}brnm{FFFFFF}.forumeiros.com\n\n\n{FFFFFF}Digite Sua Senha Para Registrar !", "Registrar", "Cancelar");
		}
		SetPlayerCameraPos(playerid, 1835.8206, -1030.4900, 156.1523); 
        SetPlayerCameraLookAt(playerid, 1835.1846, -1031.2672, 156.0911); 
		SetPlayerPos(playerid, 1852.4108,-1022.1168,24.0716);
		SetPlayerInterior(playerid, 0);
		PlayerInfo[playerid][pSkin] = Peds[classid][0];
		SetPlayerTeamFromClass(playerid,classid);
	}
	else { SpawnPlayer(playerid); }
	return false;
}
public SetupPlayerForClassSelection(playerid)
{
}

//---------------------------------------------------------

public SetPlayerTeamFromClass(playerid,classid)
{
 	if (classid >= 1 && classid <= 11)
	{
		gTeam[playerid] = 11; //admin
		PlayerInfo[playerid][pTeam] = 11;
	}
	else
	{
	    gTeam[playerid] = 3;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid) && !IsACop(playerid)) //  && !IsADetran(playerid)
	{
	    if(WantedPoints[playerid] < 15) WantedPoints[playerid] += 1;
	    PlayerInfo[playerid][pCrimes] += 1;
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		new location[MAX_ZONE_NAME];
		GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
		strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
		GetPlayerName(playerid, turned, sizeof(turned));
		if (declare == 255)
		{
		    format(turner, sizeof(turner), "Câmeras de Segurança");
			strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
				strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
				strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
				strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
			}
		}
		format(gstring, sizeof(gstring), "Você cometeu um crime (%s). Relato: %s.",reason,turner);
		SendClientMessage(playerid, COLOR_LIGHTRED, gstring);
		SetPlayerWantedLevel(playerid, WantedPoints[playerid]);
		format(gstring, sizeof(gstring), "Nível de procurado: %d", WantedPoints[playerid]);
		SendClientMessage(playerid, COLOR_YELLOW, gstring);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					format(gstring, sizeof(gstring), "HQ - Todas as unidades: Relato: %s",turner);
					SendClientMessage(i, TEAM_BLUE_COLOR, gstring);
					format(gstring, sizeof(gstring), "HQ - Crime: %s, Suspeito: %s",reason,turned);
					SendClientMessage(i, TEAM_BLUE_COLOR, gstring);
					if(GetPlayerInterior(playerid) == 0)
					{
						format(gstring, sizeof(gstring), "Local: %s, Em Interior: Não",location);
						SendClientMessage(i, TEAM_BLUE_COLOR, gstring);
					}
					else
					{
						format(gstring, sizeof(gstring), "Local: %s, Em Interior: Sim",location);
						SendClientMessage(i, TEAM_BLUE_COLOR, gstring);
					}
				}
			}
		}
	}//not connected
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[])
{
	if(IsPlayerConnected(playerid))
	{
		ClearCrime(playerid);
		new turned[MAX_PLAYER_NAME];
		new turner[MAX_PLAYER_NAME];
		if (declare == 255)
		{
			format(turner, sizeof(turner), "190");
		}
		else
		{
		    if(IsPlayerConnected(declare))
		    {
				GetPlayerName(declare, turner, sizeof(turner));
			}
		}
		GetPlayerName(playerid, turned, sizeof(turned));
		//format(gstring, sizeof(gstring), "SMS: %s, Porque Você %s, Você Não é Mais um Criminoso, Sender: MOLE (555)",turned,reason);
		RingTone[playerid] = 20;
        SetPlayerWantedLevel(playerid, 0);
		//SendClientMessage(playerid, COLOR_YELLOW, gstring);
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
			    if(IsACop(i))
			    {
					format(gstring, sizeof(gstring), "<< HQ: Todas As Unidades, Oficial %s Completou a sentença >>",turner);
					SendClientMessage(i, COLOR_DBLUE, gstring);
					format(gstring, sizeof(gstring), "HQ: %s Foi processado, %s",turned,reason);
					SendClientMessage(i, COLOR_DBLUE, gstring);
					SetPlayerWantedLevel(playerid, 0);
				}
			}
		}
	}
}

public RingToner()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 6)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 20)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("RingTonerRev", 1000, 0);
	return true;
}

public RingTonerRev()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			if(RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
			{
				RingTone[i] = RingTone[i] -1;
				PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
			}
			if(RingTone[i] == 5)
			{
				RingTone[i] = RingTone[i] -1;
			}
			if(RingTone[i] == 19)
			{
				PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
				RingTone[i] = 0;
			}
		}
	}
	SetTimer("RingToner", 1000, 0);
	return true;
}

public OtherTimer()
{
    //new string[256];
    VeloThiago();
    for(new SlinkGostoso=0; SlinkGostoso<MAX_PLAYERS; SlinkGostoso++){
    if(IsPlayerConnected(SlinkGostoso)){
   	if(FilaAtendimento[SlinkGostoso] != 999){
	TextDrawHideForPlayer(SlinkGostoso,FilaAtendimentoText[SlinkGostoso]);
	TextDrawHideForPlayer(SlinkGostoso,TempoAtendimento2Text[SlinkGostoso]);
	//format(string,sizeof(string),"Ticket ID: ~b~~h~%d",FilaAtendimento[SlinkGostoso]);
	//TextDrawSetString(FilaAtendimentoText[SlinkGostoso],string);
	//TextDrawShowForPlayer(SlinkGostoso,FilaAtendimentoText[SlinkGostoso]);
	//format(string,sizeof(string),"Ticket Tempo: ~b~~h~%02d",TempoAtendimento2[SlinkGostoso]);
	//TextDrawSetString(TempoAtendimento2Text[SlinkGostoso],string);
	//TextDrawShowForPlayer(SlinkGostoso,TempoAtendimento2Text[SlinkGostoso]);
	} else{
	TextDrawHideForPlayer(SlinkGostoso,FilaAtendimentoText[SlinkGostoso]);
	TextDrawHideForPlayer(SlinkGostoso,TempoAtendimento2Text[SlinkGostoso]);}
	}
	}

	new Float:oldposx, Float:oldposy, Float:oldposz;
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
	        //new vehicleid = GetPlayerVehicleID(i);
            if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerConta[i] == 1 && gPlayerLogged[i] == 0)
				{

				}
			}
			if(GetPlayerSpeed(i, true) >= 350 && !IsAPlane(GetPlayerVehicleID(i)))
			{
				format(gstring, 128, "AdmAviso: %s ID:[%d] está a %d KM/h, TV nele pode ser Speed Hack.",PlayerName(i),i,GetPlayerSpeed(i, true));
				ABroadCast(COLOR_YELLOW,gstring,1);
				printf("%s", gstring);
			}
		    if(PlayerInfo[i][pLocal] != 255 && PlayerInfo[i][pInt] != 0)
			{
				new House = PlayerInfo[i][pLocal];
				GetPlayerPos(i, oldposx, oldposy, oldposz);
				if(oldposz != 0.0)
				{
					if(oldposz < 600.0)
					{
						if(House > 10000)
						{
							if (!PlayerToPoint(6, i,1040.6,-1021.0,31.7) && House == 10001 ||!PlayerToPoint(6, i,-2720.5,217.5,4.1) && House == 10002 ||!PlayerToPoint(6, i,2644.6,-2044.9,13.3) && House == 10003)
							{
								new oldcash = gSpentCash[i];
								new Total = GetPlayerMoney(i) - oldcash;
								printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
								/*new name[MAX_PLAYER_NAME];
								GetPlayerName(i, name, sizeof(name));
								format(gstring,128,"<< %s has left the homemodshop with R$%d >>",name,Total);
								//PayLog(gstring);*/
								gSpentCash[i] = 0;
								TelePos[i][0] = 0.0;
								TelePos[i][1] = 0.0;
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
								Spectate[i] = 255;
							}
						}
						if(House == 241)//City Hall
						{
						    SetPlayerInterior(i,0);
							SetPlayerPos(i,1480.9403,-1770.8481,18.7958);
							PlayerInfo[i][pInt] = 0;
							PlayerInfo[i][pLocal] = 255;
						}
						if(House >= 99 && House != 10000)
						{
							SetPlayerPos(i, BizzInfo[House-99][bEntranceX], BizzInfo[House-99][bEntranceY],BizzInfo[House-99][bEntranceZ]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}
						else if(House < 99 && House != 10000)
						{
							SetPlayerPos(i, HouseInfo[House][hEntrancex], HouseInfo[House][hEntrancey],HouseInfo[House][hEntrancez]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							PlayerInfo[i][pInt] = 0;
						}
					}
				}
			}
		    if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				CellTime[i] = CellTime[i] +1;
				if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
				    if(IsPlayerConnected(Mobile[i]))
				    {
						new called[MAX_PLAYER_NAME];
						GetPlayerName(Mobile[i], called, sizeof(called));
						format(gstring, sizeof(gstring), "* %s pegou o celular.", called);
						RingTone[Mobile[i]] = 10;
						ProxDetector(30.0, Mobile[i], gstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(gstring, sizeof(gstring), "~w~Custo da ligacao~n~~r~R$%d",CallCost[i]);
				GivePlayerMoney(i, -CallCost[i]);
				SBizzInfo[2][sbTill] += CallCost[i];
				ExtortionSBiz(2, CallCost[i]);
				GameTextForPlayer(i, gstring, 5000, 1);
				CallCost[i] = 0;
			}
			if(TransportTime[i] > 0)
			{//Taxi driver and passenger only
			    if(TransportTime[i] >= 16)
				{
					TransportTime[i] = 1;
					if(TransportDriver[i] < 999)
					{
						if(IsPlayerConnected(TransportDriver[i]))
						{
	      					TransportCost[i] += TransportValue[TransportDriver[i]];
						    TransportCost[TransportDriver[i]] = TransportCost[i];
						}
					}
				}
			    TransportTime[i] += 1;
			    format(gstring, sizeof(gstring), "~r~%d ~w~: ~g~R$%d",TransportTime[i],TransportCost[i]);
			    GameTextForPlayer(i, gstring, 15000, 6);
			}
			if (gPlayerTerminal[i] != 0)
			{
			    new vehicleid = GetPlayerVehicleID(i);
				if (vehicleid != 0)
				{
					if (!IsABus(vehicleid))
					{
						if (gPlayerTerminal[i] != 0) BusrouteEnd(i);
					}
				}
				else
				{
				    if (gPlayerTerminal[i] != 0) BusrouteEnd(i);
				}
			}
		}
	}
	return true;
}

public SetPlayerUnjail()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			//new newcar = GetPlayerVehicleID(i);
			new level = PlayerInfo[i][pLevel];
			new vip = PlayerInfo[i][pVIP];
			if(level >= 0 && level <= 2) { PlayerInfo[i][pSalario] += 2; }
			else if(level >= 3 && level <= 4) { PlayerInfo[i][pSalario] += 3; }
			else if(level >= 5 && level <= 6) { PlayerInfo[i][pSalario] += 5; }
			else if(level >= 7 && level <= 8) { PlayerInfo[i][pSalario] += 6; }
			else if(level >= 9 && level <= 10) { PlayerInfo[i][pSalario] += 7; }
			else if(level >= 11 && level <= 12) { PlayerInfo[i][pSalario] += 8; }
			else if(level >= 13 && level <= 14) { PlayerInfo[i][pSalario] += 9; }
			else if(level >= 15 && level <= 16) { PlayerInfo[i][pSalario] += 10; }
			else if(level >= 17 && level <= 18) { PlayerInfo[i][pSalario] += 11; }
			else if(level >= 19 && level <= 20) { PlayerInfo[i][pSalario] += 15; }
			else if(level >= 21) { PlayerInfo[i][pSalario] += 20; }
            if(vip == 1) { PlayerInfo[i][pSalario] += 2; }
            if(vip == 2) { PlayerInfo[i][pSalario] += 5; }
		    if(PlayerInfo[i][pJailed] > 0)
		    {
				if(PlayerInfo[i][pJailTime] > 0 && WantAdvogado[i] == 0)
				{
					PlayerInfo[i][pJailTime]--;
				}
				if(PlayerInfo[i][pJailTime] <= 0 && WantAdvogado[i] == 0)
				{
				    PlayerInfo[i][pJailTime] = 0;
					if(PlayerInfo[i][pJailed] == 1)
					{
						SetPlayerInterior(i, 6);
						SetPlayerPos(i,268.0903,77.6489,1001.0391);
					}
					else if(PlayerInfo[i][pJailed] == 3)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,1281.8260,-1647.1527,13.5291);
					}
					else if(PlayerInfo[i][pJailed] == 4)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,926.5245,-1207.8342,17.0594);
					}
					else if(PlayerInfo[i][pJailed] == 5)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,630.3716,-571.8962,16.3359);
					}
					else if(PlayerInfo[i][pJailed] == 6)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,1541.1633,-1674.6908,13.5520);
					}
					else if(PlayerInfo[i][pJailed] == 7)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,-1526.8615,490.0105,7.1797);
					}
					else if(PlayerInfo[i][pJailed] == 9)
					{
						SetPlayerInterior(i, 0);
						SetPlayerPos(i,1610.0857,-2270.7710,13.5184);
  						SetPlayerFacingAngle(i,270.0);
					}
					else if(PlayerInfo[i][pJailed] == 2)
					{
					    SetPlayerWorldBounds(i,20000.0000,-20000.0000,20000.0000,-20000.0000); //Reset world to player
					    SetPlayerInterior(i, 0);
					    SetPlayerPos(i, 90.2101,1920.4854,17.9422);
					}
					PlayerInfo[i][pJailed] = 0;
					SendClientMessage(i, COLOR_GRAD1,"Você pagou sua divida com a sociedade.");
					GameTextForPlayer(i, "~g~Livre~n~~w~Nao cometa mais crimes", 5000, 1);
					SendClientMessage(i, COLOR_YELLOW2,"Livre, chame um taxi para-lhe buscar.");
					if(gTeam[i] == 4) { gTeam[i] = 3; }
					ClearCrime(i);
					SetPlayerToTeamColor(i);
				}
			}
			if(GetPlayerMoney(i) - CurrentMoney[i] >= 50000 && PlayerInfo[i][pAdmin] < 1)
		    {
		        if(ConsumingMoney[i])
		        {
                    CurrentMoney[i] = GetPlayerMoney(i);
					ConsumingMoney[i] = 0;
		        }
		        else
		        {
			        CurrentMoney[i] = GetPlayerMoney(i);
		        }
		    }
		    else
		    {
		        CurrentMoney[i] = GetPlayerMoney(i);
		    }
		    if(UsedFind[i] >= 1)
		    {
		        UsedFind[i] += 1;
				if(UsedFind[i] >= 120)
				{
				    UsedFind[i] = 0;
				}
		    }
      		if(WantAdvogado[i] >= 1)
			{
			    CallAdvogado[i] = 111;
			    if(WantAdvogado[i] == 1)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Você quer um Advogado? (Digite sim ou nao)");
				}
				WantAdvogado[i] ++;
				if(WantAdvogado[i] == 8)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Você quer um Advogado? (Digite sim ou nao)");
				}
	            if(WantAdvogado[i] == 15)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Você quer um Advogado? (Digite sim ou nao)");
				}
				if(WantAdvogado[i] == 20)
				{
				    SendClientMessage(i, COLOR_LIGHTRED, "Não Há Advogados Online, sua sentença foi iniciada.");
				    WantAdvogado[i] = 0;
        			CallAdvogado[i] = 0;
				}
			}
			
            if(TutTime[i] >= 1)
			{

				TutTime[i] += 1;
			    if(TutTime[i] == 5)
			    {
                    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
					SetPlayerPos(i, 2235.3379,-1159.8584,25.8972);
					SetPlayerCameraPos(i, 2210.7905, -1102.0046, 36.5647);
                    SetPlayerCameraLookAt(i, 2211.1296, -1102.9489, 36.3997);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Iniciando ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA , "Este é o hotel, o local aonde você ficará hospedado enquanto não possuir uma casa para morar.");
     				SendClientMessage(i, 0xC1FF08AA, "Sempre que entrar no jogo nascerá aqui, do lado de fora existem motos para serem alugadas, não alugue carros enquanto não tiver");
					SendClientMessage(i, 0xC1FF08AA, "uma carteria morista ou poderá ser multado ou até mesmo detido pela polícia.");
					SendClientMessage(i, 0xC1FF08AA, "Seu primeiro passo deve ser ir atê auto escola tirar uma carteira de motorista.");
			    }
			    else if(TutTime[i] == 15)
			    {  
				    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
					SetPlayerPos(i, 942.6257,-915.3578,42.5811);
           		    SetPlayerCameraPos(i, 962.3284, -959.4222, 48.2738);
                    SetPlayerCameraLookAt(i, 962.2162, -958.4283, 48.0538);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Auto Escola ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Este é local aonde você tirará sua carteira de motorista para poder dirigir automóveis.");
					SendClientMessage(i, 0xC1FF08AA, "Terá de provar que será um bom motorista na cidade de Los Santos, dirigir carro em um percurso sem bater,");
			        SendClientMessage(i, 0xC1FF08AA, "E no final terá de executar a baliza para completar o teste.");
			        SendClientMessage(i, 0xC1FF08AA, "Dica: No centro de licenças da prefeitura você pode comprar seu porte de armas, sua licença de vôo e navegação e licença de pesca.");
					SendClientMessage(i, 0xC1FF08AA, "Uma vez completado o teste, você já pode ir até a prefeitura pegar um emprego para começar sua vida em Los Santos");
			    }
			    else if(TutTime[i] == 25)
			    { 
        			SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
			        SetPlayerPos(i, 1483.2949,-1701.8274,17.2970);
		     	    SetPlayerCameraPos(i, 1467.3701, -1699.9846, 39.2774); 
                    SetPlayerCameraLookAt(i, 1467.6486, -1700.9487, 38.8373);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Prefeitura ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Nesse local você pode pegar empregos comuns de civil, chamados secundários, como mecânico, caminhoneiro, motorista de ônibus,");
			        SendClientMessage(i, 0xC1FF08AA, "Detetive ect. Alguns empregos são bons para levantar um pouco de dinheiro no início como um caminhoneiro e mecânico.");
					SendClientMessage(i, 0xC1FF08AA, "Existem tambêm a possibilidade de se adquirir empregos ilegais como traficante e vendedor de armas em certos locais.");
			        SendClientMessage(i, 0xC1FF08AA, "Na prefeitura tambêm trabalha o prefeito e seus funcionârios que recolhem impostos, dão bolsa familia e fazem programas sociais.");
			        SendClientMessage(i, 0xC1FF08AA, "Empregos como detetive são bons para auxiliar em seu futuro emprego principal (organização), falaremos agora sobre ele no tutorial.");
			    }
			    else if(TutTime[i] == 35)
			    {
				    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
					SetPlayerCameraPos(i, 1532.2863, -1693.4598, 7.0376); 
                    SetPlayerCameraLookAt(i, 1533.1709, -1693.9314, 7.0126);
					SetPlayerPos(i, 1536.6431,-1706.1641,6.2188);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Empregos Principais ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Os empregos principais chamados de organização incluem organizações como, Polícias, Gangs, Máfia e Terroristas, Assassinos de Aluguel,");
					SendClientMessage(i, 0xC1FF08AA, "Advogados, Taxistas e Repórteres, Membros do Governo, totalizando 25 organizações (/profs) ou (/orgs).");
				    SendClientMessage(i, 0xC1FF08AA, "Para ingressar em uma basta usar comando (/lideres) ou (/sublideres), e /ligar para um responsável pela org e pedir para ingressar.");
				    SendClientMessage(i, 0xC1FF08AA, "Testes para ingressar incluem testes de habilidade em combate, conhecimento de como trabalhar na org e algumas regras importantes.");
				    SendClientMessage(i, 0xC1FF08AA, "A seguir mostraremos algumas organizações e suas funções.");
				    ComandoTutorial[i] = 0;
					OnPlayerCommandText(i, "/orgs");
					ComandoTutorial[i] = 1;
			    }
				else if(TutTime[i] == 45)
			    {
				    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
 			        //SetPlayerPos(i, 2144.1062,-970.9034,80.0703);
					//SetPlayerCameraPos(i,2212.5364,-989.5125,83.3038);
					//SetPlayerCameraLookAt(i,2151.6057,-1014.4344,67.1739);
		            SetPlayerPos(i,2495.7961,-1693.2119,14.7656); 
					SetPlayerCameraPos(i, 2482.6062, -1675.6389, 13.1957); 
                    SetPlayerCameraLookAt(i, 2483.4746, -1676.1403, 13.2457);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Gangs ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "LS conta com diversas gangs, as atividades de gangs incluem /roubo de lojas e bancos, sequestros, assaltos, tráfico de drogas");
				    SendClientMessage(i, 0xC1FF08AA, "Entre outas atividades ilícitas, costumam passar a vida sendo perseguidos pela polícia e são presos inúmeras vezes.");
			    }
   				else if(TutTime[i] == 55)
			    { 
				    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
					SetPlayerInterior(i, 6);
 			        SetPlayerPos(i, 349.8122,310.3131,999.1484);
					SetPlayerCameraPos(i, 350.0227, 310.5704, 1000.6847); 
                    SetPlayerCameraLookAt(i, 349.3889, 309.7943, 1000.5642);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Assasinos de Aluguel ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Em LS existem duas organizações de assasinos de aluguel, Hitmans e Triads.");
					SendClientMessage(i, 0xC1FF08AA, "O Trabalho de um Hitman/Triad e assassinar os contratos colocados em troca de dinheiro oferecido no /contrato.");
				    SendClientMessage(i, 0xC1FF08AA, "Cuidado pois eles contam com o uso de disfarces...");
			    }
   				else if(TutTime[i] == 65)
			    { 
				    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
					SetPlayerInterior(i, 0);
 			        SetPlayerPos(i, 692.6449,-1269.5964,13.5723);
				    SetPlayerCameraPos(i, 668.9807, -1252.0111, 14.6532); 
                    SetPlayerCameraLookAt(i, 669.6479, -1252.7592, 14.6177);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Máfias ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Existem duas máfias em Los Santos, a Cosa Nostra ea Yakuza, as atividades dos mafiosos consistem em");
				    SendClientMessage(i, 0xC1FF08AA, "/roubo de lojas e banco, sequestros, assaltos e o fornecimento de armas e materias as gangs.");
			    }
			    else if(TutTime[i] == 75)
			    { 
				    SetPlayerVirtualWorld(i,0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
 			        SetPlayerPos(i, 418.2528,2486.9470,16.4844);
				    SetPlayerCameraPos(i, 406.9377, 2495.8425, 18.0802); 
				    SetPlayerCameraLookAt(i, 406.1059, 2496.4019, 18.1694);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Terroristas ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Estão sempre em guerra com o exército, realizam atividades de roubos e sequestros e realizam atentados contra a população.");
				    SendClientMessage(i, 0xC1FF08AA, "Contam com tanques, jatos e helicopteros de guerra, fazem /carrobomba, /homembomba e plantam bombas na cidade.");
			    }
			    else if(TutTime[i] == 85)
			    { 
				    SetPlayerVirtualWorld(i, 0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
 			        SetPlayerPos(i, 1462.8796,-1007.1576,57.5132);
					SetPlayerCameraPos(i, 1488.2837, -1041.6768, 23.8218);
                    SetPlayerCameraLookAt(i, 1487.5625, -1040.9790, 23.9505);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Banco ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Nesse local você poderá fazer depôsitos, transferências e saques de suas economias.");
					SendClientMessage(i, 0xC1FF08AA, "O banco de LS te fornecerá ganho de juros sobre suas economias portanto não se esqueça de fazer depósitos na sua conta.");
				    SendClientMessage(i, 0xC1FF08AA, "Muitos players fazem muito dinheiro nos juros sobre suas economias e de revenda propriedades como Casas, Carros e Empresas.");
			    }
			    else if(TutTime[i] == 95)
			    { 
				    SetPlayerVirtualWorld(i, 0);
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
 			        SetPlayerPos(i, 1462.8796,-1007.1576,57.5132);
					SetPlayerCameraPos(i, 1488.2837, -1041.6768, 23.8218);
                    SetPlayerCameraLookAt(i, 1487.5625, -1040.9790, 23.9505);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Paydays e Levels ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Os paydays ou salários, saem de hora em hora, nestes saem seu salário, seus juros e tambêm debita o pagamentos de suas contas.");
					SendClientMessage(i, 0xC1FF08AA, "Quando maior for seu level maior será seu salário e trabalhos como taxista e mecânico adicionam direto ao seu salário.");
				    SendClientMessage(i, 0xC1FF08AA, "A cada payday você recebe 1 respeito e ao totalizar a quantidade de respeitos necessária para o próximo nivel você poderá /comprarnivel.");
				    ComandoTutorial[i] = 0;
					OnPlayerCommandText(i, "/rg");
					ComandoTutorial[i] = 1;
			    }
			    else if(TutTime[i] == 105)
			    {
				    SetPlayerVirtualWorld(i, 0); 
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
 			        SetPlayerPos(i, 1683.3641,-1103.0833,24.0703);
					SetPlayerCameraPos(i, 1604.3687, -1092.6150, 28.6931);
                    SetPlayerCameraLookAt(i, 1605.3722, -1092.6179, 28.5668);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ A Concessionária ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Em uma das concessionárias você pode comprar seu próprio véiculo, ele ficará registrado em seu nome e a chave aparecera em seu /rg.");
					SendClientMessage(i, 0xC1FF08AA, "Somente você terá a chave para ligá-lo, poderá trancá-lo para ninguem abrir suas portas, poderá estacioná-lo no local que desejar,");
				    SendClientMessage(i, 0xC1FF08AA, "Poderá personalizá-lo com tuning, colocar equipamentos como Nitro e o mesmo salvará os componentes instalados. "); 
					SendClientMessage(i, 0xC1FF08AA, "Poderá abrir o capô, ligar é desligar o motor, abrir o porta-malas, ligar e luzes e alarme.");
				    SendClientMessage(i, 0xC1FF08AA, "Quando terminar de usar poderá vende-lo diretamente para outra pessoa com o comando /v venderpara ou direto para a concessionária.");
			    }
			    else if(TutTime[i] == 115)
			    {
			        SetPlayerVirtualWorld(i, 0);
					TaCongelado[i] = true;
			        TogglePlayerControllable(i, 0);
 			        SetPlayerPos(i, 1852.4108,-1022.1168,24.0716);
					SetPlayerCameraPos(i, 1835.8206, -1030.4900, 156.1523); 
                    SetPlayerCameraLookAt(i, 1835.1846, -1031.2672, 156.0911);
       				SendClientMessage(i, COLOR_BLUE, "|____________________________________________________[ Concluido ]____________________________________________________|");
					SendClientMessage(i, 0xC1FF08AA, "Neste tutorial demonstramos alguns elementos do jogo, caso tenho dúvidas ao longo do seu jogo ou precise de ajuda");
					SendClientMessage(i, 0xC1FF08AA, "Contate um helper ou administrador com /relatorio e /duvida. use /ajuda para ver a lista completa de comandos de player");
				    SendClientMessage(i, 0xC1FF08AA, "de emprego, casamento de vip, de líder, entre outros, use /gps para ter a localização dos principais lugares mercadas em seu mapa."); 
					SendClientMessage(i, 0xC1FF08AA, "É necessário saber e cumprir as regras do servidor para jogar, aqui lia as regras completas em http://brnm.forumeiros.com/t1-regras-do-servidor");
				    SendClientMessage(i, 0xC1FF08AA, "Caso viole alguma regra poderá sofrer punições ou mesmo banimento portanto a leia para jogar."); 
					SendClientMessage(i, 0xC1FF08AA, "O Servidor tambêm está sujeito a termos de uso leia em http://brnm.forumeiros.com/t16-termos-e-condicoes-de-uso-do-servidor.");
				    SendClientMessage(i, 0xC1FF08AA, "Seu registro será concluído, tenha um ótimo jogo!");
				} 
				else if(TutTime[i] == 125)
			    {
					//new para1;
    			    PlayerPlaySound(i,1183, 0.0, 0.0, 0.0); 
					TaCongelado[i] = false;
			        TogglePlayerControllable(i, 1);
					ClearChatbox(i, 100);
     				TutTime[i] = 0; PlayerInfo[i][pTut] = 1;
     				ComandoTutorial[i] = 0;
					gNews[i] = 0; gFam[i] = 0;
					TaCongelado[i] = false;
					TogglePlayerControllable(i, 1);
					SetPlayerVirtualWorld(i,0);
					MedicBill[i] = 0;
					SetPlayerSpawn(i);
					SetCameraBehindPlayer(i);
					PlayerInfo[i][pConta] = 2000;
					PlayerInfo[i][pCreditos] += 20;
		            PlayerPlayMusic(i);
					RegistrationStep[i] = 4;
					PlayerInfo[i][pVIP] = 0;
					ResetPlayerMoneyEx(i);
					GivePlayerMoneyEx(i, 2500);
					GameTextForPlayer(i, "~w~Chame Um Admin Para Te Ajudar ~n~~b~ /relatorio ", 3000, 3);
					SendClientMessage(i, COLOR_WHITE, "Bem Vindo a Brasil Novo Mundo v1.0 ® ");
					SendClientMessage(i, 0x90B6FFAA, "Se precisar De ajuda USE : /relatorio.");
					SendClientMessage(i, 0xC1FF08AA, "O BRNM Agradece Por Você Jogar Aqui !");
					SendClientMessage(i, 0xC1FF08AA, "====================================================================================================");
					SendClientMessage(i, COLOR_WHITE, "Você está com 2500 reais no bolso para começar sua vida em Los Santos.");
					SendClientMessage(i, COLOR_WHITE, "1º:Missão: {FFD39B}Tire Sua Carteira De Motorista No D.E.T.R.A.N.");
					SendClientMessage(i, COLOR_WHITE, "Atenção: {FFD39B}Ícone Marcado No Mapa.");
					SendClientMessage(i, COLOR_WHITE, "2°:Missão: {FFD39B}Arrumar um emprego. (/profs)");
					SendClientMessage(i, COLOR_WHITE, "Atenção: {FFD39B}Vá até a Prefeitura ou Ligue para um lider. (/lideres ou /sublideres)");
					SendClientMessage(i, COLOR_WHITE, "Atenção: {FFD39B}Use /gps para saber a localização dos principais lugares.");
					SetPlayerCheckpoint(i, 1247.9219,-1566.4723,13.5580,8.0);//detran
					SendClientMessage(i, 0xC1FF08AA, "====================================================================================================");
					StopAudioStreamForPlayer(i);
				}
			}
			if(PlayerTazeTime[i] >= 1)
			{
			    PlayerTazeTime[i] += 1;
			    if(PlayerTazeTime[i] == 15)
			    {
                    PlayerTazeTime[i] = 0;
			    }
			    else
			    {
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					SetPlayerFacingAngle(i, angle + 90);
			    }
			}
			if(PlayerDrunk[i] >= 5)
			{
			    PlayerDrunkTime[i] += 1;
			    if(PlayerDrunkTime[i] == 8)
			    {
			        PlayerDrunkTime[i] = 0;
			        PlayerDrunk[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    ApplyAnimation(i,"PED", "WALK_DRUNK",4.0,0,1,0,0,0);
					}
			    }
			}
			if(PlayerStoned[i] >= 2)
			{
		        PlayerStoned[i] += 1;
			    if(PlayerStoned[i] == 10)
			    {
			        PlayerStoned[i] = 0;
			        new Float:angle;
					GetPlayerFacingAngle(i, angle);
					if(IsPlayerInAnyVehicle(i))
					{
					    if(GetPlayerState(i) == 2)
					    {
					    	SetVehicleZAngle(GetPlayerVehicleID(i), angle + 25);
						}
					}
					else
					{
					    SetPlayerFacingAngle(i, angle + 90);
					}
			    }
			}
			if(BoxWaitTime[i] > 0)
			{
			    if(BoxWaitTime[i] >= BoxDelay)
				{
				    BoxDelay = 0;
					BoxWaitTime[i] = 0;
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
					GameTextForPlayer(i, "~g~A Luta Começou", 5000, 1);
					Controle(i, 1);
					RorndStarted = 1;
				}
			    else
				{
				    format(gstring, sizeof(gstring), "%d", BoxDelay - BoxWaitTime[i]);
					GameTextForPlayer(i, gstring, 1500, 6);
					BoxWaitTime[i] += 1;
				}
			}
			if(RorndStarted > 0)
			{
			    if(PlayerBoxing[i] > 0)
			    {
			        new trigger = 0;
			        new Lost = 0;
		        	new Float:angle;
		            new Float:health;
					GetPlayerHealth(i, health);
		            if(health < 12)
					{
					    if(i == Boxer1) { Lost = 1; trigger = 1; }
			            else if(i == Boxer2) { Lost = 2; trigger = 1; }
					}
			        if(health < 28) { GetPlayerFacingAngle(i, angle); SetPlayerFacingAngle(i, angle + 85); }
			        if(trigger)
			        {
			            new winner[MAX_PLAYER_NAME];
			            new loser[MAX_PLAYER_NAME];
			            new titel[MAX_PLAYER_NAME];
			            if(Lost == 1)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, loser, sizeof(loser));
			                	GetPlayerName(Boxer2, winner, sizeof(winner));
		                		if(PlayerInfo[Boxer1][pEmprego] == 7) { PlayerInfo[Boxer1][pLoses] += 1; }
								if(PlayerInfo[Boxer2][pEmprego] == 7) { PlayerInfo[Boxer2][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer2)
				                	    {
				                	        if(PlayerInfo[Boxer2][pEmprego] == 7)
				                	        {
				                	            TBoxer = Boxer2;
				                	            GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(gstring, sizeof(gstring), "Noticias do Boxe: %s venceu a luta contra %s e agora é campeão.",  titel, loser);
												OOCNews(COLOR_WHITE,gstring);
				                	        }
				                	        else
				                	        {
				                	            SendClientMessage(Boxer2, COLOR_GREY, " Você precisa ser um lutador de boxe para ganhar uma luta!");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(gstring, sizeof(gstring), "Noticias do Boxe: %s venceu a luta contra %s.",  titel, loser);
											OOCNews(COLOR_WHITE,gstring);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer2][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(gstring, sizeof(gstring), " Você perdeu a luta contra %s.", winner);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, gstring);
								GameTextForPlayer(Boxer1, "~r~Voce Perdeu", 3500, 1);
								format(gstring, sizeof(gstring), " Você ganhou a luta contra %s.", loser);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, gstring);
								GameTextForPlayer(Boxer2, "~r~Voce Venceu", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, " Você está exausto da luta, vá se recuperar.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, " Você continua em bom estado após a luta.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, " Você está exausto da luta, vá se recuperar.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, " Você continua em bom estado após a luta.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Fim da Luta", 5000, 1); GameTextForPlayer(Boxer2, "~g~Fim da Luta", 5000, 1);
								if(PlayerInfo[Boxer2][pEmprego] == 7) { PlayerInfo[Boxer2][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            else if(Lost == 2)
			            {
			                if(IsPlayerConnected(Boxer1) && IsPlayerConnected(Boxer2))
			                {
					        	SetPlayerPos(Boxer1, 765.8433,3.2924,1000.7186); SetPlayerPos(Boxer2, 765.8433,3.2924,1000.7186);
					        	SetPlayerInterior(Boxer1, 5); SetPlayerInterior(Boxer2, 5);
			                	GetPlayerName(Boxer1, winner, sizeof(winner));
			                	GetPlayerName(Boxer2, loser, sizeof(loser));
		                		if(PlayerInfo[Boxer2][pEmprego] == 7) { PlayerInfo[Boxer2][pLoses] += 1; }
								if(PlayerInfo[Boxer1][pEmprego] == 7) { PlayerInfo[Boxer1][pWins] += 1; }
			                	if(TBoxer < 255)
			                	{
			                	    if(IsPlayerConnected(TBoxer))
			                	    {
				                	    if(TBoxer != Boxer1)
				                	    {
				                	        if(PlayerInfo[Boxer1][pEmprego] == 7)
				                	        {
					                	        TBoxer = Boxer1;
					                	        GetPlayerName(TBoxer, titel, sizeof(titel));
					                	        new nstring[MAX_PLAYER_NAME];
												format(nstring, sizeof(nstring), "%s", titel);
												strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
					                	        Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
					                	        Titel[TitelLoses] = PlayerInfo[TBoxer][pLoses];
					                	        SaveBoxer();
							                	format(gstring, sizeof(gstring), "Noticias do Boxe: %s venceu a luta contra %s e agora é o campeão.",  titel, loser);
												OOCNews(COLOR_WHITE,gstring);
											}
				                	        else
				                	        {
				                	            SendClientMessage(Boxer1, COLOR_GREY, " Você precisa ser um lutador de boxe para ganhar uma luta!");
				                	        }
										}
										else
										{
										    GetPlayerName(TBoxer, titel, sizeof(titel));
										    format(gstring, sizeof(gstring), "Noticias do Boxe: %s venceu a luta contra %s.",  titel, loser);
											OOCNews(COLOR_WHITE,gstring);
											Titel[TitelWins] = PlayerInfo[TBoxer][pWins];
				                	        Titel[TitelLoses] = PlayerInfo[Boxer1][pLoses];
				                	        SaveBoxer();
										}
									}
								}//TBoxer
								format(gstring, sizeof(gstring), " Você perdeu a luta contra %s.", winner);
								SendClientMessage(Boxer2, COLOR_LIGHTBLUE, gstring);
								GameTextForPlayer(Boxer2, "~r~Voce Perdeu", 3500, 1);
								format(gstring, sizeof(gstring), " Você ganhou a luta contra %s.", loser);
								SendClientMessage(Boxer1, COLOR_LIGHTBLUE, gstring);
								GameTextForPlayer(Boxer1, "~g~Voce Venceu", 3500, 1);
								if(GetPlayerHealth(Boxer1, health) < 20)
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, " Você está exausto da luta, vá se recuperar.");
								    SetPlayerHealth(Boxer1, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer1, COLOR_LIGHTBLUE, " Você continua em bom estado após a luta.");
								    SetPlayerHealth(Boxer1, 50.0);
								}
								if(GetPlayerHealth(Boxer2, health) < 20)
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, " Você está exausto da luta, vá se recuperar.");
							    	SetPlayerHealth(Boxer2, 30.0);
								}
								else
								{
								    SendClientMessage(Boxer2, COLOR_LIGHTBLUE, " Você continua em bom estado após a luta.");
								    SetPlayerHealth(Boxer2, 50.0);
								}
                                GameTextForPlayer(Boxer1, "~g~Fim da luta", 5000, 1); GameTextForPlayer(Boxer2, "~g~Fim da luta", 5000, 1);
								if(PlayerInfo[Boxer1][pEmprego] == 7) { PlayerInfo[Boxer1][pBoxSkill] += 1; }
								PlayerBoxing[Boxer1] = 0;
								PlayerBoxing[Boxer2] = 0;
							}
			            }
			            InRing = 0;
			            RorndStarted = 0;
			            Boxer1 = 255;
			            Boxer2 = 255;
			            TBoxer = 255;
			            trigger = 0;
			        }
			    }
			}
			if(TaxiCallTime[i] > 0)
			{
			    if(TaxiAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(TaxiAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(TaxiAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(BusCallTime[i] > 0)
			{
			    if(BusAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(BusAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(BusAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MedicCallTime[i] > 0)
			{
			    if(MedicAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(MedicAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MedicAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
            if(CopsrondaCallTime[i] > 0)
			{
			    if(CopsrondaAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(CopsrondaAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(CopsrondaAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(MechanicCallTime[i] > 0)
			{
			    if(MechanicAccepted[i] < 999)
			    {
				    if(IsPlayerConnected(MechanicAccepted[i]))
				    {
				        new Float:X,Float:Y,Float:Z;
						GetPlayerPos(MechanicAccepted[i], X, Y, Z);
						SetPlayerCheckpoint(i, X, Y, Z, 5);
				    }
				}
			}
			if(Robbed[i] == 1)
			{
			    if(RobbedTime[i] <= 0)
			    {
			        RobbedTime[i] = 0;
					Robbed[i] = 0;
			    }
			    else
			    {
			        RobbedTime[i] -= 1;
			    }
			}
			if(PlayerCuffed[i] == 1)
			{
			    if(PlayerCuffedTime[i] <= 0)
			    {
			        Controle(i, 1);
			        PlayerCuffed[i] = 0;
			        PlayerCuffedTime[i] = 0;
			        PlayerTazeTime[i] = 1;
			    }
			    else
			    {
			        PlayerCuffedTime[i] -= 1;
			    }
			}
		}
	}
}
public CheckGas()
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
    	if(IsPlayerConnected(i))
       	{
       	    if(GetPlayerState(i) == PLAYER_STATE_DRIVER && !IsPlayerNPC(i))
       	    {
	       		new vehicle = GetPlayerVehicleID(i);
	       		new VehicleModel = GetVehicleModel(vehicle);
	       		if(VehicleModel == 509 || VehicleModel == 481 || VehicleModel == 510)
	       		{
	       		    return true;
	       		}
	        	if(Gas[vehicle] >= 1)
		   		{
		   		    if(Gas[vehicle] <= 10) { PlayerPlaySound(i, 1085, 0.0, 0.0, 0.0); }
	              	Gas[vehicle]--;
		   		}
	   			else
	           	{
	              	NoFuel[i] = 1;
	              	TaCongelado[i] = true;
	              	Controle(i, 0);
                    PlayerPlaySound(i, 1159, 0.0, 0.0, 0.0);
		        	GameTextForPlayer(i,"Sem combustivel~n~Use /saircarro Para sair do veiculo",1500,3);
		        	SendClientMessage(i, COLOR_YELLOW, "O motor do veículo apagou por falta de combustível, Chame um mecânico para ajudar.");
				}
			}
    	}
	}
	return true;
}

public Fillup()
{
	for(new i=0; i<MAX_PLAYERS; i++)
   	{
	   	if(IsPlayerConnected(i))
	   	{
		    new VID;
		    new FillUp;
		    new string[256];
		    VID = GetPlayerVehicleID(i);
		    FillUp = GasMax - Gas[VID];
		    FillUp = FillUp * 4;
			if(Refueling[i] == 1)
		    {
				if(GetPlayerMoney(i) >= FillUp+4)
				{
					Gas[VID] = 100;
				    format(string,sizeof(string),"* Você reabasteceu seu veículo, por: R$%d.",FillUp);
				    SendClientMessage(i,COLOR_LIGHTBLUE,string);
				    Controle(i, 1);
					GivePlayerMoney(i, - FillUp);
					SBizzInfo[3][sbTill] += FillUp;
					ExtortionSBiz(3, FillUp);
					Refueling[i] = 0;
				}
			   	else
			   	{
			   	    Controle(i, 1);
			   	    format(string,sizeof(string),"* Voce nao tem dinheiro suficiente para encher o tanque, custo: $%d.",FillUp);
				    SendClientMessage(i,COLOR_LIGHTBLUE,string);
			   	}
		 	}
		}
	}
	return true;
}

public SetPlayerWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    ResetPlayerWeaponsEx(playerid);
	    if(PlayerInfo[playerid][pJailed] < 1)
	    {
    		if (PlayerInfo[playerid][pGun1] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
			    PlayerInfo[playerid][pGun1] = 0; PlayerInfo[playerid][pAmmo1] = 0;
			}
			if (PlayerInfo[playerid][pGun2] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
			    PlayerInfo[playerid][pGun2] = 0; PlayerInfo[playerid][pAmmo2] = 0;
			}
			if (PlayerInfo[playerid][pGun3] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
			    PlayerInfo[playerid][pGun3] = 0; PlayerInfo[playerid][pAmmo3] = 0;
			}
			if (PlayerInfo[playerid][pGun4] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
			    PlayerInfo[playerid][pGun4] = 0; PlayerInfo[playerid][pAmmo4] = 0;
			}
			if (PlayerInfo[playerid][pGun5] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun5], PlayerInfo[playerid][pAmmo5]);
			    PlayerInfo[playerid][pGun5] = 0; PlayerInfo[playerid][pAmmo5] = 0;
			}
			if (PlayerInfo[playerid][pGun6] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun6], PlayerInfo[playerid][pAmmo6]);
			    PlayerInfo[playerid][pGun6] = 0; PlayerInfo[playerid][pAmmo6] = 0;
			}
			if (PlayerInfo[playerid][pGun7] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun7], PlayerInfo[playerid][pAmmo7]);
			    PlayerInfo[playerid][pGun7] = 0; PlayerInfo[playerid][pAmmo7] = 0;
			}
			if (PlayerInfo[playerid][pGun8] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun8], PlayerInfo[playerid][pAmmo8]);
			    PlayerInfo[playerid][pGun8] = 0; PlayerInfo[playerid][pAmmo8] = 0;
			}
			if (PlayerInfo[playerid][pGun9] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun9], PlayerInfo[playerid][pAmmo9]);
			    PlayerInfo[playerid][pGun9] = 0; PlayerInfo[playerid][pAmmo9] = 0;
			}
			if (PlayerInfo[playerid][pGun10] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun10], PlayerInfo[playerid][pAmmo10]);
			    PlayerInfo[playerid][pGun10] = 0; PlayerInfo[playerid][pAmmo2] = 10;
			}
			if (PlayerInfo[playerid][pGun11] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun11], PlayerInfo[playerid][pAmmo11]);
			    PlayerInfo[playerid][pGun2] = 11; PlayerInfo[playerid][pAmmo2] = 11;
			}
			if (PlayerInfo[playerid][pGun12] > 0)
			{
			    GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun12], PlayerInfo[playerid][pAmmo12]);
			    PlayerInfo[playerid][pGun2] = 12; PlayerInfo[playerid][pAmmo2] = 12;
			}
		}
	}
}

public PrintSBizInfo(playerid,targetid)
{
	if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring),"|__________________ %s __________________|",SBizzInfo[targetid][sbMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Trancada: %d Entrada: R$%d Cofre: R$%d", SBizzInfo[targetid][sbLocked], SBizzInfo[targetid][sbEntranceCost], SBizzInfo[targetid][sbTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Extorção: %s",SBizzInfo[targetid][sbExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	}
}

public PrintBizInfo(playerid,targetid)
{
    if(IsPlayerConnected(playerid))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring),"|__________________ %s __________________|",BizzInfo[targetid][bMessage]);
		SendClientMessage(playerid, COLOR_WHITE,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Trancada: %d Entrada: R$%d Cofre: R$%d", BizzInfo[targetid][bLocked], BizzInfo[targetid][bEntranceCost], BizzInfo[targetid][bTill]);
		SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Extorção: %s",BizzInfo[targetid][bExtortion]);
		SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	}
}

public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new cash =  GetPlayerMoney(targetid);
		new atext[20];
		if(PlayerInfo[targetid][pSex] == 1) { atext = "Masculino"; }
		else if(PlayerInfo[targetid][pSex] == 2) { atext = "Feminino"; }
		new dtext[20];
		if(PlayerInfo[targetid][pDoenca] == 1) { dtext = "Mongolismo"; }
		else if(PlayerInfo[targetid][pDoenca] == 2) { dtext = "AIDS"; }
		else if(PlayerInfo[targetid][pDoenca] == 3) { dtext = "Herpes Genital"; }
		else if(PlayerInfo[targetid][pDoenca] == 4) { dtext = "Cirrose"; }
		else if(PlayerInfo[targetid][pDoenca] == 5) { dtext = "Câncer de Pulmão"; }
		else { dtext = "Nenhuma"; }
	    new rtext[64];
	    if(PlayerInfo[targetid][pMembro] == 1 || PlayerInfo[targetid][pLider] == 1)//PD Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Cadete"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Cabo"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Sargento"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Tenente"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Capitão"; }
	        else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Comandante"; }
			else { rtext = "Soldado"; }
		}
		if(PlayerInfo[targetid][pMembro] == 2 || PlayerInfo[targetid][pLider] == 2)//B.O.P.E Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Recruta"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Soldado"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Cabo"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Sargento"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Tenente"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Capitão"; }
			else { rtext = "Recruta"; }
		}
		if(PlayerInfo[targetid][pMembro] == 3 || PlayerInfo[targetid][pLider] == 3)//Exército Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Soldado"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Sargento"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "GATE"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Major"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Tenente Coronel"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "General"; }
			else { rtext = "Soldado"; }
		}
		if(PlayerInfo[targetid][pMembro] == 4 || PlayerInfo[targetid][pLider] == 4)//S.A.M.U Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Auxiliar de Enfermeiro"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Enfermeiro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Médico"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Doutor"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Cirurgiao"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Diretor Hospitalar"; }
			else { rtext = "Auxiliar de Enfermeiro"; }
		}
		if(PlayerInfo[targetid][pMembro] == 6 || PlayerInfo[targetid][pLider] == 6)//Taliban Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Homem-Bomba"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Membro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Terrorista"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Bombadeador"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Chefe"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Chefão"; }
			else { rtext = "Homem-Bomba"; }
		}
		if(PlayerInfo[targetid][pMembro] == 7 || PlayerInfo[targetid][pLider] == 7)//Prefeito Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Motorista"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Segurança"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Agente Especial"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Acessor"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Vice-Prefeito"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Prefeito"; }
			else { rtext = "Motorista"; }
		}
		if(PlayerInfo[targetid][pMembro] == 8 || PlayerInfo[targetid][pLider] == 8)//Hitman Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Matador"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Assassino Frio"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Agente Especial"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Vice-Diretor"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Diretor"; }
			else { rtext = "Matador"; }
		}
		if(PlayerInfo[targetid][pMembro] == 9 || PlayerInfo[targetid][pLider] == 9)//NR Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Humorista"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Repórter Local"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Repórter Nacional"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Editor Local"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Fotografo Paparazzi"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Diretor de Produção"; }
			else { rtext = "Humorista"; }
		}
		if(PlayerInfo[targetid][pMembro] == 10 || PlayerInfo[targetid][pLider] == 10)//Taxi Company Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Taxista Em Treinamento"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Taxista Novato"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Taxista Experiente"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Taxista Profissional"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Chefe"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Chefe"; }
			else { rtext = "Taxista Em Treinamento"; }
		}
		if(PlayerInfo[targetid][pMembro] == 14 || PlayerInfo[targetid][pLider] == 14 || PlayerInfo[targetid][pMembro] == 17
		|| PlayerInfo[targetid][pLider] == 17 || PlayerInfo[targetid][pMembro] == 18 || PlayerInfo[targetid][pLider] == 18
		|| PlayerInfo[targetid][pMembro] == 19 || PlayerInfo[targetid][pLider] == 19 || PlayerInfo[targetid][pMembro] == 20
		|| PlayerInfo[targetid][pLider] == 20 || PlayerInfo[targetid][pMembro] == 21 || PlayerInfo[targetid][pLider] == 21)//GANG'S Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Novato"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Membro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Fogueteiro"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Capanga"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Chefe"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Chefão"; }
			else { rtext = "Novato"; }
		}
		if(PlayerInfo[targetid][pMembro] == 15 || PlayerInfo[targetid][pLider] == 15)//AlQaeda Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Homem-Bomba"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Membro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Terrorista"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Bombardeador"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Chefe"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Chefão"; }
			else { rtext = "Homem-Bomba"; }
		}
		if(PlayerInfo[targetid][pMembro] == 16 || PlayerInfo[targetid][pLider] == 16)//Policia Civil Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Novato"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Atirador de Elite"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Inspetor De Policía"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Perito Criminal"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Líder"; }
			else { rtext = "Novato"; }
		}
		if(PlayerInfo[targetid][pMembro] == 13 || PlayerInfo[targetid][pLider] == 13
		|| PlayerInfo[targetid][pMembro] == 12 || PlayerInfo[targetid][pLider] == 12)//Máfias Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Novato"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Membro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Associado"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Braço-Direito"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Lider"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Líder"; }
			else { rtext = "Novato"; }
		}
		if(PlayerInfo[targetid][pMembro] == 11 || PlayerInfo[targetid][pLider] == 11)//PF Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Espião"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Atirador"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Capitão"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub Lider"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Líder"; }
			else { rtext = "Agente"; }
		}
		if(PlayerInfo[targetid][pMembro] == 23 || PlayerInfo[targetid][pLider] == 23)//FARC Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Homem-Bomba"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Membro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Terrorista"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Bombadeador"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Chefe"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Chefão"; }
			else { rtext = "Homem-Bomba"; }
		}
		if(PlayerInfo[targetid][pMembro] == 21 || PlayerInfo[targetid][pLider] == 21)//Drift Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Drift Novato"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Membro"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Drift Intermediário"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Drift Experiente"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub Drift King"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Drift King"; }
			else { rtext = "Drift Novato"; }
		}
		if(PlayerInfo[targetid][pMembro] == 24 || PlayerInfo[targetid][pLider] == 24)//detran ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Funcionario"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Funcionario"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Funcionario"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Funcionario"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Sub-Chefe"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Chefe"; }
			else { rtext = "Funcionario"; }
		}
		if(PlayerInfo[targetid][pMembro] == 22 || PlayerInfo[targetid][pLider] == 22)//Triads Ranks
		{
		    if(PlayerInfo[targetid][pCargo] == 1) { rtext = "Matador"; }
			else if(PlayerInfo[targetid][pCargo] == 2) { rtext = "Assassino Frio"; }
			else if(PlayerInfo[targetid][pCargo] == 3) { rtext = "Agente"; }
			else if(PlayerInfo[targetid][pCargo] == 4) { rtext = "Agente Especial"; }
			else if(PlayerInfo[targetid][pCargo] == 5) { rtext = "Vice-Diretor"; }
		    else if(PlayerInfo[targetid][pCargo] == 6) { rtext = "Diretor"; }
			else { rtext = "Matador"; }
		}
		else
		{
		    rtext = "Nenhum";
		}
        new jtext[20];
        if(PlayerInfo[targetid][pEmprego] == 1) { jtext = "Detetive"; }
        else if(PlayerInfo[targetid][pEmprego] == 2) { jtext = "Prof. do Sexo"; }
        else if(PlayerInfo[targetid][pEmprego] == 3) { jtext = "Vendedor De Drogas"; }
        else if(PlayerInfo[targetid][pEmprego] == 4) { jtext = "Mecanico"; }
        else if(PlayerInfo[targetid][pEmprego] == 5) { jtext = "Segurança"; }
        else if(PlayerInfo[targetid][pEmprego] == 6) { jtext = "Vendedor De Armas"; }
		else if(PlayerInfo[targetid][pEmprego] == 7) { jtext = "Boxeador"; }
        else if(PlayerInfo[targetid][pEmprego] == 8) { jtext = "Motorista de Onibus"; }
        else if(PlayerInfo[targetid][pEmprego] == 9) { jtext = "Mendigo"; }
        else if(PlayerInfo[targetid][pEmprego] == 10) { jtext = "Caminhoneiro"; }
        else { jtext = "Nenhum"; }
		new drank[20];
		if(PlayerInfo[targetid][pVIP] == 0) { drank = "VIP"; }
		else if(PlayerInfo[targetid][pVIP] == 1) { drank = "VIP Premium"; }
		new thsocio[20];
		if(PlayerInfo[targetid][pCidadania] == 0) { thsocio = "Não"; }
		else if(PlayerInfo[targetid][pCidadania] == 1) { thsocio = "Sim"; }
		new nivelhelper[20];
		if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[playerid][pHelper] <= 60) { nivelhelper = "Novato"; }
		else if(PlayerInfo[playerid][pHelper] >= 61 && PlayerInfo[playerid][pHelper] <= 150) { nivelhelper = "Auxiliar"; }
		else if(PlayerInfo[playerid][pHelper] >= 151 && PlayerInfo[playerid][pHelper] <= 300) { nivelhelper = "Master"; }
		else if(PlayerInfo[playerid][pHelper] == 0) { nivelhelper = "Nenhum"; }
		new thcargo[20];
		if(PlayerInfo[targetid][pCargo] == 6) { thcargo = "Líder"; }
		else if(PlayerInfo[targetid][pCargo] == 5) { thcargo = "Sub-Líder"; }
		else if(PlayerInfo[targetid][pCargo] == 4) { thcargo = "4"; }
		else if(PlayerInfo[targetid][pCargo] == 5) { thcargo = "3"; }
		else if(PlayerInfo[targetid][pCargo] == 6) { thcargo = "2"; }
		else if(PlayerInfo[targetid][pCargo] == 1) { thcargo = "1"; }
		else { thcargo = "Nenhum"; }
		new married[20];
		strmid(married, PlayerInfo[targetid][pMarriedTo], 0, strlen(PlayerInfo[targetid][pMarriedTo]), 255);
//		new age = PlayerInfo[targetid][pAge];
		new ptime = PlayerInfo[targetid][pConnectTime];
		//new lotto = PlayerInfo[targetid][pLottoNr];
		new deaths = PlayerInfo[targetid][pDeaths];
		new fishes = PlayerInfo[targetid][pFishes];
		new bigfish = PlayerInfo[targetid][pBiggestFish];
		new crimes = PlayerInfo[targetid][pCrimes];
		new Drogas = PlayerInfo[targetid][pDrogas]; // maconha
		new Drogas2 = PlayerInfo[targetid][pDrogas2]; // cocaina
		new Drogas3 = PlayerInfo[targetid][pDrogas3]; // crack
		new SafeDrogas = PlayerInfo[targetid][pSafeDrogas]; // maconha
		new SafeDrogas2 = PlayerInfo[targetid][pSafeDrogas2]; // cocaina
		new SafeDrogas3 = PlayerInfo[targetid][pSafeDrogas3]; // crack
		new materiaisBPF = PlayerInfo[targetid][pMats];
		new smats = PlayerInfo[targetid][psMats];
		//new wanted = WantedLevel[targetid];
		new level = PlayerInfo[targetid][pLevel];
		new exp = PlayerInfo[targetid][pExp];
		new kills = PlayerInfo[targetid][pKills];
		new pnumber = PlayerInfo[targetid][pPnumber];
		new Conta = PlayerInfo[targetid][pConta];
		new nxtlevel = PlayerInfo[targetid][pLevel]+1;
		new expquantidade = nxtlevel*levelexp;
		new costlevel = nxtlevel*levelcost;//10k for testing purposes
		new Housekey = PlayerInfo[targetid][pPHousekey];
		new bizkey = PlayerInfo[targetid][pPbiskey];
		new intir = PlayerInfo[targetid][pInt]; 
		new local = PlayerInfo[targetid][pLocal];
		new ChaveCarro = PlayerInfo[targetid][pPcarkey];
		new ChaveCarro2 = PlayerInfo[targetid][pPcarkey2];
		new ChaveCarro3 = PlayerInfo[targetid][pPcarkey3];
		new ChaveCarro4 = PlayerInfo[targetid][pPcarkey4];
		new Float:shealth = PlayerInfo[targetid][pSHealth];
		new Float:health;
		new creditos = PlayerInfo[targetid][pCreditos];
		new name[MAX_PLAYER_NAME];
		GetPlayerName(targetid, name, sizeof(name));
		GetPlayerHealth(targetid,health);
		new Float:px,Float:py,Float:pz;
		GetPlayerPos(targetid, px, py, pz);
        new RulesBox[2000];
        if(targetid == playerid)
		{}
		else
		{}
        format(RulesBox, sizeof(RulesBox),"%s\n%s\n",RulesBox,name);
		format(RulesBox, sizeof(RulesBox), "%s\nNivel:[%d] Sexo:[%s] Vida:[%.1f] Dinheiro:[R$%d] Banco:[R$%d] Celular:[%d] Créditos:[%d]\n",RulesBox, level,atext,shealth+50, cash, Conta, pnumber,creditos);
		format(RulesBox, sizeof(RulesBox), "%s\nConta:[%s] Casado Com:[%s] Horas Jogadas:[%d] Profissão Secundaria:[%s] Cidadania:[%s]\n",RulesBox, drank,married,ptime,jtext,thsocio);
		format(RulesBox, sizeof(RulesBox), "%s\nPeixes:[%d] Maior Peixe:[%d] Crimes Cometidos:[%d] Matou:[%d] Morreu:[%d]\n",RulesBox, fishes,bigfish,crimes,kills,deaths );
		format(RulesBox, sizeof(RulesBox), "%s\nPróximo Nivel:[R$%d] Respeito:[%d/%d] Doenças:[%s]\n",RulesBox,costlevel,exp,expquantidade,dtext);
		format(RulesBox, sizeof(RulesBox), "%s\nMateriais:[%d] Safe Materiais:[%d] Organização:[%s] Cargo:[%s] Nível Helper:[%d]\n",RulesBox,materiaisBPF,smats,NomeORG(targetid),thcargo, PlayerInfo[targetid][pHelper]);
		format(RulesBox, sizeof(RulesBox), "%s\nMaconha:[%d] Cocaina:[%d] Crack:[%d] Safe Maconha:[%d] Safe Cocaina:[%d] Safe Crack:[%d]\n",RulesBox,Drogas,Drogas2,Drogas3,SafeDrogas,SafeDrogas2,SafeDrogas3);
		format(RulesBox, sizeof(RulesBox), "%s\nChave De Casa [%d] Chave Da Empresa [%d] Chave Do Carro(Aluguel) [%d] Interior:[%d] Local:[%d]\n",RulesBox, Housekey,bizkey,HireCar[targetid],intir,local);
		format(RulesBox, sizeof(RulesBox), "%s\nVeículo 1[%d] Veículo 2[%d] Veículo 3[%d] Veículo 4[%d] Venc. Premium [%d/%d/%d-%02d:00]",RulesBox, ChaveCarro, ChaveCarro2, ChaveCarro3, ChaveCarro4, PlayerInfo[targetid][pDiaVIP], PlayerInfo[targetid][pMesVIP], PlayerInfo[targetid][pAnoVIP], PlayerInfo[targetid][pHoraVIP]);
        ShowPlayerDialog(playerid, DIALOG_INFO, DIALOG_STYLE_MSGBOX, "Documentos", RulesBox, "Fechar", "");
	}
}
public SetPlayerToTeamColor(playerid)
{
    if(admtrampando[playerid] == 1 && admhide[playerid] != 1)
	{
		SetPlayerColor(playerid, COR_ADMIN);
	}
 	else if(helpertrampando[playerid] == 1 && helperhide[playerid] != 1)
	{
		SetPlayerColor(playerid, 0xF09C00AA);
	}
	else if (PlayerInfo[playerid][pTeam] == 3)//Civis
	{
       SetPlayerColor(playerid, COLOR_WHITE);
 	}
	else if (PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)//PM
	{
       SetPlayerColor(playerid, COR_PM);
	}
	else if (PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)//BOPE
	{
       SetPlayerColor(playerid, COR_BOPE);
	}
	else if (PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)//Exército
	{
       SetPlayerColor(playerid, COR_EXE);
	}
	else if (PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)//S.A.M.U
	{
       SetPlayerColor(playerid, COR_SAMU);
	}
	else if (PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)//Aztecas
	{
       SetPlayerColor(playerid, COR_AZTECAS);
	}
	else if (PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)//Taliban
	{
       SetPlayerColor(playerid, COR_Taliban);
	}
    else if (PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7)//Governo
	{
       SetPlayerColor(playerid, COR_PRE);
	}
	else if (PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8)//Hitmans
	{
       SetPlayerColor(playerid, COR_HITMAN);
	}
	else if (PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)//Reporter
	{
       SetPlayerColor(playerid, COR_REP);
    }
    else if (PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10)//Taxistas
	{
       SetPlayerColor(playerid, COR_TAXI);
    }
	else if (PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)//PF
	{
       SetPlayerColor(playerid, COR_PF);
	}
	else if (PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)//Máfia Cosa Nostra
	{
       SetPlayerColor(playerid, COR_COSA);
	}
	else if (PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)//Máfia Yakuza
	{
       SetPlayerColor(playerid, COR_YAK);
	}
	else if (PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)//Grove
	{
       SetPlayerColor(playerid, COR_GRO);
	}
	else if (PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)//AL'QAEDA
	{
       SetPlayerColor(playerid, COR_AL);
	}
	else if (PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)//Policia Civil
	{
       SetPlayerColor(playerid, COR_PC);
	}
	else if (PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)//BALLAS
	{
       SetPlayerColor(playerid, COR_BALLAS);
	}
	else if (PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)//vagos
	{
       SetPlayerColor(playerid, COR_VAGOS);
	}
	else if (PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)//Comando Vermelho
	{
       SetPlayerColor(playerid, 0xF6000000);
	}
	else if (PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)//Sons of Anarchy
	{
       SetPlayerColor(playerid, COR_SONS);
	}
	else if (PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)//Drifters
	{
       SetPlayerColor(playerid, COR_DRIFTERS);
	}
	else if (PlayerInfo[playerid][pMembro] == 22 || PlayerInfo[playerid][pLider] == 22)//Triads
	{
       SetPlayerColor(playerid, COR_TRIADS);
	}
 	else if (PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)//FARC
	{
       SetPlayerColor(playerid, COR_FARC);
	}
	else if (PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)//detran
	{
       SetPlayerColor(playerid, COR_DETRAN);
	}
	else if (PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25)//Advogados
	{
       SetPlayerColor(playerid, COR_ADV);
	}
	else //caso dê algum bug
	{
       SetPlayerColor(playerid, COLOR_WHITE);
	}
}
//---------------------------------------------------------

public GameModeInitExitFunc()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_Nenhum;
			GameTextForPlayer(i, "~g~P~y~B~b~G~n~~p~Reiniciando, Aguarde... ", 3000, 3);
			gPlayerLogged[i] = 0;
		}
	}
//	KillTimer(synctimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(cartimer);
	KillTimer(Contastimer);
	KillTimer(checkgastimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(turftimer);
	KillTimer(weaponhacktimer);
	KillTimer(tempoGranaTR);
	KillTimer(TempoAdministrador);
	OnPropUpdate();
	SetVehicleToRespawn(CAR_AMOUNT);
	SaveBoxer();
	SetTimer("GameModeExitFunc", 4000, 0);
	return true;
}

public GameModeExitFunc()
{
//	KillTimer(synctimer);
	KillTimer(TempoAnGang);
	KillTimer(TempoAnMafia);
	KillTimer(TempoAnDrift);
	KillTimer(TempoAnAlqaeda);
    KillTimer(TempoAnFARC);
	KillTimer(TempoRecarga);
	KillTimer(TempoAnTaliban);
	KillTimer(TempoAnPrefeito);
	KillTimer(TempoAnTaxi);
	KillTimer(TempoAnHitmans);
	KillTimer(TempoAnTriads);
	KillTimer(TempoAnmerce);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(othtimer);
	KillTimer(cartimer);
	KillTimer(Contastimer);
	KillTimer(checkgastimer);
	KillTimer(pickuptimer);
	KillTimer(productiontimer);
	KillTimer(spectatetimer);
	KillTimer(stoppedvehtimer);
	KillTimer(turftimer);
	KillTimer(weaponhacktimer);
	KillTimer(tempoGranaTR);
	KillTimer(TempoAdministrador);
	KillTimer(TempoAn);
	KillTimer(TempoCorrida);
	KillTimer(TempoSequestrar);
	KillTimer(TempoAmarrar);
	KillTimer(TempoServicoTaxi);
	KillTimer(TempoServicoOnibus);
	KillTimer(TempoServicoPolicia);
	KillTimer(TempoServicoMedico);
	KillTimer(TempoServicoMecanico);
	KillTimer(TempoMecanico);
	KillTimer(TempoMedico);
	KillTimer(TempoCorridaOni);
	KillTimer(TempoAnGov);
	KillTimer(TempoAnReporter);
	KillTimer(TempoSincronizar);
	KillTimer(Tempohbomba);
//	KillTimer(Tempoincendiar);
	KillTimer(Tempocbomba);
	OnPropUpdate();
	SetVehicleToRespawn(CAR_AMOUNT);
	SaveBoxer();
	GameModeExit();
}

public LoadBoxer()
{
	new arrCoords[3][64];
	new strFromFile2[128];
	new File: file = fopen("BrasilGames/boxer.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Titel[TitelWins] = strval(arrCoords[0]);
		strmid(Titel[TitelName], arrCoords[1], 0, strlen(arrCoords[1]), 255);
		Titel[TitelLoses] = strval(arrCoords[2]);
		fclose(file);
	}
	return true;
}

public SaveBoxer()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%s,%d", Titel[TitelWins],Titel[TitelName],Titel[TitelLoses]);
	new File: file2 = fopen("BrasilGames/boxer.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return true;
}

public LoadStuff()
{
	new arrCoords[4][64];
	new strFromFile2[128];
	new File: file = fopen("BrasilGames/stuff.ini", io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		Jackpot = strval(arrCoords[0]);
		SBizzInfo[25][sbTill] = strval(arrCoords[1]);
		TaxValue = strval(arrCoords[2]);
		fclose(file);
	}
	return true;
}

public SaveStuff()
{
	new coordsstring[128];
	format(coordsstring, sizeof(coordsstring), "%d,%d,%d", Jackpot,SBizzInfo[25][sbTill],TaxValue);
	new File: file2 = fopen("BrasilGames/stuff.ini", io_write);
	fwrite(file2, coordsstring);
	fclose(file2);
	return true;
}

public LoadProperty()
{
	new arrCoords[30][64];
	new strFromFile2[256];
	new File: file = fopen("BrasilGames/Casas.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			HouseInfo[idx][hHealthx] = strval(arrCoords[6]);
			HouseInfo[idx][hHealthy] = strval(arrCoords[7]);
			HouseInfo[idx][hHealthz] = strval(arrCoords[8]);
			HouseInfo[idx][hArmorrx] = strval(arrCoords[9]);
			HouseInfo[idx][hArmorry] = strval(arrCoords[10]);
			HouseInfo[idx][hArmorrz] = strval(arrCoords[11]);
			//printf("HouseInfo hEntrancez %f",HouseInfo[idx][hEntrancez]);
			strmid(HouseInfo[idx][hOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[14]);
			HouseInfo[idx][hHel] = strval(arrCoords[15]);
			HouseInfo[idx][hArm] = strval(arrCoords[16]);
			HouseInfo[idx][hInt] = strval(arrCoords[17]);
			HouseInfo[idx][hLock] = strval(arrCoords[18]);
			HouseInfo[idx][hOwned] = strval(arrCoords[19]);
			HouseInfo[idx][hRooms] = strval(arrCoords[20]);
			HouseInfo[idx][hRent] = strval(arrCoords[21]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[22]);
			HouseInfo[idx][hTakings] = strval(arrCoords[23]);
			HouseInfo[idx][hVec] = strval(arrCoords[24]);
  	        if(HouseInfo[idx][hVec] == 457)
			{
				HouseInfo[idx][hVec] = 411;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[25]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[26]);
			HouseInfo[idx][hDate] = strval(arrCoords[27]);
			HouseInfo[idx][hLevel] = strval(arrCoords[28]);
			HouseInfo[idx][hWorld] = strval(arrCoords[29]);
			idx++;
		}
		printf("[BRNM]: %d Casas Carregadas", idx);
		fclose(file);
	}
	return true;
}

public LoadBizz()
{
	new arrCoords[17][64];
	new strFromFile2[256];
	new File: file = fopen("BrasilGames/Empresas.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			BizzInfo[idx][bOwned] = strval(arrCoords[0]);
			strmid(BizzInfo[idx][bOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(BizzInfo[idx][bMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(BizzInfo[idx][bExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			BizzInfo[idx][bEntranceX] = floatstr(arrCoords[4]);
			BizzInfo[idx][bEntranceY] = floatstr(arrCoords[5]);
			BizzInfo[idx][bEntranceZ] = floatstr(arrCoords[6]);
			BizzInfo[idx][bExitX] = floatstr(arrCoords[7]);
			BizzInfo[idx][bExitY] = floatstr(arrCoords[8]);
			BizzInfo[idx][bExitZ] = floatstr(arrCoords[9]);
			BizzInfo[idx][bLevelNeeded] = strval(arrCoords[10]);
			BizzInfo[idx][bBuyPrice] = strval(arrCoords[11]);
			BizzInfo[idx][bEntranceCost] = strval(arrCoords[12]);
			BizzInfo[idx][bTill] = strval(arrCoords[13]);
			BizzInfo[idx][bLocked] = strval(arrCoords[14]);
			BizzInfo[idx][bInterior] = strval(arrCoords[15]);
			//BizzInfo[idx][VirtualWorld] = strval(arrCoords[16]);
			idx++;
		}
		printf("[BRNM]: %d Empresas Carregadas", idx);
		fclose(file);
	}
	return true;
}


public LoadSBizz()
{
	new arrCoords[12][64];
	new strFromFile2[256];
	new File: file = fopen("BrasilGames/MiniEmpresas.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(SBizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, '|');
			SBizzInfo[idx][sbOwned] = strval(arrCoords[0]);
			strmid(SBizzInfo[idx][sbOwner], arrCoords[1], 0, strlen(arrCoords[1]), 255);
			strmid(SBizzInfo[idx][sbMessage], arrCoords[2], 0, strlen(arrCoords[2]), 255);
			strmid(SBizzInfo[idx][sbExtortion], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			SBizzInfo[idx][sbEntranceX] = floatstr(arrCoords[4]);
			SBizzInfo[idx][sbEntranceY] = floatstr(arrCoords[5]);
			SBizzInfo[idx][sbEntranceZ] = floatstr(arrCoords[6]);
			SBizzInfo[idx][sbLevelNeeded] = strval(arrCoords[7]);
			SBizzInfo[idx][sbBuyPrice] = strval(arrCoords[8]);
			SBizzInfo[idx][sbEntranceCost] = strval(arrCoords[9]);
			SBizzInfo[idx][sbTill] = strval(arrCoords[10]);
			SBizzInfo[idx][sbLocked] = strval(arrCoords[11]);
			idx++;
		}
		printf("[BRNM]: %d Empresas Especiais Carregadas", idx);
		fclose(file);
	}
	return true;
}
//------------------------------------------------------------------------------------------------------
public OnGameModeInit()
{
    SetHora();
	getdate(v[0], v[1], v[2]);
	gettime(v[3], v[4], v[5]);
  	CHitman = 0;
    CTriad = 0;
	SetGameModeText(SVVERSAO);
 	SendRconCommand(MPNOME);
	SendRconCommand("rcon 0");
	SetVehicleToRespawn(CAR_AMOUNT);
	print("\n********************************************");
	printf("       [%02d/%02d/%d %02d:%02d:%02d]      ", v[2], v[1], v[0], v[3], v[4], v[5]);
	print("********************************************\n");
	printf("Filterscript carownership.amx Initiated\n");
    LoadCar();
	//>=-=-=-=-=-=-=-=-=-=-=-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-=<|
	ShowPlayerMarkers(0);
	AllowInteriorWeapons(1);
	AllowAdminTeleport(1);
	DisableInteriorEnterExits();
	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	ConnectNPC("Reginaldo","AdminBotM");
	Gate = CreateObject(980,1141.40002,-1206.40002,20.8,0,0,90); // Coloque as Info do Portão FECHADO Aqui =D (MODEL,X,Y,Z,ROTX,ROTY,ROTZ) Site para Conversão: [url]http://www.convertffs.com/[/url]
	Gate2 = CreateObject(980,1621.30005,-1862.09998,15.3,0,0,0);// Triad
	Gate3 = CreateObject(980,958.5,-1559.59998,15.3,0,0,0);// Hitman
	Gate5 = CreateObject(980,282.20001,-1320.09998,55.6,0,0,34);// Mansão 30
    Gate6 = CreateObject(980,263.89999,-1333.30005,54.9,0,0,34);//Mansão 27
    Gate7 = CreateObject(975,630.5,-1115.40002,47.5,0,0,34.5);//Mansão 117
    Gate8 = CreateObject(980,211.2,-1350.5,52.5,0,0,41);//Mansão 98
    Gate9 = CreateObject(980,345.20001,-1193.69995,78.3,0,0,40);//Mansão 33
    Gate10 = CreateObject(980,261.39999,-1231.80005,74.7,0,0,35.5);//Mansão 24
	//-----------------------------------------------------------------------------------------------------------------------------------------------------------------<|
	LoadOrgs();
   	LoadProperty();
	LoadBizz();
	LoadSBizz();
	LoadBoxer();
	LoadStuff();
    LoadCofreOrg();
    LoadTrunk();
    LoadAdm();
    LoadHelper();
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------<|
    SetTimer("TextProcu", 1000, true);
    SetTimer("CheckViaFacil", 100, true);
    SetTimer("SendMensagens",90000,1);
	tempoGranaTR = SetTimer("GranaTerritorios", 300000, 1);
    weaponhacktimer = SetTimer("CheckHack",1000,1);
    SetTimer("verping",5000,1);
    unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	othtimer = SetTimer("OtherTimer", 1000, 1);
	cartimer = SetTimer("CarCheck", 40000, 1);
	pickuptimer = SetTimer("CustomPickups", 1000, 1);
	spectatetimer = SetTimer("Spectator", 2000, 1);
	productiontimer = SetTimer("Production", 300000, 1);
	SetTimer("TextProcu", 1000, true);
	checkgastimer = SetTimer("CheckGas", RunortTime, 1);
    stoppedvehtimer = SetTimer("StoppedVehicle", RunortTime, 1);
    //SetTimer("RandomServerNames",2000,1);
    SetTimer("reloginho",1000,true);
    SetTimer("TempoAtendimento", 1000, 1); 
    SetTimer("CheckCarHealth",2000,true);
	SetTimer("VerificarCongelado", 100, true);
	SetTimer("CheckVida", 1000, true);
	SetTimer("UpdateSpeed", UpdateSeconds*1000, 1);
    //-----------------------------------------------------------------------------------------------------------------------------------------------------------------<|
    GZFavela = GangZoneCreate(2117.333, -1069.962, 2261.841, -959.4252);
 	GZSkate = GangZoneCreate(1861.9410,-1450.6462,1976.5867,-1351.4069);
 	GZEstacao = GangZoneCreate(1687.613, -1958.204, 1813.106, -1859.51);
 	GZCasarao = GangZoneCreate(1098.173, -2084.531, 1299.723, -2005.577);
    GZAero = GangZoneCreate(1368.174, -2380.612, 1592.542, -2218.755);
    GZPark = GangZoneCreate(1847.332, -1267.349, 2060.291, -1137.074);
    
    GZComplexo = GangZoneCreate(1090.567, -1989.786, 1204.652, -1902.935);

    PortaoEntrada = CreateObject(17951,1911.21130371,-1780.68151855,14.15972233,0.00000000,0.00000000,90.00000000);// Cria o portao do Lava jato(entrada)
	PortaoSaida = CreateObject(17951,1911.21130371,-1771.97814941,14.15972233,0.00000000,0.00000000,90.00000000);// Cria o portao saida do lava jato!
	CreateObject(1250,1908.84997559,-1783.68945312,13.40625000,0.00000000,0.00000000,90.00000000);
	CreatePickup(1239, 1, 1911.1886,-1784.2952,13.5, -1);
	
	Create3DTextLabel("{FFFF00}Fiscalização Eletrônica\n80 km/h", -1 ,1337.1447,-1271.9333,17.8906,60.0,0);
	Create3DTextLabel("{FFFF00}Fiscalização Eletrônica\n80 km/h", -1 ,1364.5045,-1272.2808,17.8947,60.0,0);
	//Radar Prefeitura
	Create3DTextLabel("{FFFF00}Fiscalização Eletrônica\n60 km/h", -1 ,1505.3904,-1727.1473,17.8813,60.0,0);
	Create3DTextLabel("{FFFF00}Fiscalização Eletrônica\n60 km/h", -1 ,1505.4255,-1739.3413,17.8873,60.0,0);

	// Casas Radios 
	format(radioscasas, sizeof(radioscasas), "{FFFF00}/radios");
	Create3DTextLabel(radioscasas , -1 ,1237.3082,-1247.6847,13.5462,13.0,0);
	Create3DTextLabel(radioscasas , -1 ,992.7623,-1586.2277,13.5589,13.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(radioscasas , -1 ,928.4721,-1589.2817,13.5503,13.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(radioscasas , -1, 989.4770,-1718.4868,13.5772, 13.0,0); // Mansão Casa VIP Premium ID 230
	// ---------------------
	
	// Casas Mudar Luta
	format(mudarlutacasas, sizeof(mudarlutacasas), "{FFFF00}/mudarluta");
	Create3DTextLabel(mudarlutacasas , -1 ,1264.4309,-1232.0305,13.5869,13.0,0);
	Create3DTextLabel(mudarlutacasas, -1, 1300.0574,-787.2704,88.3125, 13.0,0);
   //  ------------------------

   	// Casas Comerchurrasco
	format(comerchurrascocasas, sizeof(comerchurrascocasas), "{FFFF00}/comerchurrasco");
	Create3DTextLabel(comerchurrascocasas , -1 ,1238.2737,-1263.3185,13.5294,13.0,0);
	Create3DTextLabel(comerchurrascocasas, -1, 1276.8843,-835.1474,77.2711, 13.0,0);
	Create3DTextLabel(comerchurrascocasas, -1, 933.2353,-1589.9604,13.5503, 13.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(comerchurrascocasas, -1, 988.7175,-1613.2692,13.5212, 13.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(comerchurrascocasas, -1, 986.7035,-1727.6809,13.5772, 13.0,0); // Mansão Casa VIP Premium ID 230
	//  ------------------------
	
	// Casas bar
	format(barcasas, sizeof(barcasas), "{FFFF00}/beber");
	Create3DTextLabel(barcasas , -1 ,1231.4076,-1262.7483,13.5294,13.0,0);// Casa Hosp
	Create3DTextLabel(barcasas , -1, 1271.0212,-1247.5483,13.5869,13.0,0);// Casa Hosp
	Create3DTextLabel(barcasas , -1, 1292.0604,-827.6722,83.1798,13.0,0);// Casa Mad Dog
	Create3DTextLabel(barcasas , -1, 383.4798,-1842.7611,7.8359,10.0,0);// Balada Praia
	Create3DTextLabel(barcasas , -1, 401.8212,-1826.3898,7.8409,10.0,0);// Balada Praia
	Create3DTextLabel(barcasas , -1, 931.6966,-1586.8280,13.5503,10.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(barcasas , -1, 997.9523,-1606.4858,13.5212,10.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(barcasas , -1, 997.9354,-1616.9598,13.5212,10.0,0); // Mansão Casa VIP Premium ID 227
	Create3DTextLabel(barcasas , -1, 982.6809,-1722.5463,13.5772, 10.0,0); // Mansão Casa VIP Premium ID 230
	//==-=--=-=-=-=-=-=- Casas VIP Normal Bar =-=-=-=-=-=-=-=-=--=-=-=-=-
	Create3DTextLabel(barcasas , -1, 1203.3342,-1873.7017,13.5266,10.0,0);// Casa 1
	Create3DTextLabel(barcasas , -1, 1172.4803,-1873.2429,13.5266,10.0,0);// Casa 2
	Create3DTextLabel(barcasas , -1, 1141.5674,-1873.9248,13.5465,10.0,0);// Casa 3
	Create3DTextLabel(barcasas , -1, 1110.6575,-1873.6936,13.5465,10.0,0);// Casa 4
	Create3DTextLabel(barcasas , -1, 1079.5389,-1873.2064,13.5465,10.0,0);// Casa 5
	//--------------------
 	Create3DTextLabel("Compre aqui o seu plano Via Fácil - /viafacil", 0xFFFFFFFF, 60.1402,-1533.1696,5.2082, 10 ,0);
    //>=-=-=-=-=-=-=-=-=-=-=-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-=<|
	Create3DTextLabel("{FFFF00}Sair do Hotel Aperte\n 'Enter'" , -1 ,2228.1353,-1150.4427,1025.7969,60.0,0);// Sair do Hotel
    Create3DTextLabel("{FFFF00}BRNM\nCréditos Apertando 'F'", -1 ,1691.4391,-1334.9795,17.4275,15,0);
    Create3DTextLabel("{FFFF00}Blindagem\nCusto R$5.000 (Digite /blindar)", -1 ,1025.0767,-1024.0460,31.7695,15,0);
    Create3DTextLabel("{FFFF00}Elevador\n D.E.T.R.A.N", -1 ,1653.8035,-1655.3170,22.5156,15,0);//Detran
    Create3DTextLabel("{FFFF00}Elevador\n D.E.T.R.A.N", -1 ,1676.8268,-1645.2245,14.2286,15,0);//Detran
    Create3DTextLabel("{FFFF00}Depósito\n D.E.T.R.A.N", -1 ,1657.5554,-1656.3943,22.5156,15,0);//Deposito Detran
    Create3DTextLabel("{FFFF00}Depósito\n D.E.T.R.A.N", -1 ,1658.4657,-1691.3813,15.6094,15,0);//Deposito Detran
    Create3DTextLabel("{FFFF00}Cativeiro \nPara Gangster /cativeiro para abrir o Portão\nPara Policiais /cativeiroinvd para invadir o Cativeiro", -1 ,2351.5745,-659.6744,128.0812,15.0,0);
	Create3DTextLabel("{FFFF00}Tunning Drifters\nDigite /tunar Para Tunar", -1 ,2774.0159,-1603.3855,10.9219,30.0,0);
	Create3DTextLabel("{FFFF00}Prova Teórica\nAperte F", -1 , -2033.4347,-117.3490,1035.1719, 25, 0, 50);
	Create3DTextLabel("{FFFF00}Restaurante LS\nAperte F para ver o cardápio", -1 ,1310.5232,-1251.0765,14.5019,10.0,0);
	Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,-1345.8823,492.5301,11.2027,10.0,0);
	Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,1530.3060,-1702.4915,6.2252,10.0,0);
    Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,326.6374,307.1123,999.1484,10.0,0);
    Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,1263.5537,-1655.0265,6.3116,10.0,0);
    Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,240.6516,112.8062,1003.2188,10.0,0);
    Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,255.1123,77.4241,1003.6406,10.0,0);
    Create3DTextLabel("{FFFF00}BaterCartao\nAperte F para Bater o Cartao", -1 ,229.8059,164.7830,1003.0234,10.0,0);
    Create3DTextLabel("{FFFF00}Soltura de Presos\nDigite /autorizacao", -1, 249.6155,67.6277,1003.6406, 10.0, 0);
    Create3DTextLabel("{FFFF00}'ENTER'\nPara Bater Cartao", -1 ,1172.4320,-1319.2578,15.3940,10.0,0);// SAMU
    Create3DTextLabel("{FFFF00}'ENTER'\nPara Trabalhar", -1 ,1791.7347,-1689.3971,13.4656,10.0,0); //MECANICOS
	Create3DTextLabel("{FFFF00}Equipar\nAperte F", -1 ,-1335.7773,500.0176,11.3047,10.0,0);
	Create3DTextLabel("{FFFF00}Equipar\nAperte F", -1 ,246.3115,121.0975,1003.2301,10.0,0);
	Create3DTextLabel("{FFFF00}Equipar\nAperte F", -1 ,262.0182,71.0734,1003.2422,10.0,0);
	Create3DTextLabel("{FFFF00}Equipar\nAperte F", -1 ,211.2608,185.8552,1003.0313,10.0,0);
	Create3DTextLabel("{FFFF00}Equipar\nAperte F", -1 ,616.8616,-592.8971,17.2330,10.0,0);//PR
	Create3DTextLabel("{FFFF00}Equipar\nAperte F", -1 ,1221.7601,-1802.2505,13.6108,10.0,0);//BOMB
	//>=-=-=-=-=-=-=-=-=-=-=-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-=<|
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 677.1299,-2866.3892,13.0944, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 1004.0070,-939.3102,42.1797, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -90.5515,-1169.4578,2.4079, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -2029.4968,156.4366,28.9498, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 1380.4712,462.7467,20.1107, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 1383.5532,457.1286,19.9561, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -2243.9629,-2560.6477,31.8841, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 2202.2349,2474.3494,10.5258, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -1328.8250,2677.2173,49.7665, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 2113.7390,920.1079,10.5255, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 1944.3260,-1772.9254,13.3906, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -1609.7958,-2718.2048,48.5391, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -2408.7590,976.0934,45.4175, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 1385.0475,460.5417,20.1068, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 1379.1952,459.1295,19.9587, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -1676.6323,414.0262,6.9484, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 614.9333,1689.7418,6.6968, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 70.3882,1218.6783,18.5165, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -1327.7218,2678.8723,50.0625, 60, 0); 
	Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , 654.9556,-570.4192,16.5015, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 ,  654.9702,-559.7487,16.5015, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 ,  2114.1804,920.5062,10.8203, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 ,  -1470.8165,1863.8408,32.6328, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 ,  -1606.2137,-2713.9841,48.5335, 60, 0);
    Create3DTextLabel("{FFFF00}Para Abastecer\nAperte 'H'", -1 , -1603.4417,-2709.1326,48.5335, 60, 0);
    //>=-=-=-=-=-=-=-=-=-=-=-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-=<|
	Create3DTextLabel("{FFFF00}Cofre do Banco\nDigite /roubar Para Roubar", -1 ,2144.4177,1641.5360,993.5761,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre da Lotérica\nDigite /roubar Para Roubar", -1 ,820.6042,8.3990,1004.1962,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre da Loja de Armas\nDigite /roubar Para Roubar", -1 ,303.9740,-168.8060,999.5938,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre da Ammu Nation\nDigite /roubar Para Roubar", -1 ,294.8272,-57.8448,1001.5156,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre da Binco\nDigite /roubar Para Roubar", -1 ,211.3917,-96.1839,1005.2578,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre da Zip\nDigite /roubar Para Roubar", -1 ,162.1060,-79.8251,1001.8047,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre da Victim\nDigite /roubar Para Roubar", -1 ,205.4029,-11.5629,1005.2109,10.0,0);
    Create3DTextLabel("{FFFF00}Estilos de Lutas\nAperte Enter Para Mudar Luta", -1 ,768.2192,-3.9873,1000.7203,15.0,0);
    Create3DTextLabel("{FFFF00}Noticias\nDigite /Noticias para noticiar", -1 ,361.2997,203.8503,1008.3828,15.0,0);
    Create3DTextLabel("{FFFF00}Departamento da Policia Militar\nAperte Enter Para Entrar", -1 ,1554.9537,-1675.6584,16.1953,30.0,0);
    Create3DTextLabel("{FFFF00}Venda de Carros\n Digite /v vender", -1 ,1639.9688,-1085.7878,23.9063,15.0,0);// D3D CONCE 1
    Create3DTextLabel("{FFFF00}Venda de Carros\n Digite /v vender", -1 ,1627.9520,-1119.9115,23.9063,15.0,0);// D3D CONCE 2
    Create3DTextLabel("{FFFF00}Venda de Carros\n Digite /v vender", -1 ,1646.4259,-1119.1290,23.9063,15.0,0);// D3D CONCE 3
    Create3DTextLabel("{FFFF00}Venda de Carros\n Digite /v vender", -1 ,547.2025,-1280.1598,17.2482,15.0,0);// D3D Concessionaria 2
    Create3DTextLabel("{FFFF00}Venda de Kart's\n Digite /v vender", -1 ,1816.8383,-1402.4834,13.4256,15.0,0);// D3D Concessionaria Bikes e Kart
    Create3DTextLabel("{FFFF00}Venda de Aviões\n Digite /v vender", -1 ,1922.3459,-2543.4285,13.5469,20.0,0); // D3D CONCE AEROPORTO 1
    Create3DTextLabel("{FFFF00}Venda de Aviões\n Digite /v vender", -1 ,1977.9768,-2543.2781,13.5469,20.0,0); // D3D CONCE AEROPORTO 1
    Create3DTextLabel("{FFFF00}Menu de Veículos\nAperte F", -1 ,1672.6251,-1108.5673,24.2059,18.0,0); // Painel Conce
    Create3DTextLabel("{FFFF00}Menu de Veículos\nAperte F", -1 ,549.1534,-1309.9156,27.2406,18.0,0); // Painel Conce 2
    Create3DTextLabel("{FFFF00}Bike's e Kart's\nAperte F", -1 ,1830.4945,-1397.8027,13.4340,13.0,0); // Painel Conce Bikes & Karts
    Create3DTextLabel("{FFFF00}Entrega de Veículos", -1 ,1705.9099,-1085.5020,23.9063,20.0,0); // Entrega de veiculos
    Create3DTextLabel("{FFFF00}Entrega de Veículos", -1 ,537.0494,-1291.2523,17.2422,20.0,0); // Entrega de veiculos Conce 2
    Create3DTextLabel("{FFFF00}Impostometro de Los Santos\n Aperte F Para Informações", -1 ,1484.0079,-1749.2959,15.4453,30.0,0); // 1483.8766,-1750.1808,15.4453
    Create3DTextLabel("{FFFF00}Prefeito\n /setartaxa (imposto) \n /darbolsa Para Dar a Bolsa", -1 , 355.1924,169.1803,1025.7891,30.0,0);
    Create3DTextLabel("{FFFF00}Teste da Baliza, Quando Completar a Baliza\n Digite /finalizarteste para finalizar!", -1 , 1273.4250,-1579.1064,13.5269,30.0,0);
    Create3DTextLabel("{FFFF00}Teste de Cidadania\nAperte F Para informações", -1 ,359.4272,163.7324,1008.3828,30.0,0);
    Create3DTextLabel("{FFFF00}Escritório do D.E.T.R.A.N\nAperte Enter Para Entrar", -1 ,1675.9949,-1634.7666,14.2266,30.0,0);
    Create3DTextLabel("{FFFF00}Agencia de Empregos\nAperte Enter Para Usar", -1 ,361.8300,173.5202,1008.3828,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar", -1 ,2224.1819,-1141.8778,1025.7969,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar\n/roubarcaixa Para Roubar", -1 ,2232.2729,-1162.5684,25.8906,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para usar\n/roubarcaixa Para Roubar", -1 ,1929.5409,-1785.1664,13.5469, 15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar", -1 ,957.4735,-48.6141,1001.1172,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar", -1 ,321.4753,305.5962,999.1484,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar", -1 ,-1347.6376,499.9476,11.1953,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar\n/roubarcaixa Para Roubar", -1 ,1495.3928,-1749.1208,15.4453,15.0,0);
    Create3DTextLabel("{FFFF00}Caixa Eletrônico\nAperte Enter Para Usar\n/roubarcaixa Para Roubar", -1 ,1363.0376,-1745.4191,13.5439,15.0,0);//24-7
    Create3DTextLabel("{FFFF00}Banco\nAperte Enter Para Usar", -1 ,2308.7908,-13.2499,26.7422,20.0,0);
    Create3DTextLabel("{FFFF00}Mercado\nAperte Enter Para Entrar", -1 ,1833.6124,-1842.4968,13.5781,20.0,0);
    Create3DTextLabel("{FFFF00}Mercado\nAperte Enter Para Entrar", -1 ,1000.5861,-919.8832,42.3281,20.0,0);
    Create3DTextLabel("{FFFF00}Mercado\nAperte Enter Para Entrar", -1 ,1928.6006,-1776.4480,13.5469,20.0,0);
    Create3DTextLabel("{FFFF00}Mercado\nAperte Enter Para Entrar", -1 ,1315.5110,-898.9860,39.5781,20.0,0);
    Create3DTextLabel("{FFFF00}Mercado\nAperte Enter Para Entrar", -1 ,1352.4357,-1759.0243,13.5078,20.0,0);
    Create3DTextLabel("{FFFF00}Mercado\nAperte Enter Para Entrar", -1 ,2424.2214,-1742.7878,13.5457,20.0,0); //GANTON 
	Create3DTextLabel("{FFFF00}Sorveteria\nDigite /sorvete Comprar um Picole",-1,1498.7177,-1616.7062,13.3700,25.0,0);
    Create3DTextLabel("{FFFF00}Prefeitura\nAperte Enter Para Entrar", -1 ,1481.0386,-1772.3120,18.7958,40.0,0);
    Create3DTextLabel("{FFFF00}Alhambra\nAperte Enter Para Entrar", -1 ,1836.4064,-1682.4403,13.3493,30.0,0);
	Create3DTextLabel("{FFFF00}Menu de Drogas\nAperte Enter Para Usar", -1 ,2152.4727,-1014.0005,62.8375,20.0,0);
	Create3DTextLabel("{FFFF00}Menu de Drogas\nAperte Enter Para Usar", -1 ,1138.8217,-1972.5050,61.1965,20.0,0);
	Create3DTextLabel("{FFFF00}Menu de Drogas\nAperte Enter Para Usar", -1 ,1450.4479,-2287.0803,13.5469,20.0,0);
	Create3DTextLabel("{FFFF00}Menu de Drogas\nAperte Enter Para Usar", -1 ,1919.1384,-1415.4775,13.5703,20.0,0);
	Create3DTextLabel("{FFFF00}Menu de Drogas\nAperte Enter Para Usar", -1 ,1123.7664,-1506.4692,15.7869,20.0,0);
    Create3DTextLabel("{FFFF00}Menu da Mafia\nAperte Enter Para Usar", -1 ,-2648.0940,1396.4666,906.4609,20.0,0);
	Create3DTextLabel("{FFFF00}Menu da Mafia\nAperte Enter Para Usar", -1 ,675.0947,-1275.7603,13.6334,20.0,0);
	Create3DTextLabel("{FFFF00}Menu da Mafia\nDigite '/mafia' Para Usar", -1 ,1738.6844,-1944.9553,13.5647,20.0,0);
    Create3DTextLabel("{FFFF00}Vendedores de Armas\nDigite '/pegararmasv' Para pegar", -1 ,2177.5793,-982.4036,64.4688,20.0,0);//MORRO
    Create3DTextLabel("{FFFF00}Vendedores de Armas\nAperte 'Enter' Para trocar", -1 ,1828.9386,-1149.9722,23.9766,20.0,0);// TRAZEIRA DA LOJA DE ARMAS
	Create3DTextLabel("{FFFF00}The Pig Pen\nAperte Enter Para Entrar", -1 ,2421.4998,-1219.2438,25.5617,20.0,0);
	Create3DTextLabel("{FFFF00}Ginásio de Lutas\nAperte Enter Para Entrar", -1 ,2229.9011,-1721.2582,13.5613,20.0,0);
	Create3DTextLabel("{FFFF00}Burguer Shot\nAperte Enter Para Entrar", -1 ,1200.4497,-918.7695,43.1105,20.0,0);
	Create3DTextLabel("{FFFF00}Burguer Shot\nAperte Enter Para Entrar", -1 ,810.4855,-1616.1888,13.5469,20.0,0);
	Create3DTextLabel("{FFFF00}Cluckin Bell\nAperte Enter Para Entrar", -1 ,927.6217,-1353.0105,13.3438,20.0,0);
	Create3DTextLabel("{FFFF00}Cluckin Bell\nAperte Enter Para Entrar", -1 ,2419.8442,-1509.4996,24.0000,20.0,0);// PERTO DA GROOVE
	Create3DTextLabel("{FFFF00}Pizzaria\nAperte Enter Para Entrar", -1 ,2105.4858,-1806.4725,13.5547,20.0,0);
	Create3DTextLabel("{FFFF00}Lanchonete\nAperte Enter Para Entrar", -1 ,975.4691,-1335.9618,13.5319,20.0,0);
	Create3DTextLabel("{FFFF00}Hotel\nAperte Enter Para Entrar", -1 ,2233.2659,-1159.8256,25.8906,20.0,0);
	Create3DTextLabel("{FFFF00}Hotel\nAperte Enter Para Entrar", -1 ,2212.6235,-1150.4385,1025.7969,20.0,0);
	Create3DTextLabel("{FFFF00}HQ Vagos\nAperte Enter Para Entrar", -1 ,2808.1106,-1189.6528,25.3436,20.0,0);
	Create3DTextLabel("{FFFF00}HQ Yakuza\nAperte Enter Para Entrar", -1 ,691.5710,-1276.1722,13.5607,20.0,0);
	Create3DTextLabel("{FFFF00}HQ Cosa Nostra\nAperte Enter Para Entrar", -1 ,300.2393,-1154.4464,81.3910,20.0,0);
	Create3DTextLabel("{FFFF00}HQ Advogados\nAperte Enter Para Entrar", -1 ,1382.1494,-1088.8583,28.2129,20.0,0);
	Create3DTextLabel("{FFFF00}Saída", -1, 1261.2572,-785.2580,1091.9063, 20.0, 0); // Saída Advogados
	Create3DTextLabel("{FFFF00}DP Policia Civil\nAperte Enter Para Entrar", -1 ,918.9910,-1252.1665,16.2109,20.0,0);
	Create3DTextLabel("{FFFF00}DP B.O.P.E\nAperte Enter Para Entrar", -1 ,1280.2565,-1647.0126,13.5291,20.0,0);
	Create3DTextLabel("{FFFF00}DP Policia Federal\nAperte Enter Para Entrar", -1 ,627.6543,-571.9244,17.6055,20.0,0);
	Create3DTextLabel("{FFFF00}HQ Ballas\nAperte Enter Para Entrar", -1 ,1154.9366,-1180.8309,32.8187,20.0,0);
	Create3DTextLabel("{FFFF00}Venda de Madeiras Ilegais\nAperte 'F' Para Vender Madeiras", -1 ,2249.8088,-2257.7874,14.7647,10.0,0);
	Create3DTextLabel("{FFFF00}Cortar Madeiras\nAperte 'F' Para Cortar Madeiras", -1 ,1450.0607,-1965.0198,29.8656,10.0,0);
	Create3DTextLabel("{FFFF00}Cofre", -1 ,301.7848,-76.6545,1001.5156,20.0,0);
	Create3DTextLabel("{FFFF00}Cofre", -1 ,306.3995,-159.1051,999.5938,20.0,0);
    Create3DTextLabel("{FFFF00}D.E.T.R.A.N\n/mudarplaca", -1 ,1637.5126,-1692.4656,13.5167,20.0,0);//DETRAN PLACA
    Create3DTextLabel("{FFFF00}Veículos Apreendidos\nSomente Pessoal Autorizado", -1 ,1642.8811,-1715.3420,15.6014,25.0,0);//DETRAN Autoricado
	Create3DTextLabel("{FFFF00}/beber", -1 ,498.6937,-75.5562,998.7578,20.0,0);
	Create3DTextLabel("{FFFF00}/beber", -1 ,499.9720,-20.3109,1000.6797,20.0,0);//Alhambra
	Create3DTextLabel("{FFFF00}/beber", -1 ,114.3598,1334.4587,1131.8562,10.0,0);//Abrigo Nuclear
	Create3DTextLabel("{FFFF00}Igreja Los Santos\nAperte F Para Entrar", -1, 2232.9934,-1333.1924,23.9815, 20.0,0); // Igreja
	Create3DTextLabel("{FFFF00}Saída Escritório\nAperte F Para Sair", -1, 1225.2448,-1427.9470,31.1480, 15.0,0);
	Create3DTextLabel("{FFFF00}Ajuda Casamento", -1, 1964.0239,-372.1131,1093.7289, 20.0,0);
	Create3DTextLabel("{FFFF00}Aperte F Para Bater Cartão.", -1 ,370.8871,174.5609,1019.9844,7.0,0);// BEBER BAR
	Create3DTextLabel("{FFFF00}Aperte F Para Bater Cartão.", -1, 1289.7114,-798.4102,1089.9375, 7.0,0);
	Create3DTextLabel("{FFFF00}Equipamentos Repórter\nAperte F para Equipar", -1 ,356.6207,208.9427,1008.3828,15.0,0);
	Create3DTextLabel("{FFFF00}HQ Groove Street\nAperte Enter Para Entrar", -1 ,2495.3481,-1691.1355,14.7656,20.0,0);
	Create3DTextLabel("{FFFF00}Equipar Al'Qaeda\nAperte F Para Equipar", -1 ,414.5280,2531.5229,19.1648,15.0,0);
	Create3DTextLabel("{FFFF00}Equipar Taliban\nAperte F Para Equipar", -1 ,1114.0310,-304.3608,73.9922,15.0,0);
    Create3DTextLabel("{FFFF00}Equipar F.A.R.C\nAperte F Para Equipar", -1 ,-309.3545,1761.2603,43.6406,15.0,0);
	Create3DTextLabel("{FFFF00}Menu de Compras\nAperte Enter Para Usar", -1 ,-26.8819,-89.6936,1003.5469,15.0,0);
	Create3DTextLabel("{FFFF00}Menu de Compras\nAperte Enter Para Usar", -1 ,-22.2540,-55.6456,1003.5469,15.0,0);
    Create3DTextLabel("{FFFF00}Menu de Compras\nAperte Enter Para Usar", -1 ,-22.3265,-138.4765,1003.5469,15.0,0);
	Create3DTextLabel("{FFFF00}Menu de Compras\nAperte Enter Para Usar", -1 ,-30.3140,-28.3121,1003.5573,15.0,0);
	Create3DTextLabel("{FFFF00}Elevador\nAperte Enter Para Usar", -1 ,1524.4977,-1677.9469,6.2188,8.0,0);
	Create3DTextLabel("{FFFF00}Elevador\nAperte Enter Para Usar", -1 ,1565.1235,-1666.9944,28.3956,8.0,0);
	Create3DTextLabel("{FFFF00}Elevador\nAperte Enter Para Usar", -1 ,246.2975,87.4735,1003.6406,8.0,0);
	Create3DTextLabel("{FFFF00}Menu de Comprar Licencas\nAperte Enter Para Usar", -1 ,1490.2411,1307.2179,1093.2891,10.0,0);
	Create3DTextLabel("{FFFF00}Menu de Comprar Armas\nAperte Enter Para Usar", -1 ,312.1259,-166.1339,999.6010,8.0,0);
	Create3DTextLabel("{FFFF00}Menu de Comprar Armas\nAperte Enter Para Usar", -1 ,295.7041,-80.3617,1001.5156,8.0,0);
	Create3DTextLabel("{FFFF00}Menu de Pegar Materiais\nAperte Enter Para Usar", -1 ,2026.2104,-1896.1097,13.5469,10,0);
	Create3DTextLabel("{FFFF00}Menu de Pegar Materiais\nAperte Enter Para Usar", -1 ,1240.5569,-2036.9919,59.9709,10,0);
	Create3DTextLabel("{FFFF00}Trocar Materiais\nAperte Enter Para Trocar", -1 ,1990.8590,-1996.3722,13.5469,10,0);
	Create3DTextLabel("{FFFF00}Cura do Hospital\nDigite /curarme Para Se Curar", -1 ,1172.6522,-1327.9591,15.4025,8,0);
	Create3DTextLabel("{FFFF00}Cura do Hospital\nDigite /curarme Para Se Curar", -1 ,2029.5945,-1404.6426,17.2512,8,0);
	Create3DTextLabel("{FFFF00}Limpar Ficha\nDigite /limpar Para Limpar", -1 ,253.9280,69.6094,1003.6406,7,0);
	Create3DTextLabel("{FFFF00}Limpar Ficha\nDigite /limpar Para Limpar", -1 ,259.2474,120.3977,1003.2188,7,0);
	Create3DTextLabel("{FFFF00}Limpar Ficha\nDigite /limpar Para Limpar", -1 ,198.9671,168.1982,1003.0234,7,0);
	Create3DTextLabel("{FFFF00}Limpar Ficha\nDigite /limpar Para Limpar", -1 ,234.8419,111.2194,1003.2257,7,0);
	Create3DTextLabel("{FFFF00}Limpar Ficha\nDigite /limpar Para Limpar", -1 ,326.8282,304.4166,999.1484,7,0);
	Create3DTextLabel("{FFFF00}Disfarçe dos Hitmans\nAperte Enter Para Usar", -1 ,344.5580,309.7243,999.1557,7,0);
	Create3DTextLabel("{FFFF00}Disfarce\nAperte Enter Para Usar", -1 ,609.1560,-601.8568,17.2266,7,0);
	Create3DTextLabel("{FFFF00}Disfarçe dos Triads\nAperte Enter Para Usar", -1 ,1658.3202,-1841.8921,13.5465,7,0);
    Create3DTextLabel("{FFFF00}Equipamento\nAperte Enter Para Pegar", -1 ,346.1226,161.8205,1025.7964,20.0,0);
    Create3DTextLabel("{FFFF00}Oficina Mecânica", -1 ,1809.3224,-1723.2677,13.5363,30.0,0);// Icone Mecanica
    Create3DTextLabel("{FFFF00}Oficina Mecânica", -1 ,1760.1302,-1695.9854,13.4382,30.0,0);// Icone Mecanica 2
    Create3DTextLabel("{FFFF00}Oficina Som & Rodas\n/tunar\n/instalarsom", -1, 1871.7122,-1844.0450,14.6965, 25.0,0);
    //>=-=-=-=-=-=-=-=-=-=-=-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-=<|
	Create3DTextLabel("{FFFF00}Cofre Policia Militar\nAperte Enter Para Usar", -1 ,1568.6442,-1689.9729,6.2188,7,0);
    Create3DTextLabel("{FFFF00}Cofre B.O.P.E\nAperte Enter Para Usar", -1 ,238.2739,108.0566,1003.2257,7,0);
    Create3DTextLabel("{FFFF00}Cofre Exército\nAperte Enter Para Usar", -1 ,-1341.1760,500.5289,11.1953,7,0);
    Create3DTextLabel("{FFFF00}Cofre S.A.M.U\nAperte Enter Para Usar", -1 ,1171.2683,-1311.1749,13.9851,7,0);
    Create3DTextLabel("{FFFF00}Cofre Aztecas\nAperte Enter Para Usar", -1 ,2811.7102,-1166.1824,1025.5703,7,0);
   	Create3DTextLabel("{FFFF00}Cofre Taliban\nAperte Enter Para Usar", -1 ,1106.6525,-314.3387,73.9922,7,0);
    Create3DTextLabel("{FFFF00}Cofre Prefeitura\nAperte Enter Para Usar", -1 ,356.3957,152.4393,1025.7891,7,0);
    Create3DTextLabel("{FFFF00}Cofre Hitmans\nAperte Enter Para Usar", -1 ,954.3677,-1548.2120,13.5904,7,0);
    Create3DTextLabel("{FFFF00}Cofre Repórteres\nAperte Enter Para Usar", -1 ,752.1580,-1358.9927,13.5000,7,0);
    Create3DTextLabel("{FFFF00}Cofre Taxistas\nAperte Enter Para Usar", -1 ,992.5768,-1460.1726,13.5469,7,0);
    Create3DTextLabel("{FFFF00}Cofre Policia Federal\nAperte Enter Para Usar", -1 ,608.4645,-592.8484,17.2330,7,0);
    Create3DTextLabel("{FFFF00}Cofre Cosa Nostra\nAperte Enter Para Usar", -1 ,-2634.2791,1409.7692,906.4647,7,0);
    Create3DTextLabel("{FFFF00}Cofre Yakuza\nAperte Enter Para Usar", -1 ,-2167.5757,644.8060,1057.7687,7,0);
    Create3DTextLabel("{FFFF00}Cofre Groove Street\nAperte Enter Para Usar", -1 ,2514.1301,-1691.2979,14.0460,7,0);
    Create3DTextLabel("{FFFF00}Cofre Al'qaeda\nAperte Enter Para Usar", -1 ,400.0611,2539.5366,16.5448,7,0);
    Create3DTextLabel("{FFFF00}Cofre Policia Civil\nAperte Enter Para Usar", -1 ,208.8036,145.8378,1003.0234,7,0);
    Create3DTextLabel("{FFFF00}Cofre Ballas\nAperte Enter Para Usar", -1 ,1074.7671,-1204.1219,18.1446,7,0);
    Create3DTextLabel("{FFFF00}Cofre Vagos\nAperte Enter Para Usar", -1 ,296.2728,1489.4459,1080.2578,7,0);
    Create3DTextLabel("{FFFF00}Cofre Comando Vermelho\nAperte Enter Para Usar", -1 ,2151.3218,-1789.1669,13.5097,7,0);
    Create3DTextLabel("{FFFF00}Cofre Sons of Anarchy\nAperte Enter Para Usar", -1 ,681.3650,-445.1725,16.3359,5,0);
    Create3DTextLabel("{FFFF00}Cofre Drifters\nAperte Enter Para Usar", -1 ,2768.6760,-1626.2833,10.9272,7,0);
    Create3DTextLabel("{FFFF00}Cofre Triads\nAperte Enter Para Usar", -1 ,1642.2533,-1847.7957,13.5411,7,0);
    Create3DTextLabel("{FFFF00}Cofre F.A.R.C\nAperte Enter Para Usar", -1 ,-314.4704,1774.4768,43.6406,7,0);
   	Create3DTextLabel("{FFFF00}Advogados\n/soltar\nPara Soltar um Preso", -1 , 268.2108,77.4440,1001.0391,10.0,0);//
	Create3DTextLabel("{FFFF00}Advogados\n/soltar\nPara Soltar um Preso", -1 , 225.9554,114.1761,999.0156,10.0,0);//
	Create3DTextLabel("{FFFF00}Advogados\n/soltar\nPara Soltar um Preso", -1 , 195.4466,158.4840,1003.0234,10.0,0);//
	Create3DTextLabel("{FFFF00}Advogados\n/soltar\nPara Soltar um Preso", -1 , 197.2001,179.2701,1003.0234,10.0,0);//
	Create3DTextLabel("{FFFF00}Advogados\n/soltar\nPara Soltar um Preso", -1 , 321.6279,315.7460,999.1484,10.0,0);//
	Create3DTextLabel("{FFFF00}Advogados\n/soltar\nPara Soltar um Preso", -1 , 709.5348,-568.6559,-6.1966,10.0,0);//
	Create3DTextLabel("{FFFF00}HQ Sons of Anarchy\nAperte Enter Para Usar", -1 ,681.6038,-473.3587,16.5363,7,0);
	Create3DTextLabel("{FFFF00}Bar's\nAperte Enter Para Entrar", -1 ,2309.9460,-1643.6337,14.8270,7,0);
	Create3DTextLabel("{FFFF00}HQ Hitmans\nAperte Enter Para Entrar", -1 ,957.9416,-1556.2628,13.5802,7,0);
	Create3DTextLabel("{FFFF00}Entrega de Pacotes", -1 ,1007.9274,-1541.3163,13.5671,5,0);
	Create3DTextLabel("{FFFF00}Entrega de Pacotes", -1 ,1656.9484,-1793.7782,13.5478,5,0);
	Create3DTextLabel("{FFFF00}Cofre do Banco\nEnter Para Entrar", -1 , 2315.4963,-0.4780,26.7422, 7, 0);
	Create3DTextLabel("{FFFF00}Banco\nSaída de Emêrgencia", -1 , 1434.1337,-968.4908,37.3894, 7, 0);
	Create3DTextLabel("{FFFF00}Banco\nSaída de Emêrgencia", -1 , 2155.9976,1597.9829,999.9699, 7, 0);
	Create3DTextLabel("{FFFF00}SHOPPING Salão de Cabeleireiro\n Aperte Enter para Sair",-1,412.1064,-54.1277,1001.8984,15.0,0);
	Create3DTextLabel("{FFFF00}SHOPPING Salão de Cabeleireiro\n Aperte Enter para Entrar",-1,1769.1190,-1397.4380,15.7578,15.0,0);
	Create3DTextLabel("{FFFF00}SHOPPING- Salão de Cabeleireiro\n Aperte enter e Selecione\n um novo Visual.",-1,414.8076,-50.2456,1001.8984,15.0,0);
	Create3DTextLabel("{FFFF00}SHOPPING- Salão de Cabeleireiro\n Aperte enter e Selecione\n um novo Visual.",-1,415.0718,-54.3788,1001.8984,15.0,0);
	Create3DTextLabel("{FFFF00}SHOPPING- Salão de Cabeleireiro\n Aperte enter e Selecione\n um novo Visual.",-1,414.9846,-52.3263,1001.8984,15.0,0);
	Create3DTextLabel("{33CCFF}Interfone\nAperte 'F'", -1 ,1207.5065,-1441.4985,14.3008,12.0,0); // Interfone
	Create3DTextLabel("{33CCFF}Escritório Administrativo", -1, 1207.2396,-1439.1406,13.3828, 12.0,0); //Entra Escritorio
	Create3DTextLabel("{FFFF00}Mercado Negro\nDigite /comprarnuclear", -1, -1437.9080,-1538.4395,101.7578, 10.0,0);
	Create3DTextLabel("{FFFF00}Localizar bomba\nDigite /localizarbomba", -1, -1289.6526, 508.3094, 11.1953, 10.0,0);
	Create3DTextLabel("{FFFF00}Saída Abrigo Nuclear\nAperte F", -1, 98.4724,1320.5668,1131.8562, 10.0,0);
	Create3DTextLabel("{FFFF00}Auto Escola\nAperte Enter Para Entrar", -1, 1248.1326,-1559.9377,13.5635, 20.0,0);
	Create3DTextLabel("{FFFF00}Ajuda [NPC]Reginaldo Aperte 'F'\npara mim lhe ajudar.", -1, 2226.3379,-1158.2490,25.7794, 10.0,0);
	Create3DTextLabel("{FFFF00}Informações da Empresa\nAperte F", -1, 2306.9739,-7.4446,26.7422, 10.0,0);
	Create3DTextLabel("{FFFF00}Empréstimos\nAperte F", -1, 2309.3223,-8.3691,26.7422, 10.0,0);
	//=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-  CreateD3DTextLabel Casas VIP Premium =-=-=-=--==-==--==-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-=--=-=-=-=-=-=-=-=-=-=--=<|
	Create3DTextLabel("{33CCFF}/p157 Ou Buzine.", -1 ,1255.9122,-1270.9932,13.5497,12.0,0); // Casa Hospital
	Create3DTextLabel("{33CCFF}/p228 Ou Buzine.", -1 ,927.0973,-1634.1132,13.5469,12.0,0); // Casa Manssão ID 228
	Create3DTextLabel("{33CCFF}/p229 Ou Buzine.", -1 ,927.1538,-1717.1125,13.5469,12.0,0); // Casa Manssão ID 229
	Create3DTextLabel("{33CCFF}/p1 Ou Buzine.", -1 ,1245.1108,-766.9100,92.1060,12.0,0); // Casa Hospital
	Create3DTextLabel("{33CCFF}/p231 Ou Buzine.", -1 ,1201.7059,-1865.1232,13.5496,12.0,0); // Casa VIP 1
	Create3DTextLabel("{33CCFF}/p232 Ou Buzine.", -1 ,1170.8107,-1865.0011,13.5496,12.0,0); // Casa VIP 2
	Create3DTextLabel("{33CCFF}/p233 Ou Buzine.", -1 ,1139.9949,-1865.1268,13.5696,12.0,0); // Casa VIP 3
	Create3DTextLabel("{33CCFF}/p234 Ou Buzine.", -1 ,1109.1892,-1864.8096,13.5696,12.0,0); // Casa VIP 4
	Create3DTextLabel("{33CCFF}/p235 Ou Buzine.", -1 ,1078.0643,-1864.8483,13.5696,12.0,0); // Casa VIP 5
	Create3DTextLabel("{33CCFF}/p227 Ou Buzine.", -1 ,927.1387,-1611.1421,13.5469,12.0,0); // Mansão Casa ID 227
	Create3DTextLabel("{33CCFF}/p227 Ou Aperte 'F'.", -1,927.0744,-1596.0996,13.5469,12.0,0); // Portaozim pequeno ID 227
	Create3DTextLabel("{33CCFF}Digite /p227g", -1 ,936.4185,-1610.5184,13.5212,12.0,0); // Mansão Casa Garagem ID 227
	Create3DTextLabel("{33CCFF}Digite /p227g", -1,936.4435,-1617.6812,13.5212,12.0,0); // Mansão Casa Garagem  ID 227
	Create3DTextLabel("{33CCFF}/p230 Ou Buzine.", -1, 1028.1202,-1730.3079,13.5469,12.0,0); // Mansão casa ID 230
	Create3DTextLabel("{33CCFF}/p230 Ou Buzine.", -1, 1027.8131,-1763.9877,13.5469,12.0,0); // Mansão casa ID 230
	//>=-=-=-=-=-=-=-=-=-=-=-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-==-=-=<|
    new string[MAX_PLAYER_NAME];
    new string1[MAX_PLAYER_NAME];
	for(new c=0;c<CAR_AMOUNT;c++){Gas[c] = GasMax;}
	donoestacao = 0;
	donocasarao = 0;
	donoFavela = 0;
	donoskate = 0;
	donoaero = 0;
	donopark = 0;
	PlayerHaul[390][pCapasity] = 100;
	PlayerHaul[391][pCapasity] = 100;
	PlayerHaul[392][pCapasity] = 50;
	PlayerHaul[393][pCapasity] = 50;
	//LoadVendas();
	//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
	News[hTaken1] = 0; News[hTaken2] = 0; News[hTaken3] = 0; News[hTaken4] = 0; News[hTaken5] = 0;
	format(string, sizeof(string), "Nada");
	strmid(News[hAdd1], string, 0, strlen(string), 255);
	strmid(News[hAdd2], string, 0, strlen(string), 255);
	strmid(News[hAdd3], string, 0, strlen(string), 255);
	strmid(News[hAdd4], string, 0, strlen(string), 255);
	strmid(News[hAdd5], string, 0, strlen(string), 255);
	format(string1, sizeof(string1), "Ninguem");
	strmid(News[hContact1], string1, 0, strlen(string1), 255);
	strmid(News[hContact2], string1, 0, strlen(string1), 255);
	strmid(News[hContact3], string1, 0, strlen(string1), 255);
	strmid(News[hContact4], string1, 0, strlen(string1), 255);
	strmid(News[hContact5], string1, 0, strlen(string1), 255);
	//>=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
	//=-=-=--=-=-=-=--==--=-=-=-= Mecanica de Som =--=-=--=-=-=-=-=-=-=-=-=-==-=-=-=-=-<|
    for(new i; i < MAX_VEHICLES;i++)
	{if(SomInstalado[i] == true){if(SomVeiculoTipo[i] == 1)
	CreateSomObjeto(i,2232,0,SomPos[0][i][0],SomPos[0][i][1],SomPos[0][i][2],SomPos[0][i][3],SomPos[0][i][4],SomPos[0][i][5],300);else{
    for(new j; j < 3;j++)CreateSomObjeto(i,2232,j,SomPos[j][i][0],SomPos[j][i][1],SomPos[j][i][2],SomPos[j][i][3],SomPos[j][i][4],SomPos[j][i][5],300);}}}
	for(new i = 0; i < sizeof(CreatedCars); i++){CreatedCars[i] = 0;}
	for(new i = 0; i <= sizeof(Peds)-1; i++){AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);}
	for(new h = 0; h < sizeof(HouseInfo); h++){	if(HouseInfo[h][hOwned] == 0){
	AddStaticPickup(1273, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
	pickups++;
	format(gstring, sizeof(gstring), TextCasaVenda,HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hLevel],h);
	HouseLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,15.0,0);}
	if(HouseInfo[h][hOwned] == 1){AddStaticPickup(1272, 23, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
	pickups++;
	if(HouseInfo[h][hRentabil] == 0){
	format(gstring, sizeof(gstring), TextCasa,HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
	HouseLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,15.0,0);}
	else{format(gstring, sizeof(gstring), TextCasaAl,HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel],h);
	HouseLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,15.0,0);}}}
	for(new h = 0; h < sizeof(BizzInfo); h++){
	if(BizzInfo[h][bOwned] == 0){AddStaticPickup(1273, 23, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
	pickups++;
	format(gstring, sizeof(gstring), TextEmpresaVenda,BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice],BizzInfo[h][bLevelNeeded],h);
	BizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+0.5,20.0,0);}
	if(BizzInfo[h][bOwned] == 1){
	AddStaticPickup(1272, 23, BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]);
	pickups++;
	format(gstring, sizeof(gstring), TextEmpresa,BizzInfo[h][bMessage],BizzInfo[h][bOwner],BizzInfo[h][bExtortion],BizzInfo[h][bEntranceCost],BizzInfo[h][bLevelNeeded],h);
	BizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+0.5,20.0,0);}}
	for(new h = 0; h < sizeof(SBizzInfo); h++){
	if(SBizzInfo[h][sbOwned] == 0){
	AddStaticPickup(1273, 23, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
	pickups++;
	format(gstring, sizeof(gstring), TextMEmpresaVenda,SBizzInfo[h][sbMessage],SBizzInfo[h][sbBuyPrice],SBizzInfo[h][sbLevelNeeded],h);
	SBizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]+0.5,20.0,0);}
	if(SBizzInfo[h][sbOwned] == 1){
	AddStaticPickup(1272, 23, SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]);
	pickups++;
	format(gstring, sizeof(gstring), TextMEmpresa,SBizzInfo[h][sbMessage],SBizzInfo[h][sbOwner],SBizzInfo[h][sbExtortion],SBizzInfo[h][sbEntranceCost],SBizzInfo[h][sbLevelNeeded],h);
	SBizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]+0.5,20.0,0);}}
//>==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==<|
	
	AddStaticPickup(1318,23,2228.1353,-1150.4427,1025.7969) ; // Sair Hotel
	AddStaticPickup(19130,23,1172.8306,-1361.4685,13.9624) ; // Elevador S.A.M.U
	AddStaticPickup(19130,23,1653.8035,-1655.3170,22.5156) ; // Elevador Detran
	AddStaticPickup(19130,23,1676.8268,-1645.2245,14.2286) ; // Elevador Detran
	AddStaticPickup(19130,23,1657.5554,-1656.3943,22.5156) ; // Elevador Deposito Detran
	AddStaticPickup(19130,23,1658.4657,-1691.3813,15.6094) ; // Elevador Deposito Detran
   	AddStaticPickup(19130,23,1161.5586,-1329.5938,31.4949) ; // Elevador S.A.M.U
	AddStaticPickup(19130,23,964.0209,-1465.8312,13.4589); // Elevador Taxi
	AddStaticPickup(19130,23,965.7349,-1465.6044,21.3783); // Elevador Taxi
   	AddStaticPickup(19130,23,2522.9346,-1679.4137,15.4970) ; // Elevador Groove
   	AddStaticPickup(19130,23,2524.4297,-1681.8153,19.9302) ; // Elevador Groove
	AddStaticPickup(19130,23,1524.4977,-1677.9469,6.2188); //Elevador PM
	AddStaticPickup(19130,23,1565.1235,-1666.9944,28.3956); //Elevador PM
	AddStaticPickup(19130,23,2268.0308,2449.0750,3.5313); //Elevador Subir LV
	AddStaticPickup(1239, 23,1484.0079,-1749.2959,15.4453);//Impostometro
	AddStaticPickup(19130,23,2267.2820,2458.2598,38.6837); //Elevador Descer LV
	AddStaticPickup(19130,23,2808.0322,-1176.3846,25.3794); // Elevador Vagos
	AddStaticPickup(19130,23,2807.4321,-1174.6454,32.6688); // Elevador Vagos
	AddStaticPickup(19130,23,970.1837,-1520.5553,13.5502); //Elevador Hitmans
	AddStaticPickup(19130,23,969.8785,-1516.9382,23.7241); //Elevador Hitmans
	AddStaticPickup(19130,23,903.3665,-1272.1648,14.5035); //Elevador PC
	AddStaticPickup(19130,23,901.4695,-1276.5393,23.0861); //Elevador PC
 	AddStaticPickup(19130,23,618.5693,-566.6214,26.1432); //Elevador PF
	AddStaticPickup(19130,23,611.1257,-583.6888,18.1283); //Elevador PF
	AddStaticPickup(19130,23,1275.4336,-1650.2966,13.5291);//Elevador BOPE
	AddStaticPickup(19130,23,1258.8270,-1686.1508,44.4594);//Elevador BOPE
	AddStaticPickup(19130,23,246.2975,87.4735,1003.6406); //Elevador Cop 
	AddStaticPickup(19130,23,2155.9192,-1814.9847,13.5469); //Elevador Comando Vermelho Subir
	AddStaticPickup(19130,23,2154.7317,-1822.2634,18.8672); //Elevador Comando Vermelho Decer
	AddStaticPickup(19130,23,2139.7847,-1176.8256,23.9922);//Elevador Aluguel 1
   	AddStaticPickup(19130,23,2138.6680,-1168.9967,28.1484);//Elevador Aluguel 2
	AddStaticPickup(19130,23,344.5580,309.7243,999.1557);//Disfarçe Hitmans
   	AddStaticPickup(19130,23,1658.3202,-1841.8921,13.5465);//Disfarçe Triads
   	AddStaticPickup(1248, 23,1639.9688,-1085.7878,23.9063);//Vender Carro Conce //1239  Icone 1
   	AddStaticPickup(1248, 23,1627.9520,-1119.9115,23.9063);//Vender Carro Conce //1239  Icone 2
   	AddStaticPickup(1248, 23,1646.4259,-1119.1290,23.9063);//Vender Carro Conce //1239 Icone 3
   	AddStaticPickup(1248, 23, 547.2025,-1280.1598,17.2482); // Vender Carro Concessionaria 2
   	AddStaticPickup(1248, 23, 1816.8383,-1402.4834,13.4256); // Vender Carro Conserrionaria Bikes e Karts
   	AddStaticPickup(1248, 23,1922.3459,-2543.4285,13.5469);//Vender Aviões Conce //1239 Icone 1
   	AddStaticPickup(1248, 23,1977.9768,-2543.2781,13.5469);//Vender Aviões Conce //1239 Icone 2
   	AddStaticPickup(1274, 23,1672.6251,-1108.5673,24.2059);//Painel Conce
   	AddStaticPickup(1274, 23,549.1534,-1309.9156,27.2406); // Painel Conce 2
   	AddStaticPickup(1274, 23,1830.4945,-1397.8027,13.4340); // Painel Conce Bikes & Karts
   	AddStaticPickup(1318, 23,1705.9099,-1085.5020,23.9063);//Entrega de Veiculos
   	AddStaticPickup(1318, 23, 537.0494,-1291.2523,17.2422); // Entrega de Veiculos Conce 2
   	AddStaticPickup(1239, 23,1964.0239,-372.1131,1093.7289);//Ajuda Igreja
   	AddStaticPickup(1313, 23,1871.7122,-1844.0450,14.6965);//Icone Mecanica Som
//>==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-== -==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==<|
   	AddStaticPickup(1239, 23, 1568.6442,-1689.9729,6.2188); //Cofre ORG
    AddStaticPickup(1239, 23, 238.2739,108.0566,1003.2257); //Cofre ORG
    AddStaticPickup(1239, 23, -1341.1760,500.5289,11.1953); //Cofre ORG
    AddStaticPickup(1239, 23, 1171.2683,-1311.1749,13.9851); //Cofre ORG
    AddStaticPickup(1239, 23, 2811.7102,-1166.1824,1025.5703); //Cofre ORG
   	AddStaticPickup(1239, 23, 1106.6525,-314.3387,73.9922); //Cofre ORG
    AddStaticPickup(1239, 23, 356.3957,152.4393,1025.7891); //Cofre ORG
    AddStaticPickup(1239, 23, 954.3677,-1548.2120,13.5904); //Cofre ORG
    AddStaticPickup(1239, 23, 752.1580,-1358.9927,13.5000); //Cofre ORG
    AddStaticPickup(1239, 23, 992.5768,-1460.1726,13.5469); //Cofre ORG
    AddStaticPickup(1239, 23, -2634.2791,1409.7692,906.4647); //Cofre ORG
    AddStaticPickup(1239, 23, -2167.5757,644.8060,1057.7687); //Cofre ORG
    AddStaticPickup(1239, 23, 2514.1301,-1691.2979,14.0460); //Cofre ORG
    AddStaticPickup(1239, 23, 400.0611,2539.5366,16.5448); //Cofre ORG
    AddStaticPickup(1239, 23, 208.8036,145.8378,1003.0234); //Cofre ORG
    AddStaticPickup(1239, 23, 1074.7671,-1204.1219,18.1446); //Cofre ORG
    AddStaticPickup(1239, 23, 296.2728,1489.4459,1080.2578); //Cofre ORG
    AddStaticPickup(1239, 23, 2151.3218,-1789.1669,13.5097); //Cofre ORG
    AddStaticPickup(1239, 23, 196.0160,-232.4899,1.7786); //Cofre ORG
    AddStaticPickup(1239, 23, 1315.3110,-869.2617,39.5781); //Cofre ORG
    AddStaticPickup(1239, 23, 1028.7534,-1106.7701,23.8281); //Cofre ORG
    AddStaticPickup(1239, 23, 681.3650,-445.1725,16.3359); //Cofre ORG
    AddStaticPickup(1239, 23, 608.6080,-592.8043,17.2330); //Cofre ORG
    AddStaticPickup(1239, 23, 2768.6760,-1626.2833,10.9272); //Cofre ORG
    AddStaticPickup(1239, 23, 1642.2533,-1847.7957,13.5411); //Cofre ORG
    AddStaticPickup(1239, 23, -314.4704,1774.4768,43.6406); //Cofre ORG
    AddStaticPickup(1239, 23, 359.4272,163.7324,1008.3828); // info teste
//>==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==<|
	AddStaticPickup(1318, 23, 390.4640,173.8098,1008.3828) ; // Saida Prefeitura
   	AddStaticPickup(1318, 23, 2140.9382,-1801.9813,16.1475) ; // Entrada HQ Comando Vermelho
   	AddStaticPickup(1318, 23, 1675.9949,-1634.7666,14.2266) ; // Entrada detran
	AddStaticPickup(1318, 23, 967.2544,2175.1235,10.8203) ; // Entrada HQ PCC
 	AddStaticPickup(1313, 23, 957.9416,-1556.2628,13.5802);//Entrada hq hitmans
    AddStaticPickup(1318, 23, 367.9629,194.3110,1008.3828); //SAIDA HQ REPORTER
    AddStaticPickup(1318, 23, 755.4222,-1361.7944,13.5132); //ENTRADA HQ REPORTER
   	AddStaticPickup(1318, 23, 681.6038,-473.3587,16.5363);//HQ Sons of Anarchy
   	AddStaticPickup(1318, 23, 300.2393,-1154.4464,81.3910); // Entrada Máfia Cosa Nostra
   	AddStaticPickup(1318, 23, 1382.1494,-1088.8583,28.2129); // HQ Advogados
	AddStaticPickup(1318, 23, 1674.1207,-2121.9700,14.1460) ; // Entrada HQ Los Aztecas
	AddStaticPickup(1318, 23, 1154.9366,-1180.8309,32.8187) ; // Entrada HQ Ballas
	AddStaticPickup(1318, 23, 1248.1326,-1559.9377,13.5635);// Entrada D.E.T.R.A.N
	AddStaticPickup(1318, 23, 366.7790,162.5548,1019.9844);// saida hq D.E.T.R.A.N
	AddStaticPickup(1318, 23, 2808.1106,-1189.6528,25.3436); //HQ VAGOS
//>==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==-==<|
    AddStaticPickup(1318, 23, 361.2997,203.8503,1008.3828); //noticiasReporter Registration & /jornal
	AddStaticPickup(1242, 23, 1530.3060,-1702.4915,6.2252); //BaterCartao
	AddStaticPickup(1242, 23, 1263.5537,-1655.0265,6.3116); //BaterCartao
	AddStaticPickup(1242, 23, 240.6516,112.8062,1003.2188); //BaterCartao
	AddStaticPickup(1242, 23, 370.8871,174.5609,1019.9844); //BaterCartao
	AddStaticPickup(1242, 23, 1289.7114,-798.4102,1089.9375); //BaterCartao
	AddStaticPickup(1242, 23, 255.1123,77.4241,1003.6406); //BaterCartao
	AddStaticPickup(1242, 23, 229.8059,164.7830,1003.0234); //BaterCartao
    AddStaticPickup(1242, 23, 1172.4320,-1319.2578,15.3940); //BaterCartao SAMU
    AddStaticPickup(1242, 23, 1791.7347,-1689.3971,13.4656); //BaterCartao MECANICOS
	AddStaticPickup(1242, 23, -1335.7773,500.0176,11.3047); //Equipar COP
	AddStaticPickup(1242, 23, 246.3115,121.0975,1003.2301); //Equipar COP
	AddStaticPickup(1242, 23, 262.0182,71.0734,1003.2422); //Equipar COP
	AddStaticPickup(1242, 23, 616.9113,-593.0135,17.2330); //Equipar COP
	AddStaticPickup(1242, 23, 211.2608,185.8552,1003.0313); //Equipar COP
	AddStaticPickup(1242, 23, 356.6207,208.9427,1008.3828); //Equipar REPORTER
	AddStaticPickup(1242, 23, 414.5280,2531.5229,19.1648); //Equipar alqaeda
	AddStaticPickup(1242, 23, 1114.0310,-304.3608,73.9922) ; // Equipar Taliban
    AddStaticPickup(1242, 23, -309.3545,1761.2603,43.6406) ; // Equipar FARC
    portaodpauto = CreatePickup(1210, 0, 246.4286,73.8840,1003.6406); //Dp Auto
    AddStaticPickup(351,23,312.1259,-166.1339,999.6010); // loja de armas 1
    AddStaticPickup(351,23,295.7041,-80.3617,1001.5156); // Ammu Nation
    AddStaticPickup(1241,23,-22.2540,-55.6456,1003.5469); // loja 24/7
    AddStaticPickup(1241,23,-26.8819,-89.6936,1003.5469); // loja 24/7
    AddStaticPickup(1241,23,-22.3265,-138.4765,1003.5469); // loja 24/7
    AddStaticPickup(1241,23,-30.3140,-28.3121,1003.5573); // loja 24/7
    AddStaticPickup(2894, 23,-2033.4347,-117.3490,1035.1719); // CARTEIRA DE MOTORISTA
    AddStaticPickup(1582, 23, 1310.5232,-1251.0765,14.5019); // Restaurante
	AddStaticPickup(1318, 23, 2309.9460,-1643.6337,14.8270);//BAR HC GROOVE
    AddStaticPickup(1318, 23, 1642.3599,-2238.1589,13.4979);//AERO LS VIAGEM
    AddStaticPickup(1318, 23, -1421.4819,-287.3259,14.1484);//AERO LV VIAGEM
    AddStaticPickup(1318, 23, 1673.2532,1447.8350,10.7860);//AERO SF VIAGEM
	AddStaticPickup(1318, 23, -2027.0715,-103.6059,1035.1818); //SAIDA DETRAN
	AddStaticPickup(1277, 23, 1490.2411,1307.2179,1093.2891); //licencas
	AddStaticPickup(1274, 23, 1495.3928,-1749.1208,15.4453); //caixa prefeitura
	AddStaticPickup(1274, 23, 1363.0376,-1745.4191,13.5439); //caixa 24-7
	AddStaticPickup(1210, 23, 361.8300,173.5202,1008.3828); //Empregos
	AddStaticPickup(1240, 23, 1172.6522,-1327.9591,15.4025); //Hospital 1 near Ammu
	AddStaticPickup(1240, 23, 2029.5945,-1404.6426,17.2512); //Hospital 2 near speedway
	AddStaticPickup(1318, 23, 1481.0386,-1772.3120,18.7958); //City Hall
	AddStaticPickup(2060, 23, 2026.2104,-1896.1097,13.5469); //Pacotes de Material
	AddStaticPickup(2060, 23, 1990.8590,-1996.3722,13.5469); //Fabrica de Material
	AddStaticPickup(371, 23, 1544.2,-1353.4,329.4); //LS towertop
	AddStaticPickup(371, 23, 1536.0, -1360.0, 1150.0); //LS towertop
	AddStaticPickup(1242, 23, 1527.5,-12.1,1002.0); //binco armor
	AddStaticPickup(1240, 23, 279.3000,1853.5619,8.7649); //area51 health
	AddStaticPickup(1239, 23,259.2474,120.3977,1003.2188);// /limpar
	AddStaticPickup(1239, 23,234.8461,111.1823,1003.2257);// /limpar
	AddStaticPickup(1242,23,346.1226,161.8205,1025.7964); //EquiparGov
	AddStaticPickup(2060,23,1240.5569,-2036.9919,59.9709);// Trocar Materias Máfias
	AddStaticPickup(2060,23,-2648.0940,1396.4666,906.4609);// Equipar Máfia Cosa Nostra
	AddStaticPickup(1318, 23,691.5710,-1276.1722,13.5607);//hq yakuza
	AddStaticPickup(1247, 23, 1554.9537,-1675.6584,16.1953);//DP PM
	AddStaticPickup(1247, 23, 918.9910,-1252.1665,16.2109);//Entrada Interior HQ PC
	AddStaticPickup(1247, 23, 1545.4073,-1607.9791,13.3828);//DP Prender
	AddStaticPickup(1247, 23, 852.7875,-1275.1605,14.3879); // PC GARAGEM PRENDER
	AddStaticPickup(1247, 23, 1281.0261,-1633.7400,6.0538); // pr garagem
	AddStaticPickup(1318, 23, 1836.4064,-1682.4403,13.3493);//Alhabra
	AddStaticPickup(1247, 23, 1280.2565,-1647.0126,13.5291);//DP GT3
	AddStaticPickup(1318, 23, 975.4691,-1335.9618,13.5319);//Bar Pawno
	AddStaticPickup(1318, 23, 2229.9011,-1721.2582,13.5613);//Ganton gym
	AddStaticPickup(1318, 23, 2421.4998,-1219.2438,25.5617);//Pig Pen
	AddStaticPickup(1318, 23, 2419.9941,-1509.5865,24.0000);//Cluckin bell under it
	AddStaticPickup(1318, 23, 2398.6240,-1899.2014,13.5469);//Cluckin bell next to 10 green
	AddStaticPickup(1318, 23, 810.5328,-1616.1392,13.5469);//Marina burger
	AddStaticPickup(1318, 23, 927.6217,-1353.0105,13.3438);//Cluckin Bell
	AddStaticPickup(1318, 23, 1200.4232,-918.5194,43.1125);//Vinewood burger
	AddStaticPickup(1318, 23, 1833.6124,-1842.4968,13.5781);//24/7 estação entrada
	AddStaticPickup(1318, 23, 1315.5110,-898.9860,39.5781);//24/7 perto madd dogg
	AddStaticPickup(1318, 23, 1000.5861,-919.8832,42.3281);//24/7 gas station vinewood
	AddStaticPickup(1318, 23, 2424.2214,-1742.7878,13.5457);//24/7 GANTON ( PERTO DA GROOVE )
	AddStaticPickup(1318, 23, 1928.6006,-1776.4480,13.5469);//24/7 posto idle
	AddStaticPickup(1318, 23, 1352.4357,-1759.0243,13.5078);//24/7 Near DMV
	AddStaticPickup(1318, 23, 203.5140,-202.2578,1.5781); //Pizza stack at BlueBerry
	AddStaticPickup(1318, 23, 242.7591,66.4315,1003.6406); // Inside PD elevator
	AddStaticPickup(1318, 23, 1570.3828,-1333.8882,16.4844); // Building next ABC
	AddStaticPickup(1318, 2, 2495.3481,-1691.1355,14.7656); // Grove HQ
    AddStaticPickup(1274, 1, 1929.5409,-1785.1664,13.5469); // Caixa Eletronico 1
    AddStaticPickup(1274, 1, 2232.2886,-1162.6107,25.8906); // Caixa Eletronico 2
    AddStaticPickup(1279, 23, 2152.4727,-1014.0005,62.8375); //Drogas Favela
    AddStaticPickup(1279, 23, 1138.8217,-1972.5050,61.1965); //Drogas Favela
    AddStaticPickup(1279, 23, 1919.1384,-1415.4775,13.5703); // Drogas Skate
    AddStaticPickup(1279, 23, 1450.4479,-2287.0803,13.5469); // Drogas Aero
    AddStaticPickup(1279, 23, 1123.7664,-1506.4692,15.7869); // Drogas Shop
	AddStaticPickup(1241, 23, 1498.7177,-1616.7062,13.3700); // Icone Sorveteria Prefeitura 
    AddStaticPickup(1239, 23, 252.5820,69.7423,1003.6406) ; // Limpar DP
    AddStaticPickup(1247, 23, 225.8874,114.2892,999.0156) ; // PrenderCadeia B.O.P.E
    AddStaticPickup(1247, 23, 197.2681,179.3594,1003.0234) ; // PrenderCadeia PC
    AddStaticPickup(1247, 23, 268.2967,77.5858,1001.0391) ; // PrenderCadeia PM
    AddStaticPickup(1242, 23, -1345.8823,492.5301,11.2027) ; // Equipar Exército
   	AddStaticPickup(1242, 23, 326.6374,307.1123,999.1484); // BaterCartao PF
   	AddStaticPickup(2060, 23, 675.0947,-1275.7603,13.6334) ; // Esconder Materiais Yakuza
   	AddStaticPickup(2060, 23, 1738.6844,-1944.9553,13.5647) ; // Materiais MAFIAS
    AddStaticPickup(2060, 23, 1828.9386,-1149.9722,23.9766) ; // Materiais VEND
    AddStaticPickup(2060, 23, 2177.5793,-982.4036,64.4688) ; // Materiais VEND
   	AddStaticPickup(1314, 23, 249.6155,67.6277,1003.6406) ; // Autorização
	AddStaticPickup(1314, 23, 1207.2396,-1439.1406,13.3828) ; // Escritório Administrativo
   	AddStaticPickup(1247, 23, 321.8284,315.6733,999.1484) ; // PRENDER PF
   	AddStaticPickup(1210, 23, 355.2333,169.3552,1025.7891); // DarTaxa
   	AddStaticPickup(1210, 23, 367.3167,162.2013,1025.7891); // Portao Prefeitura
   	AddStaticPickup(1318, 23, 2232.9934,-1333.1924,23.9815) ; // IGREJA
   	AddStaticPickup(1318, 23, 1225.2448,-1427.9470,31.1480) ; // Saída Escritorio
   	AddStaticPickup(1318, 23, 98.4724,1320.5668,1131.8562) ; // Saída Abrigo Nuclear
   	AddStaticPickup(1247, 23, -1298.8188,490.5014,11.1953) ; // PRENDER EXERCITO
   	AddStaticPickup(1274, 23, 2144.4177,1641.5360,993.5761) ; // Acesso Restrito Banco
   	AddStaticPickup(1274, 23, 820.6042,8.3990,1004.1962) ; // Roubo Lotérica
   	AddStaticPickup(1274, 23, 211.3917,-96.1839,1005.2578) ; // Roubo BINCO
   	AddStaticPickup(1274, 23, 162.1060,-79.8251,1001.8047) ; // Roubo ZIP
   	AddStaticPickup(1274, 23, 205.4029,-11.5629,1005.2109) ; // Roubo VICTIM
   	AddStaticPickup(1318, 23, 1991.7828,-1183.4724,20.5116) ; // Pescar Parque Gleen 1
   	AddStaticPickup(1318, 23, 1948.1309,-1215.2512,20.5019) ; // Pescar Parque Gleen 2
   	AddStaticPickup(1318, 23, 839.8817,-1339.4336,7.1719) ; // Orelhao Estação Civil
   	AddStaticPickup(1247, 23, 627.6543,-571.9244,17.6055) ; // Interior Policia Federal
   	AddStaticPickup(1239, 23, 198.9671,168.1982,1003.0234) ; // Limpar PC
   	AddStaticPickup(1239, 23, 326.8282,304.4166,999.1484) ; // Limpar PF
   	AddStaticPickup(1314, 23, 768.2192,-3.9873,1000.7203); // mudarluta
   	AddStaticPickup(1318, 23, 2233.2659,-1159.8256,25.8906); // Entrada Hotel
   	AddStaticPickup(1274, 23, 2224.1484,-1141.8772,1025.7969); // Caixa Eletronico em lol
   	AddStaticPickup(1318, 23, 2232.8149,-1165.7214,25.8906) ; // Orelhao hotel
    AddStaticPickup(1318, 23, 2219.9551,-1154.7574,1025.7969) ; // Orelhao hotel
	AddStaticPickup(1274, 23, 2308.7908,-13.2499,26.7422); // Banco Los Santos($)
	AddStaticPickup(1274, 23, 303.9740,-168.8060,999.5938); // Roubo Loja de Armas 1($)
	AddStaticPickup(1274, 23, 294.8272,-57.8448,1001.5156); // Roubo Ammu Nation($)
	AddStaticPickup(1318, 23, 2104.8252,-1806.5239,13.5547) ; // Pickup Entrada Pizza
	AddStaticPickup(1247, 23, 195.5733,158.4008,1003.0234); //prender novo
	AddStaticPickup(1274, 23, 321.4753,305.5962,999.1484); //CAIXA PF
	AddStaticPickup(1274, 23, -1347.6376,499.9476,11.1953); //CAIXA EXE
    AddStaticPickup(1239, 23, 822.0201,4.2154,1004.1797); // coisa lot 3
    AddStaticPickup(1239, 23, 822.0099,6.3927,1004.1797); // coisa lot 4
    AddStaticPickup(1239, 23, 822.0237,1.7826,1004.1797); // coisa lot 2
    AddStaticPickup(1239, 23, 822.0087,-0.1116,1004.1797); // coisa lot 1
    AddStaticPickup(1239, 23, 2249.8088,-2257.7874,14.7647) ; // Vender Madeiras Ilegais
	AddStaticPickup(1318, 23, 306.3995,-159.1051,999.5938);//COFRE LA 1 ENTRADA
	AddStaticPickup(1318, 23, 301.7848,-76.6545,1001.5156);//COFRE LA 2 ENTRADA
	AddStaticPickup(1318, 23, 2315.5200,0.3490,26.7422);//BANCO
	AddStaticPickup(1318, 23, 1434.1337,-968.4908,37.3894);//BANCO
	AddStaticPickup(1318, 23, 2147.7161,1603.5366,1006.1677);//BANCO
	AddStaticPickup(1318, 23, 2155.9976,1597.9829,999.9699);//BANCO
	AddStaticPickup(1313, 23, 2774.0159,-1603.3855,10.9219);//Tunning drift
	AddStaticPickup(1239,23,1691.4391,-1334.9795,17.4275); //CREDITOS F 
	AddStaticPickup(1318, 23, 1769.1190,-1397.4380,15.7578);//Cabeleireiro Entrar
	AddStaticPickup(1318, 23, 412.1064,-54.1277,1001.8984);//Cabeleireiro Sair
	AddStaticPickup(1239, 23, 414.9846,-52.3263,1001.8984);//Cabeleireiro 1
	AddStaticPickup(1239, 23, 415.0718,-54.3788,1001.8984);//Cabeleireiro 2
	AddStaticPickup(1239, 23, 414.8076,-50.2456,1001.8984);//Cabeleireiro 3
	AddStaticPickup(1636, 23, -1437.9080,-1538.4395,101.7578); // Mercado negro bomba nuclear
	AddStaticPickup(1239, 23, -1289.6526,508.3094,11.1953); // Localizar bomba nuclear
	AddStaticPickup(1318, 23, 2226.3379,-1158.2490,25.7794); // NPC Reginaldo
	AddStaticPickup(1274, 23, 2309.3223,-8.3691,26.7422); // Empréstimos
	AddStaticPickup(1239, 23, 2306.9739,-7.4446,26.7422); // Info Emprestimos
	//=-=-=-=-=-=-=-=--==--== Mecanica =-=-=-=-=-=-==--=
	AddStaticPickup(1239, 23,1809.3224,-1723.2677,13.5363);//Icone Mecanica
	AddStaticPickup(1239, 23,1760.1302,-1695.9854,13.4382);//Icone Mecanica 2
	pickups=pickups+60;
	printf("[BRNM]: Maximo De Pickups = 4096, Pickups Em Uso = %d",pickups);
	
//=-=-=-==-===-=-=-=-=-=--=SetObjectMaterialText-=-=-=-=-=-=-=-=-=-=-==--=
new TextPrefeitura, TextPrefeitura1;
TextPrefeitura = CreateObject(19353, 1451.55750, -1734.85596, 12.30080,   0.00000, 90.00000, 360.00000);
TextPrefeitura1 = CreateObject(19353, 1513.4871, -1729.7018, 12.3008,       0.0000, 90.0000, 179.6511);
for(new i; i< 10; i++)
SetObjectMaterial(TextPrefeitura, i, 0, "none", "none", HexToInt("0xRRGGBB00"));
for(new i; i< 10; i++)
SetObjectMaterial(TextPrefeitura1, i, 0, "none", "none", HexToInt("0xRRGGBB00"));
//SetObjectMaterialText(myObject, "{FFFFFF}50KM/H"); // Texto piqueno
SetObjectMaterialText(TextPrefeitura, "60KM/H", 0, OBJECT_MATERIAL_SIZE_128x64, "Arial", 40, 0, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
SetObjectMaterialText(TextPrefeitura1, "60KM/H", 0, OBJECT_MATERIAL_SIZE_128x64, "Arial", 40, 0, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
// ------- Text Concessionária ---------
new TextConce;
TextConce = CreateObject(19353, 1655.8320, -1081.6512, 28.1074,   0.00000, 0.00000, 0.00000);
for(new i; i< 10; i++)
SetObjectMaterial(TextConce, i, 0, "none", "none", HexToInt("0xRRGGBB00"));
//SetObjectMaterialText(myObject, "{FFFFFF}50KM/H"); // Texto piqueno
SetObjectMaterialText(TextConce, "Concessionária", 0, OBJECT_MATERIAL_SIZE_256x128, "Arial", 40, 0, 0xFFFFFFFF, 0, OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
//=-=-=-=-=-=-=-=-=-=-=-=-=-=-CAIXA Eletronico-=-==--==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
for(new i = (sizeof(Caixa) - 1); i > -1; --i) Caixa[i] = CreateObject(2942, EfX[i], EfY[i], EfZ[i], EfrX[i], EfrY[i], EfrZ[i]);
//--------------------- Interfone Admin --------------------------------
CreateDynamicObject(19273, 1207.89819, -1441.43005, 14.25530,   0.00000, 0.00000, 268.60220);
//=-=-=-=-=-=-=-=-=-=-=-= PORTOES =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=//
PDDOORa = CreateObject(985 , 247.005905 , 72.448440 , 1003.640625 , 0.000000 , 0.000000 , 1260.000000 );
PDDOORb = CreateObject(985 , 250.774871 , 60.822799 , 1003.640625 , 0.000000 , 0.000000 , 5130.000000 );
PDDOORc = CreateObject(986 , 248.142105 , 78.125961 , 1003.640625 , 0.000000 , 0.000000 , 12690.000000 );
PDPMLS = CreateObject(980, 1546.8681640625, -1627.3585205078, 15.156204223633, 0, 0, 90);
gt3gate = CreateObject(971, 1267.0302, -1602.1642, 9.0120, 0.0000, 0.0000, 331.0945);
gt3gate3 = CreateObject(971, 1212.5449, -1643.5854, 6.6265, 0.0000, 0.0000, 359.9322);
PDGARAGE = CreateObject(980,1588.195,-1637.969,15.193,0.0,0.0,0.0);
gatepf2 = CreateObject(971, 2334.757568, 2443.675537, 8.250650, 0.0000, 0.0000, 236.2500);
gatepf3 = CreateObject(971, 2293.928467, 2499.322021, 5.825822, 0.0000, 0.0000, 90.0000);
portaoPC1 = CreateObject(980, 923.80151367188, -1224.8518066406, 18.749954223633, 0, 0, 270);
portaoPC2 = CreateObject(980, 923.73193359375, -1217.4801025391, 18.749954223633, 0, 0, 270);
PortaooPC = CreateObject(5856, 922.45611572266, -1208.7191162109, 17.982734680176, 0, 0, 0);
PDEx = CreateObject(980, -1531.3978271484, 482.25979614258, 8.9530792236328, 0, 0, 359.99975585938);
PortaoDeposito = CreateObject(969, 1644.00000000, -1719.3000488281, 14.60000038147, 0.0000, 0.0000, 90.000000);
PortaoPre = CreateObject(2990, 369.15893554688, 162.35037231445, 1028.6030273438, 0, 0, 270.67565917969);
PortaoGov = CreateObject(980, 1539.5814, -1839.0818, 15.3195, 0.0000, 0.0000, 269.2843);
PortaoReporter = CreateObject(971, 777.80017089844, -1330.2664794922, 14.200000762939, 0, 0, 0);
PortaoRally = CreateObject(971, -2368.4670410156, -2192.6381835938, 36.037666320801, 0, 0, 292.51049804688);
PortaoCHosp = CreateObject(975, 1256.1277, -1270.6016, 14.0361, 0.0000, 0.0000, 1.1315);
PortaoCasaMadDog = CreateObject(980, 1245.5508, -767.3086, 93.8034, 0.0000, 0.0000, 0.0000);
CasaVIP1 = CreateObject(9099, 1202.0939, -1865.5991, 13.7862, 0.0000, 0.0000, 270.0000);
CasaVIP2 = CreateObject(9099, 1171.2732, -1865.4771, 13.7692, 0.0000, 0.0000, 270.0000);
CasaVIP3 = CreateObject(9099, 1140.4081, -1865.6025, 13.8009, 0.0000, 0.0000, 269.8990);
CasaVIP4 = CreateObject(9099, 1109.5100, -1865.4539, 13.8081, 0.0000, 0.0000, 269.8990);
CasaVIP5 = CreateObject(9099, 1078.5649, -1865.3242, 13.8083, 0.0000, 0.0000, 269.8990);
CasaMVIP1 = CreateDynamicObject(3049, 927.4365, -1615.6812, 13.5657, 0.0000, 180.0000, 89.0000);
CasaMVIP1p = CreateDynamicObject(3050, 927.5054, -1606.5392, 13.5679, 0.0000, 180.0000, 269.7149);
CasaMVIP1pp = CreateDynamicObject(19303, 927.4549, -1596.0452, 13.7805, 0.0000, 0.0000, 90.4498);
CasaMVIP1g = CreateDynamicObject(6517, 936.8027, -1610.5074, 14.1446, 0.0000, 0.0000, 0.0000);
CasaMVIP1g2 = CreateDynamicObject(6517, 936.8260, -1617.4591, 14.1446, 0.0000, 0.0000, 0.0000);
CasaMVIP4p = CreateDynamicObject(3050, 1027.40198, -1725.61035, 13.48790,   0.00000, 180.00000, 270.84030);
CasaMVIP4p2 = CreateDynamicObject(3049, 1027.51453, -1734.70239, 13.48570,   0.00000, 180.00000, 90.07214);
CasaMVIP4p3 = CreateDynamicObject(3050, 1027.2101, -1759.4048, 13.4879,   0.0000, 180.0000, 269.7149);
CasaMVIP4p4 = CreateDynamicObject(3049, 1027.0420, -1768.5371, 13.4857,   0.0000, 180.0000, 87.8244);
PortaoPF=CreateObject(5422,618.40002441406,-596.90002441406,18.000000,0.000000,0.000000,0.000000);
pyakuza1 = CreateObject(980,664.862,-1309.311,15.234,0.0,0.0,0.0);
pyakuza3 = CreateObject(980,785.128,-1152.442,25.430,0.0,0.0,88.522);
PortaoTaxi = CreateObject(980,958.840,-1415.794,15.151,0.0,0.0,0.0);
acn = CreateObject(19313, 321.39999389648, -1188.1999511719, 77.099998474121, 0, 359, 37.996215820313);
Portaocat = CreateObject(3036,2349.23535156,-659.25500488,127.84769440,0.00000000,0.00000000,0.00000000);
PMansao228 = CreateObject(3050, 927.5529, -1629.5178, 13.4679, 0.0000, 180.0000, 269.7149);
PMansao228p2 = CreateObject(3049, 927.5292, -1638.6429, 13.4857, 0.0000, 180.0000, 89.6070);
PMansao229 = CreateObject(3050, 927.5349, -1712.7682, 13.4679, 0.0000, 180.0000, 269.7149);
PMansao229p2 = CreateObject(3049, 927.4742, -1721.9093, 13.4857, 0.0000, 180.0000, 89.6070);
//==-=-=-=--=-=-=-===-=-=-=-=-=-=-=-=- Spawn Civil BRNM =-=-=-=-=--=-=-=-=-=--==--=-=-=-=-=-=-=-=-=-=-=
CreateDynamicObject(983,  2230.3931, -1157.7593, 25.4586, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(983,  2227.1868, -1158.3701, 22.9366, -90.0000, 0.0000, 359.1868);
CreateDynamicObject(983,  2230.3562, -1161.7977, 25.4586, 0.0000, 0.0000, 270.0000);
CreateDynamicObject(983,  2227.1575, -1161.1729, 22.9366, -90.0000, 0.0000, 179.9961);
//==-=-=-=--=-=-=-=-=-=-=-=-=-=-=-=- Objetos -=-=-=-=-=-=-=-=-=-=-=-==--=-=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-
CreateDynamicObject(997, 1277.6390, -1577.2872, 12.5529, 0.0000, 0.0000, 269.1862);
CreateDynamicObject(1228, 1278.1340, -1578.2258, 12.9509, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(1228, 1278.1296, -1579.8745, 12.9509, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(997,  1270.7468, -1577.7749, 12.5529, 0.0000, 0.0000, 269.1862);
CreateDynamicObject(1228, 1270.1736, -1580.1843, 12.9509, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(1228, 1270.1771, -1578.5397, 12.9509, 0.0000, 0.0000, 0.0000);
/*=-=-=--==--=-=-=-=-=-=-=-=-=-=-=-=- Abrigo anti bomba nuclear =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(10841, 84.51826, 1337.78271, 1138.50171,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10841, 107.28030, 1337.78125, 1138.50171,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14409, 102.97750, 1335.87048, 1133.52380,   0.00000, 0.00000, 89.80084);
CreateDynamicObject(18783, 83.04322, 1327.43665, 1128.35620,   0.00000, 0.00000, 0.00000);
CreateObject(18783, 103.02335, 1327.42212, 1128.35620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18783, 123.00662, 1327.40967, 1128.35620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10841, 121.46637, 1337.59241, 1138.50171,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10841, 73.94573, 1327.46167, 1138.50171,   0.00000, 0.00000, 269.59891);
CreateDynamicObject(10841, 84.41402, 1318.49548, 1138.50171,   0.00000, 0.00000, 179.33084);
CreateDynamicObject(10841, 131.18246, 1327.96729, 1138.50171,   0.00000, 0.00000, 269.59891);
CreateDynamicObject(10841, 104.77692, 1318.33521, 1138.50171,   0.00000, 0.00000, 179.33084);
CreateDynamicObject(10841, 120.79091, 1318.20044, 1138.50171,   0.00000, 0.00000, 179.33084);
CreateDynamicObject(19371, 83.18697, 1335.72717, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 83.26608, 1332.68628, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(1800, 75.48060, 1332.95361, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 77.51050, 1332.99146, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 79.43956, 1333.01294, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 81.49511, 1333.03833, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(19371, 83.33247, 1329.57605, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 83.37560, 1323.28992, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 83.42425, 1320.37000, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(2634, 82.51514, 1327.36646, 1132.34155,   0.00000, 0.00000, 208.64334);
CreateDynamicObject(1800, 75.42592, 1328.01038, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 77.70819, 1328.02380, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 79.82918, 1328.07092, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 81.84924, 1328.05957, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(19273, 83.46289, 1324.56396, 1132.64111,   0.00000, 0.00000, 89.13650);
CreateDynamicObject(19371, 93.05145, 1335.73303, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 85.04201, 1323.94861, 1132.61353,   0.00000, 0.00000, 90.03719);
CreateDynamicObject(19371, 89.70280, 1323.86328, 1132.61353,   0.00000, 0.00000, 90.03720);
CreateDynamicObject(1523, 86.62791, 1323.89124, 1130.85425,   0.00000, 0.00000, 358.21298);
CreateDynamicObject(19371, 106.10496, 1335.66626, 1131.60571,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(1800, 75.41121, 1323.66260, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 75.47635, 1320.08105, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 77.90697, 1323.72681, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 78.00632, 1320.08167, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 80.08781, 1320.10010, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1800, 82.14227, 1320.13892, 1130.85193,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(19371, 93.11486, 1332.53503, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 93.15730, 1330.06750, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(2634, 92.40487, 1327.94714, 1132.34155,   0.00000, 0.00000, 208.64334);
CreateDynamicObject(18059, 121.89701, 1321.34814, 1131.22327,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18059, 121.97295, 1326.75525, 1131.22327,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18059, 121.98274, 1331.77820, 1131.22327,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19377, 110.95891, 1332.66992, 1136.74707,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 111.04057, 1323.05713, 1136.74707,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 121.53576, 1322.97681, 1136.74707,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 126.77770, 1323.01208, 1136.72705,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(19377, 121.45956, 1332.59766, 1136.74707,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 125.27092, 1332.61743, 1136.72705,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(3440, 109.05410, 1327.89136, 1134.43884,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3440, 109.05410, 1327.89136, 1129.69019,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2381, 91.84260, 1332.71057, 1132.26941,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2381, 92.03890, 1334.95276, 1132.26941,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2388, 93.02749, 1332.47668, 1132.36926,   0.00000, 88.00000, 180.00000);
CreateDynamicObject(2388, 92.98034, 1334.71912, 1132.36926,   0.00000, 88.00000, 180.00000);
CreateDynamicObject(2525, 84.25097, 1319.68616, 1130.85864,   0.00000, 0.00000, 180.46211);
CreateDynamicObject(2525, 85.92871, 1319.46619, 1130.85864,   0.00000, 0.00000, 180.46211);
CreateDynamicObject(19371, 85.06110, 1320.49084, 1131.56738,   0.00000, 0.00000, 180.25011);
CreateDynamicObject(19371, 86.70686, 1320.54028, 1131.56738,   0.00000, 0.00000, 180.25009);
CreateDynamicObject(2525, 87.59385, 1319.54663, 1130.85864,   0.00000, 0.00000, 180.46211);
CreateDynamicObject(19371, 88.35201, 1320.36511, 1131.56738,   0.00000, 0.00000, 180.25009);
CreateDynamicObject(1523, 83.44358, 1321.90784, 1130.85425,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 85.10230, 1321.91956, 1130.85425,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 86.75666, 1321.86597, 1130.85425,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19371, 93.23358, 1323.20532, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 93.29530, 1320.25073, 1132.61353,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(19371, 91.59135, 1323.85864, 1132.61353,   0.00000, 0.00000, 90.03719);
CreateDynamicObject(19273, 93.29154, 1324.15051, 1132.64111,   0.00000, 0.00000, 89.13650);
CreateDynamicObject(2523, 88.81500, 1323.27148, 1130.85486,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2523, 89.75256, 1323.28394, 1130.85486,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2523, 90.61131, 1323.26868, 1130.85486,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2527, 92.34051, 1320.65759, 1130.85413,   0.00000, 0.00000, 179.83670);
CreateDynamicObject(19371, 91.65657, 1319.05408, 1132.61353,   0.00000, 0.00000, 89.21468);
CreateDynamicObject(2527, 90.87834, 1320.65027, 1130.85413,   0.00000, 0.00000, 179.83670);
CreateDynamicObject(1649, 106.00166, 1321.25476, 1138.48120,   0.00000, 0.00000, 270.39355);
CreateDynamicObject(1649, 105.98569, 1325.62598, 1138.48120,   0.00000, 0.00000, 270.19757);
CreateDynamicObject(1649, 105.96341, 1329.97754, 1138.48120,   0.00000, 0.00000, 270.30875);
CreateDynamicObject(2121, 114.66115, 1321.41333, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 117.86015, 1321.50342, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 120.94257, 1321.32019, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 124.06383, 1321.23743, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 127.12386, 1321.25378, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 114.69984, 1326.65991, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 117.96713, 1326.68164, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 120.94231, 1326.67603, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 124.01138, 1326.80249, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 127.27285, 1326.82153, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 114.68966, 1331.80237, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 117.84598, 1331.97412, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 120.91776, 1331.70911, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 124.12244, 1331.75879, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(2121, 127.24734, 1331.71704, 1131.40820,   0.00000, 0.00000, 90.18978);
CreateDynamicObject(19377, 89.15040, 1332.43213, 1134.41968,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 89.23862, 1322.82532, 1134.41968,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 78.77104, 1323.01819, 1134.41968,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 78.60688, 1332.62695, 1134.41968,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 120.97070, 1323.08154, 1139.95886,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(19377, 111.05840, 1322.87146, 1139.97888,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 100.62450, 1322.82007, 1139.97791,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(19377, 90.48521, 1322.73291, 1138.34436,   0.00000, 72.00000, 1.00000);
CreateDynamicObject(19377, 84.08855, 1322.65979, 1136.30200,   0.00000, 72.00000, 1.00000);
CreateDynamicObject(19377, 90.34400, 1332.35730, 1138.34436,   0.00000, 72.00000, 1.00000);
CreateDynamicObject(19377, 83.92482, 1332.14026, 1136.19995,   0.00000, 72.00000, 1.00000);
CreateDynamicObject(19377, 100.53520, 1332.41882, 1139.97986,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(19377, 110.72834, 1332.49756, 1139.97791,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 120.75780, 1332.68176, 1139.97888,   0.00000, 90.00000, 0.50401);
CreateDynamicObject(19377, 125.72627, 1332.86621, 1139.93884,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(19377, 125.81724, 1323.22681, 1139.93884,   0.00000, 90.00000, 0.50400);
CreateDynamicObject(19371, 106.10496, 1335.66626, 1135.03943,   0.00000, 0.00000, 1.12530);
CreateDynamicObject(16151, 113.76009, 1336.10352, 1131.21460,   0.00000, 0.00000, 91.13799);
CreateDynamicObject(2068, 79.18215, 1318.65857, 1134.32996,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2068, 78.69346, 1324.58667, 1134.32996,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 84.43016, 1332.03467, 1130.85388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 86.68163, 1331.95691, 1130.85388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 88.97994, 1332.06360, 1130.85388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 89.07430, 1327.71887, 1130.85388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 86.78291, 1327.79346, 1130.85388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 84.62221, 1327.81787, 1130.85388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 128.58644, 1332.29285, 1136.83289,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 125.52563, 1332.25635, 1136.83289,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 122.52537, 1332.25854, 1136.83289,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1800, 119.68478, 1332.23877, 1136.83289,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(937, -1432.81958, -1544.47510, 101.25380,   0.00000, 0.00000, 269.95096);
CreateDynamicObject(937, -1432.82043, -1536.95691, 101.25380,   0.00000, 0.00000, 269.95096);
CreateDynamicObject(937, -1432.81848, -1538.81396, 101.25380,   0.00000, 0.00000, 269.95096);
CreateDynamicObject(937, -1432.82178, -1540.69824, 101.25380,   0.00000, 0.00000, 269.95096);
CreateDynamicObject(937, -1432.81726, -1542.58203, 101.25380,   0.00000, 0.00000, 269.95096);
CreateDynamicObject(3786, -1432.91650, -1543.16833, 102.04830,   0.00000, 0.00000, 88.52984);
CreateDynamicObject(3786, -1432.82080, -1537.44629, 102.06830,   0.00000, 0.00000, 88.50838);
CreateDynamicObject(3786, -1432.85718, -1540.27637, 102.04830,   0.00000, 0.00000, 88.52984);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=-=-= Map Localizar bomba nuclear exercito =-=-=-=-=--=-*/
CreateDynamicObject(1337,1982.5091600,-1617.2841800,19.6438400,0.0000000,0.0000000,0.0000000);
CreateDynamicObject(1337,204.1000100,1865.3000500,-21.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(3390,-1288.3000500,508.5000000,10.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(3393,-1288.1999500,505.2999900,10.2000000,0.0000000,0.0000000,0.0000000);
CreateDynamicObject(3387,-1288.1999500,503.1000100,10.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(3389,-1288.1999500,502.1000100,10.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(3386,-1288.4000200,510.7999900,10.2000000,0.0000000,0.0000000,0.0000000);
CreateDynamicObject(3387,-1288.3000500,511.7999900,10.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(3395,-1288.5000000,499.7999900,10.2000000,0.0000000,0.0000000,0.0000000);
CreateDynamicObject(3391,-1288.5000000,496.3999900,10.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(3388,-1288.5999800,494.2000100,10.2000000,0.0000000,0.0000000,0.0000000);
CreateDynamicObject(3389,-1288.3000500,512.7999900,10.2000000,0.0000000,0.0000000,0.0000000); 
CreateDynamicObject(1714,-1290.5000000,508.3999900,10.2000000,0.0000000,0.0000000,100.0000000);
CreateDynamicObject(1714,-1290.0000000,505.2000100,10.2000000,0.0000000,0.0000000,100.0000000);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Shoow na praia ====--=-=-=-=-==-=-=-=-=-=-=-=-=*/
CreateDynamicObject(3268, 179.59961, -1813.00000, 6.30000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(16782, 189.59961, -1826.50000, 11.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3385, 189.70000, -1822.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1821.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1821.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1820.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1820.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1819.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1819.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1818.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1818.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1817.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1817.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1816.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1816.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1815.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1815.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1814.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1814.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1813.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1813.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1812.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1812.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1811.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1811.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1810.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1810.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1809.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1809.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1808.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1808.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1807.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1807.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1806.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1806.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1805.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1805.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1804.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1804.19995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(3385, 189.70000, -1803.69995, 6.10000,   90.00000, 0.00000, 91.00000);
CreateDynamicObject(16782, 189.60001, -1826.50000, 9.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1826.50000, 7.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1824.50000, 7.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1824.50000, 9.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1824.50000, 11.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1825.50000, 11.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1825.50000, 9.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1825.50000, 7.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1802.40002, 7.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1802.40002, 10.08000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1802.40002, 12.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.66000, -1800.97998, 12.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1800.97998, 10.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1800.85999, 7.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1799.43994, 7.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1799.56006, 10.10000,   0.04000, 0.00000, 0.00000);
CreateDynamicObject(16782, 189.60001, -1799.69995, 12.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(7073, 190.50000, -1790.90002, 24.50000,   0.00000, 6.00000, 0.00000);
CreateDynamicObject(3526, 189.70000, -1821.90002, 13.20000,   0.00000, 270.00000, 180.00000);
CreateDynamicObject(3526, 189.70000, -1821.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.69922, -1820.89941, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1820.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1819.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1819.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1818.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1818.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1817.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1817.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1816.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1816.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1815.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1815.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1814.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1814.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1813.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1813.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1812.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1812.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1811.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1811.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1810.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1810.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1809.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1809.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1808.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1808.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1807.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1807.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1806.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1806.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1805.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1805.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1804.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1804.40002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(3526, 189.70000, -1803.90002, 13.20000,   0.00000, 270.00000, 179.99500);
CreateDynamicObject(354, 187.00000, -1815.89941, 12.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 185.89999, -1805.00000, 12.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 188.10001, -1822.09998, 12.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 186.70000, -1811.69995, 12.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 178.20000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 178.39999, -1818.59998, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1817.90002, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1817.30005, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1816.59998, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1815.40002, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1814.69995, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1814.09998, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1813.40002, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.29980, -1812.79980, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1812.09998, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1811.40002, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1810.80005, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1810.09998, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.30000, -1809.40002, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.38000, -1808.69995, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 178.20000, -1808.59998, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2232, 177.60001, -1808.69995, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2232, 177.10001, -1808.69995, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2232, 176.60001, -1808.69995, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2232, 176.10001, -1808.69995, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2232, 175.60001, -1808.69995, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2232, 175.10001, -1808.69995, 6.90000,   0.00000, 0.00000, 179.99500);
CreateDynamicObject(2104, 178.30000, -1812.80005, 6.60000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2232, 178.30000, -1816.00000, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(14820, 178.30000, -1814.09998, 7.60000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2232, 177.50000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 177.00000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 176.50000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 176.00000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 175.50000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 175.00000, -1818.69995, 6.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2780, 189.39999, -1813.09998, 12.10000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(5737, 176.60001, -1824.90002, 0.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2780, 189.60001, -1804.09998, 12.10000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(2780, 189.50000, -1821.90002, 12.10000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(2780, 189.50000, -1817.09998, 12.10000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(2780, 189.50000, -1809.30005, 12.10000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(3515, 182.36969, -1832.64539, 5.48797,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3515, 183.56938, -1791.02905, 5.49098,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3515, 178.89999, -1807.50000, 5.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3515, 178.89999, -1820.19995, 5.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3437, 188.30000, -1822.19995, 12.20000,   0.00000, 0.00000, 354.43600);
CreateDynamicObject(3437, 186.00000, -1822.09998, 12.20000,   0.00000, 0.00000, 358.43500);
CreateDynamicObject(3437, 183.50000, -1822.00000, 12.20000,   0.00000, 0.00000, 358.43500);
CreateDynamicObject(3437, 181.00000, -1822.00000, 12.20000,   0.00000, 0.00000, 358.43500);
CreateDynamicObject(3437, 178.50000, -1821.90002, 12.20000,   0.00000, 0.00000, 0.43500);
CreateDynamicObject(3437, 176.00000, -1821.90002, 12.20000,   0.00000, 0.00000, 0.43500);
CreateDynamicObject(3437, 173.50000, -1821.90002, 12.20000,   0.00000, 0.00000, 0.43500);
CreateDynamicObject(3437, 188.39999, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43500);
CreateDynamicObject(3437, 186.10001, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43399);
CreateDynamicObject(3437, 183.70000, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43399);
CreateDynamicObject(3437, 181.20000, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43399);
CreateDynamicObject(3437, 178.70000, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43399);
CreateDynamicObject(3437, 176.20000, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43399);
CreateDynamicObject(3437, 173.70000, -1803.19995, 12.20000,   0.00000, 0.00000, 358.43399);
CreateDynamicObject(7392, 188.70000, -1836.59998, 14.50000,   0.00000, 6.00000, 0.00000);
CreateDynamicObject(2780, 189.20000, -1838.50000, 16.40000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(2780, 189.20000, -1790.19995, 21.40000,   0.00000, 0.00000, 92.00000);
CreateDynamicObject(3461, 188.80000, -1821.09998, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.80000, -1820.09998, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.80000, -1819.09998, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.80000, -1817.80005, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.70000, -1804.40002, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1804.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1804.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(13667, 190.00000, -1812.19995, 30.60000,   0.00000, 0.00000, 12.00000);
CreateDynamicObject(13641, 175.60001, -1813.00000, -3.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.70000, -1805.40002, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1805.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1805.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.70000, -1806.40002, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1806.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1806.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.70000, -1807.40002, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1807.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1807.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1807.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.69922, -1807.39941, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1817.79980, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1819.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1820.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3461, 188.79980, -1821.09961, 4.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5737, 176.60001, -1798.69995, 0.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.20000, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.19922, -1822.00000, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09998, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3666, 188.50000, -1803.09961, 18.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 189.20000, -1821.69995, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1821.69995, 8.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1821.69995, 9.22000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1821.69995, 10.34000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1821.69995, 11.46000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1804.00000, 6.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1804.00000, 8.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1804.00000, 9.22000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1804.00000, 10.34000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 189.20000, -1804.00000, 11.48000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19378, 189.52182, -1790.77405, 0.90853,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 189.53786, -1799.19238, 0.90853,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 189.53262, -1808.64307, 0.90853,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 189.53821, -1818.01575, 0.90853,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 189.52016, -1827.12048, 0.90853,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 189.52686, -1832.84802, 0.90853,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 184.77657, -1837.57288, 0.90853,   0.00000, 0.00000, 270.04184);
CreateDynamicObject(19378, 175.43855, -1837.56519, 0.90853,   0.00000, 0.00000, 270.04184);
CreateDynamicObject(19378, 168.43657, -1837.56299, 0.90853,   0.00000, 0.00000, 270.04184);
CreateDynamicObject(19378, 184.82288, -1786.01672, 0.90853,   0.00000, 0.00000, 89.89999);
CreateDynamicObject(19378, 176.96602, -1786.02283, 0.90853,   0.00000, 0.00000, 89.89999);
CreateDynamicObject(19378, 168.60451, -1785.99854, 0.90853,   0.00000, 0.00000, 89.89999);
CreateDynamicObject(19378, 163.81976, -1790.73657, 0.90853,   0.00000, 0.00000, 179.80403);
CreateDynamicObject(19378, 163.79750, -1799.98022, 0.90853,   0.00000, 0.00000, 179.80403);
CreateDynamicObject(19378, 163.76628, -1809.40625, 0.90853,   0.00000, 0.00000, 179.80403);
CreateDynamicObject(19378, 163.72975, -1818.54163, 0.90853,   0.00000, 0.00000, 179.80403);
CreateDynamicObject(19378, 163.66228, -1827.53003, 0.90853,   0.00000, 0.00000, 179.80403);
CreateDynamicObject(19378, 163.63757, -1832.81494, 0.90853,   0.00000, 0.00000, 179.80403);
CreateDynamicObject(16088, 185.83618, -1812.43213, 4.59694,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 188.07030, -1808.13135, 11.68387,   0.00000, 0.00000, 90.30087);
CreateDynamicObject(18102, 170.26363, -1816.94006, 6.05629,   112.00000, 0.00000, 269.73941);
CreateDynamicObject(354, 189.07390, -1834.07715, 6.41830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 189.07278, -1836.21619, 6.41830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 179.95204, -1804.42554, 6.34557,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 179.19054, -1810.36169, 6.34557,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 179.33629, -1816.20654, 6.34557,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(354, 176.08453, -1820.00366, 6.34557,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8615, 161.02109, -1812.65430, 4.60878,   0.00000, 0.00000, 270.05167);
CreateDynamicObject(19449, 166.70613, -1815.04456, 6.21749,   0.00000, 90.00000, 271.22192);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Balada Praia Santa Maria =-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(16151, 381.82419, -1843.13721, 7.17830,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(18783, 390.76505, -1861.79163, 5.81922,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14820, 387.85413, -1856.45215, 9.22225,   0.00000, 0.00000, 40.00000);
CreateDynamicObject(2372, 398.42068, -1848.76416, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2290, 399.00784, -1848.03479, 6.82040,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1823, 383.46631, -1825.78149, 6.82123,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 404.65335, -1831.88794, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2350, 398.47672, -1826.87036, 7.13949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19157, 383.91302, -1858.89197, 9.30850,   0.00000, 0.00000, -20.00000);
CreateDynamicObject(19446, 385.40021, -1814.27747, 8.58170,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 401.24530, -1814.29285, 8.58170,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 405.97400, -1819.02686, 8.58170,   0.00000, 0.00000, 0.00000);
CreateObject(19446, 405.97400, -1828.63879, 8.58170,   0.00000, 0.00000, 0.00000);
CreateObject(19446, 405.97400, -1838.25793, 8.58170,   0.00000, 0.00000, 0.00000);
CreateObject(19446, 405.97400, -1847.86560, 8.58170,   0.00000, 0.00000, 0.00000);
CreateObject(19446, 405.97400, -1857.47827, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1867.09912, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1867.09912, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1857.47827, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1847.86560, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1838.25793, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1828.63879, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 405.97400, -1819.01367, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 400.92169, -1871.83411, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 391.31351, -1871.83411, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 385.39981, -1871.82471, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 380.66840, -1867.09912, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 400.92169, -1871.83411, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 391.31351, -1871.83411, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 385.39981, -1871.82471, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 380.66840, -1867.09912, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1857.47827, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1847.86560, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1838.25793, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1828.63879, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1819.01367, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 385.40021, -1814.27747, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 380.66840, -1819.01367, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1828.63879, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1838.25793, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1847.86560, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 380.66840, -1857.47827, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 392.87790, -1814.27930, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 384.51242, -1812.92871, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 385.40021, -1822.28259, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 390.13770, -1822.31250, 6.83090,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 393.17661, -1822.25720, 6.83090,   0.00000, 0.00000, 180.00000);
CreateObject(19446, 401.09369, -1822.28259, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19354, 394.67700, -1822.30139, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19384, 396.44031, -1820.63953, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 394.83231, -1814.29285, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19354, 396.42685, -1817.44373, 6.28254,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 401.22430, -1871.84509, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 401.22430, -1871.84509, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 401.24088, -1814.27332, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1533, 390.25549, -1814.23425, 6.83070,   0.00000, 0.00000, 160.00000);
CreateDynamicObject(1537, 393.19284, -1814.24268, 6.83120,   0.00000, 0.00000, 200.00000);
CreateDynamicObject(1649, 391.56653, -1814.29724, 10.98851,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1649, 391.56650, -1814.29724, 10.98850,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1649, 391.58179, -1822.30115, 10.99947,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1649, 391.58179, -1822.30115, 10.99950,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(3361, 401.71439, -1857.27588, 6.23720,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(18090, 401.25479, -1824.25745, 9.37970,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2350, 400.48090, -1826.88245, 7.13949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2350, 402.56479, -1826.93115, 7.13949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2350, 404.79025, -1826.90149, 7.13949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2350, 395.65179, -1823.00513, 7.13949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2350, 395.87360, -1824.53345, 7.13949,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 395.88708, -1847.41772, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 391.90149, -1847.41772, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 387.92529, -1847.41772, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 387.92529, -1843.44067, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 387.92529, -1839.44409, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 387.92529, -1835.45203, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 391.90149, -1843.44067, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 395.90207, -1843.45398, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 391.90149, -1839.44409, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 395.90210, -1839.44409, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 391.90149, -1835.45203, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19128, 395.90210, -1835.45203, 6.83010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 398.42068, -1846.52930, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 398.42068, -1837.47791, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 398.42068, -1835.20850, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 394.80875, -1809.22034, 7.34180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 388.36700, -1809.29810, 7.34180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 389.71191, -1807.92639, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 385.95486, -1809.29810, 7.34180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 384.51239, -1810.59204, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 389.71191, -1805.56848, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 393.40701, -1807.92639, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 393.42578, -1805.57788, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 395.86066, -1813.08521, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 397.18893, -1809.26038, 7.34180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 397.36392, -1811.90527, 7.34180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 401.93790, -1852.01184, 7.34180,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2001, 381.15427, -1822.72620, 6.82953,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 389.70862, -1821.86682, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 393.31219, -1821.89258, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 393.70483, -1814.71277, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 389.79843, -1814.71692, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06036, -1828.57349, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1829.26111, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1829.94312, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1830.62476, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1831.32910, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1832.00183, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1832.67505, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56616, -1834.86353, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1835.54761, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1836.24683, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1836.94763, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1837.63672, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1838.30835, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1838.96680, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1839.62512, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1840.25659, 6.88740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 398.42068, -1841.98206, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 397.34949, -1832.93726, 6.82030,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2372, 395.11090, -1832.93726, 6.82030,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2372, 387.62680, -1832.93726, 6.82030,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2372, 385.84006, -1848.82117, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 385.84009, -1846.49841, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 385.84009, -1844.28210, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 385.84009, -1835.11926, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2372, 385.84009, -1839.47791, 6.82030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2290, 398.97861, -1836.76135, 6.82040,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2290, 396.59631, -1832.50769, 6.82040,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2290, 381.32443, -1836.41602, 6.82040,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2290, 381.30258, -1826.44275, 6.82040,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2290, 382.55194, -1822.93152, 6.82040,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2290, 385.66364, -1822.96216, 6.82040,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2290, 405.38303, -1842.63916, 6.82040,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2290, 405.37567, -1845.70313, 6.82040,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1823, 386.12436, -1825.95667, 6.82120,   0.00000, 0.00000, 10.00000);
CreateDynamicObject(1823, 399.54651, -1841.82593, 6.82120,   0.00000, 0.00000, 95.00000);
CreateDynamicObject(1823, 404.72552, -1833.65430, 6.82120,   0.00000, 0.00000, 75.00000);
CreateDynamicObject(1823, 404.78625, -1830.29236, 6.82120,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1823, 386.64963, -1832.74414, 6.82120,   0.00000, 0.00000, 10.00000);
CreateDynamicObject(2125, 405.50128, -1833.39856, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 403.95389, -1834.27222, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 403.07678, -1832.81433, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 405.46970, -1829.76660, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 402.97086, -1829.79688, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 404.13809, -1830.94519, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 404.16757, -1828.45532, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 383.89557, -1826.59802, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 388.02792, -1825.03540, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 386.77496, -1826.66638, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 385.79999, -1832.24609, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 399.55356, -1842.68323, 7.13858,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 399.96808, -1840.76855, 7.13858,   0.00000, 0.00000, 0.00000);
CreateObject(19446, 385.40021, -1822.28259, 12.06630,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 401.24530, -1822.28003, 12.06630,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 392.87790, -1822.28259, 12.06630,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 400.67441, -1867.01306, 8.58170,   0.00000, 0.00000, 0.00000);
CreateObject(19446, 399.60571, -1862.27539, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 405.94189, -1862.23767, 6.83390,   0.00000, 0.00000, 180.00000);
CreateObject(1523, 394.82379, -1862.22681, 8.14540,   0.00000, 0.00000, 180.00000);
CreateObject(19446, 388.49371, -1862.27539, 8.58170,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 385.53589, -1862.27759, 8.58170,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 399.60571, -1862.27539, 12.06630,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 401.09909, -1862.27734, 12.06630,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 388.49371, -1862.27539, 12.06630,   0.00000, 0.00000, 90.00000);
CreateObject(19446, 385.53589, -1862.27759, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 403.78757, -1862.24524, 10.99950,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1649, 403.78760, -1862.24524, 10.99950,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1649, 394.20630, -1862.25073, 12.31560,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1649, 394.20630, -1862.25073, 12.31560,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2179, 389.79840, -1814.71692, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 393.70480, -1814.71277, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1828.57349, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1829.26111, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1829.94312, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1830.62476, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1831.32910, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1832.00183, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 381.06039, -1832.67505, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1834.86353, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1835.54761, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1836.24683, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1836.94763, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1837.63672, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1838.30835, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1838.96680, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1839.62512, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 405.56619, -1840.25659, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 405.57990, -1851.87366, 6.82953,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 403.51294, -1861.73096, 6.82953,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 389.70859, -1821.86682, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2179, 393.31219, -1821.89258, 11.19520,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 402.89465, -1853.40149, 7.34180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 398.86621, -1841.32996, 7.31519,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 398.79239, -1841.03223, 7.31523,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 399.12732, -1841.31824, 7.31521,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 398.87741, -1840.86670, 7.31526,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 399.10727, -1841.18225, 7.31523,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 404.03488, -1833.25635, 7.31246,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 404.36252, -1833.27856, 7.31239,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 404.22318, -1833.23608, 7.31240,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 404.19138, -1833.35852, 7.31246,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 404.15503, -1832.68530, 7.31220,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 404.49020, -1832.64282, 7.31569,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 404.31683, -1832.90222, 7.31571,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 404.28333, -1829.71667, 7.31476,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 404.37155, -1829.83679, 7.31479,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 403.98563, -1830.16150, 7.31486,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 404.25534, -1830.00171, 7.31479,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 403.95392, -1829.57617, 7.31474,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 387.38248, -1831.81140, 7.31379,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 386.67374, -1832.55933, 7.31348,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 387.19882, -1831.79639, 7.31378,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 387.37891, -1832.12012, 7.31374,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 386.46326, -1825.31274, 7.31455,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 386.64551, -1825.50903, 7.31455,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 386.84735, -1825.20093, 7.31455,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 386.27994, -1825.47021, 7.31455,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 386.51736, -1825.71338, 7.31455,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 384.31845, -1825.56909, 7.31373,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 384.39987, -1825.44202, 7.31371,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 383.45660, -1825.30664, 7.31344,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 383.64453, -1825.50037, 7.31356,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 383.53369, -1825.61768, 7.31358,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 397.07410, -1827.56152, 6.87810,   0.00000, 90.00000, 10.00000);
CreateDynamicObject(1543, 396.69339, -1827.41516, 6.87810,   0.00000, 90.00000, 50.00000);
CreateDynamicObject(1543, 387.52228, -1826.12622, 6.87810,   0.00000, 90.00000, 50.00000);
CreateDynamicObject(1544, 403.37460, -1830.61804, 6.87810,   0.00000, 90.00000, 10.00000);
CreateDynamicObject(1543, 403.38928, -1831.15588, 6.87810,   0.00000, 90.00000, 60.00000);
CreateDynamicObject(1543, 398.58310, -1840.16516, 6.87810,   0.00000, 90.00000, 60.00000);
CreateDynamicObject(1544, 399.07309, -1840.23645, 6.87810,   0.00000, 90.00000, 180.00000);
CreateDynamicObject(1543, 399.01016, -1839.93848, 6.87810,   0.00000, 90.00000, 120.00000);
CreateDynamicObject(1545, 380.82300, -1841.60815, 8.23220,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1545, 399.46060, -1823.31665, 8.42810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1545, 405.81271, -1824.18921, 8.42810,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2232, 382.13849, -1852.82959, 8.90170,   0.00000, 0.00000, 150.00000);
CreateDynamicObject(2232, 383.33426, -1853.15723, 8.90170,   0.00000, 0.00000, 170.00000);
CreateDynamicObject(1541, 380.81369, -1840.48059, 8.28340,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2425, 403.81433, -1825.57861, 7.85830,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2429, 403.42984, -1823.01318, 8.06975,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1541, 405.82709, -1823.18542, 8.35582,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2771, 399.79584, -1825.45056, 8.02622,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14391, 392.04050, -1854.78845, 9.22435,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2232, 394.59070, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 393.88031, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 393.17651, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 392.47379, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 391.75821, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 391.05261, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 390.35229, -1853.55591, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 389.66690, -1853.55579, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 398.45050, -1853.08057, 8.90170,   0.00000, 0.00000, 190.00000);
CreateDynamicObject(2232, 399.68793, -1852.52747, 8.90170,   0.00000, 0.00000, 220.00000);
CreateDynamicObject(2232, 382.45377, -1861.14941, 8.90170,   0.00000, 0.00000, 150.00000);
CreateDynamicObject(2232, 384.43585, -1861.51465, 8.90170,   0.00000, 0.00000, 170.00000);
CreateDynamicObject(2232, 381.41791, -1859.04297, 8.90170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 381.78122, -1856.81873, 8.90170,   0.00000, 0.00000, 70.00000);
CreateDynamicObject(2725, 394.11926, -1822.93005, 7.22334,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2725, 405.20197, -1849.61072, 7.22334,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2725, 382.15860, -1837.71399, 7.22334,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2725, 398.60297, -1832.87366, 7.22334,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2670, 403.68494, -1860.01697, 6.93170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2670, 400.12006, -1842.96375, 6.93170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2670, 405.01358, -1831.42432, 6.93170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2670, 396.67908, -1827.56335, 6.93170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2670, 385.41531, -1826.65869, 6.93170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2670, 381.73166, -1848.34485, 6.93170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2671, 387.76764, -1831.31628, 6.84280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2673, 382.73779, -1824.22449, 6.92650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2673, 399.34653, -1833.48389, 6.92650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2673, 403.04013, -1827.13708, 6.92650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2673, 404.89664, -1841.38635, 6.92650,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2673, 397.85266, -1850.45410, 6.92650,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2673, 381.94421, -1833.87195, 6.92650,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2232, 397.92764, -1861.64722, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 396.98727, -1861.60449, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 391.35489, -1861.71814, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 390.47443, -1861.65198, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 389.51410, -1861.70715, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 388.56329, -1861.59753, 8.90170,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2671, 382.44525, -1855.18274, 8.32290,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 383.03033, -1844.66724, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 382.65295, -1843.11450, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 382.93411, -1844.86597, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 382.99683, -1841.23596, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 382.36212, -1840.05737, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 382.63724, -1842.80481, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 382.41080, -1846.25171, 7.80404,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.77753, -1841.74695, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 381.42700, -1846.39612, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 381.17719, -1846.63342, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.47058, -1846.47510, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.58255, -1846.10901, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.95148, -1844.46985, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.77570, -1844.59644, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.82715, -1842.92627, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.90656, -1841.35352, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.68774, -1840.28809, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 382.51727, -1839.94604, 7.80388,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 398.41534, -1825.80286, 7.85813,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 397.35764, -1823.18567, 7.85813,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 402.70020, -1825.61084, 7.85813,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 402.99622, -1825.47534, 7.85813,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 400.75323, -1825.78113, 7.85813,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1544, 405.25693, -1825.63403, 7.85813,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 397.26456, -1824.57971, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 398.04996, -1825.51379, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 397.14105, -1824.92615, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 400.47479, -1825.70911, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 400.95117, -1825.47778, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 405.59689, -1825.51477, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 397.90317, -1825.39075, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 397.33044, -1823.53333, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1543, 397.10638, -1823.13916, 7.85695,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19446, 400.67441, -1867.01306, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 396.35437, -1855.41675, 13.51650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 394.06494, -1837.07715, 13.51650,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19354, 396.43271, -1815.98230, 6.28250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 396.43271, -1815.98230, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 396.42679, -1817.44373, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 396.44031, -1820.63953, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19384, 387.91559, -1820.64844, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 387.91559, -1817.45886, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 387.90939, -1815.92773, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 387.90939, -1815.92773, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 387.91559, -1817.45886, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(0, 387.91559, -1820.64844, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 387.96841, -1821.39246, 6.83090,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 396.45859, -1821.39124, 6.83090,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2290, 381.28690, -1869.48535, 8.31500,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2290, 381.28690, -1866.40540, 8.31500,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2290, 383.15784, -1862.84583, 8.31500,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2290, 384.95929, -1871.22400, 8.31500,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1823, 384.42056, -1868.90198, 8.31560,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1823, 384.39566, -1866.14075, 8.31560,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2001, 381.32315, -1863.07581, 8.31644,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 381.35080, -1871.31335, 8.31643,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2592, 389.57175, -1871.46692, 9.19230,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2371, 400.18399, -1821.66626, 6.82950,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2394, 405.46851, -1815.34131, 7.70680,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 405.48251, -1817.19409, 7.70680,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 404.07901, -1815.29810, 7.70680,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 402.59091, -1815.27637, 7.70680,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 404.09195, -1817.15369, 7.70680,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 402.59189, -1817.16833, 7.70680,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 405.44147, -1821.16589, 7.70680,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 404.00061, -1821.30347, 7.70680,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 402.53775, -1821.25903, 7.70680,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 401.14551, -1821.26868, 7.70680,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 401.02216, -1815.28650, 7.70680,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 401.04648, -1817.16711, 7.72634,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2371, 400.26746, -1816.12378, 6.82950,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 400.10001, -1815.90735, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2394, 405.48251, -1817.19409, 8.99802,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 405.46851, -1815.34131, 8.99800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 404.09189, -1817.15369, 8.99800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 404.07901, -1815.29810, 8.99800,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 402.59091, -1815.27637, 8.99800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 402.59189, -1817.16833, 8.99800,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 401.02219, -1815.28650, 8.99800,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 401.04651, -1817.16711, 8.99800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 405.44150, -1821.16589, 8.99800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 404.00061, -1821.30347, 8.99800,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2394, 402.53781, -1821.25903, 8.99800,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2394, 401.14551, -1821.26868, 8.99800,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(19354, 400.15579, -1817.44373, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 400.15579, -1820.63953, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2671, 384.63782, -1870.32068, 8.32290,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19151, 3405.84497, -1845.66870, 12.71090,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2232, 399.68793, -1852.52747, 10.06676,   0.00000, 0.00000, 220.00000);
CreateDynamicObject(2232, 398.45050, -1853.08057, 10.06680,   0.00000, 0.00000, 190.00000);
CreateDynamicObject(2232, 382.13849, -1852.82959, 10.06680,   0.00000, 0.00000, 150.00000);
CreateDynamicObject(2232, 383.33429, -1853.15723, 10.06680,   0.00000, 0.00000, 170.00000);
CreateDynamicObject(2232, 397.92761, -1861.64722, 10.06680,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 396.98730, -1861.60449, 10.06680,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 391.35489, -1861.71814, 10.06680,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 390.47440, -1861.65198, 10.06680,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 389.51410, -1861.70715, 10.06680,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 388.56329, -1861.59753, 10.06680,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 397.14771, -1855.20679, 8.57400,   0.00000, 90.00000, 180.00000);
CreateDynamicObject(2232, 398.33231, -1855.20642, 8.56119,   0.00000, -90.00000, 180.00000);
CreateDynamicObject(2232, 398.32999, -1855.20642, 9.08820,   0.00000, -90.00000, 180.00000);
CreateDynamicObject(2232, 397.14771, -1855.20679, 9.10515,   0.00000, 90.00000, 180.00000);
CreateDynamicObject(1826, 387.35464, -1856.77783, 8.30370,   0.00000, 0.00000, 40.00000);
CreateDynamicObject(19378, 400.70129, -1867.09912, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19377, 390.20630, -1867.09912, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 385.95279, -1867.09912, 6.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 400.70129, -1857.47827, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 390.20630, -1857.47827, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(0, 385.95239, -1857.47827, 6.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 400.70129, -1847.86560, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 390.20630, -1847.86560, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 385.95239, -1847.86560, 6.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 400.70129, -1838.25793, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 390.20630, -1838.25793, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 385.95239, -1838.25793, 6.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 400.70129, -1828.63879, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 390.20630, -1828.63879, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 385.95239, -1828.63879, 6.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 400.70129, -1819.02686, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 390.20630, -1819.02686, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 385.95239, -1819.02686, 6.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 390.20630, -1867.09912, 6.75500,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19129, 390.58850, -1851.95715, -1.69190,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19129, 400.53961, -1861.91052, -1.69190,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1867.12305, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1867.12305, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1857.49036, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1857.49036, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1847.86560, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1847.86560, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1838.25793, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1838.25793, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1828.63879, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1828.63879, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 405.99799, -1819.01367, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 405.98599, -1819.02686, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 401.22430, -1871.85706, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 401.22430, -1871.85706, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 391.31351, -1871.84607, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 391.31351, -1871.84607, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 385.39981, -1871.83667, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 385.39981, -1871.83667, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 400.92169, -1871.84607, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 400.92169, -1871.84607, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 401.24091, -1814.26135, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 401.24530, -1814.28076, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19355, 394.83231, -1814.28076, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19447, 392.90549, -1814.26099, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 385.40021, -1814.26550, 12.06630,   0.00000, 180.00000, 90.00000);
CreateDynamicObject(19447, 385.40021, -1814.26550, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19446, 380.68039, -1819.00171, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1819.00171, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1819.00171, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1828.63879, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1828.63879, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1838.25793, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1838.25793, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1847.86560, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1847.86560, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1857.47827, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1857.47827, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1867.09912, 12.06630,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19447, 380.65640, -1867.09912, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3034, 380.55911, -1858.64099, 8.75080,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3034, 380.55911, -1839.85266, 8.75080,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3034, 380.55911, -1823.67102, 8.75080,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(3034, 388.04910, -1871.93994, 8.75080,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3034, 399.67410, -1871.95203, 8.75080,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3034, 400.38260, -1814.18945, 8.75080,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(3034, 384.74231, -1814.17004, 8.75080,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(3034, 406.08871, -1842.53833, 8.75080,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3034, 406.08871, -1859.21851, 8.75080,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3034, 406.08871, -1825.40820, 8.75080,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19377, 385.39981, -1866.66943, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 401.22430, -1866.66943, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 401.22430, -1856.18909, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 401.22430, -1845.68750, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 401.22430, -1835.21265, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 401.22430, -1824.72351, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 401.22430, -1819.44165, 13.89500,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 385.39981, -1856.18909, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 385.39981, -1845.68750, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 385.39981, -1835.21265, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 385.39981, -1824.72351, 13.89240,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 385.39981, -1819.44165, 13.89500,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 393.65140, -1819.45276, 13.90440,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 393.65140, -1866.64978, 13.90440,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 393.65140, -1856.15710, 13.90440,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(19377, 393.65140, -1829.93530, 13.90440,   0.00000, 90.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1848.70117, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1848.70117, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1844.30481, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1839.89294, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1835.46277, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1844.30481, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1839.89294, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1835.46277, 13.92920,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1835.46277, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1835.46277, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1839.89294, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1839.89294, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1844.30481, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1844.30481, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 391.63739, -1848.70117, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(1649, 394.94931, -1848.70117, 13.92920,   -90.00000, 0.00000, 90.00000);
CreateDynamicObject(2075, 391.27838, -1816.21350, 13.57360,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2075, 391.27841, -1818.34241, 13.57360,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2075, 391.27841, -1820.54321, 13.57360,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2075, 398.20105, -1819.67297, 13.57360,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2075, 398.20099, -1816.95374, 13.57360,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1935, 387.90359, -1817.45886, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19389, 387.90359, -1820.64844, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 387.90359, -1817.45886, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 387.89740, -1815.92773, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19354, 387.90939, -1815.92773, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 386.32272, -1814.31702, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 382.36511, -1814.31702, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 384.78195, -1814.31665, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 382.18286, -1822.26392, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 386.30417, -1822.27930, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 384.24625, -1822.27454, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 386.21109, -1815.82019, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 386.27621, -1817.39099, 6.83090,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 384.59891, -1817.39099, 6.83090,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 382.92529, -1817.39099, 6.83090,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 381.25159, -1817.39099, 6.83090,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 384.53281, -1815.82019, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 382.85730, -1815.82019, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 381.17880, -1815.82019, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 381.17880, -1820.67358, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 381.17691, -1818.18152, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 387.89740, -1815.92773, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 387.90359, -1820.64844, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 387.90359, -1817.45886, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 386.30420, -1822.27930, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 384.24619, -1822.27454, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 382.19211, -1822.28162, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 381.17880, -1820.67358, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 381.17691, -1818.18152, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 381.17880, -1815.82019, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 382.36511, -1814.31702, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 384.78201, -1814.31665, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 386.32269, -1814.31702, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2738, 385.40869, -1814.86682, 7.44350,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2738, 383.70331, -1814.86682, 7.44350,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2738, 382.07629, -1814.86682, 7.44350,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2738, 387.07040, -1814.86682, 7.44350,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18761, 390.84290, -1854.30640, 8.82397,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(19421, 387.11880, -1856.92395, 9.29920,   0.00000, -10.00000, 0.00000);
CreateDynamicObject(19424, 394.43011, -1854.68677, 9.44370,   0.00000, 0.00000, 20.00000);
CreateDynamicObject(19423, 391.82336, -1854.82117, 9.44430,   0.00000, 0.00000, -10.00000);
CreateDynamicObject(2524, 382.66800, -1821.70911, 6.84200,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2524, 384.15350, -1821.70911, 6.84200,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2524, 385.73041, -1821.70911, 6.84200,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(14680, 386.56357, -1820.86414, 12.15079,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 402.81839, -1862.28223, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 402.30020, -1862.29761, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 402.30020, -1863.93262, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 403.84131, -1863.89685, 6.83390,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 403.84131, -1865.56226, 6.83390,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 403.84131, -1867.21606, 6.83390,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 402.30020, -1865.62793, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 402.30020, -1867.28662, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 403.84131, -1868.88452, 6.83390,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1523, 403.84131, -1870.55176, 6.83390,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 402.30020, -1868.94080, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 404.29074, -1870.61877, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 402.21909, -1870.62439, 8.58170,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 400.69220, -1863.96313, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 400.70749, -1867.25134, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 400.68002, -1870.20020, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 405.96320, -1863.85205, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 405.96320, -1867.03430, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 405.96320, -1870.18909, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 400.69220, -1863.96313, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 400.70749, 12.06630, 8.58170,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 400.70749, -1867.15527, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 402.21909, -1870.62439, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 404.29071, -1870.61877, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 400.67999, -1870.20020, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 405.96320, -1870.18909, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 405.96320, -1867.03430, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 405.96320, -1863.85205, 12.06630,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19359, 402.30020, -1862.29761, 12.06630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(19359, 404.29160, -1862.28223, 12.05440,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2738, 401.23141, -1869.77820, 7.42250,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2738, 401.23141, -1868.12732, 7.42250,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2738, 401.23141, -1866.41260, 7.42250,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2738, 401.23141, -1864.75122, 7.42250,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2738, 401.23141, -1863.09399, 7.42250,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2524, 405.37851, -1868.58972, 6.84280,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2524, 405.37851, -1867.05530, 6.84280,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2524, 405.37851, -1865.02917, 6.84280,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(18102, 396.03671, -1831.46436, 13.51650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 392.09320, -1860.95093, 8.82551,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2773, 393.37320, -1859.54504, 8.82550,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2773, 395.74060, -1859.54333, 8.82550,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2670, 405.19128, -1869.54871, 6.93810,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2671, 403.44452, -1863.74243, 6.85520,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2671, 383.01465, -1820.65137, 6.83810,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2673, 386.90073, -1818.63098, 6.93880,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2673, 407.94290, -1802.90076, 6.90960,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2671, 394.42026, -1804.14270, 6.83960,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2670, 401.41806, -1813.47729, 6.92580,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2670, 379.82358, -1810.11047, 6.91520,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2673, 381.19266, -1797.92273, 6.91440,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1687, 386.94299, -1866.51868, 14.77651,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1687, 386.89560, -1862.97437, 14.77651,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1687, 392.59668, -1866.39392, 14.77651,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1687, 392.60291, -1862.97754, 14.77651,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1687, 400.47113, -1817.97437, 14.77651,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1687, 400.50107, -1820.64502, 14.77651,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2186, 398.12048, -1862.87805, 8.31577,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1663, 397.33566, -1863.95886, 8.76633,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3439, 379.91382, -1802.92505, 10.90643,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3439, 409.06174, -1807.71155, 10.89409,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2606, 400.35590, -1865.41492, 10.74350,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1808, 400.35373, -1869.67859, 8.31520,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1670, 383.97809, -1865.63159, 8.84510,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2230, 392.40308, -1871.62000, 8.31580,   0.00000, 0.00000, 170.00000);
CreateDynamicObject(2225, 393.56516, -1871.78198, 8.31570,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2232, 389.94989, -1862.81287, 8.88086,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 384.03421, -1868.71167, 8.87223,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 383.78098, -1868.57849, 8.87223,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1340, 418.27771, -1788.40100, 5.79910,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1341, 418.45099, -1795.97290, 5.61460,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1342, 418.23874, -1792.33301, 5.75400,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1820, 391.06204, -1865.51624, 8.31626,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2816, 391.48819, -1865.07190, 8.81901,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2368, 389.78043, -1815.85632, 6.84150,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2357, 397.18549, -1867.13770, 8.71272,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2894, 397.13019, -1868.94592, 9.12646,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1742, 398.94342, -1871.81665, 8.31560,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2615, 391.34503, -1862.41760, 9.94155,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2163, 386.45044, -1862.28369, 9.40036,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 400.23474, -1871.33325, 8.31643,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 400.10800, -1862.92273, 8.31643,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 395.33926, -1862.77844, 8.31643,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 392.78897, -1862.72083, 8.31643,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 388.64133, -1862.80457, 8.88090,   0.00000, 0.00000, -10.00000);
CreateDynamicObject(2230, 394.48801, -1871.77759, 8.31580,   0.00000, 0.00000, 190.00000);
CreateDynamicObject(1663, 397.21729, -1870.38586, 8.75430,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2606, 400.35590, -1867.43604, 10.74350,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2606, 400.35590, -1867.43604, 10.28070,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2606, 400.35590, -1865.41492, 10.28070,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2894, 397.36475, -1866.22278, 9.12650,   0.00000, 0.00000, 80.00000);
CreateDynamicObject(1663, 398.92090, -1865.64172, 8.76630,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1663, 395.72055, -1865.66345, 8.76630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1663, 395.58163, -1867.12219, 8.76630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1663, 395.61221, -1868.50635, 8.76630,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1663, 398.91843, -1868.54968, 8.76630,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(1663, 399.00500, -1867.06519, 8.76630,   0.00000, 0.00000, -90.00000);
CreateDynamicObject(2125, 391.66321, -1863.51367, 8.62300,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 390.06525, -1864.93628, 8.62300,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 392.65948, -1865.03723, 8.62300,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 391.05182, -1866.28064, 8.62300,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2771, 389.73721, -1815.81946, 8.08550,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2001, 388.52960, -1814.85522, 6.84253,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 395.93384, -1821.85522, 6.84167,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 388.42215, -1821.79651, 6.84167,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2001, 396.08029, -1814.71741, 6.84167,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16780, 386.30759, -1867.04883, 13.78620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16780, 393.72107, -1867.01721, 13.78620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 405.27277, -1849.54504, 7.70840,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 405.12540, -1849.40808, 7.70840,   0.00000, 0.00000, 0.00000);
/*=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-== Elevador LS =-=--=-=-=-=-=-=-=-=-=-=-==-=-=-=-*/
CreateDynamicObject(19003,1790.315307,-1299.275024,12.629811,0.000000,180.000000,34.000000);
CreateDynamicObject(19003,1805.895629,-1287.125122,12.630142,0.000000,180.000000,34.000000);
CreateDynamicObject(19003,1787.355346,-1292.285156,19.279813,0.000000,0.000000,34.000000);
CreateDynamicObject(19003,1803.895629,-1281.125122,19.279813,0.000000,0.000000,34.000000);
CreateDynamicObject(2395,1780.903686,-1298.224609,12.629813,0.000000,0.000000,128.000000);
CreateDynamicObject(2395,1782.853271,-1300.723999,12.629813,0.000000,0.000000,128.000000);
CreateDynamicObject(2395,1783.013183,-1300.923950,15.379811,0.000000,0.000000,128.000000);
CreateDynamicObject(2395,1780.903686,-1298.224609,15.379811,0.000000,0.000000,128.000000);
CreateDynamicObject(2395,1792.987915,-1299.499633,12.639812,0.000000,0.000000,210.000000);
CreateDynamicObject(2395,1796.217773,-1297.629638,12.639812,0.000000,0.000000,210.000000);
CreateDynamicObject(2395,1796.217773,-1297.629638,15.389814,0.000000,0.000000,210.000000);
CreateDynamicObject(2395,1792.987915,-1299.499633,15.389814,0.000000,0.000000,210.000000);
CreateDynamicObject(19273,1783.896484,-1301.145996,14.009812,0.000000,0.000000,180.000000);
CreateDynamicObject(1649,1778.741577,-1294.870239,14.300539,0.000000,0.000000,209.099945);
CreateDynamicObject(1649,1778.741577,-1294.870239,14.300539,0.000000,0.000000,29.099945);
CreateDynamicObject(1649,1778.741577,-1294.870239,17.580535,0.000000,0.000000,209.099945);
CreateDynamicObject(1649,1778.741577,-1294.870239,17.580535,0.000000,0.000000,29.099945);
CreateDynamicObject(1649,1782.541625,-1292.729980,17.590539,0.000000,0.000000,209.599975);
CreateDynamicObject(1649,1782.541625,-1292.729980,14.300539,0.000000,0.000000,209.599975);
CreateDynamicObject(1649,1782.541625,-1292.729980,17.600540,0.000000,0.000000,29.599975);
CreateDynamicObject(1649,1782.541625,-1292.729980,14.300539,0.000000,0.000000,29.599975);
CreateDynamicObject(1649,1786.238403,-1290.489746,14.302803,0.000000,0.000000,213.000000);
CreateDynamicObject(1649,1789.748168,-1287.952026,14.302816,0.000000,0.000000,219.000000);
CreateDynamicObject(1649,1793.150634,-1285.229370,14.302803,0.000000,0.000000,219.000000);
CreateDynamicObject(1649,1786.238403,-1290.489746,17.602809,0.000000,0.000000,33.000000);
CreateDynamicObject(1649,1789.748168,-1287.952026,14.302816,0.000000,0.000000,39.000000);
CreateDynamicObject(1649,1793.150634,-1285.229370,14.302803,0.000000,0.000000,39.000000);
CreateDynamicObject(1649,1793.150634,-1285.229370,17.602809,0.000000,0.000000,219.000000);
CreateDynamicObject(1649,1786.238403,-1290.489746,14.302803,0.000000,0.000000,33.000000);
CreateDynamicObject(1502,1794.885620,-1283.874877,12.632802,0.000000,0.000000,41.000000);
CreateDynamicObject(1502,1797.145507,-1281.844970,12.632802,0.000000,0.000000,221.000000);
CreateDynamicObject(1649,1786.238403,-1290.489746,17.602806,0.000000,0.000000,213.000000);
CreateDynamicObject(1649,1789.748168,-1287.952026,17.602817,0.000000,0.000000,219.000000);
CreateDynamicObject(1649,1789.748168,-1287.952026,17.602817,0.000000,0.000000,39.000000);
CreateDynamicObject(1649,1793.150634,-1285.229370,17.602806,0.000000,0.000000,39.000000);
CreateDynamicObject(1649,1798.984252,-1280.591308,14.292810,0.000000,0.000000,215.000000);
CreateDynamicObject(1649,1802.611572,-1278.142211,14.290012,0.000000,0.000000,213.000000);
CreateDynamicObject(1649,1806.374633,-1275.883056,14.292810,0.000000,0.000000,209.000000);
CreateDynamicObject(1649,1810.451660,-1274.579101,14.292810,0.000000,0.000000,187.000000);
CreateDynamicObject(1649,1814.830566,-1274.197021,14.293370,0.000000,0.000000,183.000000);
CreateDynamicObject(1649,1798.984252,-1280.591308,14.292810,0.000000,0.000000,35.000000);
CreateDynamicObject(1649,1802.611572,-1278.142211,14.290012,0.000000,0.000000,33.000000);
CreateDynamicObject(1649,1806.374633,-1275.883056,14.292810,0.000000,0.000000,29.000000);
CreateDynamicObject(1649,1810.451660,-1274.579101,14.292810,0.000000,0.000000,7.000000);
CreateDynamicObject(1649,1814.830566,-1274.197021,14.293370,0.000000,0.000000,3.000000);
CreateDynamicObject(1649,1798.984252,-1280.591308,17.592809,0.000000,0.000000,215.000000);
CreateDynamicObject(1649,1802.611572,-1278.142211,17.590011,0.000000,0.000000,213.000000);
CreateDynamicObject(1649,1806.374633,-1275.883056,17.592809,0.000000,0.000000,209.000000);
CreateDynamicObject(1649,1810.451660,-1274.579101,17.592809,0.000000,0.000000,187.000000);
CreateDynamicObject(1649,1814.830566,-1274.197021,17.593370,0.000000,0.000000,183.000000);
CreateDynamicObject(1649,1798.984252,-1280.591308,17.592809,0.000000,0.000000,35.000000);
CreateDynamicObject(1649,1802.611572,-1278.142211,17.590011,0.000000,0.000000,33.000000);
CreateDynamicObject(1649,1806.374633,-1275.883056,17.592811,0.000000,0.000000,29.000000);
CreateDynamicObject(1649,1810.451660,-1274.579101,17.592809,0.000000,0.000000,7.000000);
CreateDynamicObject(1649,1814.830566,-1274.197021,17.593368,0.000000,0.000000,3.000000);
CreateDynamicObject(1364,1809.768066,-1276.041503,13.445158,0.000000,0.000000,-7.000000);
CreateDynamicObject(1364,1813.103881,-1278.382690,13.448053,0.000000,0.000000,-55.000000);
CreateDynamicObject(630,1789.517456,-1300.673828,13.629811,0.000000,0.000000,0.0);
CreateDynamicObject(19076,1762.691894,-1305.322631,11.630142,0.000000,0.000000,75.000000);
CreateDynamicObject(14699,1795.332885,-1291.364257,17.729806,0.000000,0.000000,34.000000);
CreateDynamicObject(14699,1801.519653,-1292.984985,17.734319,0.000000,0.000000,34.000000);
CreateDynamicObject(14699,1803.844604,-1285.024169,17.739786,0.000000,0.000000,34.000000);
CreateDynamicObject(1231,1815.155395,-1282.510375,13.630142,0.000000,0.000000,115.000000);
CreateDynamicObject(3921,1805.094970,-1296.233520,13.160144,0.000000,0.000000,-56.000000);
CreateDynamicObject(1231,1808.004272,-1294.074584,13.630142,0.000000,0.000000,45.000000);
CreateDynamicObject(1649,1795.983398,-1282.852783,17.372816,0.000000,90.000000,221.000000);
CreateDynamicObject(1649,1795.983398,-1282.852783,17.372816,0.000000,90.000000,41.000000);
/*=-=-=-=-=-=-=-=-=-=-=--==---=-=-=- Estacionamento Perto das casas VIP Premium Mansão -==-=-=-=-=-*/
CreateDynamicObject(984,1065.69995117,-1777.09997559,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (1)
CreateDynamicObject(984,1078.40002441,-1777.09997559,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (2)
CreateDynamicObject(984,1091.19995117,-1777.09997559,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (3)
CreateDynamicObject(984,1095.50000000,-1777.09997559,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (4)
CreateDynamicObject(984,1101.90002441,-1770.70007324,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (5)
CreateDynamicObject(984,1101.90002441,-1758.00000000,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (6)
CreateDynamicObject(984,1059.29992676,-1770.65991211,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (7)
CreateDynamicObject(984,1059.29992676,-1757.90002441,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (8)
CreateDynamicObject(984,1059.29992676,-1745.09997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (9)
CreateDynamicObject(984,1059.30004883,-1742.30004883,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (10)
CreateDynamicObject(984,1065.69006348,-1735.90002441,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (11)
CreateDynamicObject(984,1078.40002441,-1735.90002441,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (12)
CreateDynamicObject(984,1091.19995117,-1735.90002441,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (13)
CreateDynamicObject(984,1095.19995117,-1735.90002441,13.00000000,0.00000000,0.00000000,90.00000000); //object(fenceshit2) (14)
CreateDynamicObject(966,1101.69995117,-1736.09997559,12.60000038,0.00000000,0.00000000,92.00000000); //object(bar_gatebar01) (1)
CreateDynamicObject(984,1101.90002441,-1749.48999023,13.00000000,0.00000000,0.00000000,0.00000000); //object(fenceshit2) (15)
CreateDynamicObject(968,1101.70007324,-1736.00000000,13.60000038,0.00000000,0.00000000,270.00000000); //object(barrierturn) (1)
/*-=-=-=-=-=-=-=-=-=-=--=-=-=-=--=-= Estacionamento LS Em cima do Ginasio =-=-=-=-*/
CreateDynamicObject(1660,2295.50000000,-1709.40002441,6.50000000,22.98983765,359.71789551,178.85632324); //object(ramp) (1)
CreateDynamicObject(8661,2273.69995117,-1712.40002441,16.70000076,0.00000000,0.00000000,359.75000000); //object(gnhtelgrnd_lvs) (1)
CreateDynamicObject(8661,2271.10009766,-1712.40002441,16.70000076,0.00000000,0.00000000,359.74731445); //object(gnhtelgrnd_lvs) (2)
CreateDynamicObject(8661,2271.10009766,-1711.40002441,16.70000076,0.00000000,0.00000000,359.74731445); //object(gnhtelgrnd_lvs) (3)
CreateDynamicObject(8661,2273.69921875,-1711.39941406,16.70000076,0.00000000,0.00000000,359.74731445); //object(gnhtelgrnd_lvs) (5)
CreateDynamicObject(3578,2293.10009766,-1721.90002441,11.89999962,0.00000000,0.00000000,359.48913574); //object(dockbarr1_la) (1)
CreateDynamicObject(3578,2296.09960938,-1727.00000000,11.69999981,0.00000000,0.00000000,359.99450684); //object(dockbarr1_la) (2)
CreateDynamicObject(982,2280.89941406,-1722.29980469,17.39999962,0.00000000,0.00000000,90.00000000); //object(fenceshit) (1)
CreateDynamicObject(982,2255.29980469,-1722.39941406,17.39999962,0.00000000,0.00000000,90.00000000); //object(fenceshit) (2)
CreateDynamicObject(982,2263.79980469,-1701.50000000,17.39999962,0.00000000,0.00000000,90.00000000); //object(fenceshit) (3)
CreateDynamicObject(983,2276.79980469,-1698.29980469,17.29999924,0.00000000,0.00000000,0.00000000); //object(fenceshit3) (2)
CreateDynamicObject(983,2279.89990234,-1695.90002441,17.29999924,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (3)
CreateDynamicObject(983,2286.30004883,-1695.90002441,17.29999924,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (4)
CreateDynamicObject(983,2290.39990234,-1695.90002441,17.29999924,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (5)
CreateDynamicObject(983,2293.69995117,-1699.09997559,17.29999924,0.00000000,0.00000000,180.00000000); //object(fenceshit3) (6)
CreateDynamicObject(983,2296.00000000,-1703.80004883,17.20000076,0.00000000,0.00000000,233.74426270); //object(fenceshit3) (7)
CreateDynamicObject(983,2298.39990234,-1708.80004883,17.20000076,0.00000000,0.00000000,177.98950195); //object(fenceshit3) (8)
CreateDynamicObject(982,2298.19995117,-1723.40002441,11.89999962,335.24780273,0.00000000,179.49462891); //object(fenceshit) (4)
CreateDynamicObject(983,2293.60009766,-1719.09997559,17.29999924,0.00000000,0.00000000,179.99450684); //object(fenceshit3) (9)
CreateDynamicObject(983,2293.60009766,-1714.30004883,17.29999924,0.00000000,0.00000000,179.99450684); //object(fenceshit3) (10)
CreateDynamicObject(3881,2289.69995117,-1699.30004883,18.50000000,0.00000000,0.00000000,90.00000000); //object(airsecbooth_sfse) (1)
CreateDynamicObject(3881,2281.69995117,-1698.80004883,18.50000000,0.00000000,0.00000000,269.25000000); //object(airsecbooth_sfse) (2)
CreateDynamicObject(10183,2255.30004883,-1702.19995117,16.79999924,0.00000000,0.00000000,135.00000000); //object(ferspaces) (1)
CreateDynamicObject(10183,2273.30004883,-1718.00000000,16.79999924,0.00000000,0.00000000,225.00000000); //object(ferspaces) (2)
CreateDynamicObject(1660,2295.69995117,-1703.19995117,8.69999981,22.98889160,359.71435547,178.85192871); //object(ramp) (1)
CreateDynamicObject(1660,2295.69995117,-1700.59997559,12.19999981,0.00000000,0.00000000,180.00000000); //object(ramp) (6)
CreateDynamicObject(1660,2295.60009766,-1703.80004883,8.50000000,22.98889160,359.71435547,178.85192871); //object(ramp) (1)
CreateDynamicObject(1660,2295.69995117,-1699.50000000,12.19999981,0.00000000,0.00000000,179.99450684); //object(ramp) (8)
CreateDynamicObject(1660,2288.80004883,-1702.00000000,6.50000000,43.74792480,0.69216919,233.01586914); //object(ramp) (9)
CreateDynamicObject(1660,2295.80004883,-1699.09997559,12.50000000,358.25000000,0.00000000,179.99450684); //object(ramp) (10)
CreateDynamicObject(3578,2293.19995117,-1710.80004883,15.80000019,0.00000000,0.00000000,359.99450684); //object(dockbarr1_la) (2)
CreateDynamicObject(982,2280.89990234,-1701.40002441,17.29999924,0.00000000,0.00000000,90.00000000); //object(fenceshit) (3)
CreateDynamicObject(669,2299.39990234,-1703.80004883,5.90000010,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (1)
CreateDynamicObject(669,2296.89990234,-1700.59997559,5.90000010,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (2)
CreateDynamicObject(669,2255.69995117,-1695.40002441,11.10000038,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (3)
CreateDynamicObject(669,2253.89990234,-1687.69995117,11.10000038,0.00000000,0.00000000,0.00000000); //object(sm_veg_tree4) (4)
CreateDynamicObject(1215,2293.50000000,-1727.09997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
CreateDynamicObject(1215,2299.10009766,-1727.09997559,13.00000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
CreateDynamicObject(1215,2293.50000000,-1727.09960938,13.00000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
CreateDynamicObject(1215,2299.09960938,-1727.09960938,13.00000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
CreateDynamicObject(1215,2293.50000000,-1727.09960938,13.00000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
CreateDynamicObject(1215,2299.09960938,-1727.09960938,13.00000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (7)
/*=-=-=-=-=-=-=-=-=-=-=--=--=-=-=-= Quebra Molas -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(19425, 1495.66064, -1732.28186, 12.39090,   0.00000, 0.00000, 270.95059);
CreateDynamicObject(19425, 1495.58936, -1728.97388, 12.39090,   0.00000, 0.00000, 270.95059);
CreateDynamicObject(19425, 1495.71875, -1735.57837, 12.39090,   0.00000, 0.00000, 270.95059);
CreateDynamicObject(19425, 1360.94092, -1264.12573, 12.38570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 1339.35181, -1263.98132, 12.38570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 1342.65833, -1263.98169, 12.38570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 1345.95825, -1263.98413, 12.38570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 1354.42065, -1264.11829, 12.38570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 1357.71155, -1264.11108, 12.38570,   0.00000, 0.00000, 0.00000);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Mecanica de Som =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(11326, 1888.92493, -1842.64600, 14.89244,   0.00000, 0.00000, 179.47714);
CreateDynamicObject(2893, 1872.53552, -1846.41907, 13.74720,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2893, 1870.81055, -1846.40234, 13.74720,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2893, 1870.19165, -1846.40247, 13.74720,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2893, 1873.17566, -1846.41907, 13.74720,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1698, 1870.50659, -1844.89966, 13.59090,   0.00000, 0.00000, 359.89801);
CreateDynamicObject(1698, 1870.51758, -1842.76038, 13.59090,   0.00000, 0.00000, 359.89801);
CreateDynamicObject(1698, 1872.84656, -1844.89966, 13.59090,   0.00000, 0.00000, 359.89801);
CreateDynamicObject(1698, 1872.84253, -1842.79163, 13.59090,   0.00000, 0.00000, 359.89801);
CreateDynamicObject(638, 1869.38062, -1879.20398, 13.06137,   0.00000, 0.00000, 90.11874);
CreateDynamicObject(638, 1871.80139, -1879.18701, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(638, 1874.38428, -1879.17810, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(638, 1876.92712, -1879.16492, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(638, 1879.47144, -1879.15869, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(638, 1882.01379, -1879.14734, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(638, 1884.59424, -1879.14026, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(638, 1886.41504, -1879.13098, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(2229, 1869.40405, -1849.47559, 12.65414,   0.00000, 0.00000, 41.64481);
CreateDynamicObject(983, 1901.66187, -1845.30518, 13.26597,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1901.66187, -1845.30518, 14.51860,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1861.47339, -1833.94409, 13.26597,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1861.47339, -1833.94409, 14.53900,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1411, 1870.50928, -1879.38635, 13.80993,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1411, 1875.67932, -1879.38538, 13.80993,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1411, 1880.87964, -1879.38525, 13.80993,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1411, 1886.06104, -1879.36487, 13.80993,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1887.39978, -1879.12292, 13.06140,   0.00000, 0.00000, 90.11870);
CreateDynamicObject(19362, 1878.61804, -1848.35144, 13.66970,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19362, 1878.64026, -1845.15417, 13.66970,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19362, 1878.64868, -1841.94275, 13.66970,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19362, 1878.46753, -1849.88660, 12.00570,   0.00000, 0.00000, 90.03400);
CreateDynamicObject(19378, 1876.93359, -1845.14307, 8.49530,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1698, 1871.82239, -1843.76416, 13.57090,   0.00000, 0.00000, 269.93689);
CreateDynamicObject(1698, 1871.80176, -1843.78333, 13.00080,   0.00000, 91.00000, 270.00000);
CreateDynamicObject(2232, 1878.56079, -1849.23169, 14.32560,   0.00000, 0.00000, 270.16849);
CreateDynamicObject(2232, 1878.64392, -1847.41638, 14.32560,   0.00000, 0.00000, 270.16849);
CreateDynamicObject(2232, 1878.75549, -1848.35522, 14.02460,   0.00000, 91.00000, 270.00000);
CreateDynamicObject(2232, 1878.73547, -1848.35522, 14.58860,   0.00000, 91.00000, 270.00000);
CreateDynamicObject(2232, 1878.67810, -1845.53711, 14.32560,   0.00000, 0.00000, 270.16849);
CreateDynamicObject(2232, 1878.80652, -1846.49524, 14.02460,   0.00000, 91.00000, 270.00000);
CreateDynamicObject(2232, 1878.80652, -1846.49524, 14.58860,   0.00000, 91.00000, 270.00000);
CreateDynamicObject(2255, 1878.48022, -1846.27563, 15.76553,   0.00000, 0.00000, 270.89444);
CreateDynamicObject(2232, 1878.10254, -1844.46655, 14.02460,   0.00000, -89.00000, 337.83276);
CreateDynamicObject(1698, 1871.90625, -1843.62280, 12.85780,   0.00000, 89.00000, 92.00000);
CreateDynamicObject(14820, 1877.55237, -1846.46399, 13.85763,   0.00000, 0.00000, 73.85606);
CreateDynamicObject(1215, 1879.44580, -1851.22009, 12.56150,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1868.18396, -1851.02222, 12.56150,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1888.81628, -1879.16321, 12.48677,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1001, 1877.88208, -1841.49170, 13.66100,   0.00000, 0.00000, 319.73611);
CreateDynamicObject(1010, 1877.53210, -1842.45654, 13.75752,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1009, 1877.56494, -1842.93066, 13.75758,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1074, 1874.33435, -1840.61304, 15.59500,   0.00000, 0.00000, -91.00000);
CreateDynamicObject(1075, 1873.03271, -1840.63684, 15.56700,   0.00000, 0.00000, -91.00000);
CreateDynamicObject(1077, 1871.67139, -1840.61987, 15.53650,   0.00000, 0.00000, -86.00000);
CreateDynamicObject(1078, 1870.34961, -1840.67517, 15.54620,   0.00000, 0.00000, -88.00000);
CreateDynamicObject(1152, 1868.99475, -1842.10474, 15.40830,   0.00000, 0.00000, 270.54083);
CreateDynamicObject(1152, 1868.80078, -1844.71912, 15.40830,   0.00000, 0.00000, 270.54083);
/*=--=-=-==-=-=-=-=-=-=-=--=-=-=- Favela =-=-=-=-=--==--=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(2357, 2193.50000, -1022.70001, 69.70000,   0.00000, 0.00000, 338.00000);
CreateDynamicObject(3496, 2198.19995, -1036.50000, 69.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3111, 2192.19336, -1022.12744, 70.20000,   0.00000, 0.00000, 338.00000);
CreateDynamicObject(3017, 2195.19995, -1023.40002, 70.10000,   0.00000, 0.00000, 66.00000);
CreateDynamicObject(3031, 2197.00000, -1024.50000, 70.80000,   0.00000, 0.00000, 40.00000);
CreateDynamicObject(2919, 2183.00000, -1031.30005, 70.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2901, 2201.19995, -1030.00000, 69.70000,   0.00000, 0.00000, 330.00000);
CreateDynamicObject(2901, 2200.80005, -1030.69995, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2901, 2200.39990, -1031.40002, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2901, 2200.00000, -1032.09998, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2901, 2198.39990, -1031.30005, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2901, 2198.69995, -1030.59998, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2901, 2199.10010, -1029.90002, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2901, 2199.60010, -1029.09998, 69.70000,   0.00000, 0.00000, 329.99600);
CreateDynamicObject(2894, 2193.30005, -1022.59998, 70.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1503, 2157.30005, -1033.80005, 60.70000,   0.00000, 0.00000, 208.00000);
CreateDynamicObject(3437, 2164.00000, -1014.79999, 60.50000,   0.00000, 90.00000, 350.00000);
CreateDynamicObject(3437, 2168.30005, -1010.79999, 60.50000,   0.00000, 90.00000, 349.99701);
CreateDynamicObject(3437, 2171.64038, -1006.87543, 60.49040,   0.00000, 90.00000, 259.63055);
CreateDynamicObject(3655, 2294.80005, -1036.00000, 52.70000,   0.00000, 0.00000, 183.99899);
CreateDynamicObject(3655, 2292.39990, -1020.90002, 57.50000,   0.00000, 0.00000, 203.99400);
CreateDynamicObject(3655, 2281.30005, -1010.79999, 59.60000,   0.00000, 0.00000, 223.98900);
CreateDynamicObject(3655, 2272.50000, -1002.00000, 61.90000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2263.69995, -992.09998, 62.80000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2253.00000, -984.20001, 65.20000,   0.00000, 0.00000, 235.98599);
CreateDynamicObject(11444, 2225.10010, -1009.20001, 59.30000,   0.00000, 0.00000, 152.00000);
CreateDynamicObject(11444, 2220.69922, -1007.09961, 59.60000,   0.00000, 0.00000, 153.99500);
CreateDynamicObject(3655, 2241.89990, -977.50000, 66.20000,   0.00000, 0.00000, 241.98500);
CreateDynamicObject(3655, 2229.80005, -972.59998, 67.10000,   0.00000, 0.00000, 247.98300);
CreateDynamicObject(3655, 2217.39990, -968.59998, 69.70000,   0.00000, 0.00000, 253.98199);
CreateDynamicObject(3655, 2205.60010, -965.20001, 69.70000,   0.00000, 0.00000, 249.97701);
CreateDynamicObject(3655, 2192.80005, -962.29999, 70.50000,   0.00000, 0.00000, 255.97600);
CreateDynamicObject(3655, 2180.89990, -959.40002, 70.30000,   0.00000, 0.00000, 255.97600);
CreateDynamicObject(3655, 2160.10010, -966.90002, 66.00000,   0.00000, 0.00000, 341.97601);
CreateDynamicObject(3655, 2182.39941, -953.09961, 78.07719,   0.00000, 0.00000, 257.97000);
CreateDynamicObject(3655, 2193.89941, -955.79980, 78.40000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2207.59961, -955.89941, 77.30000,   0.00000, 0.00000, 257.96399);
CreateDynamicObject(3655, 2219.39941, -957.79980, 77.30000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2233.50000, -965.59961, 74.90000,   0.00000, 0.00000, 241.96800);
CreateDynamicObject(3655, 2256.89941, -979.29980, 72.90000,   0.00000, 0.00000, 233.96500);
CreateDynamicObject(342, 2181.10010, -1018.00000, 62.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(342, 2180.60010, -1017.90002, 62.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(342, 2179.89990, -1017.79999, 62.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(342, 2179.19995, -1017.70001, 62.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(348, 2181.10010, -1018.00000, 62.60000,   0.00000, 0.00000, 356.00000);
CreateDynamicObject(348, 2180.50000, -1017.90002, 62.60000,   0.00000, 0.00000, 354.00000);
CreateDynamicObject(2937, 2188.30005, -998.20001, 66.00000,   332.00000, 0.00000, 80.00000);
CreateDynamicObject(1481, 2195.69995, -999.90002, 66.90000,   0.00000, 0.00000, 162.00000);
CreateDynamicObject(1828, 2184.69995, -989.50000, 71.40000,   0.00000, 0.00000, 82.00000);
CreateDynamicObject(2005, 2182.89990, -1018.20001, 62.10000,   0.00000, 359.75000, 171.00000);
CreateDynamicObject(2226, 2190.89990, -1022.20001, 69.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(348, 2179.89990, -1017.79999, 62.60000,   0.00000, 0.00000, 352.00000);
CreateDynamicObject(348, 2179.10010, -1017.70001, 62.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(350, 2181.10010, -1018.00000, 63.20000,   0.00000, 0.00000, 352.00000);
CreateDynamicObject(350, 2180.50000, -1017.90002, 63.20000,   0.00000, 0.00000, 352.00000);
CreateDynamicObject(350, 2179.89990, -1017.79999, 63.20000,   0.00000, 0.00000, 354.00000);
CreateDynamicObject(350, 2179.19995, -1017.70001, 63.20000,   0.00000, 0.00000, 354.00000);
CreateDynamicObject(358, 2181.30005, -1018.09998, 63.80000,   0.00000, 0.00000, 354.00000);
CreateDynamicObject(358, 2179.30005, -1017.70001, 63.80000,   0.00000, 0.00000, 353.99600);
CreateDynamicObject(1531, 2157.19995, -1040.90002, 63.80000,   326.00000, 0.00000, 200.00000);
CreateDynamicObject(1530, 2154.60010, -1033.50000, 63.30000,   0.00000, 0.00000, 198.00000);
CreateDynamicObject(1529, 2155.39990, -1035.90002, 63.00000,   20.00000, 0.00000, 200.00000);
CreateDynamicObject(1528, 2156.30005, -1038.40002, 63.80000,   0.00000, 0.00000, 200.00000);
CreateDynamicObject(1527, 2160.50000, -1047.69995, 59.50000,   0.00000, 0.00000, 214.00000);
CreateDynamicObject(1526, 2158.00000, -1043.09998, 60.30000,   0.00000, 0.00000, 200.00000);
CreateDynamicObject(1525, 2159.39990, -1046.09998, 61.20000,   0.00000, 0.00000, 216.00000);
CreateDynamicObject(1490, 2156.60010, -1039.30005, 60.80000,   350.00000, 0.00000, 200.00000);
CreateDynamicObject(17969, 2164.69995, -1053.69995, 57.50000,   344.00000, 0.00000, 214.00000);
CreateDynamicObject(2714, 2146.69995, -1011.29999, 62.70000,   0.00000, 0.00000, 166.00000);
CreateDynamicObject(3886, 2314.59961, -1091.50000, 48.40000,   270.00000, 179.99500, 79.99700);
CreateDynamicObject(3886, 2332.30005, -1090.40002, 50.10000,   274.00000, 0.00000, 270.00201);
CreateDynamicObject(3886, 2349.69995, -1087.09998, 51.30000,   273.99899, 0.00000, 278.00000);
CreateDynamicObject(3886, 2366.69995, -1083.00000, 52.50000,   273.99899, 0.00000, 281.99799);
CreateDynamicObject(3886, 2398.19995, -1067.69995, 53.50000,   270.50000, 0.00000, 297.99500);
CreateDynamicObject(3886, 2410.89990, -1055.19995, 52.80000,   271.50000, 180.00000, 129.99300);
CreateDynamicObject(3886, 2400.80005, -1063.59998, 52.80000,   271.50000, 179.99500, 309.98999);
CreateDynamicObject(2789, 2418.60010, -1047.69995, 52.20000,   0.00000, 90.00000, 318.00000);
CreateDynamicObject(2789, 2418.60010, -1047.69995, 55.80000,   0.00000, 90.00000, 317.99899);
CreateDynamicObject(2789, 2419.69995, -1048.59998, 52.20000,   0.00000, 90.00000, 317.99899);
CreateDynamicObject(2789, 2419.69995, -1048.59998, 55.80000,   0.00000, 90.00000, 317.99899);
CreateDynamicObject(2789, 2419.60010, -1050.59998, 52.20000,   0.00000, 90.00000, 233.99899);
CreateDynamicObject(2789, 2419.60010, -1050.59998, 55.80000,   0.00000, 90.00000, 233.99800);
CreateDynamicObject(1257, 2337.19995, -1084.80005, 51.50000,   4.00000, 0.00000, 278.00000);
CreateDynamicObject(17969, 2370.39990, -1078.59998, 55.40000,   0.00000, 0.00000, 288.00000);
CreateDynamicObject(4227, 2313.30005, -1088.09998, 49.30000,   0.00000, 6.00000, 180.00000);
CreateDynamicObject(5069, 2346.50000, -1088.50000, 53.90000,   0.00000, 0.00000, 280.00000);
CreateDynamicObject(7934, 2405.19995, -1069.00000, 46.90000,   0.00000, 0.00000, 220.00000);
CreateDynamicObject(1526, 2299.80005, -1086.50000, 49.40000,   0.00000, 0.00000, 260.00000);
CreateDynamicObject(1525, 2289.80005, -1084.40002, 48.20000,   0.00000, 0.00000, 248.00000);
CreateDynamicObject(11444, 2288.50000, -1036.00000, 48.60000,   0.00000, 0.00000, 95.99500);
CreateDynamicObject(11444, 2288.00000, -1031.19995, 50.60000,   0.00000, 0.00000, 101.99300);
CreateDynamicObject(11444, 2285.59961, -1025.59961, 51.40000,   0.00000, 0.00000, 121.98700);
CreateDynamicObject(14840, 2305.30005, -1087.50000, 49.00000,   0.00000, 0.00000, 80.00000);
CreateDynamicObject(3472, 2032.09998, -968.00000, 40.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3472, 2165.39990, -992.90002, 63.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3472, 2206.80005, -1001.20001, 62.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(11444, 2282.50000, -1021.29999, 51.70000,   0.00000, 0.00000, 131.98700);
CreateDynamicObject(11444, 2279.30005, -1017.70001, 52.60000,   0.00000, 0.00000, 131.98399);
CreateDynamicObject(11444, 2275.50000, -1013.79999, 53.70000,   0.00000, 0.00000, 139.98399);
CreateDynamicObject(11444, 2272.19995, -1010.70001, 54.70000,   0.00000, 0.00000, 135.98199);
CreateDynamicObject(11444, 2268.80005, -1007.40002, 55.70000,   0.00000, 0.00000, 135.97800);
CreateDynamicObject(11444, 2265.10010, -1004.00000, 56.70000,   0.00000, 0.00000, 139.97800);
CreateDynamicObject(11444, 2261.69995, -1000.90002, 57.50000,   0.00000, 0.00000, 137.97701);
CreateDynamicObject(11444, 2258.10010, -997.79999, 57.90000,   0.00000, 0.00000, 137.97200);
CreateDynamicObject(11444, 2253.60010, -994.50000, 58.30000,   0.00000, 0.00000, 149.97200);
CreateDynamicObject(11444, 2249.50000, -992.00000, 58.70000,   0.00000, 0.00000, 149.96899);
CreateDynamicObject(11444, 2245.69995, -989.59998, 58.80000,   0.00000, 0.00000, 145.96899);
CreateDynamicObject(11444, 2241.39990, -986.90002, 59.30000,   0.00000, 0.00000, 149.96400);
CreateDynamicObject(11444, 2237.30005, -984.50000, 59.70000,   0.00000, 0.00000, 149.96300);
CreateDynamicObject(11444, 2233.19995, -982.00000, 60.00000,   0.00000, 0.00000, 149.96300);
CreateDynamicObject(11444, 2229.10010, -979.59998, 61.50000,   0.00000, 0.00000, 149.96300);
CreateDynamicObject(11444, 2224.39990, -977.09998, 62.60000,   0.00000, 0.00000, 157.96300);
CreateDynamicObject(11444, 2220.00000, -975.29999, 62.80000,   0.00000, 0.00000, 157.96100);
CreateDynamicObject(11444, 2215.50000, -973.59998, 62.70000,   0.00000, 0.00000, 159.96100);
CreateDynamicObject(11444, 2211.00000, -972.00000, 62.60000,   0.00000, 0.00000, 159.96100);
CreateDynamicObject(11444, 2206.00000, -970.40002, 62.80000,   0.00000, 0.00000, 165.96100);
CreateDynamicObject(11444, 2201.39990, -969.29999, 63.30000,   0.00000, 0.00000, 165.95900);
CreateDynamicObject(11444, 2196.80005, -968.09998, 63.30000,   0.00000, 0.00000, 165.95900);
CreateDynamicObject(11444, 2191.80005, -967.09998, 63.50000,   0.00000, 0.00000, 169.95900);
CreateDynamicObject(11444, 2187.10010, -966.29999, 63.60000,   0.00000, 0.00000, 169.95799);
CreateDynamicObject(11444, 2182.39990, -965.40002, 62.90000,   0.00000, 0.00000, 169.95799);
CreateDynamicObject(11444, 2177.69995, -964.59998, 62.90000,   0.00000, 0.00000, 169.95799);
CreateDynamicObject(11444, 2173.00000, -963.79999, 62.90000,   0.00000, 0.00000, 169.95799);
CreateDynamicObject(3655, 2244.69922, -971.79980, 73.60000,   0.00000, 0.00000, 243.96800);
CreateDynamicObject(14414, 2274.00000, -995.39941, 68.50000,   0.00000, 0.00000, 133.99500);
CreateDynamicObject(3655, 2279.50000, -1001.39941, 67.30000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2269.19922, -988.79980, 69.60000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2291.89941, -1009.29980, 65.60000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2297.00000, -1019.00000, 65.00000,   0.00000, 0.00000, 199.99001);
CreateDynamicObject(3655, 2298.00000, -1035.89941, 60.00000,   0.00000, 0.00000, 183.99400);
CreateDynamicObject(3886, 2383.10010, -1077.00000, 53.70000,   273.99301, 0.00000, 287.99701);
CreateDynamicObject(3655, 2306.80005, -1037.80005, 56.30000,   0.00000, 0.00000, 246.99400);
CreateDynamicObject(3655, 2183.89990, -946.50000, 85.50000,   0.00000, 0.00000, 257.97000);
CreateDynamicObject(3655, 2194.89990, -948.79999, 85.90000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2209.00000, -948.20001, 84.30000,   0.00000, 0.00000, 257.96399);
CreateDynamicObject(3655, 2226.00000, -955.90002, 74.30000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2235.89990, -960.59998, 82.20000,   0.00000, 0.00000, 241.96800);
CreateDynamicObject(3655, 2228.50000, -953.90002, 81.60000,   0.00000, 0.00000, 249.96400);
CreateDynamicObject(14414, 2220.80005, -951.09998, 83.90000,   0.00000, 0.00000, 161.24500);
CreateDynamicObject(3655, 2247.50000, -966.20001, 80.90000,   0.00000, 0.00000, 243.96800);
CreateDynamicObject(3655, 2260.69995, -973.90002, 80.90000,   0.00000, 0.00000, 233.96500);
CreateDynamicObject(3655, 2275.69995, -982.40002, 75.90000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2284.69995, -988.50000, 75.10000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2292.89990, -999.40002, 73.10000,   0.00000, 0.00000, 205.98399);
CreateDynamicObject(3655, 2299.30005, -1009.79999, 72.90000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2300.39990, -1017.50000, 70.30000,   0.00000, 0.00000, 199.99001);
CreateDynamicObject(3655, 2298.00000, -1035.90002, 68.30000,   0.00000, 0.00000, 183.99400);
CreateDynamicObject(3655, 2213.10010, -948.40002, 84.30000,   0.00000, 0.00000, 247.96400);
CreateDynamicObject(3655, 2185.30005, -938.90002, 93.30000,   0.00000, 0.00000, 257.97000);
CreateDynamicObject(3655, 2196.10010, -942.40002, 93.40000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2211.00000, -942.70001, 92.30000,   0.00000, 0.00000, 257.96399);
CreateDynamicObject(3655, 2231.89990, -944.09998, 89.10000,   0.00000, 0.00000, 249.96100);
CreateDynamicObject(3655, 2237.10010, -949.59998, 89.70000,   0.00000, 0.00000, 241.96800);
CreateDynamicObject(3655, 2250.30005, -960.59998, 88.40000,   0.00000, 0.00000, 243.96800);
CreateDynamicObject(3655, 2264.00000, -969.20001, 88.70000,   0.00000, 0.00000, 233.96500);
CreateDynamicObject(3655, 2279.60010, -978.90002, 83.20000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(14414, 2244.10010, -953.50000, 88.80000,   0.00000, 0.00000, 153.24100);
CreateDynamicObject(3655, 2288.50000, -985.59998, 81.60000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2299.39990, -996.20001, 80.40000,   0.00000, 0.00000, 205.98300);
CreateDynamicObject(3655, 2303.80005, -1007.00000, 80.20000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2319.80005, -1037.19995, 55.30000,   0.00000, 0.00000, 288.98901);
CreateDynamicObject(3655, 2328.10010, -1033.19995, 55.30000,   0.00000, 0.00000, 300.98401);
CreateDynamicObject(3655, 2311.19995, -1031.90002, 62.00000,   0.00000, 0.00000, 288.98401);
CreateDynamicObject(3655, 2311.89990, -1041.69995, 54.00000,   0.00000, 0.00000, 268.98401);
CreateDynamicObject(3655, 2322.60010, -1025.59998, 63.30000,   0.00000, 0.00000, 300.98099);
CreateDynamicObject(3655, 2309.69995, -1028.40002, 69.50000,   0.00000, 0.00000, 288.98401);
CreateDynamicObject(3655, 2332.89990, -1022.20001, 56.80000,   0.00000, 0.00000, 332.98099);
CreateDynamicObject(3655, 2319.80005, -1021.70001, 71.10000,   0.00000, 0.00000, 300.98099);
CreateDynamicObject(3655, 2317.89990, -1018.50000, 77.90000,   0.00000, 0.00000, 300.98099);
CreateDynamicObject(3655, 2313.80005, -1014.59998, 76.90000,   0.00000, 0.00000, 220.98100);
CreateDynamicObject(3655, 2172.30005, -947.20001, 76.30000,   0.00000, 0.00000, 203.97000);
CreateDynamicObject(3655, 2166.69995, -937.70001, 78.80000,   0.00000, 0.00000, 197.96700);
CreateDynamicObject(3655, 2165.50000, -927.59998, 81.10000,   0.00000, 0.00000, 169.96300);
CreateDynamicObject(3655, 2170.00000, -928.29999, 88.40000,   0.00000, 0.00000, 169.95799);
CreateDynamicObject(3655, 2178.39990, -932.09998, 93.20000,   0.00000, 0.00000, 211.95799);
CreateDynamicObject(3655, 2170.39990, -936.29999, 85.80000,   0.00000, 0.00000, 197.96300);
CreateDynamicObject(3655, 2178.00000, -944.59998, 83.80000,   0.00000, 0.00000, 203.96700);
CreateDynamicObject(3655, 2263.60010, -980.00000, 70.20000,   0.00000, 0.00000, 227.96500);
CreateDynamicObject(3655, 2268.19995, -974.70001, 78.40000,   0.00000, 0.00000, 227.96100);
CreateDynamicObject(3655, 2253.39990, -970.29999, 73.60000,   0.00000, 0.00000, 233.96800);
CreateDynamicObject(3655, 2255.39990, -966.00000, 79.10000,   0.00000, 0.00000, 233.96500);
CreateDynamicObject(3655, 2200.10010, -946.70001, 78.40000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2200.69995, -942.70001, 83.70000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2317.89990, -1018.50000, 69.20000,   0.00000, 0.00000, 300.98099);
CreateDynamicObject(3655, 2320.50000, -1012.40002, 61.90000,   0.00000, 0.00000, 300.98099);
CreateDynamicObject(3655, 2313.80005, -1014.59998, 70.20000,   0.00000, 0.00000, 220.97900);
CreateDynamicObject(3655, 2299.30005, -1009.79999, 64.70000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2299.30005, -1009.79999, 56.40000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2304.00000, -1007.59998, 64.70000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2292.89990, -999.40002, 64.60000,   0.00000, 0.00000, 205.98300);
CreateDynamicObject(3655, 2288.50000, -985.59998, 73.40000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2288.50000, -985.59998, 65.40000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2299.39990, -996.20001, 72.20000,   0.00000, 0.00000, 205.98300);
CreateDynamicObject(3655, 2299.39990, -996.20001, 63.40000,   0.00000, 0.00000, 205.98300);
CreateDynamicObject(3655, 2303.10010, -1007.20001, 72.90000,   0.00000, 0.00000, 207.98801);
CreateDynamicObject(3655, 2279.60010, -978.90002, 74.70000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2279.60010, -978.90002, 66.20000,   0.00000, 0.00000, 223.98399);
CreateDynamicObject(3655, 2268.19995, -974.70001, 69.90000,   0.00000, 0.00000, 227.96100);
CreateDynamicObject(3655, 2264.00000, -969.20001, 80.40000,   0.00000, 0.00000, 233.96500);
CreateDynamicObject(3655, 2264.00000, -969.20001, 72.70000,   0.00000, 0.00000, 233.96500);
CreateDynamicObject(3655, 2250.30005, -960.59998, 79.70000,   0.00000, 0.00000, 243.96800);
CreateDynamicObject(3655, 2250.30005, -960.59998, 71.20000,   0.00000, 0.00000, 243.96800);
CreateDynamicObject(3655, 2237.10010, -949.59998, 81.20000,   0.00000, 0.00000, 241.96800);
CreateDynamicObject(3655, 2237.10010, -949.59998, 72.20000,   0.00000, 0.00000, 241.96800);
CreateDynamicObject(3655, 2231.89990, -944.09998, 80.10000,   0.00000, 0.00000, 249.96100);
CreateDynamicObject(3655, 2231.89990, -944.09998, 71.60000,   0.00000, 0.00000, 249.96100);
CreateDynamicObject(3655, 2211.00000, -942.70001, 83.60000,   0.00000, 0.00000, 257.96399);
CreateDynamicObject(3655, 2211.00000, -942.70001, 74.90000,   0.00000, 0.00000, 257.96399);
CreateDynamicObject(3655, 2213.10010, -948.40002, 75.80000,   0.00000, 0.00000, 247.96100);
CreateDynamicObject(3655, 2196.80005, -938.20001, 85.70000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2197.19995, -936.20001, 76.90000,   0.00000, 0.00000, 259.96399);
CreateDynamicObject(3655, 2185.30005, -938.90002, 80.30000,   0.00000, 0.00000, 257.97000);
CreateDynamicObject(3655, 2183.80005, -941.20001, 88.30000,   0.00000, 0.00000, 257.97000);
CreateDynamicObject(3655, 2175.19995, -928.29999, 79.70000,   0.00000, 0.00000, 211.95399);
CreateDynamicObject(3655, 2177.00000, -931.59998, 86.70000,   0.00000, 0.00000, 211.95399);
CreateDynamicObject(2232, 2159.55518, -994.31207, 62.43980,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2161.54102, -994.54340, 63.59400,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2157.70166, -993.96686, 63.58980,   0.04000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2160.18408, -994.36652, 63.58980,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2158.95435, -994.20471, 62.50960,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2158.35400, -994.14252, 62.50960,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2157.69946, -993.99463, 62.50960,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2159.55518, -994.31207, 63.58980,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2158.96216, -994.20551, 63.58980,   0.04000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2158.35815, -994.08069, 63.58980,   0.04000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2160.19824, -994.35065, 62.50960,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2160.86694, -994.43652, 63.58670,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2160.86694, -994.43646, 62.50960,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2162.11572, -994.68549, 63.60920,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2161.51831, -994.56036, 62.44960,   0.00000, 0.00000, 352.25839);
CreateDynamicObject(2232, 2164.12036, -995.08398, 63.62270,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2162.11572, -994.68549, 62.46960,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2162.76294, -994.81427, 63.60670,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2163.43164, -994.95300, 63.61180,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2162.76294, -994.81427, 62.42960,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2163.43164, -994.95300, 62.44960,   0.00000, 0.00000, 349.31982);
CreateDynamicObject(2232, 2164.72876, -995.22028, 63.61400,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2164.12036, -995.08398, 62.46960,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2165.38208, -995.31091, 63.60270,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2164.76514, -995.19995, 62.40960,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2165.40186, -995.31451, 62.40960,   0.00000, 0.00000, 349.31979);
CreateDynamicObject(2232, 2166.08228, -995.46179, 63.58680,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2166.75220, -995.56201, 63.60980,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2166.10205, -995.46539, 62.40960,   0.00000, 0.00000, 349.11877);
CreateDynamicObject(2232, 2167.38135, -995.68762, 63.62880,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2166.77466, -995.58539, 62.42960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2168.07373, -995.83990, 63.62470,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2167.38135, -995.68762, 62.44960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2168.76733, -995.96942, 63.61600,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2168.07373, -995.83990, 62.46960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2169.46313, -996.10822, 63.61700,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2168.76733, -995.96942, 62.46960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2170.15527, -996.24261, 63.61970,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2169.46313, -996.10822, 62.46960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2170.82983, -996.36011, 63.61180,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2170.15527, -996.24255, 62.46960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2171.49170, -996.48438, 63.62170,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2170.82983, -996.36011, 62.46960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(2232, 2171.49170, -996.48444, 62.46960,   0.00000, 0.00000, 349.11880);
CreateDynamicObject(18653, 2167.95190, -994.97412, 62.52450,   0.00000, 0.00000, 85.52500);
CreateDynamicObject(18655, 2169.87402, -995.31769, 62.52450,   0.00000, 0.00000, 80.52125);
CreateDynamicObject(18653, 2158.98291, -993.55188, 62.52450,   0.00000, 0.00000, 85.52500);
CreateDynamicObject(18655, 2161.35522, -993.96637, 62.52452,   0.00000, 0.00000, 85.32125);
CreateDynamicObject(18655, 2165.63818, -994.64618, 62.52450,   0.00000, 0.00000, 85.32130);
CreateDynamicObject(18653, 2163.42212, -994.25580, 62.52450,   0.00000, 0.00000, 85.52500);
CreateDynamicObject(3437, 2159.00000, -1009.20001, 60.50000,   0.00000, 90.00000, 349.99701);
CreateDynamicObject(3437, 2158.78198, -1004.82001, 60.49040,   0.00000, 90.00000, 259.63055);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Condominio =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-==-=*/
CreateDynamicObject(5191,2934.79980469,-1963.29980469,4.30000019,0.00000000,0.00000000,269.75000000); //object(nwdkbridd_las2) (1)
CreateDynamicObject(4585,3012.59960938,-1964.09960938,-89.80000305,0.00000000,0.00000000,0.00000000); //object(towerlan2) (4)
CreateDynamicObject(4585,3052.59960938,-1964.19921875,-89.80000305,0.00000000,0.00000000,0.00000000); //object(towerlan2) (5)
CreateDynamicObject(4585,3012.10009766,-1925.80004883,-94.00000000,0.00000000,0.00000000,0.00000000); //object(towerlan2) (6)
CreateDynamicObject(4585,3090.80004883,-1964.30004883,-94.00000000,0.00000000,0.00000000,0.00000000); //object(towerlan2) (7)
CreateDynamicObject(4585,3013.30004883,-2003.69995117,-94.00000000,0.00000000,0.00000000,0.00000000); //object(towerlan2) (8)
CreateDynamicObject(3607,3012.89990234,-1916.90002441,11.80000019,0.00000000,0.00000000,0.00000000); //object(bevman2_law2) (1)
CreateDynamicObject(3605,3096.80004883,-1966.30004883,11.89999962,0.00000000,0.00000000,270.00000000); //object(bevman3_law2) (1)
CreateDynamicObject(3607,3010.69995117,-2012.59997559,11.89999962,0.00000000,0.00000000,179.50000000); //object(bevman2_law2) (2)
CreateDynamicObject(3361,3020.30004883,-1939.69995117,8.00000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodstair) (1)
CreateDynamicObject(3361,3021.50000000,-1988.59997559,7.90000010,0.00000000,0.00000000,358.75000000); //object(cxref_woodstair) (2)
CreateDynamicObject(3361,3073.30004883,-1966.40002441,8.00000000,0.00000000,0.00000000,269.74755859); //object(cxref_woodstair) (3)
CreateDynamicObject(4585,3056.30004883,-2004.50000000,-94.00000000,0.00000000,0.00000000,0.00000000); //object(towerlan2) (8)
CreateDynamicObject(4585,3055.30004883,-1923.80004883,-94.00000000,0.00000000,0.00000000,0.00000000); //object(towerlan2) (6)
CreateDynamicObject(3607,3056.30004883,-1916.69995117,11.80000019,0.00000000,0.00000000,0.00000000); //object(bevman2_law2) (3)
CreateDynamicObject(3607,3055.80004883,-2013.09997559,11.89999962,0.00000000,0.00000000,179.49462891); //object(bevman2_law2) (4)
CreateDynamicObject(3361,3053.00000000,-1939.69995117,8.00000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodstair) (4)
CreateDynamicObject(3361,3048.80004883,-1988.69995117,7.90000010,0.00000000,0.00000000,358.74755859); //object(cxref_woodstair) (5)
CreateDynamicObject(619,2998.60009766,-1953.09997559,8.60000038,0.00000000,0.00000000,52.00000000); //object(veg_palwee03) (1)
CreateDynamicObject(619,2997.80004883,-1974.30004883,8.80000019,0.00000000,0.00000000,236.00000000); //object(veg_palwee03) (2)
CreateDynamicObject(8324,2891.60009766,-1963.30004883,20.70000076,0.00000000,0.00000000,271.25000000); //object(vgsbboardsigns10) (1)
CreateDynamicObject(3499,2890.60009766,-1972.00000000,18.20000076,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (1)
CreateDynamicObject(3499,2890.60009766,-1972.00000000,7.80000019,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (2)
CreateDynamicObject(3499,2891.30004883,-1954.59997559,7.80000019,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (3)
CreateDynamicObject(3499,2891.30004883,-1954.59997559,18.70000076,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (4)
CreateDynamicObject(3499,2891.19995117,-1959.69995117,24.20000076,90.00000000,180.00000000,180.00000000); //object(wdpillar02_lvs) (5)
CreateDynamicObject(3499,2891.30004883,-1966.90002441,24.20000076,90.00000000,179.99450684,179.99450684); //object(wdpillar02_lvs) (6)
CreateDynamicObject(3499,2891.30004883,-1966.90002441,18.79999924,90.00000000,179.99450684,179.99450684); //object(wdpillar02_lvs) (7)
CreateDynamicObject(3499,2891.39990234,-1959.40002441,18.79999924,90.00000000,179.99450684,179.99450684); //object(wdpillar02_lvs) (8)
CreateDynamicObject(3437,2995.19995117,-1955.09997559,15.60000038,0.00000000,0.00000000,0.00000000); //object(ballypllr01_lvs) (1)
CreateDynamicObject(3437,2994.80004883,-1972.19995117,15.60000038,0.00000000,0.00000000,0.00000000); //object(ballypllr01_lvs) (2)
CreateDynamicObject(3437,2991.60009766,-1973.69995117,15.60000038,358.00000000,0.00000000,92.25000000); //object(ballypllr01_lvs) (3)
CreateDynamicObject(3437,2992.00000000,-1953.90002441,15.69999981,357.99499512,0.00000000,92.24670410); //object(ballypllr01_lvs) (4)
CreateDynamicObject(3437,2997.10009766,-1973.59997559,15.60000038,0.00000000,0.00000000,269.99996948); //object(ballypllr01_lvs) (5)
CreateDynamicObject(3437,2997.50000000,-1953.69995117,15.60000038,0.00000000,0.00000000,269.99450684); //object(ballypllr01_lvs) (6)
CreateDynamicObject(3437,2887.89990234,-1973.40002441,15.80000019,3.50000000,0.00000000,269.99450684); //object(ballypllr01_lvs) (8)
CreateDynamicObject(3437,2888.30004883,-1953.19995117,15.80000019,3.49914551,0.00000000,269.98901367); //object(ballypllr01_lvs) (9)
CreateDynamicObject(3440,2891.10009766,-1956.40002441,21.50000000,0.00000000,0.00000000,0.00000000); //object(arptpillar01_lvs) (1)
CreateDynamicObject(3440,2891.19995117,-1960.09997559,21.50000000,0.00000000,0.00000000,0.00000000); //object(arptpillar01_lvs) (2)
CreateDynamicObject(3440,2891.19995117,-1963.80004883,21.50000000,0.00000000,0.00000000,0.00000000); //object(arptpillar01_lvs) (3)
CreateDynamicObject(3440,2891.19995117,-1967.40002441,21.50000000,0.00000000,0.00000000,0.00000000); //object(arptpillar01_lvs) (4)
CreateDynamicObject(3440,2891.19995117,-1971.00000000,21.50000000,0.00000000,0.00000000,0.00000000); //object(arptpillar01_lvs) (5)
CreateDynamicObject(3440,2891.10009766,-1969.09997559,21.50000000,90.00000000,179.99987793,180.00012207); //object(arptpillar01_lvs) (6)
CreateDynamicObject(3440,2891.10009766,-1964.30004883,21.50000000,90.00000000,179.99450684,180.00000000); //object(arptpillar01_lvs) (7)
CreateDynamicObject(3440,2891.10009766,-1959.59997559,21.50000000,90.00000000,179.99450684,180.00000000); //object(arptpillar01_lvs) (8)
CreateDynamicObject(3440,2891.10009766,-1956.50000000,21.50000000,90.00000000,179.99450684,180.00000000); //object(arptpillar01_lvs) (9)
CreateDynamicObject(1597,3003.50000000,-1998.69995117,8.30000019,0.00000000,0.00000000,269.99996948); //object(cntrlrsac1) (1)
CreateDynamicObject(1597,3019.39990234,-1998.69995117,8.30000019,0.00000000,0.00000000,269.99450684); //object(cntrlrsac1) (2)
CreateDynamicObject(1597,3048.19995117,-1998.59997559,8.30000019,0.00000000,0.00000000,269.99450684); //object(cntrlrsac1) (3)
CreateDynamicObject(1597,3065.30004883,-1998.80004883,8.30000019,0.00000000,0.00000000,269.99450684); //object(cntrlrsac1) (4)
CreateDynamicObject(1597,3083.19995117,-1973.69995117,8.30000019,0.00000000,0.00000000,1.99450684); //object(cntrlrsac1) (5)
CreateDynamicObject(1597,3083.10009766,-1956.59997559,8.30000019,0.00000000,0.00000000,1.99401855); //object(cntrlrsac1) (6)
CreateDynamicObject(1597,3064.00000000,-1930.40002441,8.30000019,0.00000000,0.00000000,89.99401855); //object(cntrlrsac1) (7)
CreateDynamicObject(1597,3047.00000000,-1930.50000000,8.30000019,0.00000000,0.00000000,89.98901367); //object(cntrlrsac1) (8)
CreateDynamicObject(1597,3020.10009766,-1930.80004883,8.30000019,0.00000000,0.00000000,89.98901367); //object(cntrlrsac1) (9)
CreateDynamicObject(1597,3003.69995117,-1930.69995117,8.30000019,0.00000000,0.00000000,89.98901367); //object(cntrlrsac1) (10)
CreateDynamicObject(3439,3009.10009766,-1998.59997559,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (1)
CreateDynamicObject(3439,3014.30004883,-1998.80004883,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (2)
CreateDynamicObject(3439,3054.00000000,-1998.80004883,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (3)
CreateDynamicObject(3439,3059.60009766,-1998.90002441,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (4)
CreateDynamicObject(3439,3082.69995117,-1968.19995117,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (5)
CreateDynamicObject(3439,3082.50000000,-1962.50000000,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (6)
CreateDynamicObject(3439,3058.00000000,-1930.50000000,8.19999981,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (7)
CreateDynamicObject(3439,3052.60009766,-1930.50000000,8.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (8)
CreateDynamicObject(3439,3014.60009766,-1930.80004883,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (9)
CreateDynamicObject(3439,3009.19995117,-1930.69995117,10.00000000,0.00000000,0.00000000,0.00000000); //object(aprtree01_lvs) (10)
CreateDynamicObject(1290,2916.19995117,-1969.19995117,15.80000019,0.00000000,0.00000000,276.00000000); //object(lamppost2) (1)
CreateDynamicObject(1290,2957.50000000,-1956.80004883,15.80000019,0.00000000,0.00000000,275.99853516); //object(lamppost2) (2)
CreateDynamicObject(1290,2906.50000000,-1957.09997559,15.80000019,0.00000000,0.00000000,275.99853516); //object(lamppost2) (3)
CreateDynamicObject(1290,2942.50000000,-1969.50000000,15.80000019,0.00000000,0.00000000,275.99853516); //object(lamppost2) (4)
CreateDynamicObject(1290,2979.39990234,-1969.40002441,15.80000019,0.00000000,0.00000000,275.99853516); //object(lamppost2) (5)
CreateDynamicObject(3660,3005.19995117,-1941.80004883,12.69999981,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (1)
CreateDynamicObject(3660,3028.00000000,-1941.69995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (4)
CreateDynamicObject(3660,3062.19995117,-1941.69995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (6)
CreateDynamicObject(3660,3037.39990234,-1941.69995117,12.69999981,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (7)
CreateDynamicObject(3660,3071.39990234,-1950.90002441,12.69999981,0.00000000,0.00000000,270.50000000); //object(lasairfbed_las) (8)
CreateDynamicObject(3660,3071.60009766,-1974.30004883,12.69999981,0.00000000,0.00000000,270.49987793); //object(lasairfbed_las) (9)
CreateDynamicObject(3660,3058.69995117,-1985.90002441,12.69999981,0.00000000,0.00000000,358.24987793); //object(lasairfbed_las) (10)
CreateDynamicObject(3660,3031.60009766,-1985.19995117,12.69999981,0.00000000,0.00000000,358.24768066); //object(lasairfbed_las) (11)
CreateDynamicObject(3660,3004.69995117,-1984.40002441,12.69999981,0.00000000,0.00000000,358.24768066); //object(lasairfbed_las) (12)
CreateDynamicObject(3660,3031.60009766,-1985.19995117,11.50000000,0.00000000,0.00000000,358.24768066); //object(lasairfbed_las) (13)
CreateDynamicObject(3660,3031.60009766,-1985.19995117,10.50000000,0.00000000,0.00000000,358.24768066); //object(lasairfbed_las) (14)
CreateDynamicObject(3660,3031.60009766,-1985.19995117,9.39999962,0.00000000,0.00000000,358.24768066); //object(lasairfbed_las) (15)
CreateDynamicObject(3660,3031.60009766,-1985.19995117,8.19999981,0.00000000,0.00000000,358.24768066); //object(lasairfbed_las) (16)
CreateDynamicObject(3660,3037.39990234,-1941.69995117,11.50000000,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (17)
CreateDynamicObject(3660,3037.39990234,-1941.69995117,10.39999962,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (18)
CreateDynamicObject(3660,3037.39990234,-1941.69995117,9.19999981,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (19)
CreateDynamicObject(3660,3037.39990234,-1941.69995117,8.00000000,0.00000000,0.00000000,0.00000000); //object(lasairfbed_las) (20)
CreateDynamicObject(1215,3069.80004883,-1978.50000000,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
CreateDynamicObject(1215,3013.00000000,-1984.09997559,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
CreateDynamicObject(1215,3049.69995117,-1985.50000000,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
CreateDynamicObject(1215,3070.69995117,-1973.09997559,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
CreateDynamicObject(1215,3070.39990234,-1951.80004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
CreateDynamicObject(1215,3060.30004883,-1942.30004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
CreateDynamicObject(1215,3037.19995117,-1942.50000000,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (7)
CreateDynamicObject(1215,3023.39990234,-1942.80004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (8)
CreateDynamicObject(1215,3011.50000000,-1942.40002441,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (9)
CreateDynamicObject(1215,3001.10009766,-1942.80004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (10)
CreateDynamicObject(1215,3070.30004883,-1942.69995117,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (11)
CreateDynamicObject(1215,3070.50000000,-1960.19995117,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (12)
CreateDynamicObject(1215,3070.69995117,-1965.00000000,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (13)
CreateDynamicObject(1215,3070.69995117,-1981.69995117,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (14)
CreateDynamicObject(1215,3067.69995117,-1985.90002441,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (15)
CreateDynamicObject(1215,3039.89990234,-1985.30004883,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (16)
CreateDynamicObject(1215,3022.50000000,-1984.59997559,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (17)
CreateDynamicObject(1215,2996.19995117,-1984.00000000,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (18)
CreateDynamicObject(7191,3085.39990234,-1942.00000000,6.40000010,0.00000000,0.00000000,89.50000000); //object(vegasnnewfence2b) (1)
CreateDynamicObject(7191,3075.10009766,-1919.30004883,6.09999990,0.00000000,0.00000000,359.99465942); //object(vegasnnewfence2b) (2)
CreateDynamicObject(7191,3033.19995117,-1918.30004883,6.09999990,0.00000000,0.00000000,1.99450684); //object(vegasnnewfence2b) (3)
CreateDynamicObject(7191,3033.60009766,-1924.30004883,5.80000019,0.00109863,89.74975586,1.24453735); //object(vegasnnewfence2b) (4)
CreateDynamicObject(7191,2993.50000000,-1935.50000000,6.09999990,0.00000000,0.00000000,359.49401855); //object(vegasnnewfence2b) (5)
CreateDynamicObject(7191,3086.00000000,-1985.40002441,6.40000010,0.00000000,0.00000000,89.49462891); //object(vegasnnewfence2b) (6)
CreateDynamicObject(7191,3076.00000000,-2008.00000000,6.40000010,0.00000000,0.00000000,179.49462891); //object(vegasnnewfence2b) (7)
CreateDynamicObject(7191,3034.10009766,-2006.69995117,6.40000010,0.00000000,0.00000000,179.48913574); //object(vegasnnewfence2b) (8)
CreateDynamicObject(7191,3034.60009766,-2006.69995117,5.90000010,0.00000000,89.00000000,180.48913574); //object(vegasnnewfence2b) (9)
CreateDynamicObject(7191,2993.50000000,-2004.09997559,5.69999981,0.00000000,0.00000000,179.98913574); //object(vegasnnewfence2b) (10)
CreateDynamicObject(7191,3034.69995117,-2022.50000000,-17.00000000,273.51419067,85.92489624,356.40640259); //object(vegasnnewfence2b) (11)
CreateDynamicObject(3578,3022.30004883,-1947.69995117,9.30000019,0.00000000,0.00000000,246.00000000); //object(dockbarr1_la) (1)
CreateDynamicObject(3578,3029.19995117,-1947.59997559,9.30000019,0.00000000,0.00000000,239.99487305); //object(dockbarr1_la) (2)
CreateDynamicObject(3578,3037.10009766,-1947.00000000,9.30000019,0.00000000,0.00000000,237.99084473); //object(dockbarr1_la) (3)
CreateDynamicObject(3578,3043.50000000,-1946.19995117,9.30000019,0.00000000,0.00000000,231.98583984); //object(dockbarr1_la) (4)
CreateDynamicObject(3578,3025.39990234,-1952.09997559,9.30000019,0.00000000,0.00000000,181.99487305); //object(dockbarr1_la) (6)
CreateDynamicObject(3578,3035.39990234,-1951.09997559,9.30000019,0.00000000,0.00000000,189.74401855); //object(dockbarr1_la) (7)
CreateDynamicObject(3578,3054.00000000,-1947.09997559,9.30000019,0.00000000,0.00000000,237.98583984); //object(dockbarr1_la) (8)
CreateDynamicObject(3578,3060.19995117,-1947.09997559,9.30000019,0.00000000,0.00000000,237.98583984); //object(dockbarr1_la) (9)
CreateDynamicObject(3578,3067.00000000,-1946.90002441,9.30000019,0.00000000,0.00000000,237.98583984); //object(dockbarr1_la) (10)
CreateDynamicObject(3578,3059.60009766,-1951.30004883,9.30000019,0.00000000,0.00000000,181.98583984); //object(dockbarr1_la) (11)
CreateDynamicObject(3578,3056.19995117,-1951.40002441,9.30000019,0.00000000,0.00000000,181.98303223); //object(dockbarr1_la) (12)
CreateDynamicObject(3578,3065.80004883,-1969.09997559,9.30000019,0.00000000,0.00000000,159.98303223); //object(dockbarr1_la) (13)
CreateDynamicObject(3578,3066.00000000,-1977.09997559,9.30000019,0.00000000,0.00000000,159.98291016); //object(dockbarr1_la) (14)
CreateDynamicObject(3578,3037.89990234,-1980.59997559,9.30000019,0.00000000,0.00000000,59.98031616); //object(dockbarr1_la) (16)
CreateDynamicObject(3578,3031.39990234,-1979.90002441,9.30000019,0.00000000,0.00000000,59.97985840); //object(dockbarr1_la) (17)
CreateDynamicObject(3578,3025.39990234,-1979.59997559,9.30000019,0.00000000,0.00000000,58.47985840); //object(dockbarr1_la) (18)
CreateDynamicObject(3578,3013.50000000,-1980.30004883,9.30000019,0.00000000,0.00000000,58.47473145); //object(dockbarr1_la) (19)
CreateDynamicObject(3578,3008.00000000,-1980.19995117,9.30000019,0.00000000,0.00000000,53.47473145); //object(dockbarr1_la) (20)
CreateDynamicObject(3578,3003.00000000,-1980.00000000,9.30000019,0.00000000,0.00000000,51.47045898); //object(dockbarr1_la) (21)
CreateDynamicObject(3578,2997.69995117,-1979.69995117,9.30000019,0.00000000,0.00000000,51.46545410); //object(dockbarr1_la) (22)
CreateDynamicObject(3578,3061.10009766,-1972.69995117,9.30000019,0.00000000,0.00000000,89.48291016); //object(dockbarr1_la) (23)
CreateDynamicObject(3578,3035.50000000,-1975.90002441,9.30000019,0.00000000,0.00000000,355.22302246); //object(dockbarr1_la) (25)
CreateDynamicObject(3578,3032.80004883,-1975.69995117,9.30000019,0.00000000,0.00000000,355.22094727); //object(dockbarr1_la) (26)
CreateDynamicObject(3578,3011.39990234,-1976.00000000,9.30000019,0.00000000,0.00000000,359.22094727); //object(dockbarr1_la) (27)
CreateDynamicObject(3578,3001.80004883,-1975.80004883,9.30000019,0.00000000,0.00000000,359.21997070); //object(dockbarr1_la) (28)
CreateDynamicObject(3578,3029.10009766,-1943.09997559,9.30000019,0.00000000,0.00000000,180.74401855); //object(dockbarr1_la) (29)
CreateDynamicObject(3578,3039.19995117,-1943.00000000,9.30000019,0.00000000,0.00000000,180.74157715); //object(dockbarr1_la) (30)
CreateDynamicObject(3578,3061.39990234,-1943.09997559,9.30000019,0.00000000,0.00000000,180.74157715); //object(dockbarr1_la) (31)
CreateDynamicObject(3578,3066.80004883,-1943.09997559,9.30000019,0.00000000,0.00000000,180.74157715); //object(dockbarr1_la) (32)
CreateDynamicObject(3578,3070.00000000,-1975.09997559,9.30000019,0.00000000,0.00000000,89.47814941); //object(dockbarr1_la) (33)
CreateDynamicObject(3578,3069.89990234,-1981.19995117,9.30000019,0.00000000,0.00000000,89.47814941); //object(dockbarr1_la) (36)
CreateDynamicObject(3578,3064.89990234,-1984.19995117,9.30000019,0.00000000,0.00000000,333.47351074); //object(dockbarr1_la) (37)
CreateDynamicObject(3578,3059.10009766,-1982.40002441,9.30000019,0.00000000,0.00000000,67.47814941); //object(dockbarr1_la) (38)
CreateDynamicObject(970,3069.39990234,-1984.69995117,10.60000038,0.00000000,0.00000000,217.50001526); //object(fencesmallb) (1)
CreateDynamicObject(970,2995.19995117,-1977.69995117,10.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (2)
CreateDynamicObject(970,2995.50000000,-1945.00000000,10.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (3)
CreateDynamicObject(970,2995.60009766,-1950.90002441,10.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (4)
CreateDynamicObject(970,2995.39990234,-1947.90002441,10.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (5)
CreateDynamicObject(997,3110.30004883,-1957.30004883,6.59999990,0.00000000,0.00000000,269.50000000); //object(lhouse_barrier3) (1)
CreateDynamicObject(997,3110.30004883,-1970.00000000,6.59999990,0.00000000,0.00000000,269.49462891); //object(lhouse_barrier3) (2)
CreateDynamicObject(970,2995.19921875,-1981.39941406,10.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (6)
CreateDynamicObject(2395,3031.30004883,-1945.90002441,9.89999962,274.25003052,0.00000000,0.00000000); //object(cj_sports_wall) (1)
CreateDynamicObject(970,3032.50000000,-2014.80004883,6.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (7)
CreateDynamicObject(970,3035.69995117,-2014.90002441,6.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (8)
CreateDynamicObject(970,3034.50000000,-1914.50000000,6.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (9)
CreateDynamicObject(970,3033.00000000,-1914.50000000,6.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (10)
CreateDynamicObject(970,3033.00000000,-1914.50000000,7.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (11)
CreateDynamicObject(970,3034.50000000,-1914.50000000,7.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (13)
CreateDynamicObject(970,3032.50000000,-2014.80004883,7.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (14)
CreateDynamicObject(970,3035.69995117,-2014.90002441,7.40000010,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (15)
CreateDynamicObject(970,2995.19995117,-1981.40002441,11.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (16)
CreateDynamicObject(970,2995.19995117,-1977.69995117,11.60000038,0.00000000,0.00000000,270.49987793); //object(fencesmallb) (17)
CreateDynamicObject(970,3098.80004883,-1944.40002441,6.40000010,0.00000000,0.00000000,268.24987793); //object(fencesmallb) (18)
CreateDynamicObject(970,3098.60009766,-1984.90002441,5.69999981,0.00000000,270.00000000,270.24768066); //object(fencesmallb) (19)
CreateDynamicObject(970,2995.00000000,-2017.90002441,7.19999981,0.00000000,0.00000000,180.49987793); //object(fencesmallb) (20)
CreateDynamicObject(3115,3012.50000000,-1902.00000000,5.59999990,0.00000000,0.00000000,270.00000000); //object(carrier_lift1_sfse) (1)
CreateDynamicObject(3115,3055.30004883,-1901.80004883,5.59999990,0.00000000,0.00000000,269.99450684); //object(carrier_lift1_sfse) (2)
CreateDynamicObject(3115,3111.50000000,-1965.30004883,5.59999990,0.00000000,0.00000000,178.74450684); //object(carrier_lift1_sfse) (3)
CreateDynamicObject(3115,3056.50000000,-2028.00000000,5.59999990,0.00000000,0.00000000,90.74206543); //object(carrier_lift1_sfse) (4)
CreateDynamicObject(3115,3011.19995117,-2027.59997559,5.59999990,0.00000000,0.00000000,90.74157715); //object(carrier_lift1_sfse) (5)
CreateDynamicObject(7191,3034.69995117,-2022.50000000,-59.59999847,273.51013184,85.92407227,356.40197754); //object(vegasnnewfence2b) (12)
CreateDynamicObject(997,3004.10009766,-1903.30004883,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (3)
CreateDynamicObject(997,3016.50000000,-1903.19995117,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (4)
CreateDynamicObject(997,3047.50000000,-1902.90002441,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (5)
CreateDynamicObject(997,3059.80004883,-1902.80004883,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (6)
CreateDynamicObject(997,3061.39990234,-2026.40002441,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (7)
CreateDynamicObject(997,3048.69995117,-2026.30004883,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (8)
CreateDynamicObject(997,3016.19995117,-2026.19995117,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (9)
CreateDynamicObject(997,3003.69995117,-2026.09997559,6.59999990,0.00000000,0.00000000,0.00000000); //object(lhouse_barrier3) (10)
CreateDynamicObject(996,3002.60009766,-2035.50000000,6.69999981,0.00000000,0.00000000,91.25000000); //object(lhouse_barrier1) (1)
CreateDynamicObject(996,3020.69995117,-2035.09997559,6.69999981,0.00000000,0.00000000,91.24694824); //object(lhouse_barrier1) (2)
CreateDynamicObject(996,3047.80004883,-2035.19995117,6.69999981,0.00000000,0.00000000,91.24694824); //object(lhouse_barrier1) (3)
CreateDynamicObject(996,3065.80004883,-2034.40002441,6.69999981,0.00000000,0.00000000,91.24694824); //object(lhouse_barrier1) (4)
CreateDynamicObject(996,3113.00000000,-1974.30004883,6.69999981,0.00000000,0.00000000,358.24697876); //object(lhouse_barrier1) (5)
CreateDynamicObject(996,3112.39990234,-1956.30004883,6.69999981,0.00000000,0.00000000,358.24218750); //object(lhouse_barrier1) (6)
CreateDynamicObject(996,3063.89990234,-1892.69995117,6.69999981,0.00000000,0.00000000,270.24218750); //object(lhouse_barrier1) (7)
CreateDynamicObject(996,3046.39990234,-1893.50000000,6.69999981,0.00000000,0.00000000,270.24169922); //object(lhouse_barrier1) (8)
CreateDynamicObject(996,3021.39990234,-1893.00000000,6.69999981,0.00000000,0.00000000,270.49169922); //object(lhouse_barrier1) (9)
CreateDynamicObject(996,3004.19995117,-1893.40002441,6.69999981,0.00000000,0.00000000,270.48889160); //object(lhouse_barrier1) (10)
CreateDynamicObject(8572,3056.10009766,-2039.40002441,4.59999990,0.00000000,0.00000000,0.00000000); //object(vgssstairs02_lvs) (1)
CreateDynamicObject(8572,3123.00000000,-1963.80004883,4.59999990,0.00000000,0.00000000,89.25000000); //object(vgssstairs02_lvs) (2)
CreateDynamicObject(3406,3048.39990234,-2039.30004883,-1.10000002,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (1)
CreateDynamicObject(3406,3044.60009766,-2044.09997559,-1.10000002,0.00000000,0.00000000,90.00000000); //object(cxref_woodjetty) (2)
CreateDynamicObject(3406,3050.39990234,-2046.00000000,-1.10000002,0.00000000,0.00000000,357.00000000); //object(cxref_woodjetty) (3)
CreateDynamicObject(8572,3016.80004883,-2038.90002441,4.59999990,0.00000000,0.00000000,0.00000000); //object(vgssstairs02_lvs) (3)
CreateDynamicObject(8572,3015.10009766,-2039.00000000,3.09999990,0.00000000,0.00000000,0.00000000); //object(vgssstairs02_lvs) (4)
CreateDynamicObject(3406,3008.80004883,-2038.90002441,-1.20000005,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (4)
CreateDynamicObject(3406,3005.10009766,-2043.69995117,-1.20000005,0.00000000,0.00000000,90.75000000); //object(cxref_woodjetty) (5)
CreateDynamicObject(3406,2999.19995117,-2045.50000000,-1.20000005,0.00000000,0.00000000,180.74707031); //object(cxref_woodjetty) (6)
CreateDynamicObject(8572,3054.50000000,-2039.39941406,3.00000000,0.00000000,0.00000000,0.00000000); //object(vgssstairs02_lvs) (5)
CreateDynamicObject(8572,3123.00000000,-1965.80004883,2.79999995,0.00000000,0.00000000,89.24743652); //object(vgssstairs02_lvs) (6)
CreateDynamicObject(3406,3122.89990234,-1973.30004883,-1.50000000,0.00000000,0.00000000,270.00000000); //object(cxref_woodjetty) (7)
CreateDynamicObject(3406,3127.69995117,-1976.09997559,-1.50000000,0.00000000,0.00000000,181.99450684); //object(cxref_woodjetty) (8)
CreateDynamicObject(3406,3129.30004883,-1970.19995117,-1.50000000,0.00000000,0.00000000,90.74398804); //object(cxref_woodjetty) (9)
CreateDynamicObject(8572,3054.39990234,-1890.30004883,4.59999990,0.00000000,0.00000000,180.74743652); //object(vgssstairs02_lvs) (7)
CreateDynamicObject(8572,3056.30004883,-1890.30004883,2.79999995,0.00000000,0.00000000,180.74707031); //object(vgssstairs02_lvs) (8)
CreateDynamicObject(3406,3064.00000000,-1890.40002441,-1.39999998,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (10)
CreateDynamicObject(3406,3066.69995117,-1885.59997559,-1.39999998,0.00000000,0.00000000,272.00000000); //object(cxref_woodjetty) (11)
CreateDynamicObject(3406,3072.39990234,-1883.59997559,-1.39999998,0.00000000,0.00000000,1.49951172); //object(cxref_woodjetty) (12)
CreateDynamicObject(8572,3008.60009766,-1890.59997559,4.59999990,0.00000000,0.00000000,180.74707031); //object(vgssstairs02_lvs) (9)
CreateDynamicObject(8572,3010.50000000,-1890.59997559,2.79999995,0.00000000,0.00000000,180.74707031); //object(vgssstairs02_lvs) (10)
CreateDynamicObject(3406,3018.19995117,-1890.59997559,-1.50000000,0.00000000,0.00000000,0.00000000); //object(cxref_woodjetty) (13)
CreateDynamicObject(3406,3021.00000000,-1885.69995117,-1.50000000,0.00000000,0.00000000,270.50000000); //object(cxref_woodjetty) (14)
CreateDynamicObject(3406,3016.19995117,-1884.09997559,-1.50000000,0.00000000,0.00000000,0.49987793); //object(cxref_woodjetty) (15)
CreateDynamicObject(1215,3031.69921875,-1985.39941406,11.89999962,0.00000000,0.00000000,0.00000000); //object(bollardlight) (19)
CreateDynamicObject(1215,3069.10009766,-1943.40002441,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (20)
CreateDynamicObject(1215,3056.39990234,-1943.30004883,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (21)
CreateDynamicObject(1215,3045.69995117,-1943.50000000,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (22)
CreateDynamicObject(1215,3035.80004883,-1984.09997559,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (23)
CreateDynamicObject(1215,3024.19921875,-1943.39941406,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (24)
CreateDynamicObject(1215,3023.00000000,-1983.40002441,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (25)
CreateDynamicObject(1215,3011.50000000,-1983.50000000,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (26)
CreateDynamicObject(1215,2995.69995117,-1982.09997559,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (27)
CreateDynamicObject(1215,3016.30004883,-2026.59997559,6.59999990,0.00000000,0.00000000,0.00000000); //object(bollardlight) (28)
CreateDynamicObject(1215,3006.89990234,-2026.40002441,6.59999990,0.00000000,0.00000000,0.00000000); //object(bollardlight) (29)
CreateDynamicObject(1215,3051.80004883,-2027.00000000,6.59999990,0.00000000,0.00000000,0.00000000); //object(bollardlight) (30)
CreateDynamicObject(1215,3061.50000000,-2026.90002441,6.59999990,0.00000000,0.00000000,0.00000000); //object(bollardlight) (31)
CreateDynamicObject(1215,3110.69995117,-1970.09997559,6.59999990,0.00000000,0.00000000,0.00000000); //object(bollardlight) (32)
CreateDynamicObject(1215,3110.60009766,-1960.30004883,6.59999990,0.00000000,0.00000000,0.00000000); //object(bollardlight) (33)
CreateDynamicObject(1215,3059.80004883,-1902.90002441,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (34)
CreateDynamicObject(1215,3050.39990234,-1903.00000000,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (35)
CreateDynamicObject(1215,3016.39990234,-1903.00000000,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (36)
CreateDynamicObject(1215,3007.39990234,-1903.19995117,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (37)
CreateDynamicObject(1432,3019.39990234,-2024.30004883,6.59999990,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (1)
CreateDynamicObject(1432,3003.60009766,-2024.09997559,6.59999990,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (2)
CreateDynamicObject(1432,3001.30004883,-1906.50000000,6.50000000,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (3)
CreateDynamicObject(1432,3020.69995117,-1906.00000000,6.50000000,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (4)
CreateDynamicObject(1432,3060.89990234,-1905.59997559,6.50000000,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (5)
CreateDynamicObject(1432,3048.39990234,-1905.19995117,6.50000000,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (6)
CreateDynamicObject(1432,3108.19995117,-1974.50000000,6.59999990,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (7)
CreateDynamicObject(1432,3066.89990234,-2024.40002441,6.59999990,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (8)
CreateDynamicObject(1432,3108.39941406,-1957.59960938,6.59999990,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (9)
CreateDynamicObject(1432,3049.69921875,-2024.50000000,6.59999990,0.00000000,0.00000000,0.00000000); //object(dyn_table_2) (11)
CreateDynamicObject(1223,3122.50000000,-1976.80004883,0.60000002,0.00000000,0.00000000,48.00000000); //object(lampost_coast) (1)
CreateDynamicObject(1223,3005.89990234,-2047.69995117,0.89999998,0.00000000,0.00000000,151.99926758); //object(lampost_coast) (2)
CreateDynamicObject(1223,3066.00000000,-1881.29980469,0.69999999,0.00000000,0.00000000,319.99877930); //object(lampost_coast) (3)
CreateDynamicObject(1223,3021.59960938,-1891.00000000,0.40000001,0.00000000,0.00000000,149.99633789); //object(lampost_coast) (4)
CreateDynamicObject(1223,3043.89990234,-2039.00000000,1.00000000,0.00000000,0.00000000,313.99581909); //object(lampost_coast) (5)
CreateDynamicObject(1215,3015.39990234,-1930.40002441,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (38)
CreateDynamicObject(1215,3052.89990234,-1931.00000000,6.40000010,0.00000000,0.00000000,0.00000000); //object(bollardlight) (39)
CreateDynamicObject(1215,3009.59960938,-1930.39941406,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (40)
CreateDynamicObject(1215,3009.59960938,-1930.39941406,6.19999981,0.00000000,0.00000000,0.00000000); //object(bollardlight) (41)
CreateDynamicObject(1215,3082.60009766,-1963.09997559,6.40000010,0.00000000,0.00000000,0.00000000); //object(bollardlight) (42)
CreateDynamicObject(1215,3057.69921875,-1931.19921875,6.40000010,0.00000000,0.00000000,0.00000000); //object(bollardlight) (43)
CreateDynamicObject(1215,3082.69995117,-1967.50000000,6.40000010,0.00000000,0.00000000,0.00000000); //object(bollardlight) (44)
CreateDynamicObject(1215,3059.10009766,-1998.40002441,6.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (45)
CreateDynamicObject(1215,3054.60009766,-1998.30004883,6.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (46)
CreateDynamicObject(1215,3014.00000000,-1998.09997559,6.40000010,0.00000000,0.00000000,0.00000000); //object(bollardlight) (47)
CreateDynamicObject(1215,3009.50000000,-1998.09997559,6.40000010,0.00000000,0.00000000,0.00000000); //object(bollardlight) (48)
CreateDynamicObject(1215,3016.69995117,-1989.19995117,10.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (49)
CreateDynamicObject(1215,3044.00000000,-1989.19995117,10.50000000,0.00000000,0.00000000,0.00000000); //object(bollardlight) (50)
CreateDynamicObject(1215,3074.10009766,-1961.80004883,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (51)
CreateDynamicObject(1215,3048.19995117,-1938.90002441,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (52)
CreateDynamicObject(1215,3015.60009766,-1938.90002441,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (53)
CreateDynamicObject(1215,2996.50000000,-1969.90002441,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (54)
CreateDynamicObject(1215,2996.19995117,-1956.69995117,10.60000038,0.00000000,0.00000000,0.00000000); //object(bollardlight) (55)
/*=-=-=-=-=-=-=-=-=-=-=-=-==-=-=-= Restaurant do Lado da Ammu =-=-=-=-=-=-=-=*/
new Restaurant;
Restaurant = CreateDynamicObject(18981,1307.995,-1233.988,16.819,0.000,90.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(18981,1320.309,-1233.841,12.120,0.000,90.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(18981,1318.312,-1234.026,16.819,0.000,90.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(18981,1320.274,-1258.751,12.120,0.000,90.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(18981,1318.367,-1258.577,16.819,0.000,90.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(18981,1308.029,-1258.650,16.819,0.000,90.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1327.287,-1244.340,14.615,0.000,0.000,159.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1310.180,-1242.453,14.610,0.000,0.000,90.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1330.667,-1228.230,15.085,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1325.736,-1242.410,14.634,0.000,0.000,90.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1319.601,-1242.438,14.615,0.000,0.000,90.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1330.667,-1228.230,11.666,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1314.975,-1244.110,14.643,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1330.646,-1237.812,15.076,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1320.831,-1248.778,14.615,0.000,0.000,90.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1305.464,-1244.049,14.600,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1330.646,-1237.812,11.691,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1300.679,-1248.844,14.620,0.000,0.000,90.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1295.970,-1244.093,14.600,0.000,0.000,0.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454,1300.739,-1242.489,14.605,0.000,0.000,90.000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
Restaurant = CreateDynamicObject(19454, 1295.9785, -1234.5059, 14.6000, 0.0000, 0.0000, 0.0000);
SetDynamicObjectMaterial(Restaurant, 0, 10765, "airportgnd_sfse", "white", 0);
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Restaurant = CreateDynamicObject(6959, 1303.5294, -1251.3815, 12.5507, 0.0000, 0.0000, 0.0000);
Restaurant = CreateDynamicObject(640,1331.573,-1256.641,13.223,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(640,1331.636,-1248.640,13.223,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(640,1331.638,-1265.961,13.223,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(640,1326.979,-1271.815,13.246,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(640,1320.818,-1271.808,13.246,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(640,1308.298,-1271.816,13.246,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(640,1300.189,-1271.827,13.246,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(919,1310.754,-1253.961,17.609,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1231,1348.560,-1210.609,18.508,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1231,1348.630,-1227.209,15.599,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1231,1351.930,-1228.959,15.294,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1231,1351.949,-1212.400,18.193,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1294,1326.830,-1276.941,17.078,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(1294,1296.109,-1276.944,17.078,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(1687,1321.018,-1264.538,18.030,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1689,1323.122,-1258.809,18.322,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(1689,1323.122,-1258.809,18.322,0.000,0.000,185.000);
Restaurant = CreateDynamicObject(1689,1305.580,-1245.167,18.322,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1329.885,-1270.425,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1323.546,-1270.375,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1317.211,-1270.633,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1312.214,-1270.452,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1304.500,-1270.592,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1296.752,-1270.058,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1296.565,-1261.779,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1296.706,-1253.317,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2010,1296.502,-1249.628,13.501,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2132,1311.244,-1242.973,13.503,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2147,1314.336,-1242.929,13.502,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2147,1307.430,-1243.194,13.503,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2170,1310.310,-1243.057,13.504,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2214,1313.480,-1249.830,14.459,-26.000,23.000,0.000);
Restaurant = CreateDynamicObject(2214,1311.998,-1249.736,14.459,-26.000,23.000,0.000);
Restaurant = CreateDynamicObject(2294,1309.408,-1243.175,13.502,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2339,1306.003,-1245.503,13.503,0.000,0.000,91.000);
Restaurant = CreateDynamicObject(2339,1305.958,-1243.529,13.503,0.000,0.000,91.000);
Restaurant = CreateDynamicObject(2339,1305.985,-1244.526,13.503,0.000,0.000,91.000);
Restaurant = CreateDynamicObject(2339,1313.254,-1242.933,13.503,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2417,1308.363,-1242.986,13.502,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2426,1310.368,-1248.826,14.399,0.000,0.000,178.000);
Restaurant = CreateDynamicObject(2426,1305.697,-1248.998,14.399,0.000,0.000,89.000);
Restaurant = CreateDynamicObject(2453,1310.730,-1249.280,14.701,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2453,1310.029,-1249.271,14.701,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1327.556,-1255.035,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1319.000,-1253.972,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1327.748,-1258.699,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1319.100,-1257.640,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1310.834,-1254.229,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1327.680,-1262.338,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1319.207,-1261.337,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1310.770,-1257.902,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1328.307,-1266.310,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1319.325,-1265.507,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1310.783,-1261.575,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1304.714,-1254.680,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1310.834,-1265.446,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1304.557,-1258.390,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1304.813,-1262.173,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1304.702,-1265.884,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1298.018,-1265.303,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1298.474,-1261.501,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1298.549,-1257.679,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2637,1298.691,-1253.970,13.910,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1328.128,-1260.450,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1327.815,-1256.864,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1318.999,-1255.776,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1319.111,-1259.480,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1310.751,-1256.035,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1328.077,-1264.250,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1319.249,-1263.352,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1310.697,-1259.744,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1310.666,-1263.622,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1304.637,-1256.503,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1304.676,-1260.170,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1304.635,-1264.036,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1298.251,-1263.249,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1298.484,-1259.546,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2638,1298.621,-1255.793,14.114,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2639,1327.847,-1253.556,14.097,0.000,0.000,180.000);
Restaurant = CreateDynamicObject(2639,1310.585,-1252.635,14.097,0.000,0.000,180.000);
Restaurant = CreateDynamicObject(2639,1319.287,-1252.712,14.097,0.000,0.000,180.000);
Restaurant = CreateDynamicObject(2639,1328.295,-1267.935,14.104,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2639,1304.658,-1253.062,14.097,0.000,0.000,180.000);
Restaurant = CreateDynamicObject(2639,1319.383,-1266.761,14.104,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2639,1310.827,-1266.909,14.104,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2639,1304.776,-1267.240,14.104,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2639,1298.006,-1266.791,14.104,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2639,1298.826,-1252.346,14.097,0.000,0.000,180.000);
Restaurant = CreateDynamicObject(2642,1322.640,-1248.885,15.043,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2642,1299.152,-1248.934,15.096,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2645,1320.228,-1248.867,15.020,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2645,1301.164,-1248.934,15.209,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2646,1317.230,-1248.868,15.108,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2646,1303.220,-1248.933,15.369,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2823,1304.846,-1254.628,14.334,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2850,1310.285,-1257.851,14.333,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2857,1298.144,-1265.165,14.327,0.000,0.000,-24.000);
Restaurant = CreateDynamicObject(2860,1319.384,-1257.685,14.333,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2860,1328.222,-1266.317,14.332,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(2860,1310.576,-1265.466,14.332,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(3785,1324.765,-1248.869,15.534,0.000,0.000,-71.000);
Restaurant = CreateDynamicObject(3785,1318.052,-1248.960,15.534,0.000,0.000,-67.000);
Restaurant = CreateDynamicObject(3785,1317.166,-1271.193,15.543,0.000,0.000,-90.000);
Restaurant = CreateDynamicObject(3785,1312.143,-1271.187,15.543,0.000,0.000,-90.000);
Restaurant = CreateDynamicObject(3804,1330.940,-1244.084,15.635,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(3857,1330.700,-1248.435,13.496,0.000,0.000,-45.000);
Restaurant = CreateDynamicObject(3857,1330.673,-1257.035,13.496,0.000,0.000,-45.000);
Restaurant = CreateDynamicObject(3857,1330.696,-1265.655,13.496,0.000,0.000,-45.000);
Restaurant = CreateDynamicObject(3857,1326.865,-1271.078,13.496,0.000,0.000,45.000);
Restaurant = CreateDynamicObject(3857,1320.363,-1271.035,13.496,0.000,0.000,45.000);
Restaurant = CreateDynamicObject(3857,1308.855,-1271.054,13.496,0.000,0.000,45.000);
Restaurant = CreateDynamicObject(3857,1300.189,-1271.096,13.496,0.000,0.000,45.000);
Restaurant = CreateDynamicObject(3857,1295.935,-1266.138,13.496,0.000,0.000,-45.000);
Restaurant = CreateDynamicObject(3857,1295.953,-1257.417,13.496,0.000,0.000,-45.000);
Restaurant = CreateDynamicObject(3857,1296.002,-1248.917,13.496,0.000,0.000,-45.000);
Restaurant = CreateDynamicObject(9339,1295.9790, -1229.2799, 12.7520,0.0000, 0.0000, 0.0000);
Restaurant = CreateDynamicObject(9339,1309.011,-1242.422,12.752,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1330.603,-1255.293,12.752,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(9339,1330.580,-1243.000,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(9339,1315.593,-1248.783,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1330.587,-1252.770,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(9339,1317.645,-1242.373,12.752,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1330.573,-1244.349,3.328,90.000,0.000,1.000);
Restaurant = CreateDynamicObject(9339,1330.619,-1258.060,12.752,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(9339,1330.600,-1261.371,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(9339,1316.708,-1260.269,12.752,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(9339,1312.620,-1260.215,12.752,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(9339,1304.840,-1248.804,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1330.544,-1270.088,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(9339,1330.003,-1270.939,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1323.638,-1270.989,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1317.656,-1271.048,12.752,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1317.288,-1270.958,3.328,90.000,0.000,-90.000);
Restaurant = CreateDynamicObject(9339,1312.027,-1270.963,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1308.917,-1271.023,12.752,0.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1304.475,-1271.021,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1296.601,-1270.970,3.328,90.000,0.000,90.000);
Restaurant = CreateDynamicObject(9339,1296.040,-1270.425,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(9339,1295.991,-1258.037,12.752,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(9339,1296.030,-1261.732,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(9339,1295.979,-1255.396,12.752,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(9339,1296.047,-1253.152,3.328,90.000,0.000,180.000);
Restaurant = CreateDynamicObject(14407,1314.693,-1273.809,10.249,0.000,0.000,180.000);
Restaurant = CreateDynamicObject(18075,1326.397,-1250.477,16.260,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1315.986,-1250.386,16.272,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1306.245,-1250.498,16.283,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1326.440,-1264.704,16.239,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1316.139,-1264.609,16.251,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1306.500,-1264.716,16.293,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1301.071,-1264.799,16.313,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18075,1300.762,-1250.582,16.303,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(18092,1307.949,-1249.186,13.900,0.000,0.000,-180.000);
Restaurant = CreateDynamicObject(18092,1312.773,-1249.180,13.900,0.000,0.000,-180.000);
Restaurant = CreateDynamicObject(19126,1348.500,-1291.930,13.050,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(19126,1351.420,-1292.170,13.050,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(19126,1348.7161, -1294.8689, 13.0500,0.000,0.000,0.000);
Restaurant = CreateDynamicObject(19456,1283.876,-1265.552,14.078,0.000,0.000,350.162);
Restaurant = CreateDynamicObject(19456,1284.193,-1256.064,14.078,0.000,0.000,186.813);
Restaurant = CreateDynamicObject(19462,1325.489,-1256.654,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1308.162,-1247.115,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1328.960,-1247.103,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1322.107,-1247.081,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1318.608,-1247.095,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1318.483,-1256.670,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1315.152,-1247.081,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1321.996,-1256.632,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1311.657,-1247.094,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1328.948,-1256.708,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1325.550,-1247.097,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1315.090,-1256.711,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1304.649,-1247.108,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1311.598,-1256.688,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1328.958,-1266.329,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1325.460,-1266.301,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1308.122,-1256.690,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1321.953,-1266.255,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1318.460,-1266.244,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1314.950,-1266.277,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1304.626,-1256.664,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1311.463,-1266.247,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1307.974,-1266.261,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1304.469,-1266.292,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1300.964,-1266.287,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1301.122,-1256.686,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1297.610,-1266.279,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1297.622,-1256.676,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1301.161,-1247.105,13.416,0.000,90.000,0.000);
Restaurant = CreateDynamicObject(19462,1297.661,-1247.090,13.416,0.000,90.000,0.000);
/*=-=-=-=-=-=-=-=-=-=-=-==-=-=-== Minha Sala Admin -=-=--=-==--==--=-==-=-=*/
CreateDynamicObject(3857, 1217.70752, -1414.71985, 31.40980,   0.00000, 0.00000, 45.05930);
CreateDynamicObject(19376, 1215.30786, -1419.42212, 33.68364,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1215.41736, -1419.42200, 30.06210,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1225.9161, -1419.4250, 30.0621,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1225.92371, -1429.04492, 30.06210,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1215.42346, -1429.05591, 30.06210,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19426, 1222.23169, -1414.68848, 31.89310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19426, 1213.19165, -1414.70850, 31.90310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19353, 1212.48438, -1416.31384, 31.89430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19353, 1212.48438, -1419.51392, 31.89430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19376, 1215.31873, -1429.00110, 33.68364,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1225.77869, -1419.42310, 33.68360,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1225.80859, -1429.00195, 33.68360,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19353, 1212.48877, -1422.65564, 31.89430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1704, 1216.40161, -1419.56238, 30.14844,   0.00000, 0.00000, 145.84731);
CreateDynamicObject(1704, 1220.09180, -1419.72620, 30.14844,   0.00000, 0.00000, 197.62215);
CreateDynamicObject(1715, 1217.94141, -1416.85388, 30.14980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1670, 1218.87549, -1417.10767, 30.99010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1998, 1218.77686, -1416.90820, 30.15018,   0.00000, 0.00000, 181.15509);
CreateDynamicObject(2174, 1213.02161, -1420.80286, 30.14970,   0.00000, 0.00000, 89.43740);
CreateDynamicObject(2828, 1212.99292, -1420.30200, 30.94042,   0.00000, 0.00000, 293.09030);
CreateDynamicObject(2231, 1213.20349, -1414.75623, 32.67480,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16779, 1217.80127, -1418.42517, 33.59269,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2202, 1213.06824, -1417.35913, 30.14940,   0.00000, 0.00000, 90.41260);
CreateDynamicObject(950, 1222.12000, -1415.04688, 30.69030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(950, 1213.47449, -1415.07849, 30.69030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1723, 1222.33435, -1421.42151, 30.15047,   0.00000, 0.00000, 269.97598);
CreateDynamicObject(19445, 1222.96240, -1419.44482, 31.89920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19383, 1222.96899, -1425.85339, 31.91730,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1491, 1222.98792, -1426.60339, 30.14984,   0.00000, 0.00000, 90.77951);
CreateDynamicObject(2200, 1212.73169, -1424.01489, 30.14900,   0.00000, 0.00000, 90.68640);
CreateDynamicObject(2523, 1223.54626, -1420.42578, 30.14937,   0.00000, 0.00000, 88.60888);
CreateDynamicObject(2517, 1226.96802, -1420.58997, 30.14881,   0.00000, 0.00000, 0.36814);
CreateDynamicObject(2528, 1224.89819, -1419.43689, 30.15020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1523, 1224.55933, -1422.86694, 30.15030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19426, 1224.85840, -1418.88501, 31.91310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19426, 1223.79834, -1418.89502, 31.91310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19426, 1227.79932, -1418.87158, 31.91310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19426, 1226.30249, -1418.87561, 31.91310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19426, 1223.77832, -1422.85474, 31.91310,   0.00000, 0.00000, 90.34200);
CreateDynamicObject(19426, 1228.40784, -1422.85022, 31.91310,   0.00000, 0.00000, 90.03899);
CreateDynamicObject(19445, 1228.29272, -1423.71338, 31.91917,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19353, 1212.48987, -1429.00720, 31.89430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1505, 1224.55603, -1428.51477, 30.14990,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19383, 1225.36243, -1428.48914, 31.91730,   0.00000, 0.00000, 90.08060);
CreateDynamicObject(19353, 1222.97009, -1428.81982, 31.91430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19353, 1215.52014, -1428.45435, 31.89430,   0.00000, 0.00000, 88.64810);
CreateDynamicObject(19353, 1213.98181, -1428.41064, 31.89430,   0.00000, 0.00000, 88.64810);
CreateDynamicObject(2162, 1216.12708, -1428.43176, 30.12920,   0.00000, 0.00000, 180.07750);
CreateDynamicObject(2162, 1214.34705, -1428.43311, 30.12920,   0.00000, 0.00000, 180.07750);
CreateDynamicObject(1828, 1218.05981, -1421.78357, 30.15049,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1212.82092, -1427.83887, 30.15014,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19353, 1212.48718, -1425.81775, 31.89430,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1723, 1227.72632, -1424.66418, 30.15047,   0.00000, 0.00000, 269.97598);
CreateDynamicObject(955, 1212.97791, -1426.00244, 30.52880,   0.00000, 0.00000, 91.59680);
CreateDynamicObject(1892, 1224.82996, -1428.24695, 30.15031,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19383, 1225.34448, -1422.85510, 31.90730,   0.00000, 0.00000, 90.03200);
CreateDynamicObject(19426, 1227.42676, -1422.85144, 31.90310,   0.00000, 0.00000, 89.94000);
CreateDynamicObject(19445, 1218.98962, -1428.48596, 31.91920,   0.00000, 0.00000, 89.98690);
CreateDynamicObject(19353, 1227.83191, -1428.48315, 31.91430,   0.00000, 0.00000, 90.47120);
CreateDynamicObject(2161, 1217.82764, -1428.40234, 30.14959,   0.00000, 0.00000, 179.80319);
CreateDynamicObject(19273, 1224.11292, -1428.41357, 31.62644,   0.00000, 0.00000, 181.46242);
CreateDynamicObject(14651, 1217.10388, -1424.94531, 32.39430,   0.00000, 0.00000, 0.00000);
/*=-=-=-=-=-=-=-==-=-=-=-=-=-=-=- Casa Pista indo pra Las Venturas -=-=-=-=-=-=-=-==-*/
CreateDynamicObject(5706, 1682.60938, 97.26953, 27.29000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5706, 1682.63965, 74.41992, 27.26000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5706, 1715.66992, 74.41992, 27.29000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3599, 1671.82910, 97.73926, 33.75000,   0.00000, 0.00000, 90.24719);
CreateDynamicObject(984, 1699.03003, 103.60000, 31.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(982, 1711.82996, 87.50000, 31.79000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(982, 1666.31934, 77.53906, 31.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1699.03003, 93.99000, 31.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(982, 1679.05957, 64.77930, 31.76000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(982, 1719.34998, 64.77000, 31.79000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(984, 1724.64001, 87.51000, 31.75000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(984, 1696.60938, 64.78906, 31.72000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(11292, 1693.34363, 109.98913, 29.53000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(11292, 1693.33899, 113.90213, 29.25000,   350.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1698.62000, 110.03000, 33.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1698.97998, 87.39000, 33.72000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1687.80005, 100.80000, 34.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1674.45996, 68.50000, 33.72000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1702.80005, 64.92000, 33.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1706.58997, 64.93000, 33.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1688.11914, 109.98926, 33.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1732.18005, 71.19000, 31.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 1732.19995, 80.78000, 31.75000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1675.51904, 97.50352, 32.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1687.56995, 108.84000, 31.81000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10558, 1668.30005, 79.95670, 35.70000,   0.00000, 80.00000, 0.00000);
CreateDynamicObject(10558, 1672.19995, 80.02610, 35.70000,   0.00000, 80.00000, 180.00000);
CreateDynamicObject(10558, 1668.30005, 73.10000, 35.70000,   0.00000, 79.99695, 0.00000);
CreateDynamicObject(10558, 1672.19995, 73.10000, 35.70000,   0.00000, 79.99695, 179.99451);
CreateDynamicObject(9131, 1673.80005, 69.10000, 34.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14397, 1673.59998, 84.90000, 34.60000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3631, 1670.30005, 69.30000, 32.60000,   90.00000, 180.00000, 180.00000);
CreateDynamicObject(3567, 1668.19995, 77.50000, 30.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3567, 1671.50000, 77.50000, 30.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3567, 1672.40002, 77.50000, 30.29000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3631, 1670.30005, 69.30000, 34.60000,   90.00000, 180.00000, 0.00000);
CreateDynamicObject(3631, 1670.30005, 69.30000, 30.60000,   90.00000, 179.99451, 179.99451);
CreateDynamicObject(9131, 1673.80005, 69.10000, 32.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1673.80005, 69.84000, 34.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1673.80005, 69.84000, 32.04000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14397, 1666.19995, 84.40000, 34.60000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(14397, 1669.90002, 84.80000, 35.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3631, 1670.29980, 69.29980, 34.60000,   90.00000, 179.99451, 179.99451);
CreateDynamicObject(3631, 1670.29980, 69.29980, 32.60000,   90.00000, 179.99451, 0.00000);
CreateDynamicObject(3631, 1670.29980, 69.29980, 30.60000,   90.00000, 179.99451, 0.00000);
CreateDynamicObject(3631, 1667.09998, 72.60000, 30.60000,   90.00000, 179.99451, 270.00000);
CreateDynamicObject(3631, 1667.09998, 72.60000, 32.60000,   90.00000, 180.00549, 89.98907);
CreateDynamicObject(3631, 1667.09998, 72.60000, 34.60000,   90.00000, 180.00549, 89.98904);
CreateDynamicObject(3631, 1667.09998, 80.20000, 32.60000,   90.00000, 180.00549, 89.98904);
CreateDynamicObject(3631, 1667.09998, 80.20000, 34.60000,   90.00000, 180.00549, 89.98907);
CreateDynamicObject(3631, 1667.09998, 80.20000, 30.60000,   90.00000, 180.00549, 270.00000);
CreateDynamicObject(3631, 1667.09998, 87.80000, 34.60000,   90.00000, 179.99451, 90.00000);
CreateDynamicObject(3631, 1667.09998, 87.80000, 32.60000,   90.00000, 179.99451, 90.00000);
CreateDynamicObject(3631, 1667.09998, 87.80000, 30.60000,   90.00000, 179.99451, 270.00000);
CreateDynamicObject(3631, 1667.09961, 72.59961, 34.60000,   90.00000, 180.00549, 270.00000);
CreateDynamicObject(3631, 1667.09961, 72.59961, 32.60000,   90.00000, 180.00549, 270.00000);
CreateDynamicObject(3631, 1667.09961, 80.19922, 34.60000,   90.00000, 180.00549, 270.00000);
CreateDynamicObject(3631, 1667.09961, 80.19922, 32.60000,   90.00000, 180.00549, 270.00000);
CreateDynamicObject(3631, 1667.09961, 87.79980, 34.60000,   90.00000, 179.99451, 270.00000);
CreateDynamicObject(3631, 1667.09961, 87.79980, 32.60000,   90.00000, 179.99451, 270.00000);
CreateDynamicObject(3631, 1667.09961, 72.59961, 30.60000,   90.00000, 179.99451, 90.00000);
CreateDynamicObject(3631, 1667.09998, 80.20000, 30.60000,   90.00000, 180.00549, 89.98901);
CreateDynamicObject(3631, 1667.09998, 87.80000, 30.60000,   90.00000, 179.99451, 90.00000);
CreateDynamicObject(9131, 1673.80005, 85.00000, 32.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1673.80005, 85.00000, 34.24000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1673.80005, 77.60000, 32.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1673.80005, 77.60000, 34.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18253, 1676.90002, 93.80000, 28.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18253, 1684.50000, 93.80000, 28.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1232, 1687.87671, 85.68749, 34.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, 1688.19995, 90.10000, 32.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1408, 1685.52698, 85.39730, 32.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, 1688.19995, 94.50000, 32.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1408, 1688.19922, 98.50000, 32.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1408, 1685.50000, 101.19922, 32.10000,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(1408, 1680.11975, 85.39730, 32.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, 1674.67981, 85.39730, 32.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1675.50000, 108.10000, 32.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1677.69995, 109.90000, 32.00000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(638, 1684.09998, 100.80000, 32.20000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3041, 1681.09998, 101.20000, 30.40000,   0.00000, 0.00000, 178.00000);
CreateDynamicObject(3934, 1720.30005, 76.30000, 31.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3287, 1703.09998, 85.60000, 35.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2633, 1703.59998, 62.60000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3660, 1699.90002, 77.70000, 32.80000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1706.00000, 62.60000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1703.59998, 58.40000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1706.00000, 58.40000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1703.59998, 54.20000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1706.00000, 54.20000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1703.59998, 50.00000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1706.00000, 50.00000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1706.00000, 45.80000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1703.59998, 45.80000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(18253, 1710.00000, 39.90000, 28.20000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1714.00000, 34.00000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1716.30005, 34.00000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1714.00000, 29.80000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1716.30005, 29.80000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1714.00000, 25.60000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1716.30005, 25.60000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1714.00000, 21.40000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1716.30005, 21.40000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1714.00000, 17.20000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1716.30005, 17.20000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1716.30005, 13.00000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1714.00000, 13.00000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1714.00000, 8.80000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2633, 1716.30005, 8.80000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1716.30005, 4.60000, 29.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2633, 1714.00000, 4.60000, 29.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3361, 1720.30005, 1.60000, 29.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1466, 1714.19995, 2.00000, 30.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1466, 1714.19995, 1.30000, 30.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3361, 1726.30005, 1.60000, 25.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3361, 1732.30005, 1.60000, 21.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3361, 1738.09961, 1.59961, 17.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8572, 1742.29980, -0.19922, 13.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(11496, 1759.90002, 2.20000, 3.40000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(3361, 1746.30005, -3.90000, 9.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3361, 1752.30005, -3.90000, 5.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(11496, 1764.86133, 2.18003, 3.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8572, 1764.94604, -6.74512, 2.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3406, 1761.24365, -9.39594, -1.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3406, 1767.19995, -13.30000, -1.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1760.40002, -14.20000, 0.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1770.69995, -14.20000, 0.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1760.40002, -5.80000, 0.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1755.50000, -5.70000, 4.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1769.30005, -5.70000, 4.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1769.19995, 1.80000, 4.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1755.50000, 2.10000, 4.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1741.50000, -4.70000, 12.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1743.09998, 2.60000, 15.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1717.50000, 0.70000, 31.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1717.40002, 36.30000, 31.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1717.50000, 43.60000, 31.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1702.50000, 36.20000, 31.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1702.59998, 43.50000, 31.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1731.75586, 87.25222, 31.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1732.00000, 64.90000, 31.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1674.40002, 85.10000, 31.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1479, 1716.19995, 40.10000, 32.40000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1479, 1703.80005, 39.80000, 32.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1280, 1716.69995, 41.90000, 31.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1281, 1708.30005, 37.50000, 31.80000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(14877, 1708.59998, 44.40000, 28.90000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(14877, 1711.59998, 44.40000, 28.90000,   0.00000, 0.00000, 269.99451);
CreateDynamicObject(3407, 1698.80005, 114.20000, 30.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(671, 1706.00000, 97.40000, 30.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(671, 1683.00000, 48.80000, 28.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(671, 1722.90002, 44.00000, 29.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(671, 1737.00000, 74.00000, 30.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(672, 1706.69995, 108.50000, 31.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(672, 1690.59998, 38.40000, 29.30000,   0.00000, 0.00000, 314.00000);
CreateDynamicObject(672, 1670.79980, 116.89941, 30.20000,   0.00000, 0.00000, 313.99475);
CreateDynamicObject(672, 1721.00000, 12.00000, 25.80000,   0.00000, 0.00000, 313.99475);
CreateDynamicObject(672, 1748.50000, 90.30000, 32.00000,   0.00000, 0.00000, 313.99475);
CreateDynamicObject(672, 1744.59998, 40.00000, 26.40000,   0.00000, 0.00000, 313.99475);
CreateDynamicObject(691, 1659.09998, 75.70000, 27.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(691, 1669.30005, 45.00000, 26.90000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(691, 1691.69995, 54.20000, 28.40000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(691, 1730.90002, 27.40000, 25.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(691, 1753.59998, 31.00000, 25.50000,   0.00000, 0.00000, 302.00000);
CreateDynamicObject(717, 1667.69995, 66.60000, 31.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(717, 1698.19995, 99.90000, 31.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(717, 1700.19995, 86.50000, 31.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(717, 1700.09998, 68.90000, 31.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(762, 1752.30005, 68.30000, 34.80000,   0.00000, 0.00000, 326.00000);
CreateDynamicObject(800, 1713.30005, 97.60000, 34.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1657.59998, 114.80000, 33.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1654.30005, 94.90000, 32.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1673.40002, 57.00000, 30.50000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1695.30005, 49.40000, 32.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1696.59998, 43.70000, 33.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1701.30005, 26.90000, 34.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1709.59998, 32.60000, 33.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1722.80005, 21.20000, 30.30000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1738.30005, 63.80000, 32.60000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(800, 1730.30005, 58.00000, 32.40000,   0.00000, 0.00000, 310.00000);
CreateDynamicObject(800, 1720.59998, 92.20000, 32.40000,   0.00000, 0.00000, 309.99573);
CreateDynamicObject(3526, 1724.59998, 80.10000, 31.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3526, 1724.59998, 72.30000, 31.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3526, 1715.80005, 72.40000, 31.20000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(3526, 1715.90002, 80.10000, 31.20000,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(970, 1664.72046, 105.70934, 35.33159,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1662.69189, 103.52378, 35.33160,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(970, 1664.75342, 101.36691, 35.33160,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1505, 1675.23621, 96.09249, 31.44070,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(18253, 1679.12634, 92.91750, 28.69000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18253, 1684.48682, 92.93530, 28.69100,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1408, 1688.19995, 88.05570, 32.10000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1723, 1686.02173, 86.29157, 31.51310,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1723, 1683.09558, 86.29160, 31.51310,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1723, 1687.44812, 90.56250, 31.51310,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1704, 1687.36414, 87.63877, 31.51310,   0.00000, 0.00000, 244.19890);
CreateDynamicObject(1723, 1687.44812, 93.49380, 31.51310,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1723, 1687.44812, 96.40920, 31.51310,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(2314, 1684.98914, 90.62640, 31.51530,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2314, 1684.98914, 88.22092, 31.51530,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2314, 1683.80566, 88.25961, 31.51530,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2314, 1683.80566, 90.64700, 31.51530,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1670, 1684.95215, 88.39268, 32.11611,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1828, 1685.94214, 88.02575, 31.51259,   0.00000, 0.00000, 328.50870);
CreateDynamicObject(1930, 1685.02893, 88.97610, 32.11600,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1736, 1675.59204, 95.29487, 34.10981,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(16151, 1676.38281, 89.63284, 31.75269,   0.00000, 0.00000, 182.00000);
CreateDynamicObject(1502, 1674.70313, 93.22863, 29.84207,   0.00000, 0.00000, 0.00000);
/*=-=-=-=-=-==-=-=-=-=-=--==--=-= Casa VIP Premium do Lado Pedagio LS -=-=-=-=-=-=-*/
	CreateDynamicObject(16133, 54.15000, -1607.43994, -17.00000,   0.00000, 0.00000, -185.22000);
	CreateDynamicObject(16133, 78.73000, -1617.71997, -17.00000,   0.00000, 0.00000, -17.70000);
	CreateDynamicObject(16133, 74.23000, -1608.73999, -17.00000,   0.00000, 0.00000, -14.04000);
	CreateDynamicObject(16133, 68.03000, -1615.46997, -17.00000,   0.00000, 0.00000, -14.04000);
	CreateDynamicObject(16133, 82.08000, -1595.52002, -17.00000,   0.00000, 0.00000, 19.56000);
	CreateDynamicObject(16133, 91.79000, -1599.12000, -17.00000,   0.00000, 0.00000, 19.56000);
	CreateDynamicObject(16133, 83.50000, -1587.07996, -17.00000,   0.00000, 0.00000, 19.56000);
	CreateDynamicObject(16133, 83.50000, -1587.07996, -17.00000,   0.00000, 0.00000, 19.56000);
	CreateDynamicObject(16133, 85.60000, -1623.06995, -17.00000,   0.00000, 0.00000, 73.50000);
	CreateDynamicObject(3494, 57.54000, -1624.79004, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 65.05000, -1624.81995, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 70.47000, -1624.32996, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 76.98000, -1624.19995, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.30000, -1624.38000, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.47489, -1620.57544, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.31000, -1614.32996, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.50000, -1607.39001, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.63622, -1600.95251, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 54.02000, -1596.19995, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.43000, -1590.62000, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 53.69151, -1583.61072, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 55.82000, -1579.30005, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 57.31000, -1573.90002, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 64.55000, -1571.16003, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 64.55000, -1571.16003, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 68.80000, -1569.87000, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 72.70000, -1569.60999, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 77.21000, -1570.39001, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 81.50000, -1624.23999, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 59.96000, -1570.89001, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 88.75000, -1602.69995, 8.07000,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 57.84000, -1582.07996, 8.07000,   -90.00000, 0.00000, 89.94000);
	CreateDynamicObject(2395, 57.88000, -1578.37000, 8.07000,   -90.00000, 0.00000, 89.94000);
	CreateDynamicObject(2395, 58.26000, -1579.68005, 8.07000,   -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2395, 90.50000, -1583.43994, 8.07000,   -90.00000, 0.00000, 129.96001);
	CreateDynamicObject(2395, 88.94000, -1597.59998, 8.07000,   -90.00000, 0.00000, 91.74000);
	CreateDynamicObject(2395, 88.97000, -1599.94995, 8.07000,   -90.00000, 0.00000, 91.74000);
	CreateDynamicObject(984, 52.74000, -1596.80005, 8.59000,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(984, 52.71000, -1609.62000, 8.59000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 52.71000, -1609.62000, 8.59000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 52.64000, -1619.22998, 8.59000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 59.11000, -1625.68005, 8.59000,   0.00000, 0.00000, 89.76000);
	CreateDynamicObject(984, 72.04000, -1625.52002, 8.59000,   0.00000, 0.00000, 91.80000);
	CreateDynamicObject(983, 52.82000, -1581.04004, 8.59000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 52.79000, -1587.25000, 8.59000,   0.00000, 0.00000, 0.54000);
	CreateDynamicObject(984, 85.61000, -1618.48999, 8.59000,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(19378, 57.90000, -1620.83997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 68.42000, -1620.81006, 8.07000,   0.00000, 90.00000, 1.08000);
	CreateDynamicObject(19378, 68.32000, -1611.31995, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 58.02000, -1611.26001, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 68.26000, -1601.68005, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 58.03000, -1601.79004, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 68.52000, -1592.23999, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 58.04000, -1592.14001, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 68.47000, -1582.65002, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 60.57000, -1579.90002, 8.06800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 58.00000, -1582.69995, 8.07200,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2395, 55.11000, -1586.33997, 8.07000,   -90.00000, 0.00000, 42.66000);
	CreateDynamicObject(19378, 79.01000, -1592.71997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 78.74000, -1602.08997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 78.84000, -1610.82996, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 80.59000, -1583.21997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 70.84000, -1576.71997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 78.83000, -1620.50000, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 89.32000, -1583.68994, 8.06800,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 89.44000, -1592.55005, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 89.18000, -1602.14001, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 89.28000, -1611.71997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19386, 83.80000, -1628.65002, 12.18000,   0.00000, 0.00000, -8.04000);
	CreateDynamicObject(3361, 79.08000, -1628.06006, 8.44000,   0.00000, 0.00000, -189.00000);
	CreateDynamicObject(3361, 73.11000, -1627.18005, 4.34000,   0.00000, 0.00000, -187.50000);
	CreateDynamicObject(11495, 61.32000, -1637.35999, 0.37000,   0.00000, 0.00000, -184.80000);
	CreateDynamicObject(5777, 62.18000, -1627.39001, 2.00000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(5777, 61.98000, -1628.43005, 1.72000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(5777, 61.94000, -1629.20996, 1.55000,   0.00000, 90.00000, -94.92000);
	CreateDynamicObject(5777, 61.84000, -1629.84998, 1.36000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(5777, 61.80000, -1630.44995, 1.19000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(5777, 61.75000, -1631.17004, 0.96000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(5777, 61.72000, -1631.88000, 0.66000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(5777, 61.68000, -1632.54004, 0.52000,   0.00000, 90.00000, -94.14000);
	CreateDynamicObject(983, 62.70000, -1630.26001, 1.69000,   13.00000, 0.00000, -4.68000);
	CreateDynamicObject(983, 61.06000, -1630.04004, 1.69000,   13.00000, 0.00000, -4.68000);
	CreateDynamicObject(970, 67.64000, -1625.71997, 3.07000,   0.00000, 0.00000, -3.84000);
	CreateDynamicObject(983, 61.13000, -1628.21997, 2.16000,   17.00000, 0.00000, -4.08000);
	CreateDynamicObject(19378, 68.26000, -1601.68005, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3441, 54.07000, -1624.79004, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3441, 54.29000, -1612.43005, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3441, 54.66000, -1601.25000, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3441, 65.74000, -1624.21997, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 57.90000, -1620.83997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19378, 57.90000, -1620.88000, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 57.90000, -1620.88000, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 68.36000, -1620.97998, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 57.98000, -1611.37000, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 58.07000, -1601.78003, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 68.58000, -1601.96997, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 68.47000, -1611.42004, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(3441, 62.89000, -1597.98999, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3441, 74.78000, -1598.08997, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3441, 83.72000, -1609.73999, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19378, 79.11000, -1601.98999, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19378, 79.02000, -1611.52002, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(19458, 79.54000, -1616.30005, 9.57000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19458, 80.90000, -1596.19995, 9.57000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19458, 71.50000, -1596.18005, 9.57000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19458, 61.92000, -1596.16003, 9.57000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(16133, 57.55338, -1575.85962, -17.00000,   0.00000, 0.00000, -201.53999);
	CreateDynamicObject(16133, 58.02000, -1595.38000, -17.00000,   0.00000, 0.00000, -19.98000);
	CreateDynamicObject(1491, 53.67000, -1596.03003, 8.15000,   0.00000, 0.00000, -0.60000);
	CreateDynamicObject(19386, 54.46000, -1596.19995, 9.53000,   0.00000, 0.00000, 88.08000);
	CreateDynamicObject(19386, 54.45000, -1595.98999, 9.53000,   0.00000, 0.00000, 88.08000);
	CreateDynamicObject(19366, 77.84000, -1576.71997, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 81.32000, -1576.81006, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 77.84000, -1573.48999, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 81.35000, -1573.56995, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 78.64000, -1570.68005, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 75.33000, -1570.65002, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 71.92000, -1570.67004, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 68.42000, -1570.64001, 8.07000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 64.93000, -1570.64001, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 63.86000, -1573.76001, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 61.37000, -1570.62000, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 60.46000, -1573.67004, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 57.00000, -1573.56006, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 57.94000, -1570.50000, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 54.53000, -1576.34998, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 54.51000, -1573.18994, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 54.51000, -1573.18994, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(19366, 54.41000, -1570.56995, 8.07000,   0.00000, 90.00000, 0.36000);
	CreateDynamicObject(984, 52.88000, -1575.47998, 8.59000,   0.00000, 0.00000, -0.06000);
	CreateDynamicObject(984, 59.29000, -1569.13000, 8.59000,   0.00000, 0.00000, -90.36000);
	CreateDynamicObject(984, 72.03000, -1569.16003, 8.59000,   0.00000, 0.00000, -90.36000);
	CreateDynamicObject(19366, 85.64000, -1599.15002, 11.37000,   0.00000, 90.00000, -3.96000);
	CreateDynamicObject(19366, 82.74000, -1576.15002, 8.01000,   0.00000, 90.00000, 121.74000);
	CreateDynamicObject(19366, 84.55000, -1579.15002, 8.01000,   0.00000, 90.00000, 121.74000);
	CreateDynamicObject(3599, 72.28000, -1583.63000, 13.31000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19360, 73.74000, -1570.84998, 10.85000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 77.27000, -1573.93994, 10.85000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 77.43000, -1572.68994, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 78.50000, -1573.98999, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 78.47000, -1570.79004, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 77.14000, -1570.79004, 10.85000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 76.08000, -1581.69995, 10.84000,   0.00000, 90.00000, -0.30000);
	CreateDynamicObject(19360, 76.05000, -1584.91003, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 76.05000, -1588.12000, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 77.39000, -1591.29004, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 77.47000, -1594.44995, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 76.12000, -1580.62000, 14.35000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 76.03000, -1583.87000, 14.35000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19360, 76.00000, -1587.05005, 14.35000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, 79.39000, -1623.84998, 12.12000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 77.80000, -1586.43994, 14.85000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 75.74000, -1588.59998, 14.85000,   0.00000, 0.00000, -179.34000);
	CreateDynamicObject(970, 80.26000, -1573.43994, 11.39000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 73.93000, -1569.31995, 11.39000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19360, 70.25000, -1570.83997, 10.85000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(970, 70.55634, -1569.31213, 11.39000,   0.00000, 0.00000, -0.66000);
	CreateDynamicObject(970, 78.04000, -1569.32996, 11.39000,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(3406, 66.04000, -1626.34998, 0.31000,   0.00000, 0.00000, -4.68000);
	CreateDynamicObject(19360, 80.95000, -1591.32996, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1557, 80.22912, -1577.01172, 8.16000,   0.00000, 0.00000, -89.58000);
	CreateDynamicObject(19362, 81.78000, -1620.38000, 9.13000,   0.00000, 72.00000, -2.10000);
	CreateDynamicObject(19458, 79.43000, -1618.69995, 9.57000,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(19362, 81.67000, -1623.56995, 9.13000,   0.00000, 72.00000, -2.10000);
	CreateDynamicObject(5777, 82.18000, -1624.96997, 8.66000,   -30.00000, 0.00000, 87.12000);
	CreateDynamicObject(1656, 81.34000, -1616.77002, 8.15000,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(1656, 81.35000, -1617.93005, 8.15000,   0.00000, 0.00000, 90.18000);
	CreateDynamicObject(1698, 82.07000, -1617.83997, 8.32000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 82.29000, -1617.88000, 8.46000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 82.52000, -1617.85999, 8.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 82.69000, -1617.87000, 8.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 82.89000, -1617.89001, 8.89000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 83.06000, -1617.93005, 9.03000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 83.24000, -1617.89001, 9.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 84.73000, -1592.34998, 9.31000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 83.56000, -1617.85999, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 83.76000, -1617.81006, 9.59000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 83.96000, -1617.85999, 9.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19362, 80.10000, -1620.32996, 8.57000,   0.00000, 72.00000, -2.10000);
	CreateDynamicObject(19362, 80.03000, -1623.51001, 8.57000,   0.00000, 72.00000, -2.10000);
	CreateDynamicObject(19362, 83.00000, -1620.42004, 9.67000,   0.00000, 65.01000, -2.76000);
	CreateDynamicObject(19362, 82.81000, -1623.45996, 9.69000,   -1.75000, 65.01000, -2.76000);
	CreateDynamicObject(19362, 86.37000, -1620.56006, 10.53400,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 86.13000, -1623.72998, 10.53400,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 89.88000, -1620.73999, 10.53400,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 89.63000, -1623.94995, 10.53400,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 93.05000, -1624.15002, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 93.33000, -1620.93994, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 96.56000, -1624.35999, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 96.81000, -1621.15002, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 96.99000, -1617.94995, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 97.16000, -1614.71997, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 93.49000, -1617.77002, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 93.65000, -1614.58997, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 93.82000, -1611.40002, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 97.33000, -1611.51001, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 94.00000, -1608.18994, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 97.52000, -1608.29004, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 94.25000, -1604.97998, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 97.74000, -1605.07996, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 101.05000, -1608.48999, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(19362, 101.21000, -1605.29004, 10.50000,   0.00000, 90.00000, -3.18000);
	CreateDynamicObject(987, 109.20000, -1600.75000, 9.56000,   0.00000, 0.00000, 53.04000);
	CreateDynamicObject(987, 121.29000, -1584.33997, 9.69000,   0.00000, 4.03000, 58.86000);
	CreateDynamicObject(987, 115.08000, -1593.17004, 9.63000,   0.00000, 0.00000, 54.90000);
	CreateDynamicObject(987, 127.88000, -1574.19995, 8.69000,   0.00000, 4.37000, 140.22000);
	CreateDynamicObject(987, 118.79000, -1566.64001, 7.51000,   0.00000, 5.21000, 149.88000);
	CreateDynamicObject(987, 108.60000, -1560.50000, 6.33000,   0.00000, 5.21000, 158.88000);
	CreateDynamicObject(987, 97.51000, -1556.09998, 5.25000,   0.00000, 5.21000, 171.78000);
	CreateDynamicObject(987, 85.72000, -1554.42004, 3.90000,   0.00000, 5.21000, 171.53999);
	CreateDynamicObject(987, 73.54000, -1552.92004, 2.96000,   0.00000, -8.83000, 279.12000);
	CreateDynamicObject(987, 106.72000, -1622.09998, 9.56000,   0.00000, 0.00000, 99.66000);
	CreateDynamicObject(987, 104.88000, -1633.88000, 9.42000,   0.00000, -1.03000, 80.76000);
	CreateDynamicObject(987, 93.26000, -1632.38000, 9.42000,   0.00000, -1.03000, -8.16000);
	CreateDynamicObject(987, 81.98135, -1630.77734, 9.23000,   0.00000, -1.03000, -8.16000);
	CreateDynamicObject(19378, 74.33000, -1621.06995, 11.37000,   0.00000, 90.00000, -0.48000);
	CreateDynamicObject(3578, 98.58000, -1615.16003, 9.69000,   0.00000, 0.00000, 84.78000);
	CreateDynamicObject(3578, 98.20000, -1620.65002, 9.69000,   0.00000, 0.00000, 86.22000);
	CreateDynamicObject(3578, 98.20000, -1620.65002, 9.69000,   0.00000, 0.00000, 86.22000);
	CreateDynamicObject(3578, 93.07000, -1625.37000, 9.69000,   0.00000, 0.00000, 178.02000);
	CreateDynamicObject(3578, 89.39000, -1625.21997, 9.69000,   0.00000, 0.00000, 178.02000);
	CreateDynamicObject(3578, 95.18000, -1603.65002, 9.74000,   0.00000, 1.25000, -3.30000);
	CreateDynamicObject(3578, 95.18000, -1603.65002, 9.74000,   0.00000, 1.25000, -3.30000);
	CreateDynamicObject(3578, 92.47000, -1608.43005, 9.78000,   0.00000, 0.00000, -93.30000);
	CreateDynamicObject(3578, 92.10000, -1615.03003, 9.78000,   0.00000, 0.00000, -92.76000);
	CreateDynamicObject(3578, 89.89000, -1619.44995, 9.69000,   0.00000, 0.00000, -3.30000);
	CreateDynamicObject(19362, 104.47000, -1608.68005, 10.24000,   0.00000, -80.00000, -3.18000);
	CreateDynamicObject(19362, 104.61000, -1605.50000, 10.24000,   0.00000, -80.00000, -3.18000);
	CreateDynamicObject(19362, 107.46000, -1606.13000, 9.78000,   0.00000, -85.00000, -21.90000);
	CreateDynamicObject(19362, 106.39000, -1608.76001, 9.85000,   -1.78000, -85.00000, -21.90000);
	CreateDynamicObject(19362, 110.69000, -1607.43994, 9.58000,   0.00000, 90.00000, -22.98000);
	CreateDynamicObject(19362, 109.60000, -1610.05005, 9.58000,   0.00000, 90.00000, -22.98000);
	CreateDynamicObject(987, 106.35000, -1603.76001, 9.56000,   0.00000, 0.00000, 50.52000);
	CreateDynamicObject(3578, 97.80000, -1603.89001, 9.78000,   0.00000, 0.00000, -182.58000);
	CreateDynamicObject(1231, 106.92000, -1603.88000, 12.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 105.56000, -1610.55005, 12.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 106.93000, -1621.90002, 12.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 115.06000, -1593.66003, 12.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 92.73000, -1603.31995, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 99.21000, -1609.93005, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 99.55000, -1603.64001, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 92.21000, -1609.43994, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 91.82000, -1614.77002, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 98.98000, -1615.20996, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 91.61000, -1619.15002, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 98.24000, -1626.01001, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 98.74000, -1619.47998, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 90.61000, -1625.67004, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 84.45000, -1625.23999, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 84.34000, -1618.79004, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 78.68000, -1625.16003, 8.69000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(1231, 116.25000, -1589.28003, 12.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 127.30000, -1574.06995, 11.78000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 115.66000, -1565.70996, 10.43000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 105.28000, -1560.20996, 9.29000,   0.00000, 0.00000, 8.52000);
	CreateDynamicObject(1231, 94.38000, -1556.42004, 8.14000,   0.00000, 0.00000, 8.52000);
	CreateDynamicObject(1231, 74.09000, -1553.28003, 6.27000,   0.00000, 0.00000, 8.52000);
	CreateDynamicObject(19366, 85.33000, -1602.06995, 11.37000,   0.00000, 90.00000, -8.88000);
	CreateDynamicObject(19366, 84.87000, -1605.01001, 11.37000,   0.00000, 90.00000, -8.88000);
	CreateDynamicObject(19366, 84.45000, -1608.15002, 11.37000,   0.00000, 90.00000, -8.88000);
	CreateDynamicObject(19366, 83.88000, -1611.31995, 11.37000,   0.00000, 90.00000, -8.88000);
	CreateDynamicObject(19366, 83.35000, -1614.03003, 11.36000,   0.00000, 90.00000, -8.88000);
	CreateDynamicObject(19366, 84.98000, -1614.39001, 9.66000,   0.00000, 0.00000, -10.20000);
	CreateDynamicObject(19366, 85.52000, -1611.45996, 9.66000,   0.00000, 0.00000, -10.20000);
	CreateDynamicObject(19366, 86.17000, -1608.20996, 9.66000,   0.00000, 0.00000, -10.20000);
	CreateDynamicObject(19366, 86.68000, -1605.06995, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(19366, 86.68000, -1605.06995, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(19366, 86.68000, -1605.06995, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(19366, 87.08000, -1601.94995, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(19366, 87.30000, -1599.52002, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(8856, 86.83000, -1606.30005, 11.80000,   0.00000, 0.00000, -8.70000);
	CreateDynamicObject(8856, 86.80000, -1606.31006, 11.33000,   0.00000, 0.00000, -8.70000);
	CreateDynamicObject(19458, 79.54000, -1616.12000, 9.57000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(19458, 84.77000, -1611.39001, 9.57000,   0.00000, 0.00000, 172.44000);
	CreateDynamicObject(19458, 85.59000, -1604.85999, 9.57000,   0.00000, 0.00000, 172.44000);
	CreateDynamicObject(19366, 86.44000, -1598.91003, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(19366, 86.44000, -1598.91003, 9.66000,   0.00000, 0.00000, -5.82000);
	CreateDynamicObject(19366, 85.82000, -1597.43005, 9.66000,   0.00000, 0.00000, -93.48000);
	CreateDynamicObject(1698, 84.17000, -1617.64001, 9.84000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 84.40416, -1616.48230, 10.37000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8991, 86.34000, -1609.34998, 12.44000,   0.00000, 0.00000, 81.24000);
	CreateDynamicObject(8991, 86.35000, -1609.28003, 12.44000,   0.00000, 0.00000, 260.28000);
	CreateDynamicObject(8991, 87.33000, -1602.96997, 12.44000,   0.00000, 0.00000, 80.76000);
	CreateDynamicObject(8991, 87.21000, -1602.78003, 12.44000,   0.00000, 0.00000, 259.67999);
	CreateDynamicObject(19425, 78.48000, -1620.43994, 8.16000,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(19425, 78.48000, -1620.43994, 8.16000,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(19425, 78.48000, -1620.43994, 8.16000,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(19425, 78.47000, -1623.68005, 8.16000,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(3666, 78.85000, -1618.81006, 8.69000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(984, 52.71000, -1619.23999, 11.99000,   0.00000, 0.00000, -0.60000);
	CreateDynamicObject(984, 52.93000, -1606.23999, 11.99000,   0.00000, 0.00000, -0.90000);
	CreateDynamicObject(984, 71.84000, -1625.78003, 12.16000,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(984, 59.12000, -1625.65002, 12.16000,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(19366, 85.64000, -1599.15002, 11.37000,   0.00000, 90.00000, -3.96000);
	CreateDynamicObject(19366, 83.91000, -1597.70996, 11.28000,   0.00000, 90.00000, -0.72000);
	CreateDynamicObject(19366, 80.45000, -1597.65002, 11.28000,   0.00000, 90.00000, -0.72000);
	CreateDynamicObject(19366, 76.93000, -1597.59998, 11.28000,   0.00000, 90.00000, -0.72000);
	CreateDynamicObject(19366, 73.46000, -1597.53003, 11.28000,   0.00000, 90.00000, -0.72000);
	CreateDynamicObject(19366, 70.01000, -1597.60999, 11.28000,   0.00000, 90.00000, -0.66000);
	CreateDynamicObject(19366, 66.52000, -1597.60999, 11.28000,   0.00000, 90.00000, -0.66000);
	CreateDynamicObject(19366, 63.02000, -1597.56006, 11.28000,   0.00000, 90.00000, -0.66000);
	CreateDynamicObject(19366, 59.52000, -1597.51001, 11.28000,   0.00000, 90.00000, -0.60000);
	CreateDynamicObject(19366, 56.02000, -1597.34998, 11.28000,   0.00000, 90.00000, -0.60000);
	CreateDynamicObject(19366, 54.60000, -1597.39001, 11.28000,   0.00000, 90.00000, -0.60000);
	CreateDynamicObject(970, 79.39000, -1619.68005, 12.12000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 79.39000, -1618.31995, 12.12000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 81.47000, -1616.28003, 12.12000,   0.00000, 0.00000, -180.30000);
	CreateDynamicObject(3666, 83.61000, -1618.73999, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3666, 83.65000, -1616.40002, 11.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 73.13000, -1625.80005, 12.16000,   0.00000, 0.00000, 89.52000);
	CreateDynamicObject(984, 52.74000, -1596.80005, 8.59000,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(983, 53.01000, -1598.95996, 11.97000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(983, 56.28000, -1595.79004, 11.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 61.03000, -1595.82996, 11.97000,   0.00000, 0.00000, 89.28000);
	CreateDynamicObject(1698, 83.56000, -1617.85999, 9.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 84.70000, -1592.64001, 9.57000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.71000, -1592.85999, 9.82000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.74000, -1593.08997, 10.05000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.76000, -1593.46997, 10.35000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.79000, -1593.65002, 10.09000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.75000, -1593.87000, 10.52000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.72000, -1594.18005, 10.70000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.66000, -1594.43005, 10.88000,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(1698, 84.61000, -1594.73999, 11.11000,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(1698, 84.66000, -1595.04004, 11.20000,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(1698, 84.66000, -1595.44995, 11.25000,   0.00000, 0.00000, 90.12000);
	CreateDynamicObject(19366, 86.37000, -1594.20996, 9.66000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19366, 82.94000, -1594.31006, 9.66000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(1698, 84.75000, -1592.12000, 9.17000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.77000, -1591.81006, 9.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.78000, -1591.63000, 8.89000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.80000, -1591.34998, 8.75000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.82000, -1591.07996, 8.60000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.81000, -1590.84998, 8.46000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.81000, -1590.60999, 8.32000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 84.81000, -1590.42004, 8.23000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19366, 64.24000, -1594.38000, 9.76000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19366, 82.90000, -1591.18994, 9.66000,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(19360, 80.97000, -1594.51001, 10.84000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19366, 82.78000, -1591.10999, 9.66000,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(19366, 82.90000, -1591.18994, 9.66000,   0.00000, 0.00000, 0.36000);
	CreateDynamicObject(19366, 82.79000, -1594.31995, 9.66000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(970, 82.96000, -1591.78003, 11.94000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(970, 64.27000, -1593.87000, 11.97000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(970, 86.34000, -1591.42004, 11.94000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(970, 86.39000, -1593.71997, 11.94000,   0.00000, 0.00000, -89.40000);
	CreateDynamicObject(19366, 85.72000, -1597.64001, 11.28000,   0.00000, 90.00000, -0.72000);
	CreateDynamicObject(1698, 84.70000, -1592.52002, 9.45000,   0.00000, 0.00000, 89.82000);
	CreateDynamicObject(1698, 84.66000, -1592.75000, 9.74000,   0.00000, 0.00000, 89.82000);
	CreateDynamicObject(1698, 84.62000, -1592.91003, 9.88000,   0.00000, 0.00000, 89.82000);
	CreateDynamicObject(1698, 84.77000, -1593.31006, 10.16000,   0.00000, 0.00000, 89.82000);
	CreateDynamicObject(970, 78.27000, -1582.16003, 11.94000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(970, 78.31000, -1586.31995, 11.94000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(970, 78.26000, -1587.79004, 11.94000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(970, 80.28000, -1589.83997, 11.94000,   0.00000, 0.00000, -1.14000);
	CreateDynamicObject(970, 80.96000, -1589.87000, 11.94000,   0.00000, 0.00000, -0.72000);
	CreateDynamicObject(8991, 88.35000, -1588.44995, 10.58000,   -34.26000, 0.00000, 81.84000);
	CreateDynamicObject(8991, 88.09000, -1590.58997, 10.67000,   -34.26000, 0.00000, -95.76000);
	CreateDynamicObject(1481, 110.04000, -1582.35999, 10.42000,   0.00000, 0.00000, -124.98000);
	CreateDynamicObject(19366, 80.56000, -1571.70996, 8.06800,   0.00000, 90.00000, 38.28000);
	CreateDynamicObject(19366, 81.55000, -1574.21997, 8.06000,   0.00000, 90.00000, 32.58000);
	CreateDynamicObject(19366, 83.47740, -1576.69189, 8.06000,   0.00000, 90.00000, 41.46001);
	CreateDynamicObject(19366, 84.21000, -1578.55005, 8.05800,   0.00000, 90.00000, 32.58000);
	CreateDynamicObject(1472, 85.09000, -1578.05005, 8.19000,   0.00000, 0.00000, -88.56000);
	CreateDynamicObject(1474, 86.90000, -1578.01001, 7.98000,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(1474, 88.51000, -1578.00000, 8.74000,   0.00000, 0.00000, -88.86000);
	CreateDynamicObject(1471, 90.22000, -1578.01001, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 91.96000, -1577.94995, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 93.70000, -1577.91003, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 93.70000, -1577.91003, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 95.42000, -1577.85999, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 97.08000, -1577.81995, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 98.72000, -1577.81006, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 100.43000, -1577.76001, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1482, 112.91000, -1578.03003, 10.95000,   0.00000, 0.00000, 164.94000);
	CreateDynamicObject(1516, 108.49000, -1582.72998, 9.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1516, 107.39000, -1582.77002, 9.96000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1471, 102.07000, -1577.73999, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 103.74000, -1577.73999, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 105.44000, -1577.68994, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(2637, 111.52000, -1577.16003, 9.97000,   0.00000, 0.00000, -143.88000);
	CreateDynamicObject(1705, 109.83000, -1579.31995, 9.66000,   0.00000, 0.00000, 122.40000);
	CreateDynamicObject(1705, 110.23000, -1575.01001, 9.33000,   0.00000, 0.00000, 29.52000);
	CreateDynamicObject(1705, 113.23000, -1579.68005, 9.60000,   0.00000, 0.00000, -144.66000);
	CreateDynamicObject(1705, 113.54000, -1574.93005, 9.35000,   0.00000, 0.00000, -53.52000);
	CreateDynamicObject(1471, 107.10000, -1577.68005, 9.79000,   0.00000, 0.00000, 90.48000);
	CreateDynamicObject(1471, 107.24000, -1579.32996, 9.79000,   0.00000, 0.00000, 1.86000);
	CreateDynamicObject(1471, 107.32000, -1581.07996, 9.79000,   0.00000, 0.00000, 1.86000);
	CreateDynamicObject(1471, 108.83000, -1581.03003, 9.79000,   0.00000, 0.00000, 1.86000);
	CreateDynamicObject(1472, 107.17000, -1576.38000, 9.74000,   0.00000, 0.00000, 181.32001);
	CreateDynamicObject(14582, 59.43000, -1576.83997, 11.59000,   0.00000, 0.00000, 1.80000);
	CreateDynamicObject(1827, 55.56000, -1590.56995, 8.15000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 55.78000, -1588.06995, 8.15000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 55.70000, -1590.43994, 8.58000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 56.01000, -1587.70996, 8.59000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1670, 55.78000, -1588.20996, 8.67000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1708, 54.00000, -1586.18005, 8.15000,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(1708, 55.33000, -1586.18994, 8.15000,   0.00000, 0.00000, 0.18000);
	CreateDynamicObject(1708, 57.89000, -1587.19995, 8.15000,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(1708, 57.90000, -1588.35999, 8.15000,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(1708, 57.90000, -1589.75000, 8.15000,   0.00000, 0.00000, -88.80000);
	CreateDynamicObject(2773, 59.31000, -1586.18005, 8.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 59.33000, -1588.53003, 8.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 59.33000, -1588.53003, 8.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 59.40000, -1590.92004, 8.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 54.16000, -1584.44995, 8.69000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 56.51000, -1584.43994, 8.69000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1482, 56.94000, -1590.65002, 9.57000,   0.00000, 0.00000, 90.06000);
	CreateDynamicObject(1482, 57.01000, -1585.35999, 9.57000,   0.00000, 0.00000, 270.89999);
	CreateDynamicObject(1698, 65.75000, -1590.97998, 8.17000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.75000, -1591.16003, 8.32000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.76000, -1591.30005, 8.48000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.79000, -1591.45996, 8.64000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.81000, -1591.59998, 8.80000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.81000, -1591.71997, 8.96000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.83000, -1591.93994, 9.12000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.81000, -1592.08997, 9.27000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.83000, -1592.22998, 9.43000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.85000, -1592.43994, 9.59000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.86000, -1592.66003, 9.75000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.88000, -1592.92004, 9.91000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.87000, -1593.07996, 10.07000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.88000, -1593.28003, 10.23000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.89000, -1593.50000, 10.39000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.87000, -1593.70996, 10.55000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.85000, -1593.89001, 10.55000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.83000, -1593.93005, 10.71000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.82000, -1594.16003, 10.81000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.84000, -1594.34998, 11.02000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.82000, -1594.56006, 11.18000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1698, 65.82000, -1594.76001, 11.38000,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(19366, 64.18000, -1591.18994, 9.76000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(19366, 57.66000, -1596.16003, 9.44000,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(3526, 66.56000, -1589.81995, 8.27000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3526, 64.53000, -1589.83997, 8.27000,   0.00000, 0.00000, 178.56000);
	CreateDynamicObject(3526, 64.53000, -1589.83997, 8.27000,   0.00000, 0.00000, 178.56000);
	CreateDynamicObject(19366, 86.37000, -1590.93005, 9.66000,   0.00000, 0.00000, 1.14000);
	CreateDynamicObject(3526, 85.92000, -1589.53003, 8.23000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3526, 83.30000, -1589.51001, 8.23000,   0.00000, 0.00000, 181.67999);
	CreateDynamicObject(1698, 65.94000, -1595.31006, 11.38000,   0.00000, 0.00000, -90.18000);
	CreateDynamicObject(970, 63.66000, -1625.43994, 3.07000,   0.00000, 0.00000, -3.84000);
	CreateDynamicObject(970, 67.47000, -1627.57996, 3.07000,   0.00000, 0.00000, -4.20000);
	CreateDynamicObject(970, 65.31000, -1627.38000, 3.07000,   0.00000, 0.00000, -4.20000);
	CreateDynamicObject(8856, 86.80000, -1606.31006, 10.86000,   0.00000, 0.00000, -8.70000);
	CreateDynamicObject(1471, 94.00000, -1579.52002, 9.79000,   0.00000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.99000, -1581.25000, 9.79000,   0.00000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.90000, -1582.98999, 9.83000,   -2.98000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.89000, -1584.72998, 9.93000,   -2.98000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.88000, -1586.43005, 9.97000,   0.00000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.87000, -1588.17004, 9.99000,   -1.62000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.82000, -1589.87000, 10.02000,   -1.62000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.81000, -1591.60999, 10.09000,   -2.22000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.76000, -1593.30005, 10.14000,   0.00000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.71000, -1595.04004, 10.19000,   -1.58000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.66000, -1596.73999, 10.24000,   -2.46000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.61000, -1598.45996, 10.30000,   -2.46000, 0.00000, -1.38000);
	CreateDynamicObject(1471, 93.59000, -1600.16003, 10.34000,   0.00000, 0.00000, -0.90000);
	CreateDynamicObject(1471, 93.57000, -1601.85999, 10.34000,   0.00000, 0.00000, -0.90000);
	CreateDynamicObject(1471, 93.55000, -1603.40002, 10.14000,   16.32000, 0.00000, -0.90000);
	CreateDynamicObject(1251, 81.87000, -1603.95996, 8.15000,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1251, 82.18000, -1608.09998, 8.15000,   0.00000, 0.00000, 90.30000);
	CreateDynamicObject(1251, 68.74000, -1599.71997, 8.15000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3666, 85.33000, -1604.18005, 8.69000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(3666, 84.72000, -1608.13000, 8.69000,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(3666, 86.34000, -1598.22998, 8.69000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(3666, 68.73000, -1596.43994, 8.69000,   0.00000, 0.00000, -0.18000);
	CreateDynamicObject(3666, 73.89000, -1596.71997, 8.69000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(3666, 63.69000, -1597.07996, 8.69000,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(1231, 68.77000, -1596.23999, 8.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 68.77000, -1596.23999, 8.16000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 86.25000, -1598.26001, 8.12000,   0.00000, 0.00000, 92.16000);
	CreateDynamicObject(1231, 84.62000, -1608.65002, 8.10000,   0.00000, 0.00000, 48.84000);
	CreateDynamicObject(1231, 56.61000, -1595.50000, 8.15000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 66.11000, -1583.93994, 9.78000,   0.00000, 0.00000, 92.04000);
	CreateDynamicObject(1231, 53.50000, -1569.39001, 10.24000,   0.00000, 0.00000, 92.22000);
	CreateDynamicObject(3934, 71.04000, -1619.41003, 11.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3934, 61.36000, -1606.08997, 11.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3526, 66.99000, -1615.89001, 11.45000,   0.00000, 0.00000, 135.72000);
	CreateDynamicObject(3526, 57.30000, -1602.62000, 11.45000,   0.00000, 0.00000, 135.72000);
	CreateDynamicObject(3526, 65.30000, -1602.53003, 11.45000,   0.00000, 0.00000, 38.10000);
	CreateDynamicObject(3526, 75.05000, -1615.87000, 11.45000,   0.00000, 0.00000, 38.10000);
	CreateDynamicObject(3526, 65.29000, -1609.81006, 11.45000,   0.00000, 0.00000, -37.32000);
	CreateDynamicObject(3526, 65.29000, -1609.81006, 11.45000,   0.00000, 0.00000, -37.32000);
	CreateDynamicObject(3526, 75.04000, -1623.20996, 11.46000,   0.00000, 0.00000, -37.32000);
	CreateDynamicObject(3526, 75.04000, -1623.20996, 11.46000,   0.00000, 0.00000, -37.32000);
	CreateDynamicObject(3526, 57.23000, -1609.82996, 11.45000,   0.00000, 0.00000, -143.52000);
	CreateDynamicObject(3526, 57.21000, -1609.82996, 11.45000,   0.00000, 0.00000, -143.52000);
	CreateDynamicObject(3526, 66.92000, -1623.17004, 11.45000,   0.00000, 0.00000, -143.52000);
	CreateDynamicObject(11665, 78.25000, -1593.34998, 11.45000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 53.12000, -1624.70996, 10.44000,   0.00000, 0.00000, 92.04000);
	CreateDynamicObject(984, 52.71000, -1619.23999, 11.99000,   0.00000, 0.00000, -0.60000);
	CreateDynamicObject(1231, 53.34000, -1597.08997, 10.44000,   0.00000, 0.00000, 92.04000);
	CreateDynamicObject(987, 75.28000, -1563.84998, 10.41000,   0.00000, 90.00000, 301.73999);
	CreateDynamicObject(3494, 72.78000, -1593.88000, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 64.39000, -1588.78003, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 61.92000, -1595.09998, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 68.61000, -1598.30005, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 78.38000, -1597.41003, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 56.83000, -1606.40002, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 67.92000, -1612.15002, 4.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3494, 80.30000, -1606.16003, 4.00000,   0.00000, 0.00000, -1.08000);
	CreateDynamicObject(3494, 75.73000, -1613.18994, 4.00000,   0.00000, 0.00000, -1.08000);
	CreateDynamicObject(3494, 69.38000, -1614.31995, 4.00000,   0.00000, 0.00000, -1.08000);
	CreateDynamicObject(3494, 58.10000, -1620.72998, 4.00000,   0.00000, 0.00000, -1.08000);
	CreateDynamicObject(11495, 73.33000, -1635.55005, 0.37000,   0.00000, 0.00000, 83.70000);
	CreateDynamicObject(11495, 79.78000, -1648.14001, 0.37000,   0.00000, 0.00000, -3.78000);
	CreateDynamicObject(14449, 93.73000, -1566.95996, 8.82000,   0.00000, 0.00000, -92.04000);
	CreateDynamicObject(2632, 76.69000, -1599.06995, 11.45000,   0.00000, 0.00000, 89.40000);
	CreateDynamicObject(2632, 78.65000, -1599.08997, 11.45000,   0.00000, 0.00000, 89.16000);
	CreateDynamicObject(2632, 80.57000, -1599.14001, 11.45000,   0.00000, 0.00000, 88.32000);
	CreateDynamicObject(2632, 76.67000, -1603.02002, 11.45000,   0.00000, 0.00000, 89.40000);
	CreateDynamicObject(2632, 78.62000, -1603.05005, 11.45000,   0.00000, 0.00000, 89.40000);
	CreateDynamicObject(2632, 80.55000, -1603.07996, 11.45000,   0.00000, 0.00000, 89.40000);
	CreateDynamicObject(2628, 76.65000, -1598.51001, 11.50000,   0.00000, 0.00000, -0.90000);
	CreateDynamicObject(2627, 80.50000, -1603.19995, 11.49000,   0.00000, 0.00000, 179.28000);
	CreateDynamicObject(2629, 79.60000, -1599.23999, 11.64000,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(2630, 77.07000, -1602.22998, 11.50000,   0.00000, 0.00000, -42.96000);
	CreateDynamicObject(1775, 75.09000, -1596.65002, 12.41000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1775, 66.63000, -1580.60999, 9.42000,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1237, 84.75000, -1627.08997, 8.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 78.54000, -1625.19995, 9.57000,   0.00000, 0.00000, 89.94000);
	CreateDynamicObject(1237, 84.00000, -1626.72998, 10.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 84.12000, -1626.09998, 10.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 84.12000, -1626.09998, 10.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 83.81000, -1625.51001, 10.63000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19386, 80.22903, -1577.81152, 9.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3507, 126.68000, -1574.07996, 8.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3507, 75.13000, -1554.52002, 4.33000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3507, 86.34000, -1630.39001, 10.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3507, 103.55000, -1632.44995, 10.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8572, 81.14660, -1572.11353, 9.70450,   0.00000, 0.00000, 91.56000);
	CreateDynamicObject(1237, 78.84570, -1569.09631, 6.79200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 79.51510, -1569.22986, 6.79200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 80.12030, -1569.21558, 6.75800,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(1237, 80.56260, -1569.58630, 6.65600,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 80.94750, -1569.93005, 6.75800,   0.00000, 0.00000, 0.06000);
	CreateDynamicObject(1237, 81.40320, -1570.36157, 6.74400,   0.00000, 0.00000, 0.12000);
	CreateDynamicObject(1237, 81.74747, -1570.83472, 6.74400,   0.00000, 0.00000, 4.08000);
	CreateDynamicObject(1237, 82.05898, -1571.41650, 6.74400,   0.00000, 0.00000, 4.02000);
	CreateDynamicObject(1237, 82.43854, -1571.87183, 6.74400,   0.00000, 0.00000, 4.68000);
	CreateDynamicObject(1237, 82.73340, -1572.44714, 6.74400,   0.00000, 0.00000, 4.68000);
	CreateDynamicObject(1237, 82.99030, -1573.04602, 6.74400,   0.00000, 0.00000, 5.22000);
	CreateDynamicObject(1237, 83.57058, -1574.53333, 6.74400,   0.00000, 0.00000, 4.74000);
	CreateDynamicObject(1237, 82.73340, -1572.44714, 6.74400,   0.00000, 0.00000, 4.68000);
	CreateDynamicObject(1237, 83.21944, -1573.95459, 6.74400,   0.00000, 0.00000, 4.74000);
	CreateDynamicObject(1237, 82.84123, -1573.51501, 6.74400,   0.00000, 0.00000, 4.56000);
	CreateDynamicObject(970, 68.52994, -1571.31323, 11.39000,   0.00000, 0.00000, 90.06001);
	CreateDynamicObject(1237, 83.36761, -1630.51770, 10.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 64.23047, -1591.83948, 11.97000,   0.00000, 0.00000, -89.34000);
	CreateDynamicObject(8856, 86.80000, -1606.31006, 10.41300,   0.00000, 0.00000, -8.70000);
	CreateDynamicObject(970, 77.80966, -1582.32336, 14.85000,   0.00000, 0.00000, -90.78000);
	CreateDynamicObject(970, 77.84641, -1578.21472, 14.85000,   0.00000, 0.00000, -90.78000);
/*=-=-=-=-=-=-=-=-=-=-=--=-=-=-=- Casas VIP Premium Perto da Praia =-=-=-=-=-=-=-=*/
new ChaoMansao[3];
ChaoMansao[0] = CreateObject(6959, 1007.54498, -1601.87476, 12.55250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 1006.97552, -1641.81909, 12.57250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 1007.05603, -1681.81055, 12.57250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 998.40753, -1761.52124, 12.55250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 1007.12500, -1721.72754, 12.57250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 1008.44946, -1761.78369, 12.57250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 1005.49127, -1792.05579, 12.59250,   0.00000, 0.00000, 357.62109);
CreateObject(3605, 968.70728, -1602.75537, 18.47760,   0.00000, 0.00000, 270.61801);
CreateDynamicObject(19457, 932.16486, -1582.15942, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 941.48187, -1582.15100, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 950.97003, -1582.12292, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 960.60193, -1582.10156, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 970.14215, -1582.09558, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 979.57672, -1582.07178, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 989.17285, -1582.07764, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 927.37482, -1586.88318, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(19457, 927.47650, -1601.70569, 14.04740,   0.00000, 0.00000, 180.26849);
CreateObject(6203, 954.89313, -1692.35608, 12.69590,   0.00000, 0.00000, 0.26630);
ChaoMansao[1] = CreateObject(6959, 966.24658, -1601.96814, 12.53250,   0.00000, 0.00000, 0.00000);
ChaoMansao[2] = CreateObject(6959, 945.65942, -1601.98914, 12.55250,   0.00000, 0.00000, 0.00000);
for(new i = 0; i != 3; i++) SetObjectMaterial(ChaoMansao[i],0, 18056, "mp_diner1", "dinerfloor01_128");
CreateDynamicObject(19457, 927.40051, -1590.37524, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(19381, 932.59497, -1582.33008, 12.44440,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 932.60236, -1590.38550, 12.46440,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 947.18182, -1590.22900, 12.46440,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(983, 930.59473, -1595.15552, 13.04730,   0.00000, 0.00000, 269.66330);
CreateDynamicObject(983, 937.13141, -1595.17664, 10.46420,   91.00000, 0.00000, 270.31491);
CreateDynamicObject(983, 937.80682, -1591.93469, 13.04730,   0.00000, 0.00000, 359.84671);
CreateDynamicObject(983, 937.83173, -1587.11877, 13.04730,   0.00000, 0.00000, 359.84671);
CreateDynamicObject(3660, 937.11816, -1582.86987, 14.97657,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3660, 949.23309, -1582.87744, 14.97660,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 932.62280, -1585.17224, 12.85110,   0.00000, 0.00000, 89.99360);
CreateDynamicObject(2232, 927.80188, -1590.69983, 13.11610,   0.00000, 0.00000, 90.70690);
CreateDynamicObject(2232, 927.78461, -1590.05664, 13.11610,   0.00000, 0.00000, 90.70690);
CreateDynamicObject(2232, 927.77789, -1589.39429, 13.11610,   0.00000, 0.00000, 90.70690);
CreateDynamicObject(2232, 928.06641, -1588.43335, 12.81006,   0.00000, 91.00000, 61.82529);
CreateDynamicObject(2232, 928.06641, -1588.43335, 13.41206,   0.00000, 91.00000, 61.82529);
CreateDynamicObject(1481, 937.46082, -1591.10815, 13.14993,   0.00000, 0.00000, 270.00742);
CreateDynamicObject(1481, 937.46082, -1590.14819, 13.14990,   0.00000, 0.00000, 270.00739);
CreateDynamicObject(2804, 937.43439, -1591.15808, 13.28650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, 937.45703, -1590.19690, 13.28650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 933.56519, -1586.98047, 12.85341,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 935.10553, -1586.94971, 12.85341,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9833, 947.04987, -1590.60742, 15.26372,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1280, 947.21637, -1594.66504, 12.95642,   0.00000, 0.00000, 270.67542);
CreateDynamicObject(1280, 947.33362, -1585.82324, 12.95642,   0.00000, 0.00000, 89.19720);
CreateDynamicObject(983, 942.06311, -1590.46216, 13.04730,   0.00000, 0.00000, 359.84671);
CreateDynamicObject(983, 952.37775, -1590.37744, 13.04730,   0.00000, 0.00000, 359.84671);
CreateDynamicObject(869, 945.90399, -1589.83582, 12.85325,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 947.46454, -1591.60132, 12.85325,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 947.96094, -1589.25317, 12.85325,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 946.53375, -1588.56567, 12.85325,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 932.44464, -1589.27771, 13.05025,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 930.32642, -1592.98071, 13.05025,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19381, 925.35077, -1601.72852, 12.36440,   0.00000, 88.00000, 0.00000);
CreateDynamicObject(983, 928.16840, -1596.94653, 10.44420,   91.00000, 0.00000, 270.31491);
CreateDynamicObject(983, 929.06671, -1596.93445, 10.46420,   91.00000, 0.00000, 270.31491);
CreateDynamicObject(983, 929.92810, -1596.93457, 10.46420,   91.00000, 0.00000, 270.31491);
CreateDynamicObject(983, 930.64423, -1606.41772, 13.04730,   0.00000, 0.00000, 269.66330);
CreateDynamicObject(3505, 928.77997, -1598.43201, 12.55163,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3505, 928.83466, -1604.50049, 12.55163,   0.00000, 0.00000, 0.00000);
//CreateDynamicObject(3050, 927.50537, -1606.53918, 13.56790,   0.00000, 180.00000, 269.71487);
//CreateDynamicObject(3049, 927.43652, -1615.68115, 13.56570,   0.00000, 180.00000, 89.00000);
CreateDynamicObject(19129, 992.76501, -1592.13208, 12.48860,   0.00000, 0.00000, 359.98981);
CreateDynamicObject(19457, 997.95532, -1582.10498, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 1002.71271, -1586.82397, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(19457, 1002.75916, -1596.20679, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(19457, 1002.77649, -1605.68115, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(16088, 997.53479, -1592.51282, 10.61250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 988.84442, -1587.64038, 17.57586,   0.00000, 0.00000, 89.95488);
CreateDynamicObject(18102, 996.01642, -1596.44800, 18.17786,   0.00000, 0.00000, 270.25067);
CreateObject(6959, 1000.20959, -1641.81506, 12.58250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 1000.15729, -1681.71570, 12.59250,   0.00000, 0.00000, 0.00000);
CreateObject(6959, 997.34161, -1721.54541, 12.55250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19470, 1027.4139, -1681.9808, 12.5185, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(19470, 1027.4233, -1643.0032, 12.5185, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(19470, 1027.4293, -1601.9636, 12.5185, 0.0000, 0.0000, 0.0000);
CreateDynamicObject(19438, 927.44757, -1621.26367, 14.04490,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 932.22583, -1621.96912, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 941.57001, -1621.96118, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 951.05048, -1621.95459, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 960.53131, -1621.92810, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 970.07367, -1621.91772, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 979.39563, -1621.90320, 14.04740,   0.00000, 0.00000, 90.06580);
CreateDynamicObject(19457, 988.55914, -1621.86389, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 998.06122, -1621.87183, 14.04737,   0.00000, 0.00000, 90.06585);
CreateDynamicObject(19457, 1002.80817, -1614.93726, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(19457, 1002.79132, -1617.15833, 14.04740,   0.00000, 0.00000, 180.26849);
CreateDynamicObject(19438, 927.44757, -1619.66370, 14.04490,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19438, 927.44757, -1618.06372, 14.04490,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19438, 927.44757, -1616.46375, 14.04490,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 936.56281, -1586.22937, 12.85341,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3660, 1001.41724, -1611.98401, 14.81976,   0.00000, 0.00000, 90.02845);
CreateDynamicObject(16151, 999.60760, -1607.41223, 12.93852,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 999.59131, -1617.88281, 12.93852,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1481, 994.39648, -1621.43689, 13.21900,   0.00000, 0.00000, 180.21291);
CreateDynamicObject(1481, 993.37653, -1621.43689, 13.21900,   0.00000, 0.00000, 180.21291);
CreateDynamicObject(1481, 992.37653, -1621.43689, 13.21900,   0.00000, 0.00000, 180.21291);
CreateDynamicObject(2804, 992.39362, -1621.37720, 13.37310,   0.00000, 0.00000, 96.99920);
CreateDynamicObject(2804, 993.41833, -1621.36169, 13.37310,   0.00000, 0.00000, 96.99920);
CreateDynamicObject(2804, 994.43774, -1621.36609, 13.37310,   0.00000, 0.00000, 96.99920);
CreateDynamicObject(1594, 990.59430, -1618.12964, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 994.61841, -1611.67712, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 987.20605, -1609.96497, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 992.12341, -1606.76086, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1368, 988.61414, -1621.24500, 13.26550,   0.00000, 0.00000, 180.88271);
CreateDynamicObject(1594, 934.85620, -1592.90625, 13.05025,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 947.76056, -1590.13391, 12.85325,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 927.36768, -1583.89307, 16.35597,   0.00000, 0.00000, 270.13550);
CreateDynamicObject(19304, 927.36182, -1587.36719, 16.35597,   0.00000, 0.00000, 270.13550);
CreateDynamicObject(19304, 927.36438, -1590.85242, 16.35597,   0.00000, 0.00000, 270.13550);
CreateDynamicObject(19304, 927.36133, -1593.39026, 16.35600,   0.00000, 0.00000, 270.13550);
CreateDynamicObject(19304, 927.43439, -1596.85718, 16.35600,   0.00000, 0.00000, 270.94861);
CreateDynamicObject(19304, 927.46625, -1600.33289, 16.35600,   0.00000, 0.00000, 90.02580);
CreateDynamicObject(19304, 927.47284, -1603.80920, 16.35600,   0.00000, 0.00000, 90.02580);
CreateDynamicObject(19304, 927.47107, -1604.75183, 16.35600,   0.00000, 0.00000, 90.02580);
CreateDynamicObject(19304, 927.43439, -1596.85718, 15.65460,   0.00000, 0.00000, 270.43640);
CreateDynamicObject(19425, 920.54010, -1596.24133, 12.37142,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 917.23364, -1596.24243, 12.37142,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19425, 914.38202, -1596.25391, 12.37140,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 927.42676, -1617.51660, 16.35600,   0.00000, 0.00000, 90.02580);
CreateDynamicObject(19304, 927.42670, -1620.28064, 16.35600,   0.00000, 0.00000, 90.02580);
CreateDynamicObject(2184, 994.42969, -1599.92847, 12.51918,   0.00000, 0.00000, 173.42609);
CreateDynamicObject(14820, 993.31360, -1600.08679, 13.28870,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 992.29962, -1585.37854, 12.55320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 992.79999, -1585.38293, 12.55320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 993.80023, -1585.38110, 12.55320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 993.30029, -1585.38550, 12.55320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 996.02826, -1585.53760, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 994.24628, -1585.53162, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 994.84607, -1585.52234, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 995.46710, -1585.52832, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 991.22589, -1585.51819, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 990.68591, -1585.51819, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 990.14587, -1585.51819, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 989.58588, -1585.51819, 13.13460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16088, 986.38666, -1592.38403, 10.61250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 994.84607, -1585.52234, 14.26618,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 994.24628, -1585.53162, 14.27070,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 995.46710, -1585.52832, 14.27130,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 996.02832, -1585.53760, 14.26460,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 992.29962, -1585.37854, 13.44120,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 992.79999, -1585.38293, 13.45400,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 993.30029, -1585.38550, 13.46180,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 993.80017, -1585.38110, 13.46940,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 991.22589, -1585.51819, 14.25381,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 990.68591, -1585.51819, 14.25381,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 990.14587, -1585.51819, 14.25250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 989.58588, -1585.51819, 14.24570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 989.39197, -1614.06946, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 998.44952, -1619.92822, 13.62280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 998.51703, -1617.24939, 13.62280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 998.89795, -1614.69543, 13.62280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1487, 998.49658, -1615.82288, 13.75830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1487, 998.47595, -1618.82129, 13.75830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 994.66376, -1611.91431, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 989.35919, -1614.35083, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 992.10193, -1607.08594, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 987.17639, -1610.26648, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 990.56152, -1618.47424, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1520, 994.36761, -1612.02588, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 994.92908, -1611.39502, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 992.43774, -1607.11389, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 987.50812, -1609.73962, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 989.03180, -1614.36304, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 989.70111, -1613.77966, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 990.88000, -1617.85486, 13.48280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 998.89044, -1610.46277, 13.62280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1487, 998.56458, -1609.19446, 13.75830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1487, 998.59485, -1607.40198, 13.75830,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 998.56769, -1605.59119, 13.62280,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2453, 1000.13208, -1604.04102, 13.91620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2453, 1000.03912, -1614.44067, 13.91620,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 983.27740, -1610.09778, 12.53891,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(955, 1000.28271, -1619.26245, 12.84259,   0.00000, 0.00000, 270.82236);
CreateDynamicObject(955, 1000.22729, -1608.55835, 12.84259,   0.00000, 0.00000, 270.82236);
CreateDynamicObject(2125, 997.82648, -1608.50439, 12.84471,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 997.82806, -1610.18445, 12.84471,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 998.57416, -1611.47302, 12.84471,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 997.76465, -1618.89673, 12.84471,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 997.86475, -1620.49683, 12.84471,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 930.63770, -1598.23584, 13.24500,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 930.62042, -1600.51794, 13.24500,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 930.63312, -1603.05994, 13.24500,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 930.61993, -1605.06152, 13.24501,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 955.66431, -1603.98901, 12.53883,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 955.52771, -1599.69958, 12.53883,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 927.82385, -1584.65405, 12.51928,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(955, 934.04395, -1584.60571, 12.85525,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19449, 941.35162, -1606.81494, 11.35730,   0.00000, 0.00000, 91.24600);
CreateDynamicObject(9131, 936.80957, -1607.05176, 14.79546,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.80957, -1607.05176, 12.52570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19449, 941.28192, -1613.79736, 14.23840,   0.00000, 0.00000, 91.24600);
CreateDynamicObject(9131, 936.82050, -1613.97620, 12.52570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.82050, -1613.97620, 14.79210,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.81219, -1620.91455, 13.26570,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.81219, -1620.91455, 15.52650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19449, 941.45587, -1621.06189, 14.85050,   0.00000, 0.00000, 91.24600);
CreateDynamicObject(19449, 946.10999, -1611.45081, 11.36190,   0.00000, 0.00000, 180.31180);
CreateDynamicObject(9131, 936.82050, -1613.97620, 16.31000,   -90.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.81372, -1616.24182, 16.31000,   -90.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.81348, -1618.49451, 16.31000,   -90.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.81201, -1620.00732, 16.31000,   -90.00000, 0.00000, 0.50100);
CreateDynamicObject(9131, 936.83240, -1611.73254, 16.31000,   -90.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.83569, -1609.55774, 16.31000,   -90.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 936.82690, -1607.75134, 16.31000,   -90.00000, 0.00000, 0.00000);
CreateDynamicObject(13011, 940.70819, -1606.14343, 13.34150,   0.00000, 0.00000, 271.07321);
CreateDynamicObject(3505, 928.66705, -1620.86108, 12.55163,   0.00000, 0.00000, 0.00000);
CreateObject(3605, 949.39227, -1665.15649, 18.47760,   0.00000, 0.00000, 180.04625);
CreateDynamicObject(7191, 950.21222, -1628.78418, 13.95720,   0.00000, 0.00000, 270.93091);
CreateDynamicObject(7191, 972.39130, -1651.11145, 13.95720,   0.00000, 0.00000, 179.96751);
CreateDynamicObject(7191, 972.38074, -1662.68848, 13.95720,   0.00000, 0.00000, 179.96751);
CreateDynamicObject(7191, 950.32397, -1684.85144, 13.95720,   0.00000, 0.00000, 269.87830);
CreateDynamicObject(7191, 927.66394, -1680.04419, 13.95720,   0.00000, 0.00000, 179.96751);
CreateDynamicObject(7191, 927.68054, -1661.47888, 13.95720,   0.00000, 0.00000, 179.96751);
CreateDynamicObject(19451, 1020.66644, -1785.93298, 14.28328,   0.00000, 0.00000, 70.07315);
CreateDynamicObject(6959, 1007.83929, -1722.07556, 12.53250,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19451, 1011.71582, -1782.71802, 14.28328,   0.00000, 0.00000, 70.07315);
CreateDynamicObject(19451, 1002.58112, -1779.90503, 14.28328,   0.00000, 0.00000, 75.64909);
CreateDynamicObject(19451, 993.24200, -1777.56580, 14.28328,   0.00000, 0.00000, 76.15613);
CreateDynamicObject(19451, 983.91669, -1775.33362, 14.28328,   0.00000, 0.00000, 76.80578);
CreateDynamicObject(19451, 982.62708, -1775.01697, 14.28328,   0.00000, 0.00000, 76.80578);
CreateObject(19449, 941.23370, -1609.17542, 16.67460,   0.00000, 90.00000, 90.17140);
CreateObject(19449, 941.24500, -1612.65588, 16.67460,   0.00000, 90.00000, 90.17140);
CreateObject(19449, 941.23322, -1616.05896, 16.67460,   0.00000, 90.00000, 90.07140);
CreateObject(19449, 941.24127, -1619.50049, 16.67460,   0.00000, 90.00000, 90.67440);
CreateObject(19449, 941.30054, -1621.06873, 11.37710,   0.00000, 0.00000, 91.24600);
CreateObject(19449, 946.14618, -1616.22559, 11.36820,   0.00000, 0.00000, 180.31180);
CreateObject(19449, 946.11572, -1611.46118, 14.86790,   0.00000, 0.00000, 180.31180);
CreateObject(19449, 941.35327, -1606.81836, 14.84850,   0.00000, 0.00000, 91.24600);
CreateObject(19449, 941.23779, -1608.33508, 16.65460,   0.00000, 90.00000, 90.17140);
CreateObject(19449, 946.15588, -1616.23206, 14.88540,   0.00000, 0.00000, 180.31180);
CreateDynamicObject(19451, 977.98822, -1769.18420, 14.28328,   0.00000, 0.00000, 180.05714);
CreateDynamicObject(19451, 977.99237, -1759.67737, 14.28328,   0.00000, 0.00000, 180.05714);
CreateDynamicObject(19451, 977.99365, -1750.13293, 14.28328,   0.00000, 0.00000, 180.05714);
CreateDynamicObject(19451, 977.98450, -1740.64343, 14.28328,   0.00000, 0.00000, 180.05714);
CreateObject(3605, 1000.43073, -1756.08435, 18.47760,   0.00000, 0.00000, 88.28721);
CreateDynamicObject(3660, 1015.98291, -1782.60486, 15.21505,   0.00000, 0.00000, 338.97287);
CreateDynamicObject(19451, 1025.72229, -1782.70117, 14.28328,   0.00000, 0.00000, 173.10065);
CreateDynamicObject(19451, 1026.66077, -1773.30823, 14.28328,   0.00000, 0.00000, 175.45383);
CreateDynamicObject(19451, 1027.34143, -1754.63611, 14.28328,   0.00000, 0.00000, 178.79523);
CreateDynamicObject(19451, 1027.42456, -1745.42725, 14.28330,   0.00000, 0.00000, 179.93596);
CreateDynamicObject(19451, 1027.37585, -1720.78064, 14.28328,   0.00000, 0.00000, 180.08226);
CreateDynamicObject(19451, 1022.63434, -1715.95996, 14.28328,   0.00000, 0.00000, 269.52829);
CreateObject(3605, 954.18378, -1743.34631, 18.47760,   0.00000, 0.00000, 270.61801);
CreateDynamicObject(19449, 927.48230, -1731.45569, 14.18465,   0.00000, 0.00000, 0.30301);
CreateDynamicObject(19449, 927.50073, -1740.83008, 14.18465,   0.00000, 0.00000, 0.30301);
CreateDynamicObject(19449, 927.54163, -1749.88306, 14.18465,   0.00000, 0.00000, 0.30301);
CreateDynamicObject(19449, 927.56323, -1758.90356, 14.18465,   0.00000, 0.00000, 359.79291);
CreateDynamicObject(19449, 927.62274, -1706.11682, 14.18465,   0.00000, 0.00000, 359.79291);
CreateDynamicObject(19449, 927.58752, -1707.90698, 14.18465,   0.00000, 0.00000, 359.79291);
CreateDynamicObject(19449, 932.20636, -1764.46265, 14.18465,   0.00000, 0.00000, 79.86787);
CreateDynamicObject(19449, 941.44788, -1766.12634, 14.18465,   0.00000, 0.00000, 79.86787);
CreateDynamicObject(19449, 950.62341, -1767.79932, 14.18465,   0.00000, 0.00000, 79.86787);
CreateDynamicObject(19449, 953.43829, -1768.33545, 14.18465,   0.00000, 0.00000, 79.86787);
CreateDynamicObject(19449, 962.73987, -1770.22424, 14.18465,   0.00000, 0.00000, 77.42072);
CreateDynamicObject(19449, 971.12823, -1772.23572, 14.18465,   0.00000, 0.00000, 76.03979);
CreateDynamicObject(19449, 973.30029, -1772.78516, 14.18465,   0.00000, 0.00000, 76.03979);
CreateDynamicObject(19449, 927.45923, -1726.67944, 14.18465,   0.00000, 0.00000, 0.30301);
CreateDynamicObject(3660, 926.68964, -1731.69617, 14.81980,   0.00000, 0.00000, 270.19489);
CreateDynamicObject(3660, 926.74951, -1750.77673, 14.81980,   0.00000, 0.00000, 270.19489);
CreateDynamicObject(3660, 926.74091, -1753.53809, 14.81980,   0.00000, 0.00000, 270.19489);
CreateDynamicObject(3660, 926.80463, -1702.89746, 14.81980,   0.00000, 0.00000, 270.19489);
CreateDynamicObject(3660, 926.76959, -1694.78162, 14.81980,   0.00000, 0.00000, 270.19489);
CreateObject(3604, 955.64124, -1711.92651, 14.92350,   0.00000, 0.00000, 270.36292);
CreateObject(3604, 942.89343, -1699.45959, 14.91478,   0.00000, 0.00000, 1.11600);
CreateDynamicObject(19449, 973.27863, -1684.79761, 14.10040,   0.00000, 0.00000, 270.20459);
CreateDynamicObject(19451, 977.97186, -1731.44739, 14.28328,   0.00000, 0.00000, 180.05714);
CreateDynamicObject(19451, 977.96729, -1721.93799, 14.28328,   0.00000, 0.00000, 180.05714);
CreateDynamicObject(19451, 977.94867, -1712.85132, 14.28328,   0.00000, 0.00000, 180.05714);
CreateDynamicObject(19451, 1017.63226, -1715.93481, 14.28328,   0.00000, 0.00000, 269.52829);
CreateDynamicObject(19451, 1008.21204, -1715.83472, 14.28328,   0.00000, 0.00000, 269.52829);
CreateDynamicObject(19451, 1000.16241, -1715.77271, 14.28328,   0.00000, 0.00000, 269.52829);
CreateDynamicObject(19451, 991.36707, -1715.68445, 14.28328,   0.00000, 0.00000, 269.52829);
CreateDynamicObject(19451, 982.81494, -1715.59241, 14.28328,   0.00000, 0.00000, 269.52829);
CreateDynamicObject(19449, 977.91931, -1703.58569, 14.18465,   0.00000, 0.00000, 359.79291);
CreateDynamicObject(19449, 977.95917, -1694.55493, 14.18465,   0.00000, 0.00000, 359.79291);
CreateDynamicObject(19449, 977.99359, -1689.66785, 14.18470,   0.00000, 0.00000, 359.79291);
CreateDynamicObject(1594, 959.74756, -1698.57996, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 965.10217, -1690.85645, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 969.80780, -1696.44153, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 971.31732, -1702.66248, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 971.05951, -1690.93152, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 964.79010, -1690.71753, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(955, 970.36963, -1687.25366, 12.80050,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1281, 965.82196, -1704.63306, 13.24766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1281, 957.57300, -1692.43848, 13.24766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1281, 964.16193, -1696.02576, 13.24766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3462, 977.09308, -1700.57190, 13.65288,   0.00000, 0.00000, 355.80789);
CreateDynamicObject(3505, 929.88080, -1687.35266, 12.44047,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3505, 929.76697, -1692.11902, 12.44047,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 930.69684, -1691.05579, 12.94817,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 930.09760, -1693.46667, 12.94817,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 930.18347, -1687.64124, 12.94817,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 930.20007, -1689.27258, 12.94817,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3660, 977.13910, -1711.32446, 15.01565,   0.00000, 0.00000, 270.26141);
CreateDynamicObject(3660, 968.12579, -1685.53833, 15.01565,   0.00000, 0.00000, 0.57539);
CreateDynamicObject(983, 963.53882, -1708.78418, 13.06820,   0.00000, 0.00000, 90.32767);
CreateDynamicObject(983, 973.16687, -1708.71252, 13.06820,   0.00000, 0.00000, 90.32767);
CreateDynamicObject(983, 949.99243, -1691.28992, 12.93970,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 949.99780, -1688.08569, 12.93970,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1481, 977.44061, -1693.92114, 13.10495,   0.00000, 0.00000, 271.40189);
CreateDynamicObject(1481, 977.44061, -1694.90112, 13.10500,   0.00000, 0.00000, 271.40189);
CreateDynamicObject(2804, 977.42889, -1694.94421, 13.25760,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, 977.39929, -1693.96948, 13.25760,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 968.91968, -1687.82361, 12.72004,   0.00000, 0.00000, 89.87333);
CreateDynamicObject(2232, 974.57153, -1687.10583, 13.02626,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 965.17755, -1691.12585, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1520, 964.86169, -1691.23608, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 958.61987, -1692.06995, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 960.05750, -1698.25977, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 959.44080, -1698.85120, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 970.91321, -1702.97852, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 971.57025, -1702.37012, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 970.03516, -1696.10791, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 970.08197, -1696.81396, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 969.40424, -1696.85852, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 970.76862, -1691.23413, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2852, 969.91632, -1689.77881, 12.41907,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 971.14453, -1691.12805, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 969.71100, -1696.70667, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 971.22107, -1702.89661, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 959.75732, -1698.83923, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 958.34918, -1692.93176, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 957.56555, -1692.96655, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 956.89221, -1692.41797, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 963.39301, -1696.01392, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 964.29852, -1696.00879, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 965.00989, -1696.06653, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 966.64667, -1704.69495, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 965.78717, -1704.65869, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 965.00232, -1704.70752, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1215, 977.59137, -1687.04553, 12.41673,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 958.39380, -1687.03174, 12.41673,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 969.75488, -1708.79248, 12.43037,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 966.83179, -1708.82520, 12.43037,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 950.55096, -1704.53613, 12.44175,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 940.97522, -1740.26782, 12.44216,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 940.83032, -1744.76746, 12.44216,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 927.17480, -1721.74402, 12.53866,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 927.24725, -1712.85229, 12.53866,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 958.96313, -1671.61230, 13.49320,   0.00000, 0.00000, 89.87330);
CreateDynamicObject(955, 960.37122, -1671.16882, 13.46901,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 961.44141, -1672.62659, 14.15920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 959.86353, -1672.67688, 14.15920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 957.23358, -1672.59949, 14.15920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 955.62903, -1671.88074, 14.15920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2453, 962.11493, -1672.19385, 14.52305,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1302, 964.28168, -1670.96082, 13.16352,   0.00000, 0.00000, 0.00000);
CreateObject(3604, 960.69751, -1639.41125, 14.79755,   0.00000, 0.00000, 269.95950);
CreateDynamicObject(1215, 927.33215, -1639.03162, 12.54436,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 933.92560, -1606.48328, 12.51956,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 929.99915, -1596.94666, 12.51956,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 933.87994, -1595.14746, 12.55041,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 960.01642, -1673.57312, 13.46899,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 961.39911, -1673.64807, 13.46899,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 962.61005, -1673.20154, 13.46899,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1481, 964.21906, -1678.31287, 13.77436,   0.00000, 0.00000, 181.30116);
CreateDynamicObject(1481, 962.95264, -1678.36011, 13.77436,   0.00000, 0.00000, 181.30116);
CreateDynamicObject(2804, 962.99060, -1678.34216, 13.92740,   0.00000, 0.00000, 90.59090);
CreateDynamicObject(2804, 964.24969, -1678.28113, 13.92740,   0.00000, 0.00000, 90.59090);
CreateDynamicObject(1281, 958.95160, -1682.30408, 13.24766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 958.18060, -1682.80505, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 959.50995, -1682.83740, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 958.85608, -1682.19055, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1594, 955.27179, -1682.25610, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 955.31805, -1682.56702, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1520, 954.90039, -1681.97266, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 954.88586, -1682.58167, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 950.68317, -1682.15234, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 950.93549, -1681.86462, 13.45810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 950.52795, -1682.41394, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1281, 946.13226, -1681.80835, 13.24766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 946.75128, -1682.12280, 13.31660,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1594, 953.49158, -1676.93787, 13.65297,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 953.55774, -1677.25146, 14.10362,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1594, 947.73389, -1675.99060, 13.65297,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 958.94934, -1676.55310, 13.65297,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 959.13507, -1676.83496, 14.09920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 958.81573, -1676.76526, 14.10362,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1520, 953.79138, -1676.62170, 14.09920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 947.65753, -1676.33081, 14.10362,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1520, 948.04242, -1676.35120, 14.09920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 948.09161, -1675.66455, 14.09920,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3604, 1007.85120, -1726.65955, 14.91478,   0.00000, 0.00000, 89.88493);
CreateDynamicObject(19451, 1027.45532, -1739.41321, 14.28330,   0.00000, 0.00000, 179.31039);
CreateDynamicObject(3660, 1002.26367, -1725.63342, 15.01565,   0.00000, 0.00000, 270.26141);
CreateDynamicObject(983, 997.29114, -1719.05273, 12.95335,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 997.29565, -1725.42480, 12.95335,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 997.28473, -1731.80676, 12.95335,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19381, 983.23096, -1720.40723, 12.49130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 993.73291, -1720.39746, 12.49130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 996.75623, -1720.40747, 12.51130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 983.25000, -1729.99146, 12.49130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 993.71838, -1729.99133, 12.49130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 993.71509, -1736.09875, 12.51130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 983.27185, -1736.12390, 12.51130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 996.72681, -1730.04614, 12.49130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 997.58789, -1739.66467, 12.49130,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(1594, 985.15344, -1719.79480, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 991.86279, -1726.95715, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 985.87585, -1727.07593, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 991.42975, -1721.16748, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 989.60864, -1731.98035, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 981.02673, -1722.83496, 12.93801,   0.00000, 0.00000, 180.65692);
CreateDynamicObject(3660, 979.28650, -1725.51746, 15.01565,   0.00000, 0.00000, 270.26141);
CreateDynamicObject(955, 980.46875, -1721.02734, 12.80050,   0.00000, 0.00000, 90.33466);
CreateDynamicObject(2219, 985.05731, -1720.09070, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 985.89270, -1727.36523, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 991.83307, -1727.21704, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 991.42383, -1721.41040, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1281, 994.44409, -1718.85046, 13.44866,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1281, 994.64075, -1731.92981, 13.34766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 993.61816, -1719.22437, 13.51760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 994.89392, -1719.38110, 13.51760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 995.31036, -1731.90222, 13.51760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 993.83942, -1731.95544, 13.51760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(1594, 984.33661, -1731.39124, 13.04593,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 989.56372, -1732.25391, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2219, 984.28687, -1731.67310, 13.49760,   -25.00000, 24.00000, -2.00000);
CreateDynamicObject(2125, 982.79950, -1721.65894, 12.88173,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 982.70831, -1719.73486, 12.88173,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3505, 981.96344, -1716.52222, 12.57868,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3505, 998.97095, -1717.53015, 12.57868,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2184, 988.34875, -1717.65247, 12.59889,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14820, 989.49847, -1717.39807, 13.44780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 985.52728, -1716.39966, 12.59877,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 986.64246, -1716.44202, 12.59877,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 987.88000, -1716.52258, 12.59877,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 991.99316, -1716.54980, 12.59877,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2231, 993.79700, -1716.57190, 12.59877,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2852, 981.85938, -1720.76160, 13.56214,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 981.92493, -1721.75793, 13.61810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 982.04431, -1723.99023, 13.61810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 980.91217, -1726.17896, 13.61810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 981.49146, -1719.58325, 13.61810,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 997.30609, -1735.11816, 12.57357,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 983.80994, -1716.13000, 12.57185,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1026.87280, -1759.29089, 12.53758,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1027.19128, -1734.78137, 12.53733,   0.00000, 0.00000, 0.00000);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= Casas VIP Normal =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/
CreateDynamicObject(6959, 1091.48975, -1882.01978, 12.57780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1132.82837, -1882.20532, 12.57780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1174.15222, -1881.66492, 12.55780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1215.45703, -1878.94995, 12.55780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1256.79590, -1878.66870, 12.55780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1298.11328, -1877.98743, 12.55780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18766, 1075.97534, -1891.29810, 14.29477,   0.00000, 0.00000, 358.84329);
CreateDynamicObject(18766, 1085.86536, -1891.45959, 14.29477,   0.00000, 0.00000, 358.84329);
CreateDynamicObject(18766, 1095.67236, -1891.53564, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1105.38806, -1891.51587, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1115.07056, -1891.53186, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1124.56689, -1891.53088, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1134.42773, -1891.49512, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1144.23694, -1891.45728, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1154.11841, -1891.42981, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1163.93018, -1891.39624, 14.29477,   0.00000, 0.00000, 0.11157);
CreateDynamicObject(18766, 1173.57275, -1891.33289, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1183.24390, -1891.26367, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1193.06885, -1891.22705, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1202.84814, -1891.19141, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1212.72827, -1891.11865, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1222.64807, -1891.06555, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1232.28540, -1890.81091, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1228.85010, -1885.47119, 14.29477,   0.00000, 0.00000, 270.18457);
CreateDynamicObject(18766, 1233.68164, -1880.83337, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1243.52295, -1880.72229, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1253.45850, -1880.65210, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1263.25952, -1880.62244, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(18766, 1272.98767, -1880.56592, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(3599, 1294.98889, -1875.98523, 18.86311,   0.00000, 0.00000, 180.48592);
CreateDynamicObject(19360, 1303.39648, -1863.85205, 16.32270,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1299.94666, -1863.84607, 16.32270,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(7191, 1304.85291, -1884.97009, 13.87927,   0.00000, 0.00000, 179.93066);
CreateDynamicObject(19360, 1296.46667, -1863.84607, 16.32270,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(7191, 1297.87354, -1884.97607, 13.87930,   0.00000, 0.00000, 179.93069);
CreateDynamicObject(6517, 1294.47034, -1862.27271, 16.16860,   0.00000, 88.00000, 270.00000);
CreateDynamicObject(7191, 1291.01416, -1885.04761, 13.87930,   0.00000, 0.00000, 179.93069);
CreateDynamicObject(19360, 1292.96606, -1863.84619, 16.32270,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1305.51929, -1867.18347, 16.32270,   0.00000, 90.00000, 269.64429);
CreateDynamicObject(19360, 1305.46057, -1870.66089, 16.32270,   0.00000, 90.00000, 269.64429);
CreateDynamicObject(19362, 1289.00745, -1863.81372, 16.13910,   0.00000, 90.00000, 359.29794);
CreateDynamicObject(19362, 1285.97595, -1863.82581, 16.13710,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19362, 1285.99451, -1867.02832, 16.13910,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19385, 1289.06238, -1862.30188, 14.35631,   0.00000, 0.00000, 89.22910);
CreateDynamicObject(19362, 1288.96045, -1866.99365, 16.13910,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19362, 1289.49609, -1863.83435, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19362, 1286.02124, -1863.79797, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19362, 1289.73047, -1867.03040, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19362, 1285.96082, -1867.01965, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19304, 1303.23047, -1862.31445, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 1299.76318, -1862.30444, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 1296.28210, -1862.30945, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 1293.03516, -1862.31714, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 1291.30688, -1864.02710, 17.01370,   0.00000, 0.00000, 89.85396);
CreateDynamicObject(19304, 1291.31042, -1867.44849, 17.01370,   0.00000, 0.00000, 89.96960);
CreateDynamicObject(19304, 1289.57300, -1862.33630, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1292.67236, -1862.73425, 17.10420,   0.00000, 0.00000, 270.41730);
CreateDynamicObject(638, 1295.47241, -1862.69434, 17.10420,   0.00000, 0.00000, 270.41730);
CreateDynamicObject(638, 1298.27246, -1862.67432, 17.10420,   0.00000, 0.00000, 270.41730);
CreateDynamicObject(638, 1301.11243, -1862.67432, 17.10420,   0.00000, 0.00000, 270.41730);
CreateDynamicObject(638, 1303.93225, -1862.67200, 17.10420,   0.00000, 0.00000, 270.41730);
CreateDynamicObject(638, 1291.75122, -1864.60767, 17.10420,   0.00000, 0.00000, 179.53915);
CreateDynamicObject(638, 1291.73877, -1867.37769, 17.10420,   0.00000, 0.00000, 179.53915);
CreateDynamicObject(638, 1291.69763, -1870.18018, 17.10420,   0.00000, 0.00000, 179.53915);
CreateDynamicObject(1215, 1298.16504, -1862.55811, 16.92284,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1304.77905, -1862.54138, 16.92284,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1291.12109, -1862.51465, 16.92284,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1297.95544, -1861.97925, 12.54690,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1304.89746, -1861.98181, 12.54690,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1723, 1300.21008, -1864.31506, 16.40678,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1723, 1303.22949, -1866.16614, 16.40678,   0.00000, 0.00000, 269.75372);
CreateDynamicObject(14651, 1294.52661, -1870.97754, 18.61090,   0.00000, 0.00000, 270.61752);
CreateDynamicObject(14804, 1304.18494, -1872.16479, 17.28065,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14804, 1288.21252, -1867.70410, 17.28065,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1293.85400, -1865.06836, 16.51373,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1481, 1304.61743, -1863.99744, 17.13621,   0.00000, 0.00000, 271.13214);
CreateDynamicObject(1481, 1304.61743, -1864.97742, 17.13620,   0.00000, 0.00000, 271.13211);
CreateDynamicObject(2804, 1304.44812, -1864.03613, 17.47912,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, 1304.43384, -1865.02112, 17.47912,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 1300.88220, -1871.19788, 16.81476,   0.00000, 0.00000, 270.30316);
CreateDynamicObject(2125, 1299.98657, -1869.37097, 16.71232,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 1298.63770, -1869.40625, 16.71232,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 1297.27844, -1869.92712, 16.71232,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2453, 1297.54321, -1870.99097, 17.84375,   0.00000, 0.00000, 359.59393);
CreateDynamicObject(1536, 1287.66125, -1868.07031, 12.52740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1536, 1290.66919, -1868.03394, 12.52740,   0.00000, 0.00000, 180.60970);
CreateDynamicObject(18766, 1279.38098, -1880.56055, 14.29477,   0.00000, 0.00000, 0.33149);
CreateDynamicObject(19362, 1282.53845, -1863.74231, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19362, 1282.50403, -1866.87097, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19362, 1282.48877, -1870.05066, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19304, 1286.12634, -1862.34216, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 1282.62122, -1862.33691, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19304, 1280.85425, -1864.08435, 17.01370,   0.00000, 0.00000, 89.70543);
CreateDynamicObject(19304, 1280.84058, -1867.57239, 17.01370,   0.00000, 0.00000, 89.70543);
CreateDynamicObject(19304, 1280.81360, -1871.05359, 17.01370,   0.00000, 0.00000, 89.70543);
CreateDynamicObject(19362, 1282.47424, -1872.86694, 16.31230,   0.00000, 90.00000, 359.29791);
CreateDynamicObject(19304, 1280.79077, -1872.60425, 17.01370,   0.00000, 0.00000, 89.70543);
CreateDynamicObject(19304, 1282.50598, -1874.32776, 17.01370,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19503, 1086.66931, -1874.75928, 15.42900,   0.00000, 0.00000, 179.78780);
CreateDynamicObject(19503, 1117.60583, -1874.90979, 15.42900,   0.00000, 0.00000, 179.78780);
CreateDynamicObject(19503, 1148.52563, -1875.04883, 15.42900,   0.00000, 0.00000, 179.78780);
CreateDynamicObject(19503, 1179.39893, -1874.92920, 15.40900,   0.00000, 0.00000, 179.88980);
CreateDynamicObject(19503, 1210.25952, -1874.98975, 15.40900,   0.00000, 0.00000, 180.29181);
CreateDynamicObject(1569, 1086.38867, -1872.97571, 13.25164,   0.00000, 0.00000, 358.99188);
CreateDynamicObject(19391, 1087.15845, -1873.03784, 14.73300,   0.00000, 0.00000, 89.04800);
CreateDynamicObject(3851, 1092.86414, -1865.73315, 10.93983,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(19362, 1093.14355, -1865.90503, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1097.38855, -1865.88440, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1097.23303, -1865.74841, 10.93983,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(19362, 1099.45435, -1868.67712, 14.46201,   0.00000, 0.00000, 0.01007);
CreateDynamicObject(19362, 1099.43970, -1875.59326, 14.46504,   0.00000, 0.00000, 0.01007);
CreateDynamicObject(19362, 1095.19202, -1882.60742, 14.16101,   0.00000, 0.00000, 89.74180);
CreateDynamicObject(19362, 1086.58984, -1882.58325, 14.05900,   0.00000, 0.00000, 89.74180);
CreateDynamicObject(3851, 1094.99524, -1882.78711, 10.73883,   90.00000, 0.00000, 89.88955);
CreateDynamicObject(3851, 1086.48621, -1882.74048, 10.73883,   90.00000, 0.00000, 89.88955);
CreateDynamicObject(3851, 1099.69421, -1875.81396, 10.73883,   90.00000, 0.00000, 180.00978);
CreateDynamicObject(3851, 1099.66455, -1868.69556, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(16151, 1081.19446, -1872.50415, 12.85022,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1073.98889, -1870.32349, 14.20526,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1082.33643, -1870.35217, 14.20526,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1073.99512, -1878.00647, 14.20530,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1082.33069, -1878.20618, 14.20530,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1078.74463, -1882.65149, 14.20530,   0.00000, 0.00000, 89.50530);
CreateDynamicObject(19376, 1078.07434, -1869.78186, 16.03410,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1078.08997, -1878.56628, 16.03410,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19435, 1081.56006, -1865.66162, 14.18720,   0.00000, 0.00000, 84.60029);
CreateDynamicObject(19435, 1074.64050, -1865.62451, 14.18720,   0.00000, 0.00000, 93.15930);
CreateDynamicObject(19435, 1079.72925, -1865.59863, 15.84730,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19435, 1076.48926, -1865.59863, 15.84730,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1569, 1075.17285, -1882.73413, 13.27980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1113.43701, -1870.51526, 14.20530,   0.00000, 0.00000, 359.88052);
CreateDynamicObject(19457, 1113.41309, -1878.60754, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1104.63379, -1878.32666, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1104.66235, -1870.44006, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1109.36755, -1882.58154, 14.20530,   0.00000, 0.00000, 268.97821);
CreateDynamicObject(16151, 1112.31482, -1872.83313, 12.85020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19376, 1109.05603, -1869.94556, 16.03410,   0.00000, 90.00000, 0.03021);
CreateDynamicObject(19376, 1109.06409, -1878.69617, 16.03410,   0.00000, 90.00000, 0.03020);
CreateDynamicObject(19362, 1124.05225, -1866.04980, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1128.32068, -1866.07263, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1123.88647, -1865.79077, 10.93983,   90.00000, 0.00000, 89.68855);
CreateDynamicObject(3851, 1127.99951, -1865.82642, 10.93983,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(19362, 1130.37549, -1868.79944, 14.36201,   0.00000, 0.00000, 179.72169);
CreateDynamicObject(19362, 1130.35095, -1875.75879, 14.36201,   0.00000, 0.00000, 179.72169);
CreateDynamicObject(19362, 1126.16199, -1882.75317, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1117.52161, -1882.73840, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1130.61646, -1876.01563, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(3851, 1130.64148, -1869.10095, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(3851, 1125.89148, -1882.96191, 10.33381,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(3851, 1117.36328, -1882.89050, 10.33381,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(1569, 1106.06812, -1882.90894, 13.27980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19435, 1105.58118, -1865.77136, 14.18720,   0.00000, 0.00000, 94.70763);
CreateDynamicObject(19435, 1112.52673, -1865.80798, 14.18720,   0.00000, 0.00000, 83.98878);
CreateDynamicObject(19435, 1107.96509, -1865.73450, 15.84730,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19435, 1111.42505, -1865.75452, 15.84730,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(1569, 1117.31738, -1873.12146, 13.25160,   0.00000, 0.00000, 358.99191);
CreateDynamicObject(19391, 1118.09106, -1873.20593, 14.73300,   0.00000, 0.00000, 89.04800);
CreateDynamicObject(19457, 1135.75354, -1870.63342, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1135.72778, -1878.71863, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1144.26111, -1878.76794, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1144.28943, -1870.62256, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1140.22888, -1882.90527, 14.20530,   0.00000, 0.00000, 268.97821);
CreateDynamicObject(19435, 1136.50525, -1865.92053, 14.18720,   0.00000, 0.00000, 94.55370);
CreateDynamicObject(19435, 1143.41724, -1865.93469, 14.18720,   0.00000, 0.00000, 86.90700);
CreateDynamicObject(19435, 1111.42505, -1865.75452, 15.84730,   90.00000, 0.00000, 90.00000);
CreateDynamicObject(19435, 1137.81396, -1865.86987, 15.84730,   90.00000, 0.00000, 89.79700);
CreateDynamicObject(19435, 1141.19739, -1865.88245, 15.84730,   90.00000, 0.00000, 89.79700);
CreateDynamicObject(19376, 1140.00073, -1870.07520, 16.03410,   0.00000, 90.00000, 0.03020);
CreateDynamicObject(19376, 1140.01636, -1878.83167, 16.03410,   0.00000, 90.00000, 0.03020);
CreateDynamicObject(16151, 1143.22302, -1873.22534, 12.85020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1569, 1148.24622, -1873.19617, 13.25160,   0.00000, 0.00000, 358.99191);
CreateDynamicObject(19362, 1155.00854, -1866.20483, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1159.24890, -1866.20654, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1154.78027, -1865.92090, 10.93983,   90.00000, 0.00000, 89.58553);
CreateDynamicObject(3851, 1159.04016, -1866.00391, 10.93983,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(19362, 1161.29956, -1868.91711, 14.36201,   0.00000, 0.00000, 179.69177);
CreateDynamicObject(19362, 1161.32959, -1875.85913, 14.36201,   0.00000, 0.00000, 179.69177);
CreateDynamicObject(3851, 1161.44299, -1869.12366, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(3851, 1161.46387, -1876.20593, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(19362, 1157.06506, -1882.85327, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1148.46399, -1882.86780, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1148.24536, -1883.01331, 10.33381,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(3851, 1156.78552, -1883.05371, 10.33381,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(1569, 1136.99255, -1883.00281, 13.27980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1175.15625, -1870.56799, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1175.12634, -1878.44434, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1166.64355, -1870.54272, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1166.64380, -1878.68665, 14.20530,   0.00000, 0.00000, 359.88049);
CreateDynamicObject(19457, 1171.46802, -1882.79468, 14.20530,   0.00000, 0.00000, 268.97821);
CreateDynamicObject(19376, 1202.57922, -1878.72803, 16.03410,   0.00000, 90.00000, 0.03020);
CreateDynamicObject(19376, 1170.85754, -1878.82324, 16.03410,   0.00000, 90.00000, 0.03020);
CreateDynamicObject(16151, 1174.13611, -1872.64441, 12.85020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19362, 1185.86169, -1866.05591, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1190.18213, -1866.12000, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1185.80334, -1865.92834, 10.93983,   90.00000, 0.00000, 89.58553);
CreateDynamicObject(3851, 1189.85913, -1865.93091, 10.93983,   90.00000, 0.00000, 89.58553);
CreateDynamicObject(19362, 1192.19836, -1868.83618, 14.36201,   0.00000, 0.00000, 179.95041);
CreateDynamicObject(19362, 1192.17395, -1875.81543, 14.36201,   0.00000, 0.00000, 179.95041);
CreateDynamicObject(19362, 1187.98096, -1882.83679, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(19362, 1179.37866, -1882.82007, 14.36201,   0.00000, 0.00000, 89.52900);
CreateDynamicObject(3851, 1179.11841, -1882.97937, 10.33381,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(3851, 1187.79858, -1882.99231, 10.33381,   90.00000, 0.00000, 89.99156);
CreateDynamicObject(3851, 1192.42944, -1869.24683, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(3851, 1192.41125, -1876.05688, 10.73880,   90.00000, 0.00000, 179.77541);
CreateDynamicObject(1569, 1167.86865, -1882.95642, 13.27980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1569, 1179.10547, -1873.14697, 13.25160,   0.00000, 0.00000, 358.99191);
CreateDynamicObject(19391, 1148.99890, -1873.25732, 14.73300,   0.00000, 0.00000, 89.04800);
CreateDynamicObject(19391, 1179.86560, -1873.24329, 14.73300,   0.00000, 0.00000, 89.04800);
CreateDynamicObject(19376, 1296.46631, -1870.00610, 16.31830,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1306.93506, -1870.00366, 16.31830,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1287.37170, -1866.99463, 17.35320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 1305.02148, -1867.08801, 16.39320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 1305.02856, -1876.54907, 16.43320,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19457, 1206.00012, -1870.64136, 14.20530,   0.00000, 0.00000, 0.28150);
CreateDynamicObject(19457, 1206.02380, -1878.70300, 14.20530,   0.00000, 0.00000, 0.28150);
CreateDynamicObject(19457, 1197.47510, -1870.67175, 14.20530,   0.00000, 0.00000, 0.28150);
CreateDynamicObject(19457, 1197.53198, -1878.55640, 14.20530,   0.00000, 0.00000, 0.28150);
CreateDynamicObject(19457, 1202.23120, -1882.81543, 14.20530,   0.00000, 0.00000, 89.87646);
CreateDynamicObject(1569, 1198.82434, -1883.03760, 13.27980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 1204.99023, -1873.12793, 12.85020,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1569, 1209.95728, -1873.21387, 13.25160,   0.00000, 0.00000, 0.14861);
CreateDynamicObject(19391, 1210.71887, -1873.27246, 14.73300,   0.00000, 0.00000, 89.04800);
CreateDynamicObject(19362, 1216.64600, -1866.00647, 14.36201,   0.00000, 0.00000, 90.14420);
CreateDynamicObject(19362, 1220.93042, -1866.03210, 14.36201,   0.00000, 0.00000, 90.32582);
CreateDynamicObject(3851, 1216.42065, -1865.78137, 10.85980,   90.00000, 0.00000, 90.09560);
CreateDynamicObject(3851, 1220.70654, -1865.79688, 10.85980,   90.00000, 0.00000, 90.09560);
CreateDynamicObject(19362, 1222.96155, -1868.76221, 14.36201,   0.00000, 0.00000, 180.44527);
CreateDynamicObject(19362, 1223.03381, -1875.75269, 14.36201,   0.00000, 0.00000, 180.44527);
CreateDynamicObject(19362, 1218.88513, -1882.76257, 14.36201,   0.00000, 0.00000, 90.32582);
CreateDynamicObject(19362, 1210.29211, -1882.80688, 14.36201,   0.00000, 0.00000, 90.32582);
CreateDynamicObject(3851, 1210.00171, -1883.01514, 10.33381,   90.00000, 0.00000, 90.71291);
CreateDynamicObject(3851, 1218.61865, -1882.97168, 10.33381,   90.00000, 0.00000, 90.71291);
CreateDynamicObject(3851, 1223.17871, -1868.47522, 10.85980,   90.00000, 0.00000, 0.23483);
CreateDynamicObject(3851, 1223.22083, -1875.48022, 10.85980,   90.00000, 0.00000, 0.23483);
CreateDynamicObject(19435, 1167.37598, -1865.87378, 14.18720,   0.00000, 0.00000, 93.45420);
CreateDynamicObject(19435, 1174.26208, -1865.88354, 14.18720,   0.00000, 0.00000, 86.34010);
CreateDynamicObject(19435, 1169.31128, -1865.83374, 15.84730,   90.00000, 0.00000, 89.79700);
CreateDynamicObject(19435, 1172.43054, -1865.85645, 15.84730,   90.00000, 0.00000, 89.79700);
CreateDynamicObject(3361, 1305.95642, -1885.16113, 19.47017,   0.00000, 0.00000, 256.69266);
CreateDynamicObject(19360, 1282.56836, -1878.50793, 12.52437,   0.00000, 0.00000, 0.40604);
CreateDynamicObject(19360, 1282.55469, -1875.41248, 12.52437,   0.00000, 0.00000, 0.40604);
CreateDynamicObject(19360, 1282.53833, -1874.30652, 12.52437,   0.00000, 0.00000, 0.40604);
CreateDynamicObject(19360, 1284.04395, -1872.77148, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1286.11572, -1872.75439, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1287.00171, -1871.49744, 12.52437,   0.00000, 0.00000, 0.40604);
CreateDynamicObject(19360, 1286.96790, -1869.66748, 12.52437,   0.00000, 0.00000, 0.40604);
CreateDynamicObject(19360, 1288.47278, -1868.12329, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1289.63696, -1868.15466, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1292.52759, -1872.69434, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1295.55688, -1872.67175, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1298.59692, -1872.64978, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1300.93787, -1872.62671, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19360, 1303.49878, -1872.60010, 12.52440,   0.00000, 0.00000, 270.59879);
CreateDynamicObject(19376, 1285.55554, -1867.04968, 12.52654,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1296.25610, -1867.08813, 12.52650,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1306.65479, -1867.09058, 12.52650,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1285.55908, -1875.06580, 12.52650,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1296.24634, -1876.67932, 12.52650,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1306.41602, -1876.71289, 12.52650,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(6517, 1301.37109, -1862.25342, 16.16860,   0.00000, 88.00000, 270.00000);
CreateDynamicObject(19376, 1170.84985, -1870.00586, 16.03410,   0.00000, 90.00000, 0.03020);
CreateDynamicObject(19376, 1201.6190, -1870.0530, 16.0341,   0.0000, 90.0000, 0.2353);
CreateDynamicObject(19435, 1204.12122, -1865.88574, 15.85740,   -90.00000, 0.00000, 270.61182);
CreateDynamicObject(19435, 1205.04480, -1865.90625, 14.33155,   0.00000, 0.00000, 267.58243);
CreateDynamicObject(19435, 1200.68506, -1865.89807, 15.85740,   -90.00000, 0.00000, 270.61182);
CreateDynamicObject(19435, 1198.17517, -1865.98450, 14.33155,   0.00000, 0.00000, 276.31540);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- Casa Perto do Monte Chiladi ==-=-=--=-=-=-=-=-=*/
CreateDynamicObject(6300, -2538.88574, -831.71582, 0.50882,   0.00000, 0.00000, 344.24561);
CreateDynamicObject(11490, -2544.80371, -851.57617, 8.51351,   0.00000, 0.00000, 164.74548);
CreateDynamicObject(11491, -2541.96191, -840.88770, 9.99823,   0.00000, 0.00000, 165.49805);
CreateDynamicObject(1481, -2570.71899, -834.57422, 9.26664,   0.00000, 0.00000, 76.25000);
CreateDynamicObject(1481, -2570.39209, -833.25146, 9.26664,   0.00000, 0.00000, 76.24512);
CreateDynamicObject(1481, -2570.05469, -831.96973, 9.26664,   0.00000, 0.00000, 76.24512);
CreateDynamicObject(1786, -2542.59961, -843.62384, 15.13704,   9.00000, 0.00000, 164.75000);
CreateDynamicObject(1828, -2544.43091, -850.00244, 10.02132,   0.00000, 0.00000, 75.75000);
CreateDynamicObject(2224, -2543.73438, -844.55853, 10.02132,   0.00000, 0.00000, 295.50000);
CreateDynamicObject(2231, -2547.43970, -842.90588, 10.01388,   0.00000, 0.00000, 124.00000);
CreateDynamicObject(2231, -2538.70093, -845.72546, 10.01388,   0.00000, 0.00000, 190.74719);
CreateDynamicObject(2596, -2533.41895, -848.64209, 13.57256,   0.00000, 0.00000, 141.50000);
CreateDynamicObject(2596, -2552.86914, -843.85468, 13.57256,   0.00000, 0.00000, 196.24841);
CreateDynamicObject(2826, -2543.85645, -855.75195, 10.02132,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2564, -2541.10742, -846.00464, 10.02132,   0.00000, 0.00000, 254.99998);
CreateDynamicObject(2596, -2549.41040, -852.75415, 13.50006,   0.00000, 0.00000, 118.00000);
CreateDynamicObject(1723, -2541.06836, -853.14362, 10.02132,   0.00000, 0.00000, 255.00000);
CreateDynamicObject(1724, -2548.87183, -854.36200, 10.02132,   0.00000, 0.00000, 132.00000);
CreateDynamicObject(2173, -2548.95703, -851.41992, 10.02132,   0.00000, 0.00000, 77.24487);
CreateDynamicObject(2313, -2547.78027, -846.78326, 10.02132,   0.00000, 0.00000, 72.50000);
CreateDynamicObject(2356, -2548.00977, -851.54590, 10.02132,   0.00000, 0.00000, 27.99866);
CreateDynamicObject(1786, -2547.93652, -846.16229, 10.52109,   0.00000, 0.00000, 72.50000);
CreateDynamicObject(2190, -2548.56860, -850.05609, 10.80777,   0.00000, 0.00000, 5.50000);
CreateDynamicObject(626, -2535.64771, -841.18976, 12.06992,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(626, -2545.79688, -838.43555, 12.06992,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1724, -2541.63623, -842.91193, 10.02132,   0.00000, 0.00000, 164.24524);
CreateDynamicObject(2315, -2542.48145, -841.11523, 10.00255,   0.00000, 0.00000, 345.24536);
CreateDynamicObject(1724, -2541.91528, -839.72778, 10.02132,   0.00000, 0.00000, 344.74011);
CreateDynamicObject(1724, -2544.28027, -841.16016, 10.02132,   0.00000, 0.00000, 74.48730);
CreateDynamicObject(1724, -2539.01807, -841.51385, 10.02132,   0.00000, 0.00000, 253.98730);
CreateDynamicObject(1808, -2541.81079, -856.40466, 10.02132,   0.00000, 0.00000, 220.00000);
CreateDynamicObject(2226, -2542.95410, -856.29529, 10.02132,   0.00000, 0.00000, 163.25000);
CreateDynamicObject(1668, -2541.84570, -841.65491, 10.66488,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1664, -2542.83887, -841.03906, 10.66488,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1667, -2541.67627, -840.92468, 10.58676,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, -2540.71313, -841.55859, 10.54818,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2826, -2541.70850, -841.31036, 10.49632,   0.00000, 0.00000, 70.00000);
CreateDynamicObject(6300, -2527.36694, -790.93396, 0.50882,   0.00000, 0.00000, 344.24561);
CreateDynamicObject(982, -2509.71655, -840.18079, 9.24707,   0.00000, 0.00000, 344.25000);
CreateDynamicObject(982, -2516.66650, -864.82220, 9.24707,   0.00000, 0.00000, 344.24561);
CreateDynamicObject(982, -2532.48364, -873.67657, 9.24707,   0.00000, 0.00000, 74.24561);
CreateDynamicObject(982, -2566.25537, -864.11102, 9.24707,   0.00000, 0.00000, 74.24011);
CreateDynamicObject(982, -2575.10693, -848.28143, 9.24707,   0.00000, 0.00000, 344.24561);
CreateDynamicObject(982, -2568.18335, -823.67981, 9.24707,   0.00000, 0.00000, 344.24561);
CreateDynamicObject(3505, -2576.89600, -859.99060, 8.55766,   0.00000, 0.00000, 140.00000);
CreateDynamicObject(3505, -2568.20044, -827.85669, 8.55766,   0.00000, 0.00000, 61.99878);
CreateDynamicObject(3505, -2510.25562, -836.72546, 8.55766,   0.00000, 0.00000, 13.99585);
CreateDynamicObject(3505, -2520.75464, -875.28552, 8.55766,   0.00000, 0.00000, 277.99109);
CreateDynamicObject(11495, -2552.92310, -878.34155, 4.18882,   22.24979, 359.72992, 344.10229);
CreateDynamicObject(11495, -2556.24585, -888.64581, 0.02500,   0.00000, 0.00000, 253.75000);
CreateDynamicObject(16151, -2530.50513, -851.65704, 8.88851,   0.00000, 0.00000, 252.00000);
CreateDynamicObject(1281, -2531.78296, -845.47821, 9.36389,   0.00000, 0.00000, 72.00000);
CreateDynamicObject(1281, -2530.06714, -840.14856, 9.36389,   0.00000, 0.00000, 71.99890);
CreateDynamicObject(1281, -2528.76147, -835.16785, 9.36389,   0.00000, 0.00000, 71.99890);
CreateDynamicObject(1432, -2526.68457, -846.54871, 8.61351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, -2525.07471, -841.85321, 8.61351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, -2523.80664, -836.98535, 8.61351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1281, -2521.40576, -848.04022, 9.36389,   0.00000, 0.00000, 71.99890);
CreateDynamicObject(1281, -2519.87720, -843.37775, 9.36389,   0.00000, 0.00000, 71.99890);
CreateDynamicObject(1281, -2518.57251, -838.56610, 9.36389,   0.00000, 0.00000, 71.99890);
CreateDynamicObject(1432, -2517.07349, -849.28180, 8.61351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, -2515.60156, -844.83521, 8.61351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, -2514.37671, -840.20532, 8.61351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3921, -2557.52466, -844.98224, 9.10100,   0.00000, 0.00000, 254.25000);
CreateDynamicObject(3921, -2559.77319, -844.35681, 9.10100,   0.00000, 0.00000, 254.24561);
CreateDynamicObject(626, -2563.29688, -843.20673, 10.56993,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2357, -2555.92383, -842.29071, 8.95867,   0.00000, 0.00000, 344.00000);
CreateDynamicObject(2357, -2560.00586, -841.11841, 8.95867,   0.00000, 0.00000, 343.99841);
CreateDynamicObject(2290, -2554.73315, -839.76526, 8.56351,   0.00000, 0.00000, 326.00000);
CreateDynamicObject(2290, -2557.43262, -838.76526, 8.56351,   0.00000, 0.00000, 342.74731);
CreateDynamicObject(2290, -2560.16455, -837.91992, 8.56351,   0.00000, 0.00000, 342.74597);
CreateDynamicObject(2290, -2562.84741, -837.87695, 8.56351,   0.00000, 0.00000, 1.74597);
CreateDynamicObject(2357, -2561.74780, -840.61896, 8.95867,   0.00000, 0.00000, 343.99841);
CreateDynamicObject(1639, -2527.68335, -865.24292, 8.55766,   0.00000, 0.00000, 75.00000);
CreateDynamicObject(1639, -2529.26294, -871.14520, 8.55766,   0.00000, 0.00000, 255.24818);
CreateDynamicObject(1255, -2565.39063, -859.43365, 9.13741,   0.00000, 0.00000, 252.50000);
CreateDynamicObject(1255, -2567.60840, -858.82056, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1255, -2569.63501, -858.26086, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1255, -2571.49219, -857.74786, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1255, -2573.78101, -857.11383, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1255, -2563.50732, -859.93823, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1255, -2561.42969, -860.49390, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1255, -2559.53223, -860.94977, 9.13741,   0.00000, 0.00000, 252.49878);
CreateDynamicObject(1754, -2565.02051, -839.57422, 8.56351,   0.00000, 0.00000, 74.00000);
CreateDynamicObject(1754, -2552.30444, -842.96381, 8.56351,   0.00000, 0.00000, 253.99843);
CreateDynamicObject(1668, -2554.52637, -842.65704, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1668, -2555.61865, -842.34070, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1668, -2556.58740, -842.05408, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1668, -2557.54761, -841.74457, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1669, -2558.45044, -841.50189, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1669, -2559.05591, -841.33557, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1669, -2559.65381, -841.14575, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1664, -2560.22925, -840.97797, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1664, -2561.01807, -840.73785, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1664, -2561.81079, -840.50995, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1664, -2562.87183, -840.20868, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1664, -2563.55273, -839.96759, 9.53566,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1598, -2527.15771, -871.51520, 8.83766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1598, -2525.75439, -865.78986, 8.83766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1598, -2529.84961, -864.65649, 8.83766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1598, -2531.49731, -870.26978, 8.83766,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, -2562.11182, -851.75702, 8.88851,   0.00000, 0.00000, 72.74890);
CreateDynamicObject(2806, -2570.60913, -834.58984, 9.50833,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, -2570.27002, -833.30408, 9.45760,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, -2570.07178, -831.96082, 9.45760,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, -2569.82959, -832.02283, 9.45760,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1646, -2570.70654, -843.45551, 8.90094,   0.00000, 0.00000, 252.00000);
CreateDynamicObject(1646, -2571.15283, -845.12262, 8.90094,   0.00000, 0.00000, 251.99890);
CreateDynamicObject(1646, -2571.67163, -846.76996, 8.90094,   0.00000, 0.00000, 251.99890);
CreateDynamicObject(1646, -2572.20044, -848.46631, 8.90094,   0.00000, 0.00000, 251.99890);
CreateDynamicObject(1646, -2572.75269, -850.15228, 8.90094,   0.00000, 0.00000, 251.99890);
CreateDynamicObject(1646, -2570.16650, -841.78809, 8.90094,   0.00000, 0.00000, 251.99890);
CreateDynamicObject(644, -2544.18140, -857.42102, 8.86351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(644, -2547.95215, -856.37610, 8.86351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(644, -2545.16992, -869.77600, 8.86351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(644, -2553.57300, -867.38611, 8.86351,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1807, -2569.35596, -829.03503, 9.11168,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1516, -2570.68335, -836.07855, 8.56351,   0.00000, 0.00000, 343.00000);
CreateDynamicObject(1516, -2569.09668, -830.76288, 8.56351,   0.00000, 0.00000, 342.99866);
CreateDynamicObject(335, -2571.11841, -835.74603, 9.13851,   272.75000, 0.00000, 344.75000);
CreateDynamicObject(335, -2571.26147, -836.25281, 9.13851,   272.74658, 0.00000, 344.74548);
CreateDynamicObject(335, -2569.71411, -830.95209, 9.13851,   272.74658, 0.00000, 344.74548);
CreateDynamicObject(335, -2569.57056, -830.44348, 9.13851,   272.74658, 0.00000, 344.74548);
CreateDynamicObject(2863, -2570.54370, -836.08960, 9.11350,   0.00000, 0.00000, 292.00000);
CreateDynamicObject(2863, -2568.96509, -830.79706, 9.11350,   0.00000, 0.00000, 291.99463);
CreateDynamicObject(2828, -2549.11157, -851.50830, 10.80945,   0.00000, 0.00000, 276.00000);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Casa Mad dog ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(19129, 1280.55969, -823.82758, 82.13050,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16088, 1280.59766, -831.40027, 80.39077,   0.00000, 0.00000, 269.80997);
CreateDynamicObject(19430, 1240.12463, -767.25287, 92.41136,   0.00000, 0.00000, 91.59683);
CreateDynamicObject(19430, 1250.87146, -767.23322, 92.41136,   0.00000, 0.00000, 91.59683);
CreateDynamicObject(983, 1257.97534, -812.87915, 83.81880,   0.00000, 0.00000, 358.71909);
CreateDynamicObject(983, 1303.90002, -797.20886, 83.83150,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 1275.69922, -829.12598, 87.47983,   0.00000, 0.00000, 179.66710);
CreateDynamicObject(11544, 1250.01917, -799.15491, 88.61620,   0.00000, 0.00000, 88.59969);
CreateDynamicObject(11544, 1255.97021, -799.36127, 88.59620,   0.00000, 0.00000, 268.08041);
CreateDynamicObject(968, 1304.88367, -787.02069, 90.18370,   0.00000, -90.00000, 359.00000);
CreateDynamicObject(2632, 1297.44885, -790.23474, 87.31175,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2631, 1301.51245, -790.21765, 87.31271,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2629, 1301.11133, -794.40747, 87.31298,   0.00000, 0.00000, 269.34003);
CreateDynamicObject(2630, 1295.98572, -788.00653, 87.31296,   0.00000, 0.00000, 0.37587);
CreateDynamicObject(2630, 1291.63391, -785.76312, 87.31296,   0.00000, 0.00000, 0.37587);
CreateDynamicObject(2630, 1297.47974, -787.95660, 87.31296,   0.00000, 0.00000, 0.37587);
CreateDynamicObject(2913, 1301.65759, -794.88000, 88.26140,   0.00000, 89.00000, 90.85090);
CreateDynamicObject(2628, 1296.13464, -785.53064, 87.32675,   0.00000, 0.00000, 359.49594);
CreateDynamicObject(2628, 1297.27209, -785.42749, 87.26770,   0.00000, 0.00000, 359.49591);
CreateDynamicObject(1985, 1301.23584, -786.91577, 90.12691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1985, 1299.38293, -786.89142, 90.12075,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2629, 1299.66162, -796.46204, 87.31298,   0.00000, 0.00000, 269.34003);
CreateDynamicObject(2913, 1300.20618, -796.96179, 88.28140,   0.00000, 89.00000, 90.85090);
CreateDynamicObject(1215, 1302.92871, -785.50580, 87.41408,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1302.94629, -792.59839, 87.41408,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1295.57800, -791.77368, 87.41408,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(968, 1290.91321, -786.75824, 90.18370,   0.00000, -90.00000, 178.83569);
CreateDynamicObject(1215, 1294.86218, -800.02710, 87.41408,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14804, 1258.04346, -812.11969, 88.21889,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1257.71179, -815.98535, 83.13660,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1294.22815, -821.00708, 82.13411,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16151, 1293.71387, -827.05786, 82.54175,   0.00000, 0.00000, 0.72135);
CreateDynamicObject(19381, 1289.71631, -828.99036, 82.09390,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 1289.58313, -819.35809, 82.09390,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2232, 1290.28333, -833.45068, 76.79105,   0.00000, 0.00000, 271.02289);
CreateDynamicObject(1594, 1273.30054, -837.05127, 76.76386,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 1276.20239, -834.34662, 76.76386,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 1279.48743, -836.67444, 76.76386,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 1282.05310, -834.19586, 76.76386,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 1284.77808, -836.92828, 76.76386,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1594, 1287.26611, -834.05640, 76.76386,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1270.93323, -838.19830, 76.26249,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1278.36353, -831.02881, 76.26249,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1481, 1290.03479, -835.84778, 76.92710,   0.00000, 0.00000, 268.93399);
CreateDynamicObject(1481, 1290.03418, -836.88861, 76.92710,   0.00000, 0.00000, 268.93399);
CreateDynamicObject(1481, 1290.01196, -837.94836, 76.92710,   0.00000, 0.00000, 268.93399);
CreateDynamicObject(2804, 1290.03674, -836.94482, 77.07980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, 1290.01587, -837.96460, 77.07980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2804, 1290.03796, -835.88483, 77.07980,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1642, 1274.83679, -799.51544, 87.37864,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1642, 1276.62109, -799.56097, 87.37864,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1643, 1278.41260, -799.42194, 87.31048,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1643, 1280.17261, -799.45264, 87.31048,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1641, 1281.90015, -799.48987, 87.31031,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1641, 1283.62451, -799.50293, 87.31031,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1645, 1272.89258, -799.47729, 87.41030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1645, 1271.19055, -799.47723, 87.41030,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1368, 1269.14490, -824.75543, 82.85323,   0.00000, 0.00000, 89.17142);
CreateDynamicObject(1368, 1269.13953, -827.33899, 82.85323,   0.00000, 0.00000, 89.17142);
CreateDynamicObject(1368, 1269.11072, -829.96246, 82.85323,   0.00000, 0.00000, 89.17142);
CreateDynamicObject(983, 1270.57117, -830.60693, 82.59707,   0.00000, 0.00000, 0.20100);
CreateDynamicObject(1281, 1261.66223, -808.44653, 88.07436,   0.00000, 0.00000, 345.44003);
CreateDynamicObject(1281, 1266.48669, -802.51770, 88.07436,   0.00000, 0.00000, 345.44003);
CreateDynamicObject(1281, 1260.61902, -803.24292, 88.07436,   0.00000, 0.00000, 345.44003);
CreateDynamicObject(1281, 1255.83057, -794.86353, 88.07436,   0.00000, 0.00000, 345.44003);
CreateDynamicObject(1281, 1267.24768, -809.31647, 88.07436,   0.00000, 0.00000, 345.44003);
CreateDynamicObject(14391, 1280.25598, -831.68060, 83.14245,   0.00000, 0.00000, 270.07745);
CreateDynamicObject(2232, 1276.46240, -830.54175, 83.08673,   0.00000, 0.00000, 132.52014);
CreateDynamicObject(2232, 1276.01074, -830.02777, 83.08673,   0.00000, 0.00000, 132.52014);
CreateDynamicObject(2232, 1275.54834, -829.53070, 83.08673,   0.00000, 0.00000, 132.52014);
CreateDynamicObject(2232, 1275.06348, -828.99487, 83.08673,   0.00000, 0.00000, 132.52014);
CreateDynamicObject(2232, 1275.06348, -828.99487, 84.22744,   0.00000, 0.00000, 132.52014);
CreateDynamicObject(2232, 1275.54834, -829.53070, 84.23470,   0.00000, 0.00000, 132.52010);
CreateDynamicObject(2232, 1276.01074, -830.02777, 84.23880,   0.00000, 0.00000, 132.52010);
CreateDynamicObject(2232, 1276.46240, -830.54169, 84.23480,   0.00000, 0.00000, 132.52010);
CreateDynamicObject(2232, 1284.83826, -831.06012, 82.79541,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1285.14478, -830.53918, 82.79541,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1285.48730, -830.00128, 82.79541,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1285.76611, -829.51569, 82.79541,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1285.76611, -829.51569, 83.90343,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1285.47876, -829.98322, 83.91160,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1285.14478, -830.53918, 83.89939,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(2232, 1284.83826, -831.06012, 83.90170,   0.00000, 0.00000, 239.37480);
CreateDynamicObject(19365, 1279.03418, -830.82001, 81.57200,   0.00000, 0.00000, 89.77290);
CreateDynamicObject(19365, 1281.45740, -830.83252, 81.57200,   0.00000, 0.00000, 89.77290);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-==-=- Igreja =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-==-=-=*/
CreateDynamicObject(9931,1947.54003906,-368.51269531,1108.01086426,0.00000000,0.00000000,90.00000000);
CreateObject(3976,1970.65722656,-341.23883057,1100.22949219,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(9931,1980.55761719,-368.51562500,1108.01086426,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(3976,1962.70117188,-400.46679688,1109.52941895,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(11472,1964.78710938,-372.02050781,1089.22351074,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(11472,1963.28967285,-372.02139282,1089.22351074,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(11472,1964.04479980,-372.98049927,1089.46386719,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2896,1959.29248047,-370.91723633,1093.34313965,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(11472,1962.66918945,-373.82989502,1087.66955566,90.00000000,180.00000000,270.00000000);
CreateDynamicObject(11472,1965.41259766,-373.81991577,1087.66992188,90.00000000,180.00000000,90.00000000);
CreateDynamicObject(970,1970.61437988,-368.20404053,1093.28039551,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1968.51074219,-368.20703125,1093.28039551,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1957.52185059,-368.25833130,1093.28039551,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1959.61914062,-368.25585938,1093.28039551,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(6959,1963.97839355,-368.12149048,1072.75439453,90.00000000,0.00000000,0.25000000);
CreateDynamicObject(2960,1964.05883789,-348.98986816,1101.36645508,0.00000000,90.00000000,89.99450684);
CreateDynamicObject(2960,1963.98291016,-349.00000000,1101.70666504,90.00000000,0.00000000,179.99450684);
CreateDynamicObject(2960,1964.05871582,-348.99044800,1100.00585938,0.00000000,90.00000000,90.00000000);
CreateDynamicObject(3872,1964.02685547,-346.40850830,1102.33020020,0.00000000,155.25000000,90.27026367);
CreateDynamicObject(1667,1962.98828125,-370.41271973,1093.62292480,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1664,1962.83520508,-370.42520142,1093.70104980,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2868,1965.95605469,-370.30142212,1093.53430176,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2869,1964.02185059,-373.78527832,1093.66992188,0.00000000,0.00000000,323.75000000);
CreateDynamicObject(2870,1965.26269531,-373.64062500,1093.66992188,0.00000000,0.00000000,350.03002930);
CreateDynamicObject(2270,1965.47998047,-352.47622681,1093.48364258,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(2257,1964.05615234,-373.94995117,1095.86132812,0.00000000,0.00000000,180.00000000);
CreateDynamicObject(2271,1962.60437012,-352.58059692,1093.48803711,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2357,1964.05090332,-370.68905640,1093.12402344,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2808,1957.51367188,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1959.68164062,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1970.61328125,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1968.44238281,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1961.85546875,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1966.27246094,-364.26171875,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2868,1962.14697266,-370.30624390,1093.53430176,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(948,1966.09277344,-374.17285156,1092.72888184,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(948,1961.96313477,-374.22888184,1092.72888184,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2894,1963.95080566,-370.94277954,1093.53430176,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(3462,1959.30407715,-374.06838989,1094.24255371,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(3462,1968.78125000,-374.06835938,1094.24255371,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(949,1956.02258301,-353.46194458,1095.83190918,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2946,1965.59985352,-349.21301270,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2946,1962.47033691,-349.19955444,1091.94543457,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(2808,1970.60681152,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1968.43054199,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1966.25378418,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1957.52233887,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1959.69580078,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1961.86865234,-360.67248535,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1957.51660156,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1959.69250488,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1961.86779785,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1970.61279297,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1968.43701172,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(2808,1966.26782227,-357.18194580,1092.59191895,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(14705,1962.68139648,-373.67498779,1093.91894531,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(14410,1968.61401367,-349.16000366,1092.01757812,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(11472,1971.98046875,-351.97091675,1092.19567871,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(11472,1971.98046875,-353.19616699,1092.19567871,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(14410,1959.47412109,-349.41287231,1092.01660156,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(11472,1956.10046387,-351.96487427,1092.19567871,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(11472,1956.10046387,-353.19616699,1092.19567871,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(11472,1965.10974121,-347.94531250,1095.44091797,0.00000000,90.00000000,180.00000000);
CreateDynamicObject(11472,1962.98315430,-347.94104004,1095.44018555,0.00000000,270.00000000,179.99450684);
CreateDynamicObject(1698,1962.46606445,-352.53399658,1095.31420898,0.00000000,0.00000000,270.27026367);
CreateDynamicObject(1698,1962.87316895,-352.53399658,1095.53918457,0.00000000,0.00000000,270.26916504);
CreateDynamicObject(1698,1963.24682617,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504);
CreateDynamicObject(1698,1965.60021973,-352.53399658,1095.31420898,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(1698,1965.20434570,-352.53399658,1095.53918457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(1698,1964.72375488,-352.53399658,1095.76416016,0.00000000,0.00000000,270.26916504);
CreateDynamicObject(970,1964.05688477,-353.88497925,1096.74243164,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1959.94470215,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1955.77246094,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1968.17297363,-353.88497925,1095.74719238,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1972.25000000,-353.88589478,1095.74719238,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1959.97607422,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1968.10302734,-351.29064941,1095.74719238,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(970,1965.96203613,-349.21618652,1096.74169922,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(970,1962.13757324,-349.21618652,1096.74243164,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2887,1964.04821777,-349.34906006,1094.78955078,90.00000000,0.00000000,0.00000000);
CreateDynamicObject(949,1971.95068359,-353.46038818,1095.83190918,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(948,1965.68554688,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(948,1962.38427734,-352.45767212,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1955.84399414,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1957.28173828,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1958.71166992,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1960.15112305,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1971.77673340,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1970.34277344,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1968.90930176,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1742,1967.47534180,-353.83831787,1091.94543457,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(949,1961.60729980,-354.34103394,1092.58166504,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(949,1966.46325684,-354.34805298,1092.58166504,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(1720,1970.09338379,-373.59497070,1092.72888184,0.00000000,0.00000000,180.00000000);
CreateDynamicObject(1720,1970.91198730,-373.58316040,1092.72888184,0.00000000,0.00000000,179.99450684);
CreateDynamicObject(741,1969.29675293,-369.22723389,1093.71252441,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(3440,1969.29125977,-370.86264038,1091.08007812,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(14455,1955.32812500,-348.54144287,1096.87585449,0.00000000,0.00000000,270.00000000);
CreateDynamicObject(14455,1972.78356934,-352.90487671,1096.86743164,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.51916504,-365.60891724,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.51843262,-363.77880859,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.51867676,-361.94879150,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.52172852,-360.12713623,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.52636719,-358.30560303,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.52600098,-356.47940063,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.52343750,-354.64611816,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.52136230,-352.82815552,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.51867676,-350.99310303,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2842,1964.52026367,-349.16046143,1091.94543457,0.00000000,0.00000000,90.00000000);
CreateDynamicObject(2833,1963.55749512,-369.65057373,1092.72888184,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(2834,1968.81579590,-372.52481079,1092.72888184,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(6959,1951.26586914,-360.22650146,1095.56030273,310.00000000,180.00000000,90.00000000);
CreateDynamicObject(6959,1976.87695312,-356.75421143,1095.51965332,310.00000000,180.00000000,270.00000000);
CreateDynamicObject(6959,1958.95715332,-378.23306274,1096.33813477,309.99572754,179.99450684,180.00000000);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Posto de Gasolina ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(970, 1949.69, -1792.36, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1945.55, -1792.36, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1941.41, -1792.36, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1937.27, -1792.51, 13.10,   0.00, 0.00, 4.00);
CreateDynamicObject(19425, 1951.67, -1790.35, 12.38,   0.00, 0.00, 90.00);
CreateDynamicObject(19425, 1951.67, -1784.40, 12.38,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1951.77, -1787.35, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(8843, 1938.23, -1771.53, 12.39,   0.00, 0.00, 180.00);
CreateDynamicObject(1215, 1949.57, -1787.38, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1953.94, -1787.38, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1942.44, -1765.85, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1942.45, -1765.39, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1942.44, -1764.95, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1942.19, -1764.54, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1941.63, -1764.43, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1941.05, -1764.61, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1940.90, -1764.96, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1940.86, -1765.38, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1940.90, -1765.89, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1946.94, -1775.34, 13.10,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1946.94, -1771.21, 13.10,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1946.94, -1767.08, 13.10,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1947.06, -1762.94, 13.10,   0.00, 0.00, 87.00);
CreateDynamicObject(970, 1948.59, -1759.36, 13.10,   0.00, 0.00, 47.00);
CreateDynamicObject(970, 1954.85, -1759.41, 13.10,   0.00, 0.00, -47.00);
CreateDynamicObject(970, 1956.35, -1762.98, 13.10,   0.00, 0.00, -87.00);
CreateDynamicObject(970, 1956.44, -1767.08, 13.10,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1956.44, -1771.21, 13.10,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1956.44, -1775.34, 13.10,   0.00, 0.00, 90.00);
CreateDynamicObject(970, 1947.98, -1779.16, 13.10,   0.00, 0.00, 120.00);
CreateDynamicObject(970, 1955.38, -1779.20, 13.10,   0.00, 0.00, -120.00);
CreateDynamicObject(970, 1951.66, -1780.99, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1949.23, -1781.10, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1954.05, -1781.05, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1951.58, -1757.60, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(640, 1956.02, -1767.66, 13.30,   0.00, 0.00, 0.00);
CreateDynamicObject(640, 1956.02, -1772.66, 13.30,   0.00, 0.00, 0.00);
CreateDynamicObject(640, 1947.40, -1767.66, 13.30,   0.00, 0.00, 0.00);
CreateDynamicObject(640, 1947.40, -1772.66, 13.30,   0.00, 0.00, 0.00);
CreateDynamicObject(638, 1951.71, -1780.61, 13.30,   0.00, 0.00, 90.00);
CreateDynamicObject(638, 1948.34, -1778.86, 13.30,   0.00, 0.00, 210.00);
CreateDynamicObject(638, 1955.14, -1778.61, 13.30,   0.00, 0.00, -210.00);
CreateDynamicObject(1215, 1951.89, -1792.31, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1936.19, -1761.00, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1942.60, -1778.80, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1942.60, -1772.80, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1942.60, -1767.30, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1940.80, -1772.80, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1940.80, -1778.80, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1940.80, -1767.30, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(6976, 1933.50, -1788.20, 7.95,   0.00, 0.00, 177.25);
CreateDynamicObject(3928, 1921.50, -1776.20, 17.00,   0.00, 0.00, 90.00);
CreateDynamicObject(1215, 1927.40, -1785.30, 17.50,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1926.90, -1767.60, 17.50,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1915.90, -1767.40, 17.50,   0.00, 0.00, 0.00);
CreateDynamicObject(1256, 1921.20, -1765.80, 13.20,   0.00, 0.00, 270.00);
CreateDynamicObject(1256, 1915.90, -1765.80, 13.20,   0.00, 0.00, 270.00);
CreateDynamicObject(1262, 1908.50, -1771.60, 16.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1262, 1914.10, -1771.60, 16.00,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1909.00, -1769.70, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1909.00, -1764.90, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1914.12, -1764.67, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1914.00, -1769.40, 12.90,   0.00, 0.00, 270.00);
CreateDynamicObject(13562, 1942.20, -1771.80, 19.70,   0.00, 9.00, 0.00);
CreateDynamicObject(1319, 1913.30, -1772.10, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1909.40, -1771.80, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1908.90, -1762.20, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(2837, 1915.40, -1763.90, 12.50,   0.00, 0.00, 0.00);
CreateDynamicObject(1291, 1918.50, -1765.60, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1444, 1954.40, -1760.20, 13.40,   0.00, 0.00, 300.00);
CreateDynamicObject(7391, 1911.10, -1776.90, 21.20,   0.00, 0.00, 88.00);
CreateDynamicObject(1234, 1929.60, -1786.00, 14.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1363, 1933.90, -1762.20, 13.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1256, 1928.70, -1768.90, 13.20,   0.00, 0.00, 180.00);
CreateDynamicObject(3459, 1949.70, -1778.50, 11.01,   0.00, 180.00, 0.00);
CreateDynamicObject(3459, 1949.60, -1764.10, 11.00,   0.00, 179.99, 0.00);
CreateDynamicObject(3459, 1949.70, -1771.10, 11.00,   0.00, 179.99, 0.00);
CreateDynamicObject(1367, 1951.80, -1767.60, 13.20,   0.00, 0.00, 90.00);
CreateDynamicObject(1368, 1951.90, -1775.50, 13.20,   0.00, 0.00, 90.00);
CreateDynamicObject(1368, 1951.90, -1770.40, 13.20,   0.00, 0.00, 90.00);
CreateDynamicObject(1368, 1951.90, -1765.00, 13.20,   0.00, 0.00, 90.00);
CreateDynamicObject(1257, 1923.10, -1758.90, 13.80,   0.00, 0.00, 270.00);
CreateDynamicObject(9314, 1935.10, -1765.40, 20.30,   0.00, 0.00, 310.00);
CreateDynamicObject(9314, 1948.10, -1780.30, 20.30,   0.00, 0.00, 310.00);
CreateDynamicObject(1215, 1951.50, -1780.40, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1951.70, -1759.60, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1955.90, -1770.30, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1947.60, -1770.50, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1941.70, -1764.00, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1941.70, -1781.90, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1940.90, -1770.00, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1942.60, -1770.10, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1942.60, -1775.80, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1940.90, -1775.90, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1367, 1951.90, -1773.20, 13.20,   0.00, 0.00, 90.00);
CreateDynamicObject(950, 1950.90, -1775.60, 13.10,   0.00, 0.00, 91.00);
CreateDynamicObject(950, 1951.00, -1770.60, 13.10,   0.00, 0.00, 91.00);
CreateDynamicObject(950, 1951.10, -1765.10, 13.10,   0.00, 0.00, 91.00);
CreateDynamicObject(8843, 1944.30, -1772.20, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(8843, 1911.30, -1775.10, 12.40,   0.00, 0.00, 180.00);
CreateDynamicObject(8843, 1922.50, -1790.70, 12.40,   0.00, 0.00, 270.00);
CreateDynamicObject(3472, 1924.30, -1796.20, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1676, 1914.20, -1774.60, 14.40,   0.00, 0.00, 90.00);
CreateDynamicObject(2921, 1949.60, -1782.60, 18.40,   0.00, 0.00, 130.00);
CreateDynamicObject(2921, 1929.60, -1765.50, 15.70,   0.00, 0.00, 158.00);
CreateDynamicObject(2921, 1901.50, -1762.40, 16.80,   0.00, 0.00, 180.00);
CreateDynamicObject(970, 1906.90, -1763.50, 12.90,   0.00, 0.00, 180.00);
CreateDynamicObject(970, 1901.70, -1763.40, 12.90,   0.00, 0.00, 179.99);
CreateDynamicObject(2921, 1908.60, -1780.90, 16.10,   0.00, 0.00, 170.00);
CreateDynamicObject(2922, 1928.30, -1777.60, 14.20,   0.00, 0.00, 272.00);
CreateDynamicObject(970, 1931.60, -1784.88, 13.10,   0.00, 0.00, 270.75);
CreateDynamicObject(970, 1931.56, -1779.74, 13.10,   0.00, 0.00, 270.00);
CreateDynamicObject(970, 1931.61, -1769.90, 13.10,   0.00, 0.00, 270.00);
CreateDynamicObject(2921, 1941.50, -1763.30, 18.20,   0.00, 0.00, 0.00);
CreateDynamicObject(968, 1914.60, -1767.80, 13.80,   0.00, 315.00, 0.00);
CreateDynamicObject(1233, 1941.68, -1763.83, 13.90,   0.00, 0.00, 180.00);
CreateDynamicObject(1233, 1941.70, -1782.50, 13.90,   0.00, 0.00, 359.99);
CreateDynamicObject(1886, 1943.50, -1772.50, 18.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1941.18, -1787.64, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1942.03, -1787.52, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1941.59, -1787.15, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1941.63, -1787.95, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1679, 1929.30, -1762.50, 13.00,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1933.40, -1758.00, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1935.00, -1759.00, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1936.00, -1760.70, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1936.20, -1762.90, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1935.00, -1765.40, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1932.80, -1766.80, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1214, 1931.50, -1757.60, 12.40,   0.00, 0.00, 0.00);
CreateDynamicObject(1250, 1913.70, -1762.10, 13.40,   0.00, 0.00, 270.00);
CreateDynamicObject(1306, 1901.00, -1794.50, 20.00,   0.00, 0.00, 270.00);
CreateDynamicObject(1215, 1949.20, -1764.20, 19.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1934.20, -1780.00, 19.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1917.00, -1759.00, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1906.50, -1759.70, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1918.00, -1796.40, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1928.80, -1796.40, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1935.11, -1792.74, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1270, 1931.30, -1796.30, 13.20,   0.00, 0.00, 180.00);
CreateDynamicObject(1270, 1922.20, -1796.40, 13.20,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1927.80, -1796.40, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1215, 1918.80, -1796.40, 13.10,   0.00, 0.00, 0.00);
CreateDynamicObject(1340, 1925.90, -1764.60, 13.70,   0.00, 0.00, 90.00);
CreateDynamicObject(1319, 1933.80, -1795.60, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1924.30, -1795.30, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1914.60, -1795.80, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1924.30, -1793.70, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1914.40, -1793.90, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(1319, 1933.70, -1793.40, 12.90,   0.00, 0.00, 0.00);
CreateDynamicObject(970, 1928.40, -1796.20, 12.90,   0.00, 0.00, 359.98);
CreateDynamicObject(970, 1918.50, -1796.30, 12.90,   0.00, 0.00, 359.98);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Casa Hospital ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(1215, 1294.74792, -800.40320, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1297.76501, -799.13995, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1300.39124, -797.15167, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1302.38367, -794.55536, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1303.69348, -791.41125, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1304.04407, -788.44061, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1303.68274, -784.80432, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1300.03162, -784.72333, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1295.21887, -784.79425, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1295.16724, -788.50525, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1295.09460, -792.01770, 87.31083,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(673, 246.55911, -1269.62134, 71.78906,   356.85840, 0.00000, 3.14159);
CreateDynamicObject(3749, 279.08716, -1259.01270, 78.21621,   0.00000, 0.00000, -47.22001);
CreateDynamicObject(13681, 261.57761, -1290.52332, 81.66812,   0.00000, 0.00000, 216.54048);
CreateDynamicObject(19449, 257.92517, -1303.46753, 74.70926,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 273.47733, -1292.23096, 74.70926,   0.00000, 0.00000, -53.58003);
CreateDynamicObject(19449, 281.20370, -1286.57556, 74.70926,   0.00000, 0.00000, -53.94004);
CreateDynamicObject(19449, 288.96362, -1280.92676, 74.70926,   0.00000, 0.00000, -53.94004);
CreateDynamicObject(19449, 290.94046, -1273.77917, 74.70926,   0.00000, 0.00000, 23.33995);
CreateDynamicObject(19449, 288.87408, -1268.98938, 74.70926,   0.00000, 0.00000, 23.33995);
CreateDynamicObject(19449, 251.17392, -1302.48132, 74.70926,   0.00000, 0.00000, -143.16003);
CreateDynamicObject(19449, 245.36453, -1294.80078, 74.70926,   0.00000, 0.00000, -142.62006);
CreateDynamicObject(19449, 239.70416, -1287.15808, 74.70926,   0.00000, 0.00000, -144.35999);
CreateDynamicObject(19449, 237.26732, -1283.76208, 74.70926,   0.00000, 0.00000, -144.47998);
CreateDynamicObject(19449, 237.39600, -1276.06604, 74.70926,   0.00000, 0.00000, -218.40002);
CreateDynamicObject(19449, 253.20082, -1288.33569, 74.70926,   0.00000, 0.00000, -145.98030);
CreateDynamicObject(19449, 244.15479, -1268.83264, 74.70926,   0.00000, 0.00000, -227.45987);
CreateDynamicObject(19449, 254.62556, -1260.14795, 74.70926,   0.00000, 0.00000, -233.33963);
CreateDynamicObject(19449, 246.43823, -1295.77905, 75.16270,   0.00000, 0.00000, -143.03966);
CreateDynamicObject(19449, 267.61972, -1250.44812, 74.70926,   0.00000, 0.00000, -233.33963);
CreateDynamicObject(19449, 270.78940, -1275.13794, 72.19927,   90.42013, 7.14001, -61.67974);
CreateDynamicObject(1491, 248.15292, -1265.31055, 69.06045,   0.00000, 0.00000, 40.86001);
CreateDynamicObject(1491, 250.40416, -1263.30750, 69.06045,   0.00000, 0.00000, 221.87997);
CreateDynamicObject(9339, 250.93228, -1263.06409, 59.89741,   88.97997, -41.34002, -7.56000);
CreateDynamicObject(9339, 247.65529, -1265.88965, 59.86597,   88.97997, -41.34002, -7.56000);
CreateDynamicObject(673, 255.36368, -1263.77600, 71.78906,   356.85840, 0.00000, 3.14159);
CreateDynamicObject(19449, 262.19897, -1254.50195, 74.70926,   0.00000, 0.00000, -233.33963);
CreateDynamicObject(19449, 251.11241, -1301.62219, 75.16127,   0.00000, 0.00000, -143.87962);
CreateDynamicObject(19449, 257.92517, -1303.46753, 75.26397,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 265.73798, -1297.87805, 75.25111,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 273.48816, -1292.30737, 75.25145,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 274.56644, -1291.54858, 75.26717,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 275.64383, -1284.96729, 75.26846,   0.00000, 0.00000, -144.12013);
CreateDynamicObject(19449, 271.41080, -1279.11646, 75.29990,   0.00000, 0.00000, -144.00012);
CreateDynamicObject(19449, 275.64383, -1284.96729, 73.41265,   0.00000, 0.00000, -144.12013);
CreateDynamicObject(19449, 271.41080, -1279.11646, 73.41254,   0.00000, 0.00000, -144.00012);
CreateDynamicObject(19376, 265.38336, -1279.60315, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(10244, 272.23920, -1276.97778, 73.47798,   0.00000, 0.00000, 124.80010);
CreateDynamicObject(19449, 269.58057, -1276.59961, 75.29990,   0.00000, 0.00000, -144.00012);
CreateDynamicObject(19449, 269.58057, -1276.59961, 73.42519,   0.00000, 0.00000, -144.00012);
CreateDynamicObject(19449, 271.35608, -1271.61243, 72.19927,   90.42013, 7.14001, -151.73950);
CreateDynamicObject(19449, 269.01410, -1271.19983, 72.19927,   90.42013, 7.14001, -61.67974);
CreateDynamicObject(19449, 271.87680, -1272.32715, 72.19927,   90.42013, 7.14001, -151.73950);
CreateDynamicObject(19449, 271.39291, -1274.71313, 72.19927,   90.42013, 7.14001, -61.67974);
CreateDynamicObject(19376, 256.90002, -1285.67090, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 246.49629, -1293.11182, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 248.37090, -1291.76660, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 252.08226, -1300.91223, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 254.19769, -1303.90247, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 262.65732, -1297.85901, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 271.18604, -1291.74829, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 273.13547, -1290.35583, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 255.72357, -1294.14172, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 268.49005, -1284.04370, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 260.31918, -1290.51648, 76.93747,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19449, 244.92952, -1294.23914, 75.23409,   0.00000, 0.00000, -143.03966);
CreateDynamicObject(19449, 245.30252, -1293.95398, 75.16270,   0.00000, 0.00000, -141.83971);
CreateDynamicObject(970, 265.18491, -1273.96265, 77.51232,   0.00000, 0.00000, 36.18002);
CreateDynamicObject(970, 261.85760, -1276.38904, 77.51232,   0.00000, 0.00000, 36.18002);
CreateDynamicObject(970, 258.54181, -1278.81946, 77.51232,   0.00000, 0.00000, 36.18002);
CreateDynamicObject(970, 255.21130, -1281.23535, 77.51232,   0.00000, 0.00000, 35.64001);
CreateDynamicObject(970, 251.86238, -1283.62488, 77.51232,   0.00000, 0.00000, 35.64001);
CreateDynamicObject(970, 248.52119, -1286.02563, 77.51232,   0.00000, 0.00000, 35.64001);
CreateDynamicObject(970, 245.17416, -1288.42371, 77.51232,   0.00000, 0.00000, 35.64001);
CreateDynamicObject(970, 241.85555, -1290.80005, 77.51232,   0.00000, 0.00000, 35.64001);
CreateDynamicObject(970, 241.31834, -1291.18835, 77.51232,   0.00000, 0.00000, 35.64001);
CreateDynamicObject(970, 240.85278, -1294.07068, 77.51232,   0.00000, 0.00000, 126.06003);
CreateDynamicObject(970, 243.26086, -1297.36914, 77.51232,   0.00000, 0.00000, 126.06003);
CreateDynamicObject(970, 245.66995, -1300.71936, 77.51232,   0.00000, 0.00000, 125.52004);
CreateDynamicObject(970, 248.07565, -1304.05908, 77.51232,   0.00000, 0.00000, 126.06003);
CreateDynamicObject(970, 250.51044, -1307.40466, 77.51232,   0.00000, 0.00000, 126.06003);
CreateDynamicObject(970, 251.56535, -1308.85571, 77.51232,   0.00000, 0.00000, 126.06003);
CreateDynamicObject(970, 254.44034, -1309.34082, 77.51232,   0.00000, 0.00000, 215.21991);
CreateDynamicObject(970, 257.77402, -1306.97339, 77.51232,   0.00000, 0.00000, 215.21991);
CreateDynamicObject(970, 261.12411, -1304.60071, 77.51232,   0.00000, 0.00000, 215.21991);
CreateDynamicObject(970, 264.42935, -1302.22498, 77.51232,   0.00000, 0.00000, 215.99988);
CreateDynamicObject(970, 267.77185, -1299.82629, 77.51232,   0.00000, 0.00000, 215.21991);
CreateDynamicObject(970, 271.14407, -1297.44141, 77.51232,   0.00000, 0.00000, 215.21991);
CreateDynamicObject(970, 274.46747, -1295.07129, 77.51232,   0.00000, 0.00000, 215.57990);
CreateDynamicObject(970, 278.85306, -1289.39819, 77.51232,   0.00000, 0.00000, 305.99994);
CreateDynamicObject(970, 278.38663, -1292.25781, 77.51232,   0.00000, 0.00000, 215.57990);
CreateDynamicObject(970, 277.83658, -1292.65601, 77.51232,   0.00000, 0.00000, 215.57990);
CreateDynamicObject(19376, 265.38336, -1279.60315, 72.86383,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 270.96439, -1287.40186, 72.86383,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 249.56198, -1290.95056, 72.86383,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 262.53186, -1293.46558, 72.86383,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 255.21643, -1298.72070, 72.86383,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19376, 256.93185, -1285.65894, 72.86383,   0.00000, -90.00002, 35.58001);
CreateDynamicObject(19449, 243.47113, -1289.47070, 72.19927,   90.42013, 7.14001, -61.37973);
CreateDynamicObject(10575, 255.73453, -1280.42200, 76.77702,   0.18000, 91.32001, -54.60000);
CreateDynamicObject(10575, 247.67091, -1286.44434, 74.90877,   0.00000, 0.00000, -54.60000);
CreateDynamicObject(19449, 251.44661, -1302.07239, 75.16127,   0.00000, 0.00000, -143.87962);
CreateDynamicObject(19449, 245.30252, -1293.95398, 71.69356,   0.00000, 0.00000, -141.83971);
CreateDynamicObject(19449, 251.10323, -1301.60046, 71.68575,   0.00000, 0.00000, -143.87962);
CreateDynamicObject(19449, 251.44661, -1302.07239, 71.66863,   0.00000, 0.00000, -143.87962);
CreateDynamicObject(19449, 245.36453, -1294.80078, 75.15966,   0.00000, 0.00000, -142.62006);
CreateDynamicObject(19449, 251.17392, -1302.48132, 75.12860,   0.00000, 0.00000, -143.16003);
CreateDynamicObject(19449, 257.65680, -1302.98108, 74.51024,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 265.46210, -1297.34534, 73.42087,   0.00000, 0.00000, -54.00003);
CreateDynamicObject(19449, 257.65680, -1302.98108, 75.15113,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 265.46210, -1297.34534, 75.12604,   0.00000, 0.00000, -54.00003);
CreateDynamicObject(19449, 273.17929, -1291.74866, 73.42087,   0.00000, 0.00000, -54.00003);
CreateDynamicObject(19449, 273.20102, -1291.71497, 75.25403,   0.00000, 0.00000, -54.00003);
CreateDynamicObject(19449, 274.08551, -1291.06543, 73.42087,   0.00000, 0.00000, -54.00003);
CreateDynamicObject(19449, 265.73798, -1297.87805, 74.65442,   0.00000, 0.00000, -54.36003);
CreateDynamicObject(19449, 274.08551, -1291.06543, 75.21835,   0.00000, 0.00000, -54.00003);
CreateDynamicObject(19449, 268.19504, -1271.77368, 72.19927,   90.42013, 7.14001, -61.67974);
CreateDynamicObject(3437, 286.09787, -1263.62915, 76.08160,   0.00000, 0.00000, -46.86001);
CreateDynamicObject(3437, 275.28415, -1251.93909, 76.08160,   0.00000, 0.00000, -46.86001);
CreateDynamicObject(19449, 251.93002, -1283.46521, 72.18504,   90.42013, 7.14001, -61.79930);
CreateDynamicObject(19449, 243.90518, -1269.06409, 74.70926,   0.00000, 0.00000, -227.45987);
CreateDynamicObject(19449, 258.58408, -1296.29944, 74.70926,   0.00000, 0.00000, -145.98030);
CreateDynamicObject(19449, 253.20082, -1288.33569, 75.11998,   0.00000, 0.00000, -145.98030);
CreateDynamicObject(19449, 258.58408, -1296.29944, 75.12530,   0.00000, 0.00000, -145.98030);
CreateDynamicObject(19449, 259.95834, -1277.71460, 72.18504,   90.42013, 7.14001, -61.79930);
CreateDynamicObject(985, 239.93858, -1287.46228, 72.51144,   0.00000, 0.00000, -54.78002);
CreateDynamicObject(985, 236.96046, -1276.67834, 72.50891,   0.00000, 0.00000, -127.86007);
CreateDynamicObject(985, 236.77281, -1282.96716, 72.50891,   0.00000, 0.00000, -54.78002);
CreateDynamicObject(985, 243.37459, -1269.61108, 72.50891,   0.00000, 0.00000, -137.87988);
CreateDynamicObject(985, 238.01129, -1275.33533, 72.50891,   0.00000, 0.00000, -128.28006);
CreateDynamicObject(985, 266.51385, -1251.35022, 72.50891,   0.00000, 0.00000, -143.27968);
CreateDynamicObject(985, 244.81136, -1268.27490, 72.50891,   0.00000, 0.00000, -137.87988);
CreateDynamicObject(985, 253.95871, -1260.65222, 72.50891,   0.00000, 0.00000, -143.33968);
CreateDynamicObject(985, 260.22089, -1255.99402, 72.50891,   0.00000, 0.00000, -143.75966);
CreateDynamicObject(985, 288.65604, -1268.56934, 72.50891,   0.00000, 0.00000, -246.71974);
CreateDynamicObject(19449, 272.59601, -1248.83875, 73.25340,   90.24004, 0.90001, -136.31976);
CreateDynamicObject(19449, 273.41196, -1249.65674, 73.25340,   90.24004, 0.90001, -136.31976);
CreateDynamicObject(985, 268.32477, -1249.98865, 72.50891,   0.00000, 0.00000, -143.27968);
CreateDynamicObject(985, 291.21796, -1274.52808, 72.50891,   0.00000, 0.00000, -247.01973);
CreateDynamicObject(985, 289.56607, -1280.42822, 72.50891,   0.00000, 0.00000, -323.87982);
CreateDynamicObject(985, 283.23486, -1285.04456, 72.50891,   0.00000, 0.00000, -323.87982);
CreateDynamicObject(985, 280.07605, -1287.33789, 72.50891,   0.00000, 0.00000, -323.87982);
CreateDynamicObject(10575, 264.12753, -1274.67981, 76.77991,   0.18000, 91.32001, -54.60000);
CreateDynamicObject(970, 271.14307, -1282.44775, 73.48224,   0.00000, 0.00000, 35.70001);
CreateDynamicObject(14651, 264.00925, -1284.16052, 75.08290,   0.00000, 0.00000, -54.42000);
CreateDynamicObject(14781, 272.84164, -1287.39746, 74.05372,   0.00000, 0.00000, -54.00004);
CreateDynamicObject(970, 261.47992, -1289.42798, 73.48224,   0.00000, 0.00000, 35.70001);
CreateDynamicObject(970, 268.01047, -1294.26501, 76.80996,   -3.53999, -179.87997, 35.70001);
CreateDynamicObject(970, 258.15268, -1291.82214, 73.48224,   0.00000, 0.00000, 35.70001);
CreateDynamicObject(2632, 261.56686, -1292.90796, 72.95192,   0.00000, 0.00000, -52.79998);
CreateDynamicObject(2632, 260.91730, -1298.24524, 72.95192,   0.00000, 0.00000, -52.79998);
CreateDynamicObject(2632, 262.41553, -1297.10767, 72.95192,   0.00000, 0.00000, -52.79998);
CreateDynamicObject(2632, 263.89081, -1295.99133, 72.95192,   0.00000, 0.00000, -52.79998);
CreateDynamicObject(2632, 258.59216, -1295.17566, 72.95192,   0.00000, 0.00000, -52.79998);
CreateDynamicObject(2632, 260.11264, -1294.01831, 72.95192,   0.00000, 0.00000, -52.79998);
CreateDynamicObject(16151, 254.86183, -1288.68469, 73.29006,   0.00000, 0.00000, -146.33974);
CreateDynamicObject(2627, 260.58221, -1292.07007, 72.95145,   0.00000, 0.00000, -54.30002);
CreateDynamicObject(2627, 264.34857, -1297.02075, 72.95145,   0.00000, 0.00000, -54.30002);
CreateDynamicObject(2630, 262.05869, -1293.53308, 73.00376,   0.00000, 0.00000, 127.08000);
CreateDynamicObject(2630, 263.45966, -1295.41272, 73.00376,   0.00000, 0.00000, 127.08000);
CreateDynamicObject(2628, 258.09366, -1294.12585, 73.00449,   0.00000, 0.00000, 127.44004);
CreateDynamicObject(2629, 259.40491, -1295.87549, 73.00454,   0.00000, 0.00000, 125.22005);
CreateDynamicObject(2629, 260.69376, -1297.58997, 73.00454,   0.00000, 0.00000, 125.22005);
CreateDynamicObject(2628, 261.51846, -1298.89551, 73.00449,   0.00000, 0.00000, 127.44004);
CreateDynamicObject(970, 267.80515, -1284.83105, 73.48224,   0.00000, 0.00000, 35.70001);
CreateDynamicObject(970, 270.35648, -1292.57507, 76.79342,   -3.53999, -179.87997, 35.70001);
CreateDynamicObject(2913, 260.75574, -1296.90942, 76.67451,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1985, 266.48114, -1295.37891, 76.26749,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1985, 271.15173, -1292.02637, 76.24214,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1985, 268.91132, -1293.64441, 76.26374,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2002, 271.63284, -1280.46082, 72.95174,   0.00000, 0.00000, -55.01999);
CreateDynamicObject(2002, 272.11649, -1281.12073, 72.95174,   0.00000, 0.00000, -55.01999);
CreateDynamicObject(2872, 261.10129, -1277.61377, 72.95210,   0.00000, 0.00000, 36.12000);
CreateDynamicObject(2872, 259.54816, -1278.78210, 72.95210,   0.00000, 0.00000, 36.12000);
CreateDynamicObject(18848, 249.00803, -1291.37415, 86.38493,   0.00000, 0.00000, -176.45990);
CreateDynamicObject(18848, 253.94565, -1299.68774, 86.38493,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 258.72205, -1262.90967, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 243.31012, -1288.18567, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 242.10052, -1286.83435, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 241.22803, -1285.53357, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 240.54362, -1284.01550, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 239.70393, -1282.38721, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 238.54976, -1281.03320, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 237.48032, -1279.33533, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 239.56059, -1276.34460, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 241.23997, -1274.83289, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 242.52115, -1272.95801, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 244.76506, -1271.76611, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 246.26387, -1270.20715, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 247.32068, -1269.03308, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 254.02359, -1263.76392, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 287.31805, -1278.22156, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 257.43661, -1260.55066, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 257.43661, -1260.55066, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 254.93896, -1265.12097, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 258.72205, -1262.90967, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 258.72205, -1262.90967, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 256.01385, -1262.36987, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 259.53519, -1258.73218, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 261.30875, -1260.30139, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 290.45871, -1277.44800, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 289.57339, -1275.47168, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 288.73483, -1273.61035, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 288.01944, -1272.02246, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 287.17020, -1270.13733, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 286.86179, -1268.47827, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 286.68002, -1267.04590, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 283.44073, -1268.79077, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 283.85770, -1270.64417, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 284.67365, -1272.64990, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 285.45087, -1274.57117, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 286.10544, -1276.18921, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 280.74643, -1270.38708, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 281.55826, -1272.39380, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 282.36859, -1274.39685, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 283.17130, -1276.39331, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 284.04584, -1278.56848, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 284.73709, -1280.28772, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 285.19608, -1281.42932, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 282.93887, -1282.77478, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 282.93887, -1282.77478, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 281.46634, -1280.55127, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 280.86200, -1278.84570, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 280.69080, -1277.19971, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 279.65381, -1275.23877, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 278.97632, -1274.67200, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 278.81531, -1273.12415, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 278.97275, -1272.25671, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 277.17090, -1272.90405, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 277.83936, -1274.87659, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 278.82599, -1276.17212, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 280.22168, -1277.97473, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 280.65216, -1284.82214, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 280.65216, -1284.82214, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 278.85199, -1286.00208, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 279.48480, -1283.15955, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 277.86978, -1285.30884, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(869, 287.79379, -1279.55090, 73.10632,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5728, 1279.70728, -1220.72607, 24.09630,   0.00000, 0.00000, 269.33835);
new ChaoCasaHospital;
ChaoCasaHospital = CreateObject(6959, 1263.04724, -1251.28418, 12.54665,   0.00000, 0.00000, 0.00000);
SetObjectMaterial(ChaoCasaHospital , 0, 18056, "mp_diner1", "dinerfloor01_128");
CreateDynamicObject(6959, 1265.13147, -1211.81079, 12.54665,   0.00000, 0.00000, 0.00000);
CreateObject(13681, 1268.28625, -1249.72314, 20.48434,   0.00000, 0.00000, 0.50301);
CreateDynamicObject(2219, 1234.5399, -1267.0327, 13.3127,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1234.2860, -1267.1881, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1235.2019, -1266.7740, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1234.3441, -1260.2107, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1234.4120, -1259.4332, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1234.0757, -1260.2988, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1234.9625, -1260.0923, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1237.0724, -1263.5293, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1237.6902, -1263.4564, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1239.5304, -1260.3745, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1239.9957, -1260.4449, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1239.2778, -1259.7433, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1239.9238, -1266.8905, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1240.0558, -1266.1429, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1239.5240, -1266.8743, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1240.5745, -1266.8284, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1242.2815, -1263.5762, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1242.8247, -1263.6028, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1242.2881, -1262.8337, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1244.7268, -1267.0540, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1244.3402, -1266.9840, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1520, 1245.3292, -1266.9866, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2219, 1244.4675, -1260.1086, 13.3327,   -26.0000, 23.0000, 327.7871);
CreateDynamicObject(1520, 1244.9777, -1260.1833, 13.2761,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(7191, 1282.91382, -1236.40405, 14.22189,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(7191, 1275.26831, -1236.18896, 13.71989,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5340, 1279.16699, -1258.88611, 14.05473,   0.00000, 0.00000, 88.96899);
CreateDynamicObject(7191, 1253.3535, -1235.0978, 13.7179,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19380, 1277.76062, -1252.65527, 15.85357,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1277.72058, -1246.72632, 15.81627,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1277.75098, -1238.87732, 15.80438,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1277.76672, -1229.30334, 15.82597,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1267.25085, -1238.87207, 15.80538,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1258.45056, -1238.93018, 15.80438,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1267.30627, -1229.37000, 15.80538,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1258.44714, -1229.52588, 15.80237,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(7191, 1282.91382, -1236.40405, 18.16650,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 1262.81543, -1233.28882, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1262.81091, -1242.91113, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1251.83044, -1259.55371, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1255.30933, -1259.54504, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1258.77026, -1259.53503, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1262.25134, -1259.53174, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1265.73218, -1259.52881, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1265.73218, -1259.52881, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1269.23254, -1259.52502, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19360, 1272.73376, -1259.53455, 15.79510,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1265.80627, -1253.59802, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1265.79968, -1244.70093, 15.80090,   0.00000, 90.00000, 0.06000);
CreateDynamicObject(19376, 1276.15527, -1235.32690, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(970, 1250.11914, -1232.98621, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1250.11462, -1237.10693, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1250.10913, -1241.22815, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1250.10388, -1245.36890, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1250.12329, -1249.47034, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1250.12842, -1253.03223, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1250.12952, -1256.89917, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1252.21179, -1261.11243, 16.39808,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1256.33252, -1261.12781, 16.39808,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1260.45276, -1261.11646, 16.39808,   0.00000, 0.00000, 0.19897);
CreateDynamicObject(970, 1264.57336, -1261.10315, 16.39808,   0.00000, 0.00000, 0.19897);
CreateDynamicObject(970, 1268.69373, -1261.10925, 16.39808,   0.00000, 0.00000, 0.19897);
CreateDynamicObject(970, 1272.35449, -1261.10791, 16.39808,   0.00000, 0.00000, 0.19897);
CreateDynamicObject(970, 1274.42517, -1259.04114, 16.39600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(19129, 1237.38684, -1245.86804, 12.47591,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19381, 1242.18335, -1265.91077, 12.44350,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 1242.20935, -1256.31738, 12.44350,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 1241.88452, -1247.52344, 12.44350,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 1231.69824, -1266.63440, 12.44350,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19381, 1231.71838, -1256.99890, 12.44350,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(3660, 1227.69873, -1250.42554, 14.92680,   0.00000, 0.00000, 269.90479);
CreateDynamicObject(3660, 1227.66772, -1260.96667, 14.92377,   0.00000, 0.00000, 269.90479);
CreateDynamicObject(19365, 1226.30798, -1244.16968, 16.01575,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29663, -1247.35095, 15.80971,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29077, -1250.43799, 15.50670,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.28540, -1253.55811, 15.30871,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29053, -1256.75916, 15.10267,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29224, -1259.92004, 14.89558,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29883, -1263.10022, 14.68847,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.30566, -1266.26038, 14.39462,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.30408, -1269.26123, 14.18452,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1227.86951, -1270.78162, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1231.01172, -1270.78271, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1234.13269, -1270.77942, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1237.31848, -1270.76001, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(3660, 1236.06177, -1272.16309, 14.97339,   0.00000, 0.00000, 179.94002);
CreateDynamicObject(19365, 1226.30798, -1244.16968, 12.56840,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29663, -1247.35095, 12.40309,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1226.29077, -1250.43799, 12.02162,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19365, 1240.53955, -1270.76770, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1243.72095, -1270.75574, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1246.90100, -1270.74146, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1250.08264, -1270.73035, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(19365, 1262.22119, -1270.53101, 14.18452,   0.00000, 0.00000, 90.19534);
CreateDynamicObject(969, 1263.99683, -1270.43774, 12.51293,   0.00000, 0.00000, 0.82438);
CreateDynamicObject(19365, 1274.31653, -1270.33936, 14.18452,   0.00000, 0.00000, 90.30653);
CreateDynamicObject(969, 1274.25562, -1270.35754, 12.51293,   0.00000, 0.00000, 0.02951);
CreateDynamicObject(19381, 1241.88049, -1237.90344, 12.44350,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(970, 1247.34973, -1244.62964, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1247.35620, -1248.74719, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1247.35327, -1252.86060, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1247.34143, -1256.98853, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1247.33594, -1261.13477, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1247.41248, -1267.82568, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1247.42004, -1268.59973, 12.97600,   0.00000, 0.00000, 89.94531);
CreateDynamicObject(970, 1245.08350, -1255.81323, 12.98787,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1236.84631, -1255.81921, 12.98787,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1230.48022, -1255.80554, 12.98787,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 1243.41541, -1245.06860, 17.36599,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(18102, 1240.36914, -1245.77173, 17.57752,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 1244.49841, -1246.70837, 13.13831,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1231.54797, -1246.23230, 13.15569,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(16151, 1229.43396, -1263.03271, 12.92611,   0.00000, 0.00000, 180.36414);
CreateDynamicObject(1432, 1244.78979, -1266.88330, 12.62078,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1244.62415, -1259.94946, 12.65674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1234.65466, -1266.85632, 12.63881,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1234.47534, -1259.98022, 12.64548,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1231, 1228.55994, -1268.54688, 15.15331,   0.00000, 0.00000, -0.12000);
CreateDynamicObject(1231, 1283.90930, -1275.33350, 15.14912,   0.00000, 0.00000, 181.38722);
CreateDynamicObject(1215, 1247.21436, -1265.85559, 12.51282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1247.17224, -1263.16016, 12.51282,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1251.42419, -1270.50012, 12.51319,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1260.82983, -1270.30334, 12.51326,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1263.64807, -1270.31628, 12.51328,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1275.70313, -1270.10474, 12.51331,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8615, 1249.16406, -1256.96326, 14.17212,   0.00000, 0.00000, 270.34525);
CreateDynamicObject(985, 1230.21436, -1242.46729, 21.03990,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(985, 1238.07568, -1242.47876, 21.03990,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(985, 1243.29736, -1242.51294, 21.03990,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(985, 1244.55493, -1238.58923, 21.03990,   0.00000, 0.00000, 271.99850);
CreateDynamicObject(985, 1278.76526, -1226.71472, 32.75266,   0.00000, 0.00000, 269.08005);
CreateDynamicObject(985, 1248.06348, -1226.90454, 21.03990,   0.00000, 0.00000, 359.66727);
CreateDynamicObject(985, 1255.90430, -1226.94873, 21.03990,   0.00000, 0.00000, 359.66727);
CreateDynamicObject(985, 1263.74500, -1227.01367, 21.03990,   0.00000, 0.00000, 359.66727);
CreateDynamicObject(985, 1271.58691, -1227.09863, 21.03990,   0.00000, 0.00000, 359.66727);
CreateDynamicObject(985, 1279.40735, -1227.10327, 21.03990,   0.00000, 0.00000, 359.66727);
CreateDynamicObject(985, 1290.44421, -1230.60156, 32.79070,   0.00000, 0.00000, 0.28876);
CreateDynamicObject(985, 1244.24561, -1230.77490, 21.03990,   0.00000, 0.00000, 271.99850);
CreateDynamicObject(985, 1279.00232, -1218.85767, 32.75266,   0.00000, 0.00000, 268.04956);
CreateDynamicObject(985, 1279.23657, -1211.06091, 32.75266,   0.00000, 0.00000, 268.04956);
CreateDynamicObject(19456, 1278.8895, -1251.0238, 14.0780,    0.0000, 0.0000, 268.0182);
CreateDynamicObject(19456, 1287.9650, -1270.3943, 14.0780,    0.0000, 0.0000, 268.0182);
CreateDynamicObject(19456, 1291.3563, -1270.4962, 14.0780,    0.0000, 0.0000, 268.0182);
CreateDynamicObject(1432, 1334.8022, -1249.9069, 12.6559,     0.0000, 0.0000, 0.0000);
CreateDynamicObject(1432, 1334.7645, -1255.0609, 12.6559,     0.0000, 0.0000, 0.0000);
CreateDynamicObject(1432, 1334.6649, -1259.9070, 12.6559,     0.0000, 0.0000, 0.0000);
CreateDynamicObject(1432, 1334.5024, -1264.5553, 12.6559,     0.0000, 0.0000, 0.0000);
/*Tampa Bug*/
CreateDynamicObject(19456, 1290.5861, -1230.9188, 14.0780,   0.0000, 0.0000, 269.8998);
CreateDynamicObject(19456, 1286.9697, -1230.9027, 14.0780,    0.0000, 0.0000, 269.8998);
/*Fim*/
CreateDynamicObject(970, 1283.3810, -1268.2909, 16.3951,  0.0000, 0.0000, 79.6958);
CreateDynamicObject(970, 1285.3489, -1270.2936, 16.3951, 0.0000, 0.0000, 358.2866);
CreateDynamicObject(970, 1289.4879, -1270.4103, 16.3951, 0.0000, 0.0000, 358.2866);
CreateDynamicObject(970, 1293.6311, -1270.5406, 16.3951, 0.0000, 0.0000, 358.2866);
CreateDynamicObject(970, 1284.1318, -1264.1776, 16.3951, 0.0000, 0.0000, 79.6958);
CreateDynamicObject(970, 1284.3911, -1262.8713, 16.3951, 0.0000, 0.0000, 79.6958);
CreateDynamicObject(970, 1284.5328, -1258.7767, 16.3951, 0.0000, 0.0000, 96.4033);
CreateDynamicObject(970, 1284.0750, -1254.6353, 16.3951, 0.0000, 0.0000, 96.4033);
CreateDynamicObject(970, 1283.9081, -1253.2340, 16.3951, 0.0000, 0.0000, 96.4033);
CreateDynamicObject(970, 1281.5984, -1251.2887, 16.3951, 0.0000, 0.0000, 183.0717);
CreateDynamicObject(19380, 1282.9176, -1239.4561, 19.9729,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19380, 1282.93176, -1230.55383, 19.97292,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(985, 1226.26611, -1246.53418, 12.86874,   0.00000, 0.00000, 269.76303);
CreateDynamicObject(985, 1226.25391, -1254.35632, 12.80651,   0.00000, 0.00000, 270.06305);
CreateDynamicObject(985, 1226.27405, -1262.17212, 12.73172,   0.00000, 0.00000, 270.26407);
CreateDynamicObject(985, 1226.27783, -1266.81506, 12.76354,   0.00000, 0.00000, 270.26407);
CreateDynamicObject(985, 1230.26501, -1270.78955, 12.68314,   0.00000, 0.00000, 359.94812);
CreateDynamicObject(985, 1238.10608, -1270.79321, 12.69490,   0.00000, 0.00000, 359.94809);
CreateDynamicObject(970, 1251.94092, -1270.74170, 16.39505,   0.00000, 0.00000, 1.22017);
CreateDynamicObject(970, 1256.06006, -1270.66089, 16.39505,   0.00000, 0.00000, 1.22017);
CreateDynamicObject(970, 1260.19958, -1270.57483, 16.39505,   0.00000, 0.00000, 1.22017);
CreateDynamicObject(970, 1264.34045, -1270.54175, 16.39505,   0.00000, 0.00000, 0.49882);
CreateDynamicObject(970, 1268.48120, -1270.51221, 16.39505,   0.00000, 0.00000, 0.69674);
CreateDynamicObject(970, 1272.62219, -1270.44287, 16.39505,   0.00000, 0.00000, 0.69674);
CreateDynamicObject(970, 1276.76257, -1270.41333, 16.39505,   0.00000, 0.00000, 0.69674);
CreateDynamicObject(970, 1280.88318, -1270.36365, 16.39505,   0.00000, 0.00000, 0.69674);
CreateDynamicObject(970, 1280.88318, -1270.36365, 16.39505,   0.00000, 0.00000, 0.69674);
CreateDynamicObject(985, 1294.41785, -1230.81470, 35.11719,   0.00000, 0.00000, 269.08005);
CreateDynamicObject(985, 1298.27332, -1234.28418, 34.94366,   0.00000, 0.00000, 0.28876);
CreateDynamicObject(985, 1282.93542, -1234.75208, 22.11734,   0.00000, 0.00000, 270.20129);
CreateDynamicObject(985, 1282.9517, -1240.3242, 22.1173,   0.00000, 0.00000, 270.20129);
CreateDynamicObject(19380, 1264.82166, -1248.47290, 15.80438,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1264.92480, -1253.29297, 15.80438,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1269.29688, -1246.13074, 15.80438,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19380, 1271.28369, -1253.22668, 15.80438,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(970, 1255.47351, -1240.54016, 12.98675,   0.00000, 0.00000, 179.82509);
CreateDynamicObject(16151, 1272.77795, -1246.93481, 12.90690,   0.00000, 0.00000, 360.56137);
CreateDynamicObject(1723, 1274.16321, -1239.21545, 12.58382,   0.00000, 0.00000, 179.76736);
CreateDynamicObject(2628, 1267.55188, -1232.01587, 12.58507,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2628, 1273.64465, -1231.95557, 12.58507,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3267, 1278.11902, -1256.01672, 24.68864,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3267, 1278.40076, -1247.60913, 24.68802,   0.00000, 0.00000, 152.36455);
CreateDynamicObject(8615, 1258.67590, -1240.36584, 18.79037,   0.00000, 0.00000, 179.98534);
CreateDynamicObject(14391, 1237.60120, -1245.97095, 13.60110,   0.00000, 0.00000, 90.36002);
CreateDynamicObject(970, 1240.98169, -1255.82288, 12.98787,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1222.03357, -1252.90833, 12.40806,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2232, 1245.09680, -1247.07507, 13.14358,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1245.70374, -1247.42688, 13.14358,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1243.89185, -1246.35657, 13.14358,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1245.70374, -1247.42688, 13.70806,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1245.09680, -1247.07507, 13.70278,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1244.49841, -1246.70837, 13.70278,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2232, 1243.89185, -1246.35657, 13.70278,   0.00000, 0.00000, 329.44250);
CreateDynamicObject(2229, 1240.43677, -1246.54175, 12.39770,   0.00000, 0.00000, 360.74951);
CreateDynamicObject(2229, 1240.07532, -1246.52747, 12.39770,   0.00000, 0.00000, 362.42944);
CreateDynamicObject(2229, 1239.73511, -1246.53198, 12.39770,   0.00000, 0.00000, 362.06946);
CreateDynamicObject(2229, 1239.39429, -1246.53735, 12.39770,   0.00000, 0.00000, 362.24945);
CreateDynamicObject(2229, 1239.05396, -1246.54150, 12.39770,   0.00000, 0.00000, 363.26941);
CreateDynamicObject(2229, 1238.73047, -1246.56738, 12.39770,   0.00000, 0.00000, 359.54956);
CreateDynamicObject(2229, 1238.35657, -1246.55786, 12.39770,   0.00000, 0.00000, 361.76947);
CreateDynamicObject(2229, 1238.01514, -1246.54675, 12.39770,   0.00000, 0.00000, 361.76947);
CreateDynamicObject(2229, 1237.67334, -1246.55176, 12.39770,   0.00000, 0.00000, 360.80951);
CreateDynamicObject(2229, 1237.32056, -1246.55188, 12.39770,   0.00000, 0.00000, 362.60944);
CreateDynamicObject(2229, 1236.98267, -1246.55151, 12.39770,   0.00000, 0.00000, 361.82947);
CreateDynamicObject(2229, 1236.61621, -1246.55786, 12.39770,   0.00000, 0.00000, 361.70947);
CreateDynamicObject(2229, 1236.25684, -1246.55811, 12.39770,   0.00000, 0.00000, 362.60944);
CreateDynamicObject(2229, 1235.93335, -1246.56067, 12.39770,   0.00000, 0.00000, 360.50952);
CreateDynamicObject(2229, 1235.57227, -1246.54858, 12.39770,   0.00000, 0.00000, 360.50952);
CreateDynamicObject(2229, 1235.24817, -1246.55103, 12.39770,   0.00000, 0.00000, 360.50952);
CreateDynamicObject(2232, 1230.98291, -1246.64905, 13.15569,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(2232, 1230.41870, -1247.06970, 13.15569,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(2232, 1229.87683, -1247.47534, 13.15569,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(2232, 1231.54797, -1246.23230, 13.71215,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(2232, 1230.98291, -1246.64905, 13.71216,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(2232, 1230.41870, -1247.06970, 13.71216,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(2232, 1229.87683, -1247.47534, 13.71094,   0.00000, 0.00000, 36.91419);
CreateDynamicObject(16088, 1237.93933, -1243.47339, 10.51413,   0.00000, 0.00000, 89.70003);
CreateDynamicObject(19378, 1252.32568, -1233.28882, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1252.61389, -1242.91455, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1273.29016, -1242.91345, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19378, 1273.28271, -1233.29419, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(7191, 1273.87976, -1235.02112, 13.81888,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(19378, 1273.43530, -1252.50977, 12.50100,   0.00000, 90.00000, 359.78104);
CreateDynamicObject(19378, 1252.56763, -1252.47034, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1255.34558, -1234.01855, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1265.68774, -1235.37769, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1255.33154, -1243.58081, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1255.33154, -1253.16187, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1276.26050, -1247.21301, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1276.26294, -1253.14917, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1276.26172, -1242.17322, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1277.60693, -1235.31189, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1277.57813, -1242.38843, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1277.73401, -1251.99915, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(19376, 1277.72974, -1254.16675, 15.80090,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2780, 1231.14355, -1243.74963, 17.13900,   38.88000, 6.72001, 91.14002);
CreateDynamicObject(2780, 1244.63501, -1243.34229, 17.14622,   38.88000, 6.72001, -83.51993);
CreateDynamicObject(1432, 1240.02209, -1266.73242, 12.62078,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1239.63025, -1260.14185, 12.62078,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1242.44910, -1263.39307, 12.65674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1432, 1237.22156, -1263.29553, 12.65674,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1283, 1274.7296, -1280.1576, 15.5909,      0.0000, 0.0000, 91.6950);
CreateDynamicObject(1231, 1247.07935, -1268.39478, 15.14912,   0.00000, 0.00000, 181.38722);
CreateDynamicObject(1231, 1249.81604, -1275.29492, 15.14912,   0.00000, 0.00000, 181.38722);
CreateDynamicObject(1231, 1228.98206, -1275.38452, 15.14912,   0.00000, 0.00000, 181.38722);
CreateDynamicObject(2632, 1272.86560, -1231.74292, 12.58911,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2632, 1272.87024, -1233.62146, 12.58911,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2632, 1272.89026, -1235.52417, 12.58911,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2632, 1268.98438, -1231.73633, 12.58911,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2632, 1268.97949, -1233.62939, 12.58911,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2632, 1268.97876, -1235.51917, 12.58911,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2630, 1271.53723, -1231.93872, 12.64127,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2630, 1269.31787, -1231.91675, 12.64127,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2627, 1273.72827, -1235.28650, 12.64056,   0.00000, 0.00000, -179.51991);
CreateDynamicObject(2627, 1267.54260, -1235.29333, 12.64056,   0.00000, 0.00000, -179.51991);
CreateDynamicObject(2629, 1271.71484, -1235.58069, 12.64090,   0.00000, 0.00000, -180.05984);
CreateDynamicObject(2629, 1269.46387, -1235.56995, 12.64090,   0.00000, 0.00000, -180.05984);
CreateDynamicObject(2913, 1272.12158, -1236.11926, 13.49215,   3.84000, -90.41999, 0.00000);
CreateDynamicObject(2913, 1269.89417, -1236.08374, 13.49215,   3.84000, -90.41999, 0.00000);
CreateDynamicObject(14781, 1256.09961, -1234.51990, 13.65884,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1723, 1270.58057, -1239.19019, 12.58382,   0.00000, 0.00000, 179.76736);
CreateDynamicObject(970, 1272.60657, -1240.55542, 12.98675,   0.00000, 0.00000, 179.82509);
CreateDynamicObject(970, 1259.57495, -1240.54626, 12.98675,   0.00000, 0.00000, 179.82509);
CreateDynamicObject(970, 1268.48779, -1240.54407, 12.98675,   0.00000, 0.00000, 179.82509);
CreateDynamicObject(14651, 1264.43738, -1245.01953, 14.80942,   0.00000, 0.00000, 89.88000);
CreateDynamicObject(14651, 1264.17859, -1250.42383, 14.80942,   0.00000, 0.00000, 89.88000);
CreateDynamicObject(970, 1262.50537, -1231.49878, 16.06079,   0.78000, -180.18002, 0.00000);
CreateDynamicObject(1985, 1265.46765, -1231.49011, 15.53684,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1985, 1260.68542, -1231.46619, 15.53684,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(970, 1264.50623, -1231.52490, 16.06079,   0.78000, -180.18002, 0.00000);
CreateDynamicObject(1985, 1262.99280, -1231.45703, 15.53684,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3660, 1237.59766, -1269.40820, 14.97339,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3660, 1241.8052, -1272.1777, 14.9734,   0.0000, 0.0000, 179.9400);
CreateDynamicObject(3660, 1259.91052, -1232.04919, 18.50383,   0.00000, 0.00000, -179.39989);
CreateDynamicObject(3660, 1273.1699, -1231.4265, 18.5195,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3811, 1259.79944, -1258.14856, 16.32729,   0.00000, 0.00000, 90.06002);
CreateDynamicObject(3811, 1262.10315, -1258.12695, 16.32729,   0.00000, 0.00000, 90.06002);
CreateDynamicObject(3811, 1271.10754, -1258.17212, 16.32729,   0.00000, 0.00000, 90.06002);
CreateDynamicObject(3811, 1263.72363, -1258.13855, 16.32729,   0.00000, 0.00000, 90.06002);
CreateDynamicObject(3811, 1267.12500, -1258.13977, 16.32729,   0.00000, 0.00000, 90.06002);
CreateDynamicObject(3811, 1269.26587, -1258.15967, 16.32729,   0.00000, 0.00000, 90.06002);
CreateDynamicObject(985, 1245.92786, -1270.75659, 12.66850,   0.00000, 0.00000, 359.94809);
CreateDynamicObject(2002, 1254.01538, -1241.39709, 12.58801,   0.00000, 0.00000, 92.28002);
CreateDynamicObject(2002, 1253.98535, -1242.20825, 12.58801,   0.00000, 0.00000, 92.28002);
CreateDynamicObject(2779, 1253.96680, -1244.34851, 12.58849,   0.00000, 0.00000, 90.12003);
CreateDynamicObject(2779, 1253.97351, -1245.60779, 12.57349,   0.00000, 0.00000, 90.12003);
CreateDynamicObject(2779, 1253.97607, -1246.87366, 12.57127,   0.00000, 0.00000, 90.12003);
CreateDynamicObject(19378, 1263.05994, -1252.49780, 12.50100,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(9131, 1260.09033, -1257.55627, 14.69160,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1260.09167, -1257.55615, 12.42970,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6517, 1256.67712, -1257.79431, 14.08199,   0.00000, 0.00000, 88.82233);
CreateDynamicObject(6517, 1263.51892, -1257.85217, 10.82642,   0.00000, 0.00000, 89.52232);
CreateDynamicObject(9131, 1266.97168, -1257.55615, 12.83742,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1260.09167, -1257.55615, 12.42970,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1266.97168, -1257.55615, 15.08885,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6517, 1270.43408, -1257.70886, 14.08199,   0.00000, 0.00000, 89.52232);
CreateDynamicObject(9131, 1274.48499, -1257.84753, 12.83742,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9131, 1274.48499, -1257.84753, 15.03932,   0.00000, 0.00000, 0.00000);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Departamento BOPE ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(7010, 1278.79004, -1593.68994, 14.16000,   0.00000, 0.00000, 90.37000);
CreateObject(7244, 1248.65002, -1668.81006, 3.46000,   0.00000, 0.00000, 90.68000);
CreateObject(8417, 1267.01001, -1628.83997, 12.49000,   0.00000, 180.00000, 0.00000);
CreateObject(8417, 1267.01001, -1668.71997, 12.49000,   0.00000, 180.00000, 0.00000);
CreateObject(8417, 1270.66614, -1708.02319, 12.41000,   0.00000, 180.00000, 0.00000);
CreateObject(7184, 1220.71997, -1686.27002, 14.66000,   0.00000, 0.00000, 180.19000);
CreateDynamicObject(8417, 1229.39001, -1708.71997, 12.41000,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(8417, 1239.59998, -1664.01001, 12.49000,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(8417, 1228.80005, -1624.16003, 12.49000,   0.00000, 180.00000, 0.00000);
CreateObject(8417, 1146.30005, -1674.41003, 12.41000,   0.00000, 180.00000, 0.00000);
CreateObject(8417, 1187.55005, -1674.51001, 12.41000,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(7009, 1248.04004, -1610.62000, 26.46000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(4032, 1195.39001, -1574.14001, 10.82000,   0.00000, 0.00000, 180.75999);
CreateObject(4232, 1195.37000, -1574.18994, 10.81000,   0.00000, 0.00000, 180.52000);
CreateDynamicObject(8417, 1221.50000, -1580.20996, 12.41000,   -0.02000, 180.00000, 0.00000);
CreateDynamicObject(8417, 1180.22998, -1576.07996, 12.41000,   -0.02000, 180.00000, 0.00000);
CreateObject(8417, 1187.43994, -1634.68005, 12.41000,   -0.02000, 180.00000, 0.00000);
CreateObject(8417, 1146.18005, -1634.59998, 12.41000,   -0.02000, 180.00000, 0.00000);
CreateDynamicObject(8417, 1202.60999, -1594.71997, 12.41000,   -0.02000, 180.00000, 0.00000);
CreateDynamicObject(8417, 1188.10999, -1714.38000, 12.41000,   0.00000, 180.00000, 0.00000);
CreateObject(8417, 1146.78003, -1714.33997, 12.41000,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(2774, 1182.76001, -1613.98999, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1182.90002, -1612.29004, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1173.90002, -1613.66003, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1160.18005, -1619.27002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1161.89001, -1613.92004, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1163.53003, -1613.94995, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1165.17004, -1613.94995, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1166.82996, -1613.93005, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1168.51001, -1613.93994, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1169.89001, -1613.97998, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1170.84998, -1614.02002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1182.73999, -1615.48999, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1182.75000, -1617.10999, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1161.83997, -1619.23999, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1172.40002, -1595.31006, 13.34000,   0.00000, 90.00000, 359.79999);
CreateDynamicObject(2774, 1160.16003, -1606.93994, 13.34000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1170.85999, -1615.55005, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1170.88000, -1617.16003, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1170.90002, -1618.71997, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1163.50000, -1619.25000, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1165.18005, -1619.27002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1166.85999, -1619.27002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1168.47998, -1619.30005, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1170.14001, -1619.31006, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1170.92004, -1619.31995, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1160.15002, -1617.65002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1160.14001, -1616.01001, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1160.10999, -1614.39001, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1160.09998, -1612.77002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1160.16003, -1606.93994, 15.00000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1160.16003, -1606.92004, 16.71000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1172.40002, -1595.31006, 14.88000,   0.00000, 90.00000, 359.79999);
CreateDynamicObject(2774, 1172.40002, -1595.31006, 16.46000,   0.00000, 90.00000, 359.79999);
CreateDynamicObject(2774, 1172.38000, -1595.30005, 18.30000,   0.00000, 90.00000, 359.79999);
CreateDynamicObject(2774, 1185.90002, -1607.70996, 13.34000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1182.75000, -1618.65002, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1185.90002, -1607.70996, 14.88000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1185.90002, -1607.70996, 16.46000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1185.90002, -1607.70996, 18.14000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1185.90002, -1607.70996, 18.44000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1173.90002, -1615.26001, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1174.01001, -1616.91003, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1174.00000, -1618.56006, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.93005, -1620.18005, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1160.31006, -1607.85999, 18.35000,   0.00000, 90.00000, 270.41000);
CreateDynamicObject(2774, 1173.84998, -1612.03003, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.84998, -1610.41003, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.82996, -1608.67004, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.81995, -1607.04004, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.85999, -1605.38000, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.82996, -1603.70996, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.79004, -1602.07996, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.71997, -1600.43994, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.65002, -1598.82996, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.58997, -1597.18994, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1173.51001, -1595.56995, 18.17000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1182.80005, -1620.12000, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1184.47998, -1620.14001, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1186.14001, -1620.14001, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1186.16003, -1618.51001, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1170.95996, -1620.22998, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1169.31995, -1620.19995, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1167.68005, -1620.20996, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1166.01001, -1620.22998, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1164.43994, -1620.22998, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1162.76001, -1620.22998, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1161.08997, -1620.26001, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1160.02002, -1620.35999, 6.31000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3660, 1159.68005, -1630.82996, 14.96000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3660, 1159.71997, -1650.47998, 14.96000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3660, 1159.80005, -1670.13000, 14.96000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3660, 1159.84998, -1689.66003, 14.96000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3660, 1168.92004, -1700.68994, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(3660, 1168.93005, -1702.65002, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(3660, 1173.95996, -1700.64001, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(3660, 1173.94995, -1702.60999, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(10183, 1187.02002, -1656.41003, 12.45000,   0.00000, 0.00000, 134.50999);
CreateDynamicObject(10183, 1164.68005, -1656.13000, 12.45000,   0.00000, 0.00000, 135.28999);
CreateDynamicObject(10183, 1180.08997, -1656.39001, 12.45000,   0.00000, 0.00000, 314.38000);
CreateDynamicObject(10183, 1202.02002, -1656.16003, 12.45000,   0.00000, 0.00000, 315.48999);
CreateDynamicObject(10183, 1164.58997, -1681.12000, 12.45000,   0.00000, 0.00000, 135.28999);
CreateDynamicObject(10183, 1186.73999, -1671.45996, 12.45000,   0.00000, 0.00000, 134.50999);
CreateDynamicObject(10183, 1201.97998, -1671.13000, 12.47000,   0.02000, 0.00000, 315.48999);
CreateDynamicObject(10183, 1179.57996, -1671.26001, 12.45000,   0.00000, 0.00000, 314.38000);
CreateDynamicObject(3660, 1218.06006, -1702.20996, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(8417, 1248.69995, -1672.43005, 12.51000,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(3660, 1237.70996, -1702.08997, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(3660, 1244.39001, -1702.05005, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(3660, 1271.45996, -1701.42004, 14.96000,   0.00000, 0.00000, 180.32001);
CreateDynamicObject(8417, 1234.75000, -1566.52002, 12.41000,   -0.02000, 180.00000, 0.00000);
CreateDynamicObject(6159, 1195.20996, -1590.83997, 19.69000,   0.00000, 0.00000, 179.58000);
CreateDynamicObject(618, 1209.91003, -1702.75000, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8167, 1189.68005, -1619.18005, 13.52000,   0.00000, 0.00000, 270.85001);
CreateDynamicObject(8167, 1197.04004, -1619.00000, 13.52000,   0.00000, 0.00000, 270.85001);
CreateDynamicObject(8167, 1204.45996, -1618.90002, 13.52000,   0.00000, 0.00000, 270.85001);
CreateDynamicObject(618, 1182.97998, -1701.82996, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1218.00000, -1702.66003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1224.00000, -1702.68994, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1231.70996, -1702.65002, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1238.18005, -1702.66003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1245.34998, -1702.39001, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1253.45996, -1702.38000, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1263.00000, -1702.12000, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1271.32996, -1702.20996, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1279.02002, -1702.03003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.19995, -1695.77002, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1286.95996, -1688.97998, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.16003, -1681.71997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1286.98999, -1674.39001, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.02002, -1667.66003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1274.59998, -1584.31995, 13.26000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1265.76001, -1584.44995, 15.42000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1256.81006, -1584.13000, 15.84000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1286.47998, -1583.40002, 13.26000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1176.64001, -1702.03003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1171.29004, -1702.43994, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1166.51001, -1702.42004, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1161.34998, -1702.42004, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1160.06995, -1697.35999, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.94995, -1691.21997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1160.00000, -1683.60999, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.93005, -1677.16003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1160.22998, -1671.00000, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.82996, -1663.89001, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1160.02002, -1656.65002, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1160.04004, -1648.96997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.98999, -1642.28003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.90002, -1635.18994, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.64001, -1628.22998, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1159.68994, -1622.33997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1694, 1229.62000, -1620.10999, 49.16000,   0.00000, 0.00000, 181.88000);
CreateDynamicObject(16101, 1254.64001, -1638.04004, 48.35000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16368, 1254.56995, -1637.75000, 59.25000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(620, 1287.56006, -1692.19995, 12.59000,   356.85999, 0.00000, -2.97000);
CreateDynamicObject(620, 1288.13000, -1684.59998, 12.59000,   356.85999, 0.00000, -2.97000);
CreateDynamicObject(620, 1287.76001, -1677.56995, 12.59000,   356.85999, 0.00000, -2.97000);
CreateDynamicObject(620, 1287.57996, -1670.83997, 12.59000,   356.85999, 0.00000, -2.97000);
CreateDynamicObject(620, 1274.87000, -1701.51001, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1267.18994, -1701.75000, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1249.07996, -1702.57996, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1241.38000, -1702.62000, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1234.03003, -1702.55005, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1227.15002, -1702.46997, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1220.58997, -1702.77002, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1213.53003, -1702.64001, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1178.93005, -1702.15002, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1173.07996, -1701.72998, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1168.18994, -1702.21997, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1163.64001, -1702.41003, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.57996, -1700.06006, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.51001, -1693.97998, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.56995, -1686.37000, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.76001, -1679.34998, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.76001, -1673.52002, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.56006, -1666.82996, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.53003, -1659.32996, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.53003, -1652.41003, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.38000, -1645.27002, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.62000, -1638.88000, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.43005, -1631.92004, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(620, 1159.45996, -1624.76001, 12.29000,   356.85999, 0.00000, -1.05000);
CreateDynamicObject(3660, 1258.68994, -1635.60999, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1207.44995, -1693.14001, 14.96000,   0.00000, 0.00000, 270.39001);
CreateDynamicObject(3660, 1206.52002, -1628.81006, 14.96000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3660, 1206.72998, -1665.04004, 14.96000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3660, 1196.04004, -1619.64001, 14.96000,   0.00000, 0.00000, 359.79001);
CreateDynamicObject(3660, 1207.21997, -1648.42004, 14.96000,   0.00000, 0.00000, 270.39001);
CreateDynamicObject(3660, 1207.21997, -1648.42004, 14.96000,   0.00000, 0.00000, 270.39001);
CreateDynamicObject(3660, 1207.39001, -1674.66003, 14.96000,   0.00000, 0.00000, 270.39001);
CreateDynamicObject(8209, 1160.35999, -1650.87000, 15.37000,   0.00000, 0.00000, 89.80000);
CreateDynamicObject(8673, 1171.17004, -1700.40002, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1173.03003, -1700.39001, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1173.00000, -1700.43005, 17.68000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8209, 1208.22998, -1652.69995, 15.37000,   0.00000, 0.00000, 269.95999);
CreateDynamicObject(8673, 1197.41003, -1619.28003, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1199.19995, -1619.38000, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1197.41003, -1619.28003, 17.94000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1199.29004, -1619.31006, 17.94000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1218.65002, -1701.34998, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1239.05005, -1701.22998, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8673, 1244.12000, -1701.17004, 15.02000,   0.00000, 0.00000, 0.41000);
CreateDynamicObject(8674, 1266.80005, -1700.87000, 14.92000,   0.00000, 0.00000, 0.51000);
CreateDynamicObject(8674, 1275.81006, -1700.73999, 14.92000,   0.00000, 0.00000, 0.51000);
CreateDynamicObject(8674, 1280.83997, -1695.54004, 14.92000,   0.00000, 0.00000, 91.63000);
CreateDynamicObject(8674, 1183.68005, -1700.34998, 13.78000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(673, 1192.56006, -1723.88000, 12.52000,   356.85999, 0.00000, 3.14000);
CreateDynamicObject(8674, 1202.80005, -1700.26001, 13.78000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1202.80005, -1700.26001, 16.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8674, 1183.66003, -1700.37000, 16.70000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1207.21997, -1699.16003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.83997, -1693.31995, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1207.05005, -1686.56006, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.88000, -1677.55005, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.62000, -1668.51001, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.78003, -1659.67004, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.78003, -1659.67004, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.88000, -1651.18005, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1207.04004, -1643.78003, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1207.01001, -1637.44995, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.70996, -1630.71997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.70996, -1630.71997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1206.59998, -1622.59998, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1203.41003, -1620.45996, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1203.41003, -1620.45996, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1198.00000, -1620.54004, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1193.02002, -1620.71997, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1188.65002, -1620.67004, 13.76000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3526, 1188.56995, -1700.71997, 12.55000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3526, 1197.90002, -1700.73999, 12.55000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(3526, 1188.56995, -1700.71997, 12.55000,   0.00000, 0.00000, 90.08000);
CreateDynamicObject(1257, 1203.23999, -1701.65002, 13.77000,   0.00000, 0.00000, 90.14000);
CreateDynamicObject(1257, 1203.23999, -1701.65002, 13.77000,   0.00000, 0.00000, 90.14000);
CreateDynamicObject(1229, 1204.71997, -1705.94995, 13.97000,   0.00000, 0.00000, 86.26000);
CreateDynamicObject(1233, 1204.68005, -1706.45996, 14.09000,   0.00000, 0.00000, 90.05000);
CreateDynamicObject(1233, 1235.76001, -1706.44995, 14.09000,   0.00000, 0.00000, 90.05000);
CreateDynamicObject(1233, 1235.76001, -1706.44995, 14.09000,   0.00000, 0.00000, 90.05000);
CreateDynamicObject(1233, 1267.09998, -1706.54004, 14.09000,   0.00000, 0.00000, 90.05000);
CreateDynamicObject(1233, 1173.13000, -1706.46997, 14.09000,   0.00000, 0.00000, 90.05000);
CreateDynamicObject(1233, 1155.64001, -1682.56995, 14.09000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1233, 1155.59998, -1642.48999, 14.09000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1233, 1155.62000, -1601.31006, 14.09000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1233, 1155.60999, -1582.47998, 15.01000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1233, 1173.15002, -1577.83997, 14.39000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1233, 1184.65002, -1577.62000, 15.20000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1233, 1205.22998, -1577.95996, 14.39000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1233, 1235.54004, -1578.00000, 14.39000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1233, 1267.12000, -1577.97998, 14.39000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1233, 1286.71997, -1577.95996, 15.40000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1233, 1291.82996, -1702.42004, 15.00000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(8417, 1267.12000, -1559.42004, 12.41000,   0.00000, 180.00000, 0.00000);
CreateDynamicObject(3660, 1258.75000, -1633.60999, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1258.80005, -1631.65002, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1258.84998, -1629.68005, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1258.90002, -1627.76001, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1259.18994, -1620.18994, 14.96000,   0.00000, 0.00000, 140.55000);
CreateDynamicObject(3660, 1258.93005, -1626.44995, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1254.70996, -1624.50000, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1252.46997, -1622.44995, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1249.68994, -1620.42004, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1247.54004, -1618.42004, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1245.21997, -1616.37000, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(3660, 1243.00000, -1614.32996, 14.96000,   0.00000, 0.00000, 178.72000);
CreateDynamicObject(618, 1287.73999, -1626.56995, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.52002, -1619.98999, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.64001, -1613.66003, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.50000, -1605.68005, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1287.52002, -1597.91003, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1267.40002, -1634.19995, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1267.18005, -1629.27002, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1267.02002, -1626.45996, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1263.16003, -1622.93005, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1258.40002, -1619.09998, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1254.42004, -1615.78003, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3578, 1287.04004, -1631.35999, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1282.20996, -1638.03003, 11.80000,   0.00000, 0.00000, 90.77000);
CreateDynamicObject(3578, 1282.31006, -1648.32996, 11.80000,   0.00000, 0.00000, 90.77000);
CreateDynamicObject(3578, 1282.42004, -1658.56995, 11.80000,   0.00000, 0.00000, 90.77000);
CreateDynamicObject(3578, 1287.31995, -1663.46997, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(1297, 1292.27002, -1664.71997, 15.89000,   356.85999, 0.00000, 0.00000);
CreateDynamicObject(3578, 1282.18994, -1636.25000, 11.80000,   0.00000, 0.00000, 90.77000);
CreateDynamicObject(3578, 1287.15002, -1635.46997, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1287.16003, -1639.21997, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1287.17004, -1643.22998, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1287.18005, -1647.22998, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1287.18005, -1650.94995, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1287.21997, -1654.56006, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(3578, 1287.33997, -1658.26001, 11.76000,   0.00000, 0.00000, 0.22000);
CreateDynamicObject(1350, 1321.76001, -1565.65002, 12.46000,   3.14000, 0.00000, 88.40000);
CreateDynamicObject(1350, 1317.81006, -1587.31995, 12.46000,   3.14000, 0.00000, 0.24000);
CreateObject(18850, 1238.75000, -1676.25000, 31.28000,   0.00000, 0.00000, 0.00000);
CreateObject(18850, 1238.80005, -1643.97998, 31.28000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1694, 1257.05005, -1671.17004, 57.36000,   0.00000, 0.00000, 180.39000);
CreateDynamicObject(16101, 1249.77002, -1613.13000, 40.36000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16368, 1249.83997, -1613.08997, 51.34000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1279.81995, -1599.68994, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1275.55005, -1605.31995, 12.03000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1271.12000, -1606.28003, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1267.14001, -1604.02002, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1263.62000, -1601.66003, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1265.18994, -1606.54004, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1270.77002, -1612.92004, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1274.62000, -1619.32996, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1278.33997, -1623.56995, 15.48000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(618, 1283.46997, -1625.94995, 13.52000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5721, 1259.97998, -1664.76001, 38.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5721, 1259.84998, -1681.16003, 38.10000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5721, 1259.95996, -1647.98999, 38.12000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5721, 1259.92004, -1645.63000, 38.12000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5721, 1243.33997, -1665.58997, 38.12000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(5721, 1235.18994, -1659.02002, 38.14000,   0.00000, 0.00000, 179.88000);
CreateDynamicObject(16101, 1268.04004, -1689.04004, 42.95000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16368, 1268.03003, -1688.97998, 53.77000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(10832, 1201.27002, -1695.19995, 14.21000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2774, 1173.93994, -1620.15002, 19.75000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(2774, 1226.83997, -1643.51001, 41.39000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1226.85999, -1666.76001, 41.39000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1226.81006, -1675.96997, 41.39000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1226.85999, -1666.76001, 42.62000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1239.04004, -1631.37000, 41.39000,   0.00000, 90.00000, 1.37000);
CreateDynamicObject(2774, 1251.41003, -1643.03003, 41.39000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1251.41003, -1643.03003, 39.69000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1251.40002, -1643.04004, 38.03000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1239.04004, -1631.37000, 39.81000,   0.00000, 90.00000, 1.37000);
CreateDynamicObject(2774, 1239.04004, -1631.37000, 38.22000,   0.00000, 90.00000, 1.37000);
CreateDynamicObject(2774, 1249.79004, -1643.05005, 38.03000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1268.78003, -1678.00000, 41.39000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1268.78003, -1678.00000, 42.62000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1268.78003, -1678.00000, 41.39000,   0.00000, 90.00000, 269.97000);
CreateDynamicObject(2774, 1256.54004, -1690.13000, 41.39000,   0.00000, 90.00000, 180.25000);
CreateDynamicObject(2774, 1256.56006, -1690.12000, 42.64000,   0.00000, 90.00000, 180.25000);
CreateDynamicObject(2774, 1239.28003, -1690.18005, 42.66000,   0.00000, 90.00000, 180.25000);
CreateDynamicObject(2774, 1239.28003, -1690.18994, 41.39000,   0.00000, 90.00000, 180.25000);
CreateDynamicObject(10832, 1257.65002, -1681.73999, 45.18000,   0.00000, 0.00000, 90.39000);
CreateDynamicObject(980, 1193.06006, -1700.17004, 15.34000,   0.00000, 0.00000, 180.57001);
CreateDynamicObject(1622, 1184.81995, -1621.38000, 20.24000,   0.00000, 0.00000, 82.60000);
CreateDynamicObject(1622, 1171.06006, -1621.42004, 20.24000,   0.00000, 0.00000, 82.60000);
CreateDynamicObject(1622, 1197.13000, -1690.45996, 16.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1622, 1168.73999, -1536.39001, 10.83000,   0.00000, 0.00000, 26.10000);
CreateDynamicObject(1622, 1193.58997, -1536.06995, 10.83000,   0.00000, 0.00000, 26.10000);
CreateDynamicObject(1622, 1230.54004, -1556.77002, 11.06000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1616, 1281.34998, -1657.20996, 19.25000,   0.00000, 0.00000, 265.10999);
CreateDynamicObject(1616, 1253.12000, -1586.39001, 23.32000,   0.00000, 0.00000, 178.97000);
CreateDynamicObject(1616, 1273.48999, -1602.72998, 14.35000,   0.00000, 0.00000, 346.00000);
CreateDynamicObject(2774, 1174.20996, -1614.06995, 11.68000,   0.00000, 90.00000, 359.70001);
CreateDynamicObject(2774, 1174.18994, -1615.71997, 11.68000,   0.00000, 90.00000, 359.70001);
CreateDynamicObject(2774, 1174.22998, -1617.37000, 11.68000,   0.00000, 90.00000, 359.70001);
CreateDynamicObject(2774, 1174.25000, -1619.00000, 11.68000,   0.00000, 90.00000, 359.70001);
CreateDynamicObject(2774, 1174.21997, -1620.66003, 11.68000,   0.00000, 90.00000, 359.70001);
CreateDynamicObject(8673, 1173.00000, -1700.43005, 17.68000,   0.00000, 0.00000, 0.41000);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Todas Portas do aparamento ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(1536, 1806.40295, -1302.95496, 21.17425,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 26.64431,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 32.09431,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 37.53994,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 42.98508,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 48.42056,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 53.86033,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 59.30211,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 64.80185,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 70.24808,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 75.60875,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 81.11254,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 86.56724,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 91.96090,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 97.47613,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 102.83173,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 108.30270,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 113.79164,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 124.66093,   0.00000, 0.00000, 270.31775);
CreateDynamicObject(1536, 1806.40295, -1302.95496, 119.20029,   0.00000, 0.00000, 270.31775);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Nova Mecanica ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(11391, 1786.32, -1688.10, 13.76,   -0.02, 0.00, 271.24);
CreateDynamicObject(2893, 1808.06, -1692.68, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(1698, 1807.65, -1689.10, 13.78,   0.00, 0.00, 1.01);
CreateDynamicObject(1698, 1805.21, -1689.04, 13.78,   0.00, 0.00, 0.00);
CreateDynamicObject(1698, 1807.68, -1691.08, 13.78,   0.00, 0.00, 1.01);
CreateDynamicObject(2893, 1807.42, -1692.69, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(1698, 1805.20, -1691.10, 13.78,   0.00, 0.00, 0.00);
CreateDynamicObject(2893, 1804.94, -1692.70, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(2893, 1805.55, -1692.70, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(1656, 1806.42, -1690.38, 13.76,   0.00, 0.00, 0.00);
CreateDynamicObject(1698, 1799.16, -1689.12, 13.78,   0.00, 0.00, 0.71);
CreateDynamicObject(1698, 1796.82, -1689.22, 13.78,   0.00, 0.00, 0.71);
CreateDynamicObject(1698, 1799.19, -1691.58, 13.78,   0.00, 0.00, 0.71);
CreateDynamicObject(1698, 1796.85, -1691.60, 13.78,   0.00, 0.00, 0.71);
CreateDynamicObject(1656, 1798.00, -1690.58, 13.76,   0.00, 0.00, 0.71);
CreateDynamicObject(2893, 1799.54, -1693.16, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(2893, 1798.95, -1693.17, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(2893, 1797.19, -1693.18, 13.91,   0.00, 0.00, 0.00);
CreateDynamicObject(2893, 1796.54, -1693.16, 13.91,   0.00, 0.00, 0.00);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Mapa Prefeitura ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(970, 1510.51440, -1745.50293, 13.00140,   0.00000, 0.00000, 269.63708);
CreateDynamicObject(970, 1509.43323, -1741.70313, 13.02140,   0.00000, 0.00000, 301.96240);
CreateDynamicObject(3785, 1483.98645, -1750.06836, 15.85420,   0.00000, 0.00000, 81.92890);
CreateDynamicObject(3785, 1478.43896, -1750.07043, 15.85420,   0.00000, 0.00000, 94.59490);
CreateDynamicObject(970, 1451.42224, -1745.44067, 13.00040,   0.00000, 0.00000, 270.06461);
CreateDynamicObject(970, 1452.42090, -1741.55872, 13.00040,   0.00000, 0.00000, 241.12810);
CreateDynamicObject(983, 1466.24365, -1739.75610, 12.87330,   0.00000, 0.00000, 90.13930);
CreateDynamicObject(983, 1472.64270, -1739.77856, 12.87235,   0.00000, 0.00000, 89.73224);
CreateDynamicObject(983, 1475.85876, -1739.78625, 12.87130,   0.00000, 0.00000, 89.73220);
CreateDynamicObject(7092, 1466.22876, -1751.28918, 27.44040,   0.00000, 0.00000, 269.97928);
CreateDynamicObject(3851, 1489.11804, -1751.44214, 16.41580,   0.00000, 0.00000, 270.39581);
CreateDynamicObject(3851, 1489.11804, -1751.44214, 20.36910,   0.00000, 0.00000, 270.39581);
CreateDynamicObject(3851, 1489.11804, -1751.44214, 24.35620,   0.00000, 0.00000, 270.39581);
CreateDynamicObject(3851, 1472.32397, -1751.40820, 16.41580,   0.00000, 0.00000, 270.39581);
CreateDynamicObject(3851, 1472.32397, -1751.40820, 20.36621,   0.00000, 0.00000, 270.39581);
CreateDynamicObject(3851, 1472.32397, -1751.40820, 24.35220,   0.00000, 0.00000, 270.39581);
CreateDynamicObject(3851, 1480.65454, -1751.49036, 24.63620,   0.00000, 0.00000, 270.19479);
CreateDynamicObject(983, 1456.61890, -1739.78223, 12.86930,   0.00000, 0.00000, 89.73220);
CreateDynamicObject(970, 1451.42249, -1749.45837, 12.98040,   0.00000, 0.00000, 270.06461);
CreateDynamicObject(970, 1451.42224, -1753.57983, 12.98040,   -0.02000, 0.00000, 270.06461);
CreateDynamicObject(638, 1451.90527, -1753.83337, 13.19440,   0.00000, 0.00000, 359.35980);
CreateDynamicObject(638, 1451.91626, -1751.27173, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1451.92786, -1748.88696, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1451.90564, -1746.45728, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1452.02283, -1744.59583, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1453.14941, -1741.35229, 13.19440,   0.00000, 0.00000, 332.06281);
CreateDynamicObject(638, 1452.62256, -1742.37439, 13.19440,   0.00000, 0.00000, 332.06281);
CreateDynamicObject(638, 1454.82971, -1740.28125, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1456.78613, -1740.26489, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1459.06860, -1740.29407, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1461.38354, -1740.27710, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1463.94983, -1740.28284, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1466.40625, -1740.28503, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1468.81030, -1740.29858, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1471.29065, -1740.30566, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1473.75220, -1740.30396, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1478.38391, -1741.69250, 13.19440,   0.00000, 0.00000, 359.01932);
CreateDynamicObject(638, 1478.34082, -1743.98682, 13.19440,   0.00000, 0.00000, 359.01932);
CreateDynamicObject(638, 1476.81409, -1745.39893, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1474.30664, -1745.39172, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1471.75745, -1745.38831, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1469.27820, -1745.38110, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1467.04163, -1745.38196, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1464.61584, -1745.38257, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1462.11243, -1745.38123, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1458.92200, -1746.51404, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1457.84778, -1749.03320, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1457.85828, -1751.50085, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1457.86536, -1753.87793, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1456.50989, -1755.54565, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1454.37720, -1755.52295, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(647, 1469.30823, -1742.76367, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(638, 1489.40320, -1745.37781, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1491.82324, -1745.37610, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1493.98267, -1745.38000, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1496.12073, -1745.36279, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1498.66992, -1745.38086, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1501.04236, -1745.39331, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1503.37427, -1745.39709, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1504.55786, -1754.44421, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1504.52771, -1751.54700, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1504.48621, -1748.72205, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1504.47241, -1746.39905, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1503.32483, -1748.72900, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1503.26160, -1746.53259, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1510.08435, -1752.18665, 13.19440,   0.00000, 0.00000, 180.35381);
CreateDynamicObject(638, 1510.10571, -1749.99304, 13.19440,   0.00000, 0.00000, 180.35381);
CreateDynamicObject(638, 1510.08752, -1747.36560, 13.19440,   0.00000, 0.00000, 180.35381);
CreateDynamicObject(638, 1510.05920, -1744.73401, 13.19440,   0.00000, 0.00000, 180.35379);
CreateDynamicObject(638, 1509.42126, -1742.45972, 13.19440,   0.00000, 0.00000, 211.65379);
CreateDynamicObject(638, 1508.67395, -1741.29236, 13.19440,   0.00000, 0.00000, 211.65379);
CreateDynamicObject(638, 1503.66211, -1740.39905, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1501.00586, -1740.38562, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1498.35547, -1740.37451, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1495.69666, -1740.36487, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1493.23889, -1740.34473, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1490.69971, -1740.33606, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1488.19836, -1740.32556, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1485.63806, -1740.32080, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1484.39783, -1740.33472, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1483.37659, -1741.95911, 13.19440,   0.00000, 0.00000, 359.01932);
CreateDynamicObject(638, 1483.35376, -1744.40405, 13.19440,   0.00000, 0.00000, 359.01929);
CreateDynamicObject(9833, 1470.80481, -1742.74841, 15.32740,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9833, 1489.69397, -1742.54663, 15.32740,   0.00000, 0.00000, 350.52249);
CreateDynamicObject(983, 1482.88843, -1746.19543, 12.91430,   0.00000, 0.00000, 359.66440);
CreateDynamicObject(983, 1482.92212, -1742.98889, 12.91430,   0.00000, 0.00000, 359.66440);
CreateDynamicObject(983, 1486.13464, -1739.83655, 12.91430,   0.00000, 0.00000, 269.63141);
CreateDynamicObject(983, 1492.40466, -1739.86841, 12.91430,   0.00000, 0.00000, 269.63141);
CreateDynamicObject(983, 1498.77466, -1739.90784, 12.91430,   0.00000, 0.00000, 269.63141);
CreateDynamicObject(983, 1505.16138, -1739.94189, 12.91430,   0.00000, 0.00000, 269.63141);
CreateDynamicObject(970, 1510.50769, -1749.60339, 13.00140,   0.00000, 0.00000, 270.20059);
CreateDynamicObject(970, 1510.51660, -1753.70569, 13.00140,   0.00000, 0.00000, 270.20059);
CreateDynamicObject(638, 1506.99402, -1740.36792, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1505.39026, -1740.36902, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1510.09290, -1754.60938, 13.19440,   0.00000, 0.00000, 180.35381);
CreateDynamicObject(638, 1508.77979, -1755.68311, 13.19440,   0.00000, 0.00000, 89.77973);
CreateDynamicObject(638, 1506.12183, -1755.68176, 13.19440,   0.00000, 0.00000, 89.77973);
CreateDynamicObject(638, 1487.06226, -1745.37549, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1484.54224, -1745.36523, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(983, 1478.98877, -1743.00708, 12.91430,   0.00000, 0.00000, 359.26361);
CreateDynamicObject(983, 1478.91016, -1746.21704, 12.91430,   0.00000, 0.00000, 358.72751);
CreateDynamicObject(3494, 1475.84631, -1742.77698, 16.31110,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3494, 1485.82263, -1743.03394, 16.31110,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3877, 1478.42834, -1750.39563, 15.88690,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3877, 1483.98181, -1750.39160, 15.88687,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3462, 1475.81848, -1742.77368, 21.16690,   0.00000, 0.00000, 184.97391);
CreateDynamicObject(3462, 1485.87292, -1743.02637, 21.16690,   0.00000, 0.00000, 1.39011);
CreateDynamicObject(3785, 1485.11768, -1743.02185, 14.33663,   0.00000, 0.00000, 178.85297);
CreateDynamicObject(3785, 1476.54175, -1742.79346, 14.33660,   0.00000, 0.00000, 0.21540);
CreateDynamicObject(638, 1476.26306, -1740.32275, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1477.48462, -1740.33081, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1478.35120, -1744.98938, 13.19440,   0.00000, 0.00000, 359.01932);
CreateDynamicObject(638, 1459.71179, -1745.38635, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1458.91663, -1749.04468, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1457.84583, -1746.42871, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1457.90161, -1756.02271, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1452.91504, -1755.51257, 13.19440,   0.00000, 0.00000, 269.83939);
CreateDynamicObject(638, 1451.90039, -1756.17432, 13.19440,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1459.84070, -1739.78345, 12.87330,   0.00000, 0.00000, 90.13930);
CreateDynamicObject(647, 1471.87146, -1743.12524, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1466.77783, -1742.68359, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1464.50232, -1742.83887, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1461.98535, -1742.93018, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1459.35095, -1743.04688, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1456.62036, -1742.85852, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1454.53101, -1744.02771, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1454.11804, -1747.20105, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1454.25720, -1750.14001, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1454.20508, -1753.85571, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1475.54895, -1743.09595, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1485.91248, -1743.08740, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1489.30981, -1743.11865, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1492.36450, -1743.02954, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1495.11218, -1743.11047, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1497.96191, -1743.22107, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1500.82263, -1743.17932, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1503.86060, -1743.33997, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1506.83167, -1744.03967, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1507.24902, -1746.66296, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1507.36609, -1749.38452, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1507.37549, -1752.43237, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(647, 1507.55066, -1755.00916, 12.74787,   0.00000, 0.00000, 244.79294);
CreateDynamicObject(1215, 1492.91003, -1774.48999, 13.82000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1469.69995, -1774.23999, 13.89000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1216, 1412.50000, -1752.69995, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1216, 1411.00000, -1752.69995, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1216, 1410.04004, -1753.50000, 13.20000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1216, 1410.04004, -1755.00000, 13.20000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1216, 1547.90002, -1752.69995, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1216, 1546.19995, -1752.69995, 13.20000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1216, 1548.80005, -1753.30005, 13.20000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1216, 1548.80005, -1755.00000, 13.20000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(1223, 1409.69995, -1752.30005, 12.00000,   0.00000, 0.00000, 315.00000);
CreateDynamicObject(1223, 1549.19995, -1752.40002, 12.00000,   0.00000, 0.00000, 215.00000);
CreateDynamicObject(18981, 1512.13440, -1609.74438, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1512.14001, -1634.67004, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1512.12000, -1659.54004, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1512.09998, -1684.43005, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1512.09998, -1709.04004, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1512.09998, -1733.69995, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1487.22998, -1609.78003, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1487.22998, -1634.46997, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1487.22998, -1659.31006, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1487.22998, -1684.29004, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1487.25000, -1709.21997, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1487.20508, -1734.11658, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1462.45996, -1609.59998, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1462.52002, -1634.57996, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1462.52002, -1659.37000, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1462.50000, -1684.31995, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1462.52002, -1709.18994, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1462.52002, -1734.06995, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1438.03003, -1609.68994, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1441.98999, -1634.32996, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1442.79004, -1658.89001, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1438.09998, -1683.56006, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1437.64001, -1707.52002, 11.87000,   0.00000, 90.00000, 0.00000);
CreateDynamicObject(18981, 1437.97998, -1732.33997, 11.87000,   0.00000, 90.00000, 0.00000);
CreateObject(10368, 1479.36902, -1678.97388, 32.87000,   0.00000, 0.00000, -180.00000);
CreateDynamicObject(655, 1520.21997, -1723.09998, 12.91000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(655, 1438.17004, -1723.05005, 12.89000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3511, 1462.21997, -1718.38000, 12.77000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3511, 1482.93994, -1718.67004, 13.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(712, 1515.44995, -1699.30005, 22.51000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(712, 1515.75000, -1678.48999, 22.44000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3511, 1482.92004, -1659.16003, 12.88000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3511, 1462.18005, -1659.31006, 12.80000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(712, 1443.06995, -1678.55005, 22.47000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(712, 1443.09998, -1699.15002, 22.45000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(655, 1519.89001, -1634.66003, 12.88000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(655, 1438.45996, -1634.64001, 12.84000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(16061, 1485.48999, -1602.62000, 12.38000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(16061, 1485.50000, -1631.73999, 12.36000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(6965, 1482.83447, -1616.70557, 15.99000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1364, 1461.06006, -1631.56006, 13.14000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1364, 1473.98999, -1631.56006, 13.14000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1364, 1492.50000, -1631.56006, 13.14000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1364, 1503.39001, -1631.56006, 13.14000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(1364, 1503.63000, -1602.17004, 13.14000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1364, 1492.47998, -1602.17004, 13.14000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1364, 1476.85999, -1602.17004, 13.14000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1364, 1461.43005, -1602.17004, 13.14000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1257, 1436.47998, -1629.18994, 13.59000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1229, 1435.56006, -1626.22998, 13.85000,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(14468, 1481.72998, -1602.55005, 12.61000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1471.46997, -1602.48999, 12.36000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1487.51001, -1602.48999, 12.36000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1496.13000, -1602.18994, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1499.87000, -1601.89001, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1508.03003, -1602.34998, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1465.26001, -1602.27002, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1456.79004, -1602.18994, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1456.56006, -1631.43994, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1464.71997, -1631.64001, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1469.88000, -1631.46997, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1478.72998, -1631.43005, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1482.98999, -1631.52002, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1487.65002, -1631.53003, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1496.56006, -1631.57996, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1499.15002, -1631.45996, 12.61000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(14468, 1507.31995, -1631.65002, 12.37000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8623, 1450.35999, -1616.66003, 12.36000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(647, 1450.47998, -1619.60999, 12.36000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(647, 1450.37000, -1616.41003, 12.67000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(647, 1450.20996, -1612.75000, 12.36000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3439, 1450.08997, -1610.32996, 16.43000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3439, 1450.37000, -1622.70996, 16.43000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1359, 1438.28003, -1633.54004, 13.00000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1359, 1520.39001, -1633.62000, 13.08000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8673, 1509.88000, -1599.75000, 13.81000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8673, 1489.48999, -1599.75000, 13.81000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8673, 1469.06006, -1599.75000, 13.81000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(8673, 1448.63000, -1599.75000, 13.81000,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1540.90002, -1807.30005, 12.50000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(987, 1490.45496, -1836.31799, 12.50000,   0.00000, 0.00000, 270.00000);
//CreateDynamicObject(2942, 1496.50000, -1758.00000, 13.20000,   0.00000, 0.00000, 180.00000);
//CreateDynamicObject(2942, 1482.80005, -1758.09998, 13.20000,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(3851, 1473.14246, -1751.04541, 20.97918,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1489.82043, -1750.99121, 24.85836,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1489.82043, -1750.99121, 20.97382,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1489.82043, -1750.99121, 17.07350,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1489.82043, -1750.99121, 13.12595,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1473.14246, -1751.04541, 13.12595,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1473.14246, -1751.04541, 17.02042,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1473.12781, -1751.03186, 24.87289,   0.00000, 0.00000, 269.79050);
CreateDynamicObject(3851, 1473.12781, -1751.03186, 20.97918,   0.00000, 0.00000, 269.79050);
/*=-=-=-=-=--=-=-=-=-=-=-=-=-=-=- Hospital Car Park ==-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateObject(8417, 1230.16, -1286.16, 12.08,   0.00, 180.00, 0.00);
CreateObject(8417, 1231.98, -1366.14, 12.08,   0.00, 180.00, 0.00);
CreateObject(8417, 1231.38, -1326.16, 12.08,   0.00, 180.00, 0.00);
CreateDynamicObject(3660, 1234.02, -1291.81, 14.75,   0.00, 0.00, 359.72);
CreateDynamicObject(3660, 1217.38, -1320.31, 14.75,   0.00, 0.00, 270.00);
CreateDynamicObject(3660, 1245.12, -1300.92, 14.75,   0.00, 0.00, 270.00);
CreateDynamicObject(4642, 1219.92, -1291.95, 14.17,   0.00, 0.00, 360.00);
CreateDynamicObject(1892, 1222.13, -1291.67, 12.10,   0.00, 0.00, 0.00);
CreateDynamicObject(3660, 1245.18, -1365.61, 14.75,   0.00, 0.00, 270.00);
CreateDynamicObject(3660, 1245.10, -1320.56, 14.75,   0.00, 0.00, 270.00);
CreateDynamicObject(3660, 1245.09, -1340.19, 14.75,   0.00, 0.00, 270.00);
CreateDynamicObject(3881, 1243.19, -1381.72, 13.97,   0.00, 0.00, 0.00);
CreateDynamicObject(1892, 1244.84, -1350.64, 12.10,   0.00, 0.00, 270.00);
CreateDynamicObject(4642, 1244.84, -1354.04, 13.81,   0.00, 0.00, 270.00);
CreateDynamicObject(3660, 1217.39, -1300.69, 14.75,   0.00, 0.00, 270.00);
CreateDynamicObject(4642, 1217.12, -1334.22, 13.81,   0.00, 0.00, 89.70);
CreateDynamicObject(1892, 1217.12, -1330.77, 12.10,   0.00, 0.00, 270.00);
CreateDynamicObject(3660, 1217.26, -1345.90, 14.75,   0.00, 0.00, 269.64);
CreateDynamicObject(3660, 1217.15, -1365.56, 14.75,   0.00, 0.00, 269.64);
CreateDynamicObject(3881, 1218.75, -1380.99, 13.97,   0.00, 0.00, 179.84);
CreateDynamicObject(1892, 1216.99, -1376.12, 12.10,   0.00, 0.00, 270.00);
CreateDynamicObject(1892, 1244.79, -1376.04, 12.10,   0.00, 0.00, 270.00);
CreateDynamicObject(10183, 1221.93, -1355.39, 12.14,   0.00, 0.00, 134.88);
CreateDynamicObject(10183, 1222.40, -1313.38, 12.14,   0.00, 0.00, 135.08);
CreateDynamicObject(10183, 1239.84, -1313.44, 12.14,   0.00, 0.00, 315.15);
CreateDynamicObject(10183, 1239.69, -1353.91, 12.14,   0.00, 0.00, 315.15);
CreateDynamicObject(8406, 1228.34, -1385.53, 17.67,   0.00, 0.00, 0.00);
CreateDynamicObject(3934, 1161.69, -1317.44, 30.51,   0.00, 0.00, 359.01);
CreateDynamicObject(1500, 1160.72, -1330.52, 30.46,   0.00, 0.00, 0.00);
CreateDynamicObject(3934, 1161.49, -1303.07, 30.51,   0.00, 0.00, 359.01);
CreateDynamicObject(618, 1217.29, -1371.02, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1217.28, -1356.46, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1217.59, -1338.28, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1217.61, -1317.66, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1217.53, -1294.76, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1234.09, -1292.30, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1244.99, -1298.64, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1244.75, -1321.34, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1244.88, -1340.88, 13.19,   0.00, 0.00, 0.00);
CreateDynamicObject(618, 1244.60, -1364.90, 13.19,   0.00, 0.00, 0.00);
//=-=-=-=-=--=-==--=-==-=-=-=-=-=-=-= Não sei oque é =-=-=-=-=-=-=-=-=-=-=-==--=-=--=-=-=-=-=
CreateDynamicObject(16362, 1278.40002, -1815.30005, 15.50000,   0.00000, 0.00000, 0.00000);//EstacionamentoBusao
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Cercas HQ Ballas =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(987,1073.80005,-1210.80005,15.9,0.00000000,0.00000000,85.00000000);//object (elecfence_BAR) (1)
CreateDynamicObject(987,1115.80005,-1160,22.8,0.00000000,0.00000000,0.00000000);//object (elecfence_BAR) (2)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Cercas Hitmans =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(987,1015.29999,-1545,12.9,0.00000000,0.00000000,100.00000000);//object elecfence_BAR) (3)
CreateDynamicObject(987,953.59998,-1502.30005,12.5,0.00000000,0.00000000,0.00000000);//object elecfence_BAR) (4)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- HQ Prefeitura =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(2395, 608.59998, -602.50000, 15.70000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2689, 608.59998, -602.50000, 17.70000,   0.00000, 0.00000, 84.00000);
CreateDynamicObject(2705, 608.59998, -601.70001, 17.70000,   0.00000, 0.00000, 280.00000);
CreateDynamicObject(2399, 608.59998, -600.40002, 17.60000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(2704, 608.70001, -602.29999, 16.90000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(1237, 641.68866, -558.77203, 15.08541,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1237, 641.71271, -567.57501, 15.08541,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1237, 641.65424, -577.04974, 15.08541,   0.00000, 0.00000, 0.00000);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Debug Redeglobo =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(8947, 779.02094, -1372.71887, 15.21412,   0.00000, 0.00000, 179.77211);//NãoTire
CreateDynamicObject(984, 778.39264, -1360.50952, 18.79913,   0.00000, 0.00000, 89.92582);
CreateDynamicObject(984, 780.02081, -1360.49670, 18.79913,   0.00000, 0.00000, 89.92582);
CreateDynamicObject(984, 786.34796, -1366.88904, 18.79010,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(984, 786.33191, -1378.48254, 18.79010,   0.00000, 0.00000, 359.69696);
CreateDynamicObject(984, 779.88214, -1384.88318, 18.79913,   0.00000, 0.00000, 89.92582);
CreateDynamicObject(984, 778.06079, -1384.88806, 18.79913,   0.00000, 0.00000, 89.92582);
CreateDynamicObject(984, 771.77777, -1366.89600, 18.79010,   0.00000, 0.00000, 359.69696);
CreateDynamicObject(984, 750.9990,   -1363.2836, 13.1583,   0.00000, 0.00000, 269.34869);
CreateDynamicObject(5821, 770.14069, -1371.38892, 14.25736,   0.00000, 0.00000, 356.35553);
CreateDynamicObject(983, 771.68829, -1379.22375, 18.86449,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 771.67023, -1381.66138, 18.86449,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1536, 754.70844, -1361.14392, 12.53171,   0.00000, 0.00000, 270.23730);
CreateDynamicObject(3458, 752.60626, -1331.76758, 16.16825,   0.00000, 0.00000, 179.68384);
CreateDynamicObject(3763, 735.42596, -1346.71338, 45.26072,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 757.39246, -1356.91138, 12.80410,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 754.55524, -1356.86755, 12.80410,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 757.12811, -1363.24133, 12.60310,   0.00000, 0.00000, 0.00000);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Debug TAXISTAS =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(987, 953.17004, -1416.00439, 12.74087,   0.00000, 0.00000, 268.92596);//NãoTire
CreateDynamicObject(987, 952.84143, -1427.96997, 13.34892,   0.00000, 0.00000, 257.12720);
CreateDynamicObject(978, 948.59357, -1427.32581, 16.87534,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(987, 1040.97266, -1464.64453, 12.17284,   0.00000, 0.00000, 89.45705);
CreateDynamicObject(987, 953.04871, -1474.23560, 12.07735,   0.00000, 0.00000, 1.57126);
CreateDynamicObject(987, 941.17413, -1474.52258, 12.07735,   0.00000, 0.00000, 1.57126);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Debug TAXISTAS =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(980, 660.33533, -1227.59241, 17.56081,   0.00000, 0.00000, 62.13749);//NãoTire
CreateDynamicObject(987, 673.17114, -1211.53748, 17.07505,   0.00000, 0.00000, 217.31770);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Auto Escola =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(970, 979.70764, -940.09833, 40.76167,   0.00000, 0.00000, 357.67081);//Grade
CreateDynamicObject(970, 980.36407, -933.40125, 40.76067,   0.00000, 0.00000, 354.60962);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Deposito da conce =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(3816,5813.2998,-6893.2002,13,0.00000000,0.00000000,90.00000000);//object(bighangar1_SFx) (1)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- HQ Detran =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(3294,368.10000610352,162.10000610352,1021.9000244141,0.00000000,0.00000000,0.00000000);
/*=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-- Concessionaria 2  =-=-=-=-=-=-=-=-=-=-=-=-=-=*/
CreateDynamicObject(9339,554.11846924,-1279.22155762,23.49732590,0.00000000,90.00000000,90.00000000); //object(sfnvilla001_cm) (15)
CreateDynamicObject(8661,547.21130371,-1288.57043457,23.59180641,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (1)
CreateDynamicObject(9339,540.32373047,-1279.21118164,23.49732590,0.00000000,90.00000000,90.00000000); //object(sfnvilla001_cm) (27)
CreateDynamicObject(9339,527.90856934,-1291.58288574,23.49732590,0.00000000,90.00000000,180.00000000); //object(sfnvilla001_cm) (28)
CreateDynamicObject(9339,566.50256348,-1291.58862305,23.49732590,0.00000000,90.00000000,179.99450684); //object(sfnvilla001_cm) (29)
CreateDynamicObject(8661,546.95574951,-1288.68481445,23.59180641,0.25006104,180.00000000,180.00000000); //object(gnhtelgrnd_lvs) (2)
CreateDynamicObject(970,550.83929443,-1260.09997559,17.74365425,0.00000000,0.00000000,35.00000000); //object(fencesmallb) (1)
CreateDynamicObject(970,547.35687256,-1262.54113770,17.74365425,0.00000000,0.00000000,34.99694824); //object(fencesmallb) (2)
CreateDynamicObject(970,543.88415527,-1265.03393555,17.74365425,0.00000000,0.00000000,34.99694824); //object(fencesmallb) (3)
CreateDynamicObject(970,540.42633057,-1267.50769043,17.74365425,0.00000000,0.00000000,36.99694824); //object(fencesmallb) (4)
CreateDynamicObject(970,537.06542969,-1270.11096191,17.74365425,0.00000000,0.00000000,37.99645996); //object(fencesmallb) (5)
CreateDynamicObject(970,533.75811768,-1272.74133301,17.74365425,0.00000000,0.00000000,37.99621582); //object(fencesmallb) (6)
CreateDynamicObject(970,530.38006592,-1275.36389160,17.74365425,0.00000000,0.00000000,37.99621582); //object(fencesmallb) (7)
CreateDynamicObject(970,527.03735352,-1277.98937988,17.74365425,0.00000000,0.00000000,37.99621582); //object(fencesmallb) (8)
CreateDynamicObject(970,523.72644043,-1280.65466309,17.74365425,0.00000000,0.00000000,39.24621582); //object(fencesmallb) (9)
CreateDynamicObject(970,520.39648438,-1283.33666992,17.74365425,0.00000000,0.00000000,38.74316406); //object(fencesmallb) (10)
CreateDynamicObject(970,517.10064697,-1286.02026367,17.74365425,0.00000000,0.00000000,38.74316406); //object(fencesmallb) (11)
CreateDynamicObject(970,513.79986572,-1288.69689941,17.74365425,0.00000000,0.00000000,38.73779297); //object(fencesmallb) (12)
CreateDynamicObject(970,510.50381470,-1291.33911133,17.74365425,0.00000000,0.00000000,38.73779297); //object(fencesmallb) (13)
CreateDynamicObject(970,507.14752197,-1294.02856445,17.74365425,0.00000000,0.00000000,38.98779297); //object(fencesmallb) (14)
CreateDynamicObject(970,503.89877319,-1296.69409180,17.74365425,0.00000000,0.00000000,39.73754883); //object(fencesmallb) (15)
CreateDynamicObject(970,500.59469604,-1299.45666504,17.74365425,0.00000000,0.00000000,39.23754883); //object(fencesmallb) (16)
CreateDynamicObject(970,497.53906250,-1301.97802734,17.74365425,0.00000000,0.00000000,39.23217773); //object(fencesmallb) (17)
CreateDynamicObject(970,497.25711060,-1304.97546387,17.74365425,0.00000000,0.00000000,129.23217773); //object(fencesmallb) (18)
CreateDynamicObject(970,499.96429443,-1308.28955078,17.74365425,0.00000000,0.00000000,128.22668457); //object(fencesmallb) (19)
CreateDynamicObject(970,502.55761719,-1311.71118164,17.74365425,0.00000000,0.00000000,126.22143555); //object(fencesmallb) (20)
CreateDynamicObject(970,505.10040283,-1315.19287109,17.74365425,0.00000000,0.00000000,126.21643066); //object(fencesmallb) (21)
CreateDynamicObject(970,507.45721436,-1318.80908203,17.74365425,0.00000000,0.00000000,119.46643066); //object(fencesmallb) (22)
CreateDynamicObject(970,509.46026611,-1322.59057617,17.74365425,0.00000000,0.00000000,115.46533203); //object(fencesmallb) (23)
CreateDynamicObject(970,511.32205200,-1326.49365234,17.74365425,0.00000000,0.00000000,115.46081543); //object(fencesmallb) (24)
CreateDynamicObject(970,512.32086182,-1328.56457520,17.74365425,0.00000000,0.00000000,115.46081543); //object(fencesmallb) (25)
CreateDynamicObject(970,515.23974609,-1330.06896973,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (26)
CreateDynamicObject(970,519.35791016,-1329.01599121,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (27)
CreateDynamicObject(970,523.50689697,-1327.98254395,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (28)
CreateDynamicObject(970,527.65484619,-1326.94787598,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (29)
CreateDynamicObject(970,531.77392578,-1325.89587402,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (30)
CreateDynamicObject(970,535.89306641,-1324.84411621,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (31)
CreateDynamicObject(970,539.93792725,-1323.80834961,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (32)
CreateDynamicObject(970,544.09985352,-1322.72021484,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (33)
CreateDynamicObject(970,548.21801758,-1321.66711426,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (34)
CreateDynamicObject(970,552.36578369,-1320.63244629,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (35)
CreateDynamicObject(970,556.48986816,-1319.60400391,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (36)
CreateDynamicObject(970,560.60766602,-1318.55090332,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (37)
CreateDynamicObject(970,564.67736816,-1317.50988770,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (38)
CreateDynamicObject(970,568.79614258,-1316.45812988,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (39)
CreateDynamicObject(970,572.89044189,-1315.41162109,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (40)
CreateDynamicObject(970,574.27105713,-1315.05883789,17.74365425,0.00000000,0.00000000,194.21081543); //object(fencesmallb) (41)
CreateDynamicObject(970,575.91784668,-1312.45751953,17.74365425,0.00000000,0.00000000,282.21081543); //object(fencesmallb) (42)
CreateDynamicObject(970,575.00402832,-1308.39648438,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (43)
CreateDynamicObject(970,574.05505371,-1304.21362305,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (44)
CreateDynamicObject(970,573.17163086,-1300.02917480,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (45)
CreateDynamicObject(970,572.27233887,-1295.87060547,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (46)
CreateDynamicObject(970,571.37219238,-1291.71386719,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (47)
CreateDynamicObject(970,570.45983887,-1287.48315430,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (48)
CreateDynamicObject(970,569.53192139,-1283.30346680,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (49)
CreateDynamicObject(970,568.57446289,-1279.10498047,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (50)
CreateDynamicObject(970,567.64691162,-1274.92602539,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (51)
CreateDynamicObject(970,566.70526123,-1270.67480469,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (52)
CreateDynamicObject(970,565.77246094,-1266.47070312,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (53)
CreateDynamicObject(970,565.02215576,-1262.27294922,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (54)
CreateDynamicObject(970,564.10064697,-1258.01611328,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (55)
CreateDynamicObject(970,563.49688721,-1254.81054688,17.74365425,0.00000000,0.00000000,282.20581055); //object(fencesmallb) (56)
CreateDynamicObject(9339,560.78790283,-1266.29064941,19.46633720,342.10583496,92.02297974,7.31884766); //object(sfnvilla001_cm) (37)
CreateDynamicObject(9339,562.07373047,-1266.27868652,19.46633720,342.10327148,92.02148438,7.31689453); //object(sfnvilla001_cm) (38)
CreateDynamicObject(9339,559.79272461,-1266.31018066,19.46633720,342.10327148,92.02148438,7.31689453); //object(sfnvilla001_cm) (39)
CreateDynamicObject(970,558.38409424,-1278.56445312,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (57)
CreateDynamicObject(970,554.17236328,-1278.55419922,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (58)
CreateDynamicObject(970,549.94012451,-1278.59558105,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (59)
CreateDynamicObject(970,545.70526123,-1278.61132812,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (60)
CreateDynamicObject(970,541.46990967,-1278.60339355,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (61)
CreateDynamicObject(970,537.15966797,-1278.59973145,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (62)
CreateDynamicObject(970,532.90075684,-1278.61828613,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (63)
CreateDynamicObject(970,529.42047119,-1278.65832520,24.19327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (64)
CreateDynamicObject(970,527.34790039,-1280.68835449,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (65)
CreateDynamicObject(970,527.35314941,-1284.91223145,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (66)
CreateDynamicObject(970,527.35711670,-1289.16259766,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (67)
CreateDynamicObject(970,527.36193848,-1293.48693848,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (68)
CreateDynamicObject(970,567.16424561,-1291.84130859,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (69)
CreateDynamicObject(970,567.16760254,-1287.61206055,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (70)
CreateDynamicObject(970,567.14569092,-1283.38305664,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (71)
CreateDynamicObject(970,567.12896729,-1280.73022461,24.19327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (72)
CreateDynamicObject(9339,563.13079834,-1266.29882812,19.46633720,342.10327148,92.02148438,7.31689453); //object(sfnvilla001_cm) (40)
CreateDynamicObject(9339,564.44219971,-1266.37194824,19.46633720,342.10327148,92.02148438,7.31689453); //object(sfnvilla001_cm) (41)
CreateDynamicObject(970,560.35528564,-1275.80200195,23.31829262,358.10339355,18.51052856,96.63488770); //object(fencesmallb) (74)
CreateDynamicObject(970,559.90472412,-1271.83825684,21.96828270,358.09826660,18.25784302,98.62622070); //object(fencesmallb) (75)
CreateDynamicObject(970,559.36175537,-1267.77734375,20.64330292,358.08465576,17.50195312,98.59893799); //object(fencesmallb) (76)
CreateDynamicObject(970,558.84527588,-1263.71398926,19.31830406,358.08288574,17.50122070,98.59680176); //object(fencesmallb) (77)
CreateDynamicObject(970,558.32116699,-1259.63439941,17.99330902,358.08288574,17.50122070,97.59680176); //object(fencesmallb) (78)
CreateDynamicObject(970,564.08850098,-1259.05065918,17.99330902,358.08288574,17.49572754,97.59155273); //object(fencesmallb) (79)
CreateDynamicObject(970,564.65124512,-1263.29150391,19.31830406,358.08288574,17.50122070,98.59680176); //object(fencesmallb) (80)
CreateDynamicObject(970,565.23327637,-1267.28442383,20.64330292,358.08288574,17.50122070,98.59680176); //object(fencesmallb) (81)
CreateDynamicObject(970,565.72991943,-1271.44018555,21.96828270,358.09387207,18.25378418,98.62426758); //object(fencesmallb) (82)
CreateDynamicObject(970,566.25683594,-1275.58215332,23.31829262,358.09936523,18.50646973,96.63024902); //object(fencesmallb) (83)
CreateDynamicObject(10183,537.33953857,-1275.61462402,16.26018143,0.00000000,0.00000000,83.00000000); //object(ferspaces) (1)
CreateDynamicObject(10183,556.80828857,-1290.23718262,16.26018143,0.00000000,0.00000000,225.74621582); //object(ferspaces) (2)
CreateDynamicObject(10183,546.96118164,-1290.61523438,23.64017868,0.00000000,0.00000000,225.74157715); //object(ferspaces) (3)
CreateDynamicObject(10183,535.80981445,-1320.53649902,16.26018143,0.00000000,0.00000000,239.49621582); //object(ferspaces) (4)
CreateDynamicObject(10183,531.89593506,-1309.57629395,16.26018143,0.00000000,0.00000000,225.49096680); //object(ferspaces) (5)
CreateDynamicObject(10183,532.81085205,-1299.13867188,16.26018143,0.00000000,0.00000000,225.48889160); //object(ferspaces) (6)
CreateDynamicObject(647,576.34063721,-1285.99072266,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (1)
CreateDynamicObject(647,573.39550781,-1286.56445312,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (2)
CreateDynamicObject(647,574.11419678,-1290.24487305,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (3)
CreateDynamicObject(647,577.84112549,-1287.44567871,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (4)
CreateDynamicObject(647,577.38281250,-1290.09838867,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (5)
CreateDynamicObject(647,577.41381836,-1292.64672852,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (6)
CreateDynamicObject(647,574.72351074,-1293.21850586,16.29700661,0.00000000,0.00000000,0.00000000); //object(new_bushsm) (7)
CreateDynamicObject(3578,558.60119629,-1255.30114746,15.50974274,358.75042725,358.49969482,29.71728516); //object(dockbarr1_la) (1)
CreateDynamicObject(3578,556.98236084,-1256.19799805,15.50974274,358.74774170,358.99713135,29.72360229); //object(dockbarr1_la) (2)
CreateDynamicObject(1472,566.15985107,-1293.81323242,25.54650307,0.00000000,0.00000000,180.00000000); //object(dyn_porch_1) (1)
CreateDynamicObject(1472,566.15368652,-1292.85937500,24.72149277,0.00000000,0.00000000,179.99450684); //object(dyn_porch_1) (2)
CreateDynamicObject(1472,566.09509277,-1291.80395508,23.84649467,0.00000000,0.00000000,179.99450684); //object(dyn_porch_1) (3)
CreateDynamicObject(1472,566.14093018,-1292.90332031,23.84649467,0.00000000,0.00000000,179.99450684); //object(dyn_porch_1) (4)
CreateDynamicObject(1472,566.14038086,-1294.07922363,23.84649467,0.00000000,0.00000000,179.99450684); //object(dyn_porch_1) (5)
CreateDynamicObject(1472,566.13031006,-1293.85388184,24.72149277,0.00000000,0.00000000,179.99450684); //object(dyn_porch_1) (6)
CreateDynamicObject(1491,565.46697998,-1293.88891602,26.24056625,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (1)
CreateDynamicObject(1649,563.25531006,-1293.80651855,27.93130875,0.00000000,0.00000000,180.00000000); //object(wglasssmash) (1)
CreateDynamicObject(1649,558.83929443,-1293.80175781,27.93130875,0.00000000,0.00000000,179.99450684); //object(wglasssmash) (6)
CreateDynamicObject(1649,554.45007324,-1293.82214355,27.93130875,0.00000000,0.00000000,179.99450684); //object(wglasssmash) (7)
CreateDynamicObject(1649,550.05609131,-1293.79223633,27.93130875,0.00000000,0.00000000,179.99450684); //object(wglasssmash) (8)
CreateDynamicObject(1649,546.08892822,-1295.13073730,27.93130875,0.00000000,0.00000000,217.99450684); //object(wglasssmash) (9)
CreateDynamicObject(1649,546.08886719,-1295.12988281,27.93130875,0.00000000,0.00000000,39.99072266); //object(wglasssmash) (10)
CreateDynamicObject(1649,550.05566406,-1293.79199219,27.93130875,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (11)
CreateDynamicObject(1649,554.44921875,-1293.82128906,27.93130875,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (12)
CreateDynamicObject(1649,558.83886719,-1293.80175781,27.93130875,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (13)
CreateDynamicObject(1649,563.25488281,-1293.80566406,27.93130875,0.00000000,0.00000000,359.99450684); //object(wglasssmash) (14)
CreateDynamicObject(1649,567.10797119,-1296.03479004,27.93130875,0.00000000,0.00000000,89.98901367); //object(wglasssmash) (15)
CreateDynamicObject(1649,567.09826660,-1300.54663086,27.93130875,0.00000000,0.00000000,89.98901367); //object(wglasssmash) (16)
CreateDynamicObject(1649,567.08666992,-1305.03320312,27.93130875,0.00000000,0.00000000,89.98901367); //object(wglasssmash) (17)
CreateDynamicObject(1649,567.11828613,-1309.49291992,27.93130875,0.00000000,0.00000000,89.98901367); //object(wglasssmash) (18)
CreateDynamicObject(1649,567.10742188,-1296.03417969,27.93130875,0.00000000,0.00000000,269.98901367); //object(wglasssmash) (19)
CreateDynamicObject(1649,567.09765625,-1300.54589844,27.93130875,0.00000000,0.00000000,269.98901367); //object(wglasssmash) (20)
CreateDynamicObject(1649,567.08593750,-1305.03320312,27.93130875,0.00000000,0.00000000,269.98901367); //object(wglasssmash) (21)
CreateDynamicObject(1649,567.03802490,-1309.46643066,27.93130875,0.00000000,0.00000000,269.98901367); //object(wglasssmash) (22)
CreateDynamicObject(970,567.11212158,-1311.70019531,26.69327927,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (84)
CreateDynamicObject(970,564.94110107,-1313.80773926,26.69327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (85)
CreateDynamicObject(970,560.70910645,-1313.78564453,26.69327927,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (86)
CreateDynamicObject(1491,561.13000488,-1311.67150879,26.24056625,0.00000000,0.00000000,0.00000000); //object(gen_doorint01) (2)
CreateDynamicObject(1649,564.78662109,-1311.72009277,27.93130875,0.00000000,0.00000000,359.98901367); //object(wglasssmash) (23)
CreateDynamicObject(1649,558.91894531,-1311.75439453,27.93130875,0.00000000,0.00000000,359.98352051); //object(wglasssmash) (24)
CreateDynamicObject(1649,554.42578125,-1311.72448730,27.93130875,0.00000000,0.00000000,359.98352051); //object(wglasssmash) (25)
CreateDynamicObject(1649,549.93737793,-1311.74462891,27.93130875,0.00000000,0.00000000,359.98352051); //object(wglasssmash) (26)
CreateDynamicObject(1649,545.42065430,-1311.74182129,27.93130875,0.00000000,0.00000000,359.98352051); //object(wglasssmash) (27)
CreateDynamicObject(1649,564.78613281,-1311.71972656,27.93130875,0.00000000,0.00000000,179.98352051); //object(wglasssmash) (31)
CreateDynamicObject(1649,558.91894531,-1311.75390625,27.93130875,0.00000000,0.00000000,179.98352051); //object(wglasssmash) (32)
CreateDynamicObject(1649,554.42578125,-1311.72363281,27.93130875,0.00000000,0.00000000,179.98352051); //object(wglasssmash) (33)
CreateDynamicObject(1649,549.93652344,-1311.74414062,27.93130875,0.00000000,0.00000000,179.98352051); //object(wglasssmash) (34)
CreateDynamicObject(1649,545.49481201,-1311.73645020,27.93130875,0.00000000,0.00000000,179.98352051); //object(wglasssmash) (35)
CreateDynamicObject(1649,543.25073242,-1309.47631836,27.93130875,0.00000000,0.00000000,91.98303223); //object(wglasssmash) (36)
CreateDynamicObject(1649,543.09381104,-1305.01525879,27.93130875,0.00000000,0.00000000,91.98303223); //object(wglasssmash) (37)
CreateDynamicObject(1649,543.25000000,-1309.47558594,27.93130875,0.00000000,0.00000000,271.97753906); //object(wglasssmash) (39)
CreateDynamicObject(1649,543.09375000,-1305.01464844,27.93130875,0.00000000,0.00000000,271.97753906); //object(wglasssmash) (40)
CreateDynamicObject(1649,542.95928955,-1300.57531738,27.93130875,0.00000000,0.00000000,271.97753906); //object(wglasssmash) (41)
CreateDynamicObject(1649,542.95898438,-1300.57519531,27.93130875,0.00000000,0.00000000,91.97753906); //object(wglasssmash) (42)
CreateDynamicObject(970,556.77508545,-1312.76599121,26.69327927,0.00000000,0.00000000,330.50000000); //object(fencesmallb) (87)
CreateDynamicObject(2885,551.99621582,-1300.51818848,29.77639771,270.05596924,359.62890625,179.18420410); //object(xref_garagedoor) (2)
CreateDynamicObject(2885,561.70489502,-1300.49938965,29.77639771,270.05493164,359.62646484,179.43151855); //object(xref_garagedoor) (3)
CreateDynamicObject(2885,561.68084717,-1307.20031738,29.77639771,270.05493164,359.62646484,179.42871094); //object(xref_garagedoor) (4)
CreateDynamicObject(2885,561.69702148,-1311.77050781,29.77639771,270.05493164,359.62646484,179.42871094); //object(xref_garagedoor) (5)
CreateDynamicObject(2885,551.03350830,-1311.73840332,29.77639771,270.05493164,359.62646484,179.42871094); //object(xref_garagedoor) (6)
CreateDynamicObject(2885,551.10906982,-1306.23156738,29.77639771,270.05493164,359.62646484,179.42871094); //object(xref_garagedoor) (7)
CreateDynamicObject(2885,548.63824463,-1306.06665039,29.77639771,270.05493164,359.62646484,181.42871094); //object(xref_garagedoor) (8)
CreateDynamicObject(2885,548.70690918,-1311.81945801,29.77639771,270.05493164,359.62646484,181.42822266); //object(xref_garagedoor) (9)
CreateDynamicObject(970,567.04010010,-1292.06542969,25.29327393,358.40283203,37.01678467,91.20394897); //object(fencesmallb) (88)
CreateDynamicObject(1703,547.27111816,-1300.94018555,26.24056625,0.00000000,0.00000000,87.50000000); //object(kb_couch02) (1)
CreateDynamicObject(1703,547.39880371,-1297.85852051,26.24056625,0.00000000,0.00000000,87.49511719); //object(kb_couch02) (2)
CreateDynamicObject(1703,549.13085938,-1294.41992188,26.24056625,0.00000000,0.00000000,358.49511719); //object(kb_couch02) (3)
CreateDynamicObject(1703,566.29187012,-1308.00646973,26.24056625,0.00000000,0.00000000,267.49511719); //object(kb_couch02) (4)
CreateDynamicObject(1703,566.41864014,-1304.38854980,26.24056625,0.00000000,0.00000000,267.49511719); //object(kb_couch02) (5)
CreateDynamicObject(2163,543.52148438,-1301.86340332,26.24056625,0.00000000,0.00000000,0.00000000); //object(med_office_unit_2) (1)
CreateDynamicObject(2164,545.29663086,-1301.86657715,26.24056625,0.00000000,0.00000000,0.00000000); //object(med_office_unit_5) (1)
CreateDynamicObject(2604,547.93035889,-1305.80700684,27.03744125,0.00000000,0.00000000,272.00000000); //object(cj_police_counter) (1)
CreateDynamicObject(2604,548.05450439,-1309.80957031,27.03744125,0.00000000,0.00000000,271.99951172); //object(cj_police_counter) (2)
CreateDynamicObject(2099,553.12188721,-1294.07360840,26.24056625,0.00000000,0.00000000,0.00000000); //object(med_hi_fi_1) (1)
CreateDynamicObject(2186,544.04296875,-1311.16796875,26.24056625,0.00000000,0.00000000,0.00000000); //object(photocopier_1) (1)
CreateDynamicObject(2186,543.80450439,-1308.32495117,26.24056625,0.00000000,0.00000000,0.00000000); //object(photocopier_1) (2)
CreateDynamicObject(1703,556.58203125,-1303.61120605,26.24056625,0.00000000,0.00000000,4.49511719); //object(kb_couch02) (6)
CreateDynamicObject(1703,558.54071045,-1302.07189941,26.24056625,0.00000000,0.00000000,184.49340820); //object(kb_couch02) (7)
CreateDynamicObject(631,559.54205322,-1303.31127930,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (1)
CreateDynamicObject(631,559.49475098,-1302.26818848,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (2)
CreateDynamicObject(631,555.68560791,-1303.49536133,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (3)
CreateDynamicObject(631,555.59777832,-1302.47351074,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (4)
CreateDynamicObject(631,566.17144775,-1310.94299316,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (5)
CreateDynamicObject(631,566.39404297,-1307.19067383,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (6)
CreateDynamicObject(631,566.52795410,-1303.53027344,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (7)
CreateDynamicObject(631,566.55712891,-1297.43457031,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (8)
CreateDynamicObject(631,566.50561523,-1298.39135742,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (9)
CreateDynamicObject(631,566.49780273,-1299.26879883,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (10)
CreateDynamicObject(631,557.77185059,-1294.46435547,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (11)
CreateDynamicObject(631,558.79620361,-1294.49768066,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (12)
CreateDynamicObject(631,559.73785400,-1294.49536133,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (13)
CreateDynamicObject(631,560.78808594,-1294.39624023,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (14)
CreateDynamicObject(631,561.73425293,-1294.41906738,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (15)
CreateDynamicObject(631,548.19366455,-1295.04528809,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (16)
CreateDynamicObject(1703,554.68127441,-1302.43298340,26.24056625,0.00000000,0.00000000,184.49340820); //object(kb_couch02) (8)
CreateDynamicObject(1703,552.71826172,-1303.90600586,26.24056625,0.00000000,0.00000000,4.49340820); //object(kb_couch02) (9)
CreateDynamicObject(631,551.92645264,-1302.63098145,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (17)
CreateDynamicObject(631,551.97070312,-1303.78051758,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (18)
CreateDynamicObject(1703,558.08911133,-1311.12365723,26.24056625,0.00000000,0.00000000,176.99340820); //object(kb_couch02) (10)
CreateDynamicObject(631,558.92822266,-1311.08203125,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (19)
CreateDynamicObject(631,555.23663330,-1311.02050781,27.26558304,0.00000000,0.00000000,0.00000000); //object(veg_palmkb9) (20)
/*=-=-=-=-=-=-=--=-=-=--=-=-=-=-=-= Conce Bikes & Karts =-=-=-=-=-=-=--=-=-=-==-=*/
CreateDynamicObject(2395, 1833.65369, -1395.65820, 12.47810,   -90.00000, 4.00000, 4.30769);
CreateDynamicObject(2395, 1833.67212, -1398.38672, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1833.67871, -1401.12158, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1833.67847, -1403.84900, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1833.69861, -1406.57458, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(1649, 1836.55603, -1395.71216, 14.46278,   0.00000, 0.00000, 90.16305);
CreateDynamicObject(9131, 1836.47339, -1400.52771, 12.53620,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.47339, -1400.52771, 14.80491,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.43628, -1398.30359, 12.53620,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.43616, -1398.29871, 14.80490,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.41028, -1396.80359, 12.53620,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.37720, -1394.55713, 12.53620,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.41614, -1399.31934, 15.35270,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(1491, 1836.63733, -1400.18274, 12.45682,   0.00000, 0.00000, 90.51920);
CreateDynamicObject(9131, 1836.48218, -1399.39417, 16.11270,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.45068, -1397.13464, 16.11270,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.43176, -1394.96057, 16.11270,   0.00000, 90.00000, 270.06439);
CreateDynamicObject(9131, 1836.40259, -1393.12390, 13.36828,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.40259, -1393.12390, 15.34380,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.49854, -1402.02222, 12.53620,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.53455, -1404.28577, 12.53620,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(1649, 1836.66943, -1403.10339, 14.46278,   0.00000, 0.00000, 90.67314);
CreateDynamicObject(9131, 1836.53442, -1405.68933, 12.53620,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.53552, -1405.68970, 14.80490,   0.00000, 0.00000, 271.62949);
CreateDynamicObject(9131, 1836.51025, -1401.57861, 16.11270,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.54834, -1403.84106, 16.11270,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(9131, 1836.58606, -1404.96057, 16.11270,   0.00000, 90.00000, 271.07254);
CreateDynamicObject(9131, 1836.42151, -1393.89282, 16.11270,   0.00000, 90.00000, 270.76950);
CreateDynamicObject(2395, 1829.98987, -1395.68872, 12.47810,   -90.00000, 4.00000, 4.30769);
CreateDynamicObject(2395, 1829.98767, -1398.41565, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1829.99451, -1401.15015, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1829.99817, -1403.86328, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1829.98181, -1406.59216, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(19376, 1831.81323, -1392.94141, 11.16542,   0.00000, 0.00000, 90.05922);
CreateDynamicObject(2395, 1827.53040, -1395.67871, 12.47810,   -90.00000, 4.00000, 4.30769);
CreateDynamicObject(2395, 1827.54272, -1398.39612, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1827.54883, -1401.13037, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1827.55750, -1403.83813, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2395, 1827.55725, -1406.57874, 12.47810,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(19376, 1827.08972, -1397.65930, 11.16542,   0.00000, 0.00000, 180.36748);
CreateDynamicObject(19376, 1827.10217, -1401.26208, 11.16542,   0.00000, 0.00000, 180.36748);
CreateDynamicObject(19376, 1831.88770, -1405.98694, 11.16542,   0.00000, 0.00000, 90.05922);
CreateDynamicObject(19376, 1831.68359, -1397.64111, 16.46980,   0.00000, 90.00000, 181.04623);
CreateDynamicObject(19376, 1831.74670, -1401.67175, 16.44980,   0.00000, 90.00000, 181.04620);
CreateDynamicObject(1649, 1836.64941, -1403.10339, 14.46280,   0.00000, 0.00000, 270.74860);
CreateDynamicObject(1649, 1836.47571, -1395.68274, 14.46280,   0.00000, 0.00000, 270.74860);
CreateDynamicObject(2202, 1827.69214, -1394.78162, 12.43129,   0.00000, 0.00000, 92.29099);
CreateDynamicObject(2255, 1835.53015, -1399.10962, 15.38208,   0.00000, 0.00000, 271.34485);
CreateDynamicObject(2395, 1833.52112, -1403.82483, 12.94010,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2773, 1833.46472, -1402.50122, 13.40291,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2395, 1833.53540, -1406.55859, 12.94010,   -90.00000, 4.00000, 4.30770);
CreateDynamicObject(2773, 1833.43884, -1404.79565, 13.40291,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2941, 1828.95569, -1398.29126, 13.79220,   0.00000, 0.00000, 28.31650);
CreateDynamicObject(19435, 1833.10474, -1402.84595, 12.08770,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(19435, 1833.09961, -1404.64673, 12.08770,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(1411, 1814.54419, -1406.66443, 14.03680,   0.00000, 0.00000, 179.78123);
CreateDynamicObject(1411, 1809.34131, -1406.66785, 14.03680,   0.00000, 0.00000, 179.78123);
CreateDynamicObject(19435, 1834.76038, -1401.14526, 12.08770,   90.00000, 0.00000, 269.80399);
CreateDynamicObject(19435, 1829.65137, -1394.75647, 12.60290,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(19435, 1829.65332, -1397.59180, 12.60290,   90.00000, 0.00000, 0.00000);
CreateDynamicObject(19435, 1828.94141, -1399.26172, 11.64980,   0.00000, 0.00000, 269.44940);
CreateDynamicObject(19435, 1828.97620, -1397.57080, 13.37404,   0.00000, -89.00000, 269.51013);
CreateDynamicObject(1723, 1831.34131, -1405.16626, 12.43041,   0.00000, 0.00000, 178.28526);
CreateDynamicObject(1360, 1827.88184, -1402.84363, 13.24208,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 1830.47876, -1398.40393, 12.83649,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 1830.47632, -1397.19324, 12.83649,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(2125, 1830.50745, -1396.03662, 12.83649,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1641, 1832.00574, -1394.65222, 12.43317,   0.00000, 0.00000, 0.82857);
CreateDynamicObject(10183, 1806.87292, -1402.72754, 12.41431,   0.00000, 0.00000, 225.61298);
CreateDynamicObject(1302, 1834.37378, -1393.37952, 12.37428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1836.72473, -1392.58508, 12.55490,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1827.70117, -1401.19690, 12.43195,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1832.61011, -1405.60144, 12.43241,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1821.98193, -1405.70813, 12.38704,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1215, 1808.43799, -1406.01624, 12.38062,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(638, 1835.65186, -1395.73328, 13.03432,   0.00000, 0.00000, 0.00000);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Concessionaria =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(983, 1654.70374, -1125.50793, 23.60000,   0.00000, 0.00000, 0.23138);
CreateDynamicObject(983, 1631.31494, -1115.88831, 23.60000,   0.00000, 0.00000, 89.08179);
CreateDynamicObject(983, 1626.21460, -1076.49438, 23.60000,   0.00000, 0.00000, 268.18387);
CreateDynamicObject(11317, 1675.70605, -1104.35156, 34.01063,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(6959, 1718.98364, -1113.23352, 23.11530,   0.00000, 89.74744, 177.99988);
CreateDynamicObject(3851, 1656.87036, -1126.24121, 25.20594,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1656.70447, -1113.10547, 25.20594,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1656.52124, -1082.41602, 25.20594,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1656.45276, -1082.32458, 30.78428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1656.45483, -1100.05762, 30.78428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1656.53992, -1113.23914, 30.78428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1656.66003, -1126.29578, 30.78428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1682.08911, -1126.34827, 30.78428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1681.85645, -1113.32898, 30.78428,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(982, 1663.34973, -1089.49646, 29.46481,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(982, 1663.36621, -1114.94482, 29.46783,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1663.40601, -1129.33594, 29.46783,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1675.62964, -1133.12781, 30.78428,   0.00000, 0.00000, 270.00000);
CreateDynamicObject(7191, 1118.41614, -1160.23694, 24.59531,   0.00000, 0.00000, 271.00000);
CreateDynamicObject(7191, 1122.83740, -1160.16418, 28.56008,   0.00000, 0.00000, 270.99976);
CreateDynamicObject(8231, 1506.07593, -1531.98621, 14.28004,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(3851, 1511.53369, -1523.45728, 13.30592,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(3077, 1511.69983, -1540.46973, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1963, 1512.65442, -1535.65222, 12.97972,   0.00000, 0.00000, 26.00000);
CreateDynamicObject(1806, 1513.72266, -1536.38354, 12.57691,   0.00000, 0.00000, 28.00000);
CreateDynamicObject(2169, 1513.69495, -1530.77441, 12.57691,   0.00000, 0.00000, 180.00000);
CreateDynamicObject(2169, 1513.72241, -1528.17078, 12.57691,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(2169, 1513.70642, -1525.77100, 12.57691,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(2169, 1510.07727, -1525.76013, 12.57691,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(2169, 1510.09290, -1528.15955, 12.57691,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(2169, 1510.01965, -1530.72876, 12.57691,   0.00000, 0.00000, 179.99451);
CreateDynamicObject(1720, 1513.14978, -1529.66382, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1720, 1513.19482, -1527.19238, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1720, 1513.19348, -1524.68835, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1720, 1509.57104, -1524.60107, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1720, 1509.58850, -1527.02539, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1720, 1509.51526, -1529.62207, 12.57691,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(1330, 1509.05933, -1539.39929, 13.05312,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1673.17566, -1132.78479, 29.41824,   0.00000, 0.00000, 92.11932);
CreateDynamicObject(983, 1679.56616, -1132.55591, 29.41824,   0.00000, 0.00000, 92.11932);
CreateDynamicObject(0, 1682.06213, -1128.81287, 29.36780,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1682.07153, -1128.75427, 29.36783,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1681.74829, -1115.76233, 29.36783,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(983, 1681.68884, -1109.35474, 29.36783,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 23.56506,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1656.06519, -1075.63208, 22.64275,   90.00000, 0.00000, 178.01332);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 24.78077,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 25.97451,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 27.21355,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 28.48180,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 29.82807,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 31.06102,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 32.28077,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1669.13904, -1074.95020, 33.67551,   0.00000, 0.00000, 90.03389);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 23.56506,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 24.87174,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 26.10215,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 27.25883,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 28.62909,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 29.91206,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 31.17378,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 32.54303,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1686.01062, -1074.93127, 33.81128,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(11319, 1694.30078, -1074.78003, 24.57322,   0.00000, 0.00000, 90.34197);
CreateDynamicObject(2165, 1673.66345, -1109.15430, 23.18807,   0.00000, 0.00000, 90.71056);
CreateDynamicObject(2165, 1677.67139, -1108.98315, 23.18807,   0.00000, 0.00000, 90.71056);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 23.51174,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 23.56506,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 23.56506,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 24.93018,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 26.17740,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 27.41341,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 28.63518,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 30.02440,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 31.21311,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 32.55275,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.70178, -1087.84534, 33.88569,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 24.83940,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 26.02035,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 27.35076,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 28.70200,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 30.09674,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 31.46803,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 32.77671,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1690.21790, -1074.94055, 33.81356,   0.00000, 0.00000, 90.12370);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 23.56506,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 24.80695,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 26.03121,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 27.33823,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 28.57809,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 29.83478,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 31.17363,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 32.42286,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1702.54651, -1094.60754, 33.78155,   0.00000, 0.00000, 358.21542);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 24.74635,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 26.06912,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 27.25168,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 28.50499,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 29.73454,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 30.97743,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1689.24097, -1107.51733, 32.18108,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1688.43408, -1107.50964, 33.34933,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1701.89197, -1094.74402, 34.42140,   0.00000, -91.00000, 358.10895);
CreateDynamicObject(9339, 1681.93127, -1120.50525, 23.56531,   0.00000, 0.00000, 359.77670);
CreateDynamicObject(9339, 1681.93127, -1120.50525, 24.83356,   0.00000, 0.00000, 359.77670);
CreateDynamicObject(9339, 1681.93127, -1120.50525, 26.21450,   0.00000, 0.00000, 359.77670);
CreateDynamicObject(9339, 1681.93127, -1120.50525, 27.46373,   0.00000, 0.00000, 359.77670);
CreateDynamicObject(9339, 1681.93127, -1120.50525, 28.06975,   0.00000, 0.00000, 359.77670);
CreateDynamicObject(9339, 1668.89307, -1133.89185, 23.63022,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1668.87219, -1133.88843, 24.96926,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1668.87842, -1133.89050, 26.22795,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1668.88733, -1133.89404, 27.50889,   0.00000, 0.00000, 269.37753);
CreateDynamicObject(9339, 1681.74646, -1133.48120, 15.96130,   -89.00000, -91.00000, 90.00000);
CreateDynamicObject(982, 1622.76416, -1095.63599, 23.60000,   0.00000, 0.00000, 359.34399);
CreateDynamicObject(983, 1622.97888, -1079.59094, 23.60000,   0.00000, 0.00000, 359.18683);
CreateDynamicObject(982, 1638.11035, -1076.89771, 23.60000,   0.00000, 0.00000, 87.99500);
CreateDynamicObject(984, 1622.60889, -1109.35156, 23.59799,   0.00000, 0.00000, 359.59598);
CreateDynamicObject(983, 1645.08020, -1115.97290, 23.60000,   0.00000, 0.00000, 91.02019);
CreateDynamicObject(968, 1634.74011, -1115.90063, 23.80050,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(966, 1634.80273, -1115.87463, 22.88920,   0.00000, 0.00000, 178.78250);
CreateDynamicObject(983, 1625.74902, -1115.79724, 23.60000,   0.00000, 0.00000, 89.08179);
CreateDynamicObject(983, 1654.72717, -1130.68872, 23.60000,   0.00000, 0.00000, 0.23138);
CreateDynamicObject(983, 1654.69775, -1119.12927, 23.60000,   0.00000, 0.00000, 0.23138);
CreateDynamicObject(970, 1656.69324, -1116.61108, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(983, 1651.48083, -1115.93018, 23.60000,   0.00000, 0.00000, 90.00000);
CreateDynamicObject(970, 1656.79749, -1133.93884, 23.51061,   0.00000, 0.00000, 358.27469);
CreateDynamicObject(970, 1656.68896, -1109.71155, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.51660, -1085.86255, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.68713, -1113.85339, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.48157, -1078.83887, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.91968, -1130.68652, 23.71362,   0.00000, 0.00000, 270.17639);
CreateDynamicObject(983, 1682.07593, -1122.42603, 29.36783,   0.00000, 0.00000, 0.00000);
CreateDynamicObject(9339, 1668.88452, -1133.84424, 28.31390,   0.00000, 0.00000, 269.67755);
CreateDynamicObject(9339, 1690.65527, -1107.53906, 33.85329,   0.00000, -2.00000, 269.00000);
CreateDynamicObject(9339, 1702.13062, -1088.12000, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(9339, 1700.53394, -1094.69507, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(9339, 1699.19653, -1094.63708, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(9339, 1698.71094, -1091.18274, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(9339, 1698.35303, -1088.02515, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(9339, 1699.70288, -1088.06311, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(9339, 1700.99304, -1088.07568, 34.40520,   0.00000, -91.00000, 358.10809);
CreateDynamicObject(970, 1656.55835, -1078.84705, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.48755, -1082.14392, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.55396, -1082.99683, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.53931, -1086.99890, 23.71362,   0.00000, 0.00000, 269.85168);
CreateDynamicObject(970, 1656.71106, -1109.66516, 23.71362,   0.00000, 0.00000, 270.48550);
CreateDynamicObject(970, 1656.72559, -1113.83203, 23.71362,   0.00000, 0.00000, 269.97229);
CreateDynamicObject(970, 1656.74133, -1117.88940, 23.71362,   0.00000, 0.00000, 270.17639);
CreateDynamicObject(970, 1656.89746, -1122.84644, 23.71362,   0.00000, 0.00000, 270.17639);
CreateDynamicObject(970, 1656.90039, -1126.98584, 23.71362,   0.00000, 0.00000, 270.17639);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Hotel =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(1216,2233.2944, -1165.6405, 25.6000,0.0000, 0.0000, 270.0000); //object(phonebooth1) (1)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Banco =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(994,1431.5999756,-1019.2999878,22.7999992,0.0000000,0.0000000,270.3307495); //object(lhouse_barrier2) (1)
CreateDynamicObject(994,1438.0000000,-1028.5999756,22.7999992,0.0000000,0.0000000,180.6602783); //object(lhouse_barrier2) (2)
CreateDynamicObject(994,1446.9000244,-1028.5999756,22.7999992,0.0000000,0.0000000,180.6591797); //object(lhouse_barrier2) (3)
CreateDynamicObject(994,1455.4000244,-1028.5999756,22.7999992,0.0000000,0.0000000,179.6590576); //object(lhouse_barrier2) (4)
CreateDynamicObject(994,1463.9000244,-1028.5000000,22.7999992,0.0000000,0.0000000,180.2071533); //object(lhouse_barrier2) (5)
CreateDynamicObject(994,1472.4000244,-1028.5000000,22.7999992,0.0000000,0.0000000,180.6591797); //object(lhouse_barrier2) (6)
CreateDynamicObject(994,1480.6999512,-1028.5000000,22.7999992,0.0000000,0.0000000,180.6591797); //object(lhouse_barrier2) (7)
CreateDynamicObject(994,1488.5000000,-1028.4000244,22.7999992,0.0000000,0.0000000,180.6591797); //object(lhouse_barrier2) (8)
CreateDynamicObject(994,1491.5000000,-1023.0000000,22.7999992,0.0000000,0.0000000,239.9957275); //object(lhouse_barrier2) (9)
CreateDynamicObject(994,1494.5999756,-1017.5999756,22.7999992,0.0000000,0.0000000,239.9908447); //object(lhouse_barrier2) (10)
CreateDynamicObject(8646,1446.3994141,-1009.6992188,26.7000008,0.0000000,0.0000000,89.6649170); //object(shbbyhswall02_lvs) (1)
CreateDynamicObject(8646,1446.3994141,-1009.6992188,27.6000004,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (2)
CreateDynamicObject(8646,1446.4000244,-1009.7000122,28.6000004,0.0000000,0.0000000,89.6649170); //object(shbbyhswall02_lvs) (3)
CreateDynamicObject(8646,1446.3994141,-1009.6992188,29.6000004,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (4)
CreateDynamicObject(8646,1475.7998047,-1009.8994141,26.7000008,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (5)
CreateDynamicObject(8646,1475.7998047,-1009.8994141,27.7000008,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (6)
CreateDynamicObject(8646,1475.8000488,-1009.9000244,28.7000008,0.0000000,0.0000000,89.6649170); //object(shbbyhswall02_lvs) (7)
CreateDynamicObject(8646,1475.7998047,-1009.8994141,29.6000004,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (8)
CreateDynamicObject(638,1433.2998047,-1022.0996094,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (1)
CreateDynamicObject(638,1436.0000000,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (2)
CreateDynamicObject(638,1438.6999512,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (3)
CreateDynamicObject(638,1441.3000488,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (4)
CreateDynamicObject(638,1444.0000000,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (5)
CreateDynamicObject(638,1446.6999512,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (6)
CreateDynamicObject(638,1449.4000244,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (7)
CreateDynamicObject(638,1449.8994141,-1022.0996094,23.6000004,0.0000000,0.0000000,270.3240967); //object(kb_planter_bush) (8)
CreateDynamicObject(638,1474.0999756,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (9)
CreateDynamicObject(638,1476.6999512,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (10)
CreateDynamicObject(638,1479.3000488,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (11)
CreateDynamicObject(638,1481.9000244,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (12)
CreateDynamicObject(638,1484.4000244,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (13)
CreateDynamicObject(638,1486.9000244,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (14)
CreateDynamicObject(638,1489.3000488,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (15)
CreateDynamicObject(638,1490.4000244,-1022.0999756,23.6000004,0.0000000,0.0000000,270.3295898); //object(kb_planter_bush) (16)
CreateDynamicObject(7091,1453.6992188,-1019.6992188,33.5999985,0.0000000,0.0000000,277.1411133); //object(vegasflag02) (1)
CreateDynamicObject(7091,1470.0999756,-1019.5000000,33.5999985,0.0000000,0.0000000,277.1411133); //object(vegasflag02) (2)
CreateDynamicObject(1649,1434.0000000,-1021.7000122,24.7999992,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (1)
CreateDynamicObject(1649,1438.4000244,-1021.7000122,24.7999992,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (2)
CreateDynamicObject(1649,1442.8000488,-1021.7000122,24.7999992,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (3)
CreateDynamicObject(1649,1447.1999512,-1021.7000122,24.7999992,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (4)
CreateDynamicObject(1649,1451.3000488,-1019.5999756,24.7999992,0.0000000,0.0000000,89.6693115); //object(wglasssmash) (5)
CreateDynamicObject(1649,1451.2998047,-1019.5000000,24.7999992,0.0000000,0.0000000,89.2220459); //object(wglasssmash) (6)
CreateDynamicObject(1649,1449.0000000,-1021.5999756,24.7999992,0.0000000,0.0000000,358.0914307); //object(wglasssmash) (7)
CreateDynamicObject(1649,1434.0000000,-1021.7000122,28.1000004,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (8)
CreateDynamicObject(1649,1434.0000000,-1021.7000122,31.3999996,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (9)
CreateDynamicObject(1649,1438.4000244,-1021.7000122,28.1000004,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (10)
CreateDynamicObject(1649,1438.4000244,-1021.7000122,31.3999996,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (11)
CreateDynamicObject(1649,1442.8000488,-1021.7000122,28.1000004,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (12)
CreateDynamicObject(1649,1442.8000488,-1021.7000122,31.3999996,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (13)
CreateDynamicObject(1649,1447.1999512,-1021.7000122,28.0000000,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (14)
CreateDynamicObject(1649,1447.1999512,-1021.7000122,31.2999992,0.0000000,0.0000000,0.0000000); //object(wglasssmash) (15)
CreateDynamicObject(1649,1449.0000000,-1021.5999756,28.0000000,0.0000000,0.0000000,358.0883789); //object(wglasssmash) (16)
CreateDynamicObject(1649,1449.0000000,-1021.5999756,31.2000008,0.0000000,0.0000000,358.0883789); //object(wglasssmash) (17)
CreateDynamicObject(1649,1451.3000488,-1019.5999756,28.0000000,0.0000000,0.0000000,89.6649170); //object(wglasssmash) (18)
CreateDynamicObject(1649,1451.3000488,-1019.5999756,31.2000008,0.0000000,0.0000000,89.6649170); //object(wglasssmash) (19)
CreateDynamicObject(8646,1482.5000000,-1009.7999878,26.7000008,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (5)
CreateDynamicObject(8646,1482.5000000,-1009.7999878,27.6000004,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (5)
CreateDynamicObject(8646,1482.5000000,-1009.7999878,28.6000004,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (5)
CreateDynamicObject(8646,1482.5000000,-1009.7999878,29.6000004,0.0000000,0.0000000,89.6594238); //object(shbbyhswall02_lvs) (5)
CreateDynamicObject(1649,1451.3000488,-1015.2000122,28.0000000,0.0000000,0.0000000,89.6649170); //object(wglasssmash) (20)
CreateDynamicObject(1649,1451.3000488,-1010.9000244,31.2999992,0.0000000,0.0000000,89.6649170); //object(wglasssmash) (22)
CreateDynamicObject(1649,1451.3000488,-1015.2000122,31.2999992,0.0000000,0.0000000,89.6649170); //object(wglasssmash) (23)
CreateDynamicObject(1649,1489.9000244,-1021.5000000,28.1000004,0.0000000,0.0000000,359.5404053); //object(wglasssmash) (26)
CreateDynamicObject(1649,1485.5999756,-1021.5000000,24.7999992,0.0000000,0.0000000,359.9924316); //object(wglasssmash) (27)
CreateDynamicObject(1649,1485.5999756,-1021.5000000,28.1000004,0.0000000,0.0000000,359.9924316); //object(wglasssmash) (28)
CreateDynamicObject(1649,1481.1999512,-1021.5000000,24.7999992,0.0000000,0.0000000,359.9924316); //object(wglasssmash) (29)
CreateDynamicObject(1649,1481.1999512,-1021.5000000,28.1000004,0.0000000,0.0000000,359.9890137); //object(wglasssmash) (30)
CreateDynamicObject(1649,1476.8000488,-1021.5000000,24.7999992,0.0000000,0.0000000,359.9890137); //object(wglasssmash) (31)
CreateDynamicObject(1649,1475.0000000,-1021.5000000,24.7999992,0.0000000,0.0000000,1.8931274); //object(wglasssmash) (32)
CreateDynamicObject(1649,1472.9000244,-1019.2999878,24.7999992,0.0000000,0.0000000,270.3162842); //object(wglasssmash) (33)
CreateDynamicObject(1649,1472.9000244,-1019.2999878,28.1000004,0.0000000,0.0000000,270.3131104); //object(wglasssmash) (34)
CreateDynamicObject(1649,1472.9000244,-1019.2999878,31.2999992,0.0000000,0.0000000,270.3131104); //object(wglasssmash) (35)
CreateDynamicObject(1649,1476.8000488,-1021.5000000,28.1000004,0.0000000,0.0000000,359.9890137); //object(wglasssmash) (36)
CreateDynamicObject(1649,1475.0000000,-1021.5000000,28.1000004,0.0000000,0.0000000,1.8896484); //object(wglasssmash) (37)
CreateDynamicObject(1649,1475.0000000,-1021.5000000,31.3999996,0.0000000,0.0000000,1.8896484); //object(wglasssmash) (38)
CreateDynamicObject(1649,1476.8000488,-1021.5000000,31.3999996,0.0000000,0.0000000,359.9890137); //object(wglasssmash) (39)
CreateDynamicObject(1649,1481.1999512,-1021.5000000,31.3999996,0.0000000,0.0000000,359.9890137); //object(wglasssmash) (40)
CreateDynamicObject(1649,1485.5999756,-1021.5000000,31.3999996,0.0000000,0.0000000,359.9890137); //object(wglasssmash) (41)
CreateDynamicObject(1649,1489.9000244,-1021.5000000,31.3999996,0.0000000,0.0000000,359.5385742); //object(wglasssmash) (42)
CreateDynamicObject(1649,1472.8000488,-1014.9000244,28.1000004,0.0000000,0.0000000,270.3131104); //object(wglasssmash) (43)
CreateDynamicObject(1649,1472.8000488,-1010.5000000,31.3999996,0.0000000,0.0000000,270.3131104); //object(wglasssmash) (45)
CreateDynamicObject(1649,1472.8000488,-1014.9000244,31.3999996,0.0000000,0.0000000,270.3131104); //object(wglasssmash) (46)
CreateDynamicObject(1649,1489.8994141,-1021.5000000,24.7999992,0.0000000,0.0000000,358.8574219); //object(wglasssmash) (47)
CreateDynamicObject(1649,1489.9000244,-1021.5000000,24.7999992,0.0000000,0.0000000,359.5385742); //object(wglasssmash) (53)
CreateDynamicObject(1649,1472.8000488,-1014.9000244,24.8999996,0.0000000,0.0000000,270.3131104); //object(wglasssmash) (55)
CreateDynamicObject(2946,1464.5000000,-1010.0999756,25.7999992,0.0000000,0.0000000,87.7652283); //object(cr_door_03) (1)
CreateDynamicObject(2946,1461.4000244,-1010.0000000,25.7999992,0.0000000,0.0000000,268.4256592); //object(cr_door_03) (2)
CreateDynamicObject(2946,1461.0000000,-1010.0000000,25.7999992,0.0000000,0.0000000,89.6683655); //object(cr_door_03) (3)
CreateDynamicObject(2946,1457.8000488,-1010.0000000,25.7999992,0.0000000,0.0000000,269.4438477); //object(cr_door_03) (4)
CreateDynamicObject(2942,1490.3000488,-1010.5999756,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (1)
CreateDynamicObject(2942,1487.5000000,-1010.5999756,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (2)
CreateDynamicObject(2942,1484.8000488,-1010.5999756,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (3)
CreateDynamicObject(2942,1433.3000488,-1010.2999878,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (4)
CreateDynamicObject(2942,1435.9000244,-1010.2999878,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (5)
CreateDynamicObject(2942,1438.6999512,-1010.2999878,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (6)
CreateDynamicObject(2942,1442.9000244,-1010.2999878,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (7)
CreateDynamicObject(1649,1434.5999756,-1009.2999878,27.2000008,0.0000000,0.0000000,87.7652283); //object(wglasssmash) (56)
CreateDynamicObject(1649,1434.5996094,-1009.2998047,27.2000008,0.0000000,0.0000000,266.5216064); //object(wglasssmash) (57)
CreateDynamicObject(1649,1437.3000488,-1009.2000122,27.2000008,0.0000000,0.0000000,87.7642822); //object(wglasssmash) (58)
CreateDynamicObject(1649,1437.2998047,-1009.1992188,27.2000008,0.0000000,0.0000000,266.9644775); //object(wglasssmash) (59)
CreateDynamicObject(1649,1441.0999756,-1009.0999756,27.2000008,0.0000000,0.0000000,87.7642822); //object(wglasssmash) (60)
CreateDynamicObject(1649,1441.0996094,-1009.0996094,27.2000008,0.0000000,0.0000000,267.4074707); //object(wglasssmash) (61)
CreateDynamicObject(1649,1445.6999512,-1009.0000000,27.2000008,0.0000000,0.0000000,87.7642822); //object(wglasssmash) (62)
CreateDynamicObject(1649,1445.5999756,-1009.0000000,27.2000008,0.0000000,0.0000000,269.8867188); //object(wglasssmash) (63)
CreateDynamicObject(1649,1451.3000488,-1015.2000122,24.7000008,0.0000000,0.0000000,89.6649170); //object(wglasssmash) (64)
CreateDynamicObject(1649,1489.0000000,-1009.2999878,27.2000008,0.0000000,0.0000000,269.8846436); //object(wglasssmash) (65)
CreateDynamicObject(2942,1481.5999756,-1010.5999756,26.5000000,0.0000000,0.0000000,0.0000000); //object(kmb_atm1) (8)
CreateDynamicObject(1649,1486.0999756,-1009.4000244,27.2000008,0.0000000,0.0000000,269.8846436); //object(wglasssmash) (66)
CreateDynamicObject(1649,1482.8000488,-1009.5000000,27.2000008,0.0000000,0.0000000,269.8846436); //object(wglasssmash) (67)
CreateDynamicObject(1649,1482.7998047,-1009.5000000,27.2000008,0.0000000,0.0000000,92.4500427); //object(wglasssmash) (68)
CreateDynamicObject(1649,1486.0996094,-1009.3994141,27.2000008,0.0000000,0.0000000,90.5459595); //object(wglasssmash) (69)
CreateDynamicObject(1649,1489.0999756,-1009.2000122,27.2000008,0.0000000,0.0000000,88.6418762); //object(wglasssmash) (70)
CreateDynamicObject(9131,1461.8000488,-1008.5999756,57.5999985,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (1)
CreateDynamicObject(9131,1461.8000488,-1007.9000244,57.5999985,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (2)
CreateDynamicObject(9131,1461.8000488,-1007.7999878,57.5999985,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (3)
CreateDynamicObject(9131,1461.8000488,-1007.7999878,58.2000008,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (4)
CreateDynamicObject(9131,1461.0999756,-1008.5999756,57.5999985,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (5)
CreateDynamicObject(9131,1461.0999756,-1007.7999878,57.5999985,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (6)
CreateDynamicObject(9131,1461.0999756,-1007.7999878,58.2000008,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (7)
CreateDynamicObject(9131,1460.4000244,-1007.7999878,57.5999985,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (8)
CreateDynamicObject(9131,1460.4000244,-1007.7999878,58.2000008,0.0000000,0.0000000,0.0000000); //object(shbbyhswall13_lvs) (9)
CreateDynamicObject(3029,1460.1999512,-1007.5000000,56.5000000,0.0000000,0.0000000,270.7736206); //object(cr1_door) (1)
CreateDynamicObject(3934,1456.0000000,-997.5999756,56.5999985,359.7740479,0.2260132,0.0008850); //object(helipad01) (1)
CreateDynamicObject(3934,1456.0999756,-984.0999756,56.5999985,359.7692871,0.2252197,0.0000000); //object(helipad01) (2)
CreateDynamicObject(3934,1440.5999756,-997.5999756,56.5999985,359.7692871,0.2252197,0.0000000); //object(helipad01) (4)
CreateDynamicObject(3934,1440.5999756,-983.5000000,56.5999985,359.7692871,0.2252197,0.0000000); //object(helipad01) (5)
CreateDynamicObject(1892,1458.0999756,-1010.2999878,25.7999992,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (1)
CreateDynamicObject(1892,1459.6999512,-1010.2999878,25.7999992,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (2)
CreateDynamicObject(1892,1461.6999512,-1010.4000244,25.7999992,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (3)
CreateDynamicObject(1892,1463.3000488,-1010.4000244,25.7999992,0.0000000,0.0000000,0.0000000); //object(security_gatsh) (4)
CreateDynamicObject(1616,1460.6999512,-1010.0999756,29.2999992,0.0000000,0.0000000,91.5733948); //object(nt_securecam1_01) (1)
CreateDynamicObject(1616,1461.6999512,-1009.9000244,29.3999996,0.0000000,0.0000000,158.9459229); //object(nt_securecam1_01) (2)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Pedagio =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(3881, 53.27963, -1532.02478, 6.08146,   0.00000, 0.00000, 81.33311);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Sorveteria =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(1341, 1497.4200, -1616.3429, 13.4359,   0.00000, 0.00000, 0.00000);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Favela Rocinha =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(16001,1219.53320312,-1923.62500000,30.54181480,0.00000000,0.00000000,20.00000000); //object(drvin_projhut) (1)
CreateDynamicObject(16001,1209.92883301,-1926.72644043,30.82611656,359.75027466,2.75003052,18.25711060); //object(drvin_projhut) (2)
CreateDynamicObject(16001,1200.18286133,-1928.49450684,32.42448425,0.00000000,10.00000000,6.74011230); //object(drvin_projhut) (3)
CreateDynamicObject(16001,1182.13708496,-1929.54541016,36.41925049,1.49948120,1.50051880,357.69375610); //object(drvin_projhut) (5)
CreateDynamicObject(16001,1171.75598145,-1929.68823242,38.24744415,0.00000000,9.75000000,355.97900391); //object(drvin_projhut) (6)
CreateDynamicObject(11426,1191.27050781,-1929.26843262,34.65733719,344.25000000,0.00000000,270.00000000); //object(des_adobe03) (1)
CreateDynamicObject(16096,1101.10742188,-1982.40942383,47.68972015,1.24371338,5.75137329,81.87475586); //object(des_a51guardbox04) (1)
CreateDynamicObject(4022,1099.46728516,-1996.56713867,50.10545349,4.22668457,353.98355103,249.69491577); //object(foodmart1_lan) (1)
CreateDynamicObject(4848,1086.92565918,-1968.10693359,48.15563202,0.00000000,6.50000000,80.00000000); //object(sanpedbeaut) (1)
CreateDynamicObject(16001,1176.95788574,-1942.97912598,36.17942429,358.25735474,354.74243164,184.31321716); //object(drvin_projhut) (11)
CreateDynamicObject(16001,1165.40161133,-1942.21887207,38.59129333,357.81051636,346.22973633,183.93652344); //object(drvin_projhut) (12)
CreateDynamicObject(16001,1154.73425293,-1942.34472656,40.47404099,358.01416016,352.23529053,184.20227051); //object(drvin_projhut) (13)
CreateDynamicObject(16001,1144.10485840,-1942.83642578,41.52130508,357.99700928,357.98876953,184.40267944); //object(drvin_projhut) (14)
CreateDynamicObject(5761,1124.79492188,-1927.15527344,44.42324066,356.00097656,1.75231934,102.61782837); //object(melblok06_lawn) (1)
CreateDynamicObject(5762,1154.44775391,-1921.73913574,44.09592819,359.75415039,10.50012207,4.29556274); //object(foodmartlawn) (1)
CreateDynamicObject(3170,1086.66149902,-1990.15332031,46.84378815,354.75000000,0.00000000,342.00000000); //object(trailer_large3_01) (1)
CreateDynamicObject(3241,1080.38989258,-1999.96105957,48.56871414,8.99966431,0.50622559,153.17071533); //object(conhoos2) (1)
CreateDynamicObject(3242,1090.14648438,-2011.16894531,50.71484375,0.00000000,354.00000000,239.00000000); //object(conhoos1) (1)
CreateDynamicObject(3246,1105.61120605,-1937.58312988,42.10570908,0.00000000,0.00000000,32.00000000); //object(des_westrn7_) (1)
CreateDynamicObject(3246,1098.80578613,-1942.60986328,41.74829865,0.00000000,0.00000000,54.74774170); //object(des_westrn7_) (2)
CreateDynamicObject(3246,1093.97998047,-1949.58581543,42.17332458,0.00000000,6.00000000,71.24487305); //object(des_westrn7_) (3)
CreateDynamicObject(3250,1072.84204102,-2008.97058105,49.24526215,0.00000000,2.00000000,69.25000000); //object(des_westrn9_) (1)
CreateDynamicObject(3601,1169.03125000,-1971.03417969,57.75323486,0.00000000,0.00000000,1.24145508); //object(hillhouse04_la) (3)
CreateDynamicObject(3601,1170.81506348,-1954.36315918,48.21073914,0.00000000,0.00000000,1.24694824); //object(hillhouse04_la) (6)
CreateDynamicObject(3601,1156.99047852,-1954.71374512,48.21149826,0.00000000,0.00000000,1.24694824); //object(hillhouse04_la) (7)
CreateDynamicObject(3601,1117.68615723,-1963.03173828,47.14292908,0.00000000,1.74707031,2.24597168); //object(hillhouse04_la) (10)
CreateDynamicObject(3608,1138.98046875,-1978.14672852,55.94068909,0.00000000,0.00000000,0.00000000); //object(hillhouse08_la) (1)
CreateDynamicObject(3626,1175.27807617,-1950.59985352,57.60883713,0.00000000,0.00000000,270.00000000); //object(dckwrkhut) (1)
CreateDynamicObject(11426,1101.86865234,-1975.26025391,44.83734894,4.50000000,0.00000000,172.00000000); //object(des_adobe03) (2)
CreateDynamicObject(11426,1103.09155273,-1967.44409180,44.24684143,3.24996948,359.74960327,171.51068115); //object(des_adobe03) (3)
CreateDynamicObject(11426,1104.92834473,-1959.85632324,43.44986725,6.49975586,0.50323486,163.93951416); //object(des_adobe03) (4)
CreateDynamicObject(11444,1104.36401367,-1977.05236816,47.74677658,0.00000000,4.25000000,75.50000000); //object(des_pueblo2) (1)
CreateDynamicObject(11444,1105.38085938,-1971.59667969,47.15681458,359.74731445,3.99902344,79.51354980); //object(des_pueblo2) (2)
CreateDynamicObject(11444,1106.45239258,-1966.83068848,46.91039658,0.00000000,3.75000000,79.49694824); //object(des_pueblo2) (3)
CreateDynamicObject(11444,1150.76733398,-1958.87023926,51.63976669,0.22268677,25.49368286,87.88970947); //object(des_pueblo2) (4)
CreateDynamicObject(11444,1184.04370117,-1944.19567871,35.27753448,0.00000000,7.25000000,352.00000000); //object(des_pueblo2) (5)
CreateDynamicObject(11444,1189.04089355,-1944.53820801,34.67115021,0.00000000,12.25000000,351.99707031); //object(des_pueblo2) (6)
CreateDynamicObject(11444,1227.38525391,-1935.35119629,29.55909920,0.00000000,3.00000000,18.74707031); //object(des_pueblo2) (7)
CreateDynamicObject(11444,1222.65356445,-1937.26806641,29.98751450,355.25000000,0.00000000,17.99707031); //object(des_pueblo2) (8)
CreateDynamicObject(11426,1215.70373535,-1937.76696777,30.80742645,4.24996948,0.25070190,106.23138428); //object(des_adobe03) (5)
CreateDynamicObject(11426,1207.37768555,-1940.20654297,31.32914543,8.24990845,359.74737549,102.28137207); //object(des_adobe03) (6)
CreateDynamicObject(11426,1199.55371094,-1941.82922363,32.79184723,10.99481201,1.78274536,101.65045166); //object(des_adobe03) (7)
CreateDynamicObject(3362,1148.28515625,-1952.57324219,48.15947723,30.74523926,0.28015137,185.09765625); //object(des_ruin2_) (4)
CreateDynamicObject(5816,1129.72558594,-1963.13012695,56.61250305,0.75000000,359.74996948,356.75329590); //object(odrampbit) (1)
CreateDynamicObject(1337,1128.27148438,-1932.97070312,47.62124634,0.00000000,0.00000000,0.00000000); //object(binnt07_la) (1)
CreateDynamicObject(2985,1148.33288574,-1974.31628418,69.19131470,0.00000000,0.00000000,28.00000000); //object(minigun_base) (1)
CreateDynamicObject(2985,1177.28417969,-1946.72546387,59.18693542,0.00000000,0.00000000,27.99865723); //object(minigun_base) (2)
CreateDynamicObject(2985,1146.84082031,-1964.85388184,60.19647598,0.00000000,0.00000000,81.99865723); //object(minigun_base) (3)
CreateDynamicObject(2985,1134.44396973,-1964.96569824,60.19647598,0.00000000,0.00000000,81.99645996); //object(minigun_base) (4)
CreateDynamicObject(2985,1140.46508789,-1965.01586914,60.19647598,0.00000000,0.00000000,81.99645996); //object(minigun_base) (5)
CreateDynamicObject(2899,1155.65625000,-1952.50390625,56.01386261,0.00000000,0.00000000,0.00000000); //object(temp_stinger2) (1)
CreateDynamicObject(4641,1239.11389160,-1918.15197754,32.02412415,0.00000000,0.00000000,20.00000000); //object(paypark_lan04) (1)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Cativeiro =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(2930,2353.83374023,-655.09942627,129.69154358,0.00000000,0.00000000,0.00000000); //object(chinatgate) (1)
CreateDynamicObject(2930,2356.56469727,-650.78027344,129.69154358,0.00000000,0.00000000,270.00000000); //object(chinatgate) (2)
CreateDynamicObject(3279,2335.14062500,-654.29956055,128.03875732,0.00000000,0.00000000,89.75000000); //object(a51_spottower) (1)
CreateDynamicObject(1689,1543.99800000,-1646.44900000,28.61300000,0.00000000,0.00000000,90.24100000); //
CreateDynamicObject(1689,1543.90600000,-1705.89800000,28.60600000,0.00000000,0.00000000,90.24100000); //
CreateDynamicObject(1234,1536.25800000,-1638.56300000,14.10700000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(1363,1535.51500000,-1638.29000000,13.38300000,0.00000000,0.00000000,0.00000000);
CreateDynamicObject(3061,1257.90002441,-809.90002441,84.30000305,0.00000000,0.00000000,0.00000000); //object(ad_flatdoor) (1)
CreateDynamicObject(2886,924.93914795,-1210.93774414,17.40651703,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(2886,921.93853760,-1211.12341309,17.38725090,0.00000000,0.00000000,270.00000000); //
CreateDynamicObject(2886,247.72758484,72.33472443,1003.92919922,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(2886,250.40625000,64.48971558,1003.90820312,0.00000000,0.00000000,270.00000000); //
CreateDynamicObject(2886,250.90625000,64.57377625,1003.92028809,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(2886,244.89843750,73.80095673,1003.94177246,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(2886,248.41078186,74.61183929,1003.93310547,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(2886,247.88383484,77.16934967,1003.94836426,0.00000000,0.00000000,270.00000000); //
CreateDynamicObject(3749,1547.55212402,-1627.36657715,18.24122620,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(980,659.65700000,-1227.17100000,17.18500000,0.00000000,0.00000000,-118.60200000); //
CreateDynamicObject(971,665.18500000,-1215.18300000,19.24000000,0.00000000,-0.85900000,54.14400000); //
CreateDynamicObject(969,-1433.06799300,291.63473500,-2.98364600,0.00000000,269.75920000,91.79620000); //exercito
CreateDynamicObject(971,-1421.89575200,493.65304600,5.58397600,0.00000000,0.00000000,90.00000000); //exercito
CreateDynamicObject(971,-1421.88977100,502.44271900,5.58397600,0.00000000,0.00000000,90.00000000); //exercito
CreateDynamicObject(8209,-1657.58972168,309.62448120,6.68852663,0.00000000,0.00000000,9.92492676); //exercito
CreateDynamicObject(7657,-1516.18835449,481.56393433,12.89653015,0.00000000,0.00000000,178.64941406); //exercito
CreateDynamicObject(5822,-1311.83837891,484.17300415,12.08705711,0.00000000,0.00000000,92.85986328); //exercito escada151 objetos
CreateDynamicObject(1216,1535.08837900,-1637.50854500,13.23887700,0.00000000,0.00000000,78.75000000); //orelhao dp3 objetos
CreateDynamicObject(2942,1928.77148400,-1785.18701200,13.13976600,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(1271,1324.88684100,-635.91516100,108.48490100,0.00000000,0.00000000,17.18870000); //
CreateDynamicObject(1271,1325.54064900,-635.74383500,108.48490100,0.00000000,0.00000000,17.18870000); //
CreateDynamicObject(1271,1325.28625500,-635.80456500,109.17587300,0.00000000,0.00000000,17.18870000); //
CreateDynamicObject(2930, 1582.6254882813, -1638.0324707031, 15.007925987244, 0, 0, 91.309509277344);//36 objetos*/
CreateDynamicObject(1676, 1000.5368041992, -937.51239013672, 42.908992767334, 0, 0, 9.9249267578125);
CreateDynamicObject(1676, 1007.5074462891, -936.49285888672, 42.908992767334, 0, 0, 7.939208984375);//2 objetos
CreateDynamicObject(987, 1490.6391601563, -1824.5861816406, 12.546875, 0, 0, 268.69067382813);
CreateDynamicObject(987, 1539.6301, -1833.2045, 12.4876, -0.2400, 0.0000, 89.9074); // Prefeitura
CreateDynamicObject(971, 1499.8586425781, -1860.7644042969, 16.116792678833, 0, 0, 0);//4 objetos
CreateDynamicObject(14877,1688.62219238,-2079.71215820,14.61565590,0.00000000,0.00000000,0.00000000); //ESCADA HQ AZTECA
CreateDynamicObject(8572,674.68878174,-448.07546997,17.56110191,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(1216, 1124.8205566406, -1472.7642822266, 15.472403526306, 0, 0, 178.6494140625);
CreateDynamicObject(1216, 1804.5754394531, -1167.1788330078, 23.520128250122, 0, 0, 344.1201171875);
CreateDynamicObject(1216, 1363.7294921875, -1749.3428955078, 13.222763061523, 0, 0, 264.720703125);
CreateDynamicObject(2930, -1297.6999511719, 491.39999389648, 12.89999961853, 0, 0, 0);
CreateDynamicObject(8251, -2393.5866699219, -2206.2165527344, 36.216876983643, 0, 0, 30.6298828125);
CreateDynamicObject(987, -2376.7141113281, -2210.048828125, 32.44575881958, 0, 0, 80.404846191406);
CreateDynamicObject(987, -2377.7255859375, -2192.9619140625, 32.2890625, 0, 0, 162.41345214844);
CreateDynamicObject(987, -2376.8635253906, -2193.6000976563, 32.563995361328, 0, 0, 25.095886230469);
CreateDynamicObject(987, -2363.47265625, -2193.3618164063, 32.327827453613, 0, 0, 204.55285644531);
CreateDynamicObject(11292, 1920.9520263672, -1414.4202880859, 14.034344673157, 0, 0, 178.6494140625);//Telhadinho Drogas
CreateDynamicObject(1637, 1991.6693115234, -1184.0124511719, 19.441257476807, 0, 0, 342.13513183594);
CreateDynamicObject(1637, 1948.6083984375, -1214.7890625, 19.431552886963, 0, 0, 162.75695800781);
CreateDynamicObject(7927,366.49870000,189.72340000,1008.61030000,0.00000000,0.00000000,90.00000000); //
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Cofres roubos Ammu Nation, ZIP, Banco, Ect. =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(1829, 820.33020019531, 8.3643178939819, 1003.6611938477, 0, 0, 91.309509277344);
CreateDynamicObject(1829, 294.78848266602, -57.060501098633, 1000.9801635742, 0, 0, 0);
CreateDynamicObject(1550, 295.85116577148, -56.5666847229, 1000.908996582, 0, 0, 0);
CreateDynamicObject(2036, 314.02340698242, -167.28829956055, 999.70867919922, 0, 0, 0);
CreateDynamicObject(2035, 311.97988891602, -167.01052856445, 999.69909667969, 0, 0, 0);
CreateDynamicObject(1829, 304.01489257813, -169.71098327637, 999.05828857422, 0, 0, 180);
CreateDynamicObject(1550, 302.81533813477, -170.18684387207, 998.98712158203, 0, 0, 0);
CreateDynamicObject(1550, 303.3544921875, -170.03125, 998.98712158203, 0, 0, 0);
CreateDynamicObject(1550, 295.36669921875, -56.58052444458, 1000.908996582, 0, 0, 0);
CreateDynamicObject(640, 299.03555297852, -56.658596038818, 1001.2126464844, 0, 0, 90);
CreateDynamicObject(640, 292.94067382813, -70.411643981934, 1001.2126464844, 0, 0, 0);
CreateDynamicObject(1775, 293.07434082031, -74.597625732422, 1001.6126708984, 0, 0, 90);
CreateDynamicObject(1829, 211.35824584961, -95.523803710938, 1004.7223510742, 0, 0, 0);
CreateDynamicObject(1550, 212.02578735352, -94.979904174805, 1004.651184082, 0, 0, 322);
CreateDynamicObject(2957, -797.28912353516, 492.06140136719, 1367.8525390625, 0, 0, 90);
CreateDynamicObject(18553, -791.23748779297, 497.20590209961, 1367.6591796875, 90, 0, 90);
CreateDynamicObject(1829, 204.75688171387, -11.586506843567, 1004.6754760742, 0, 0, 90);
CreateDynamicObject(1550, 204.11708068848, -10.964441299438, 1004.604309082, 0, 0, 0);
CreateDynamicObject(1829, 162.76036071777, -79.767936706543, 1001.2692260742, 0, 0, 270);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Portao Burger Shot 2 =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(2957,681.56121826,-446.03887939,-24.98997688,0.00000000,90.00000000,0.00000000); //
CreateDynamicObject(2957,680.94635010,-449.14892578,-26.68190193,90.00000000,0.00000000,0.00000000); //
CreateDynamicObject(2957,680.94635010,-447.48925781,-26.68190193,90.00000000,0.00000000,0.00000000); //
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Cofre Banco =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(2930, 2148.7333984375, 1604.6456298828, 1007.8063354492, 0, 0, 272);
CreateDynamicObject(2904, 2147.7658691406, 1604.8271484375, 1006.2691650391, 0, 0, 0);
CreateDynamicObject(2904, 2148.14453125, 1604.7364501953, 1001.7691650391, 0, 0, 0);
CreateDynamicObject(2904, 2148.14453125, 1604.736328125, 1003.5191650391, 0, 0, 0);
CreateDynamicObject(1829, 2144.3503417969, 1642.2572021484, 993.04064941406, 0, 0, 0);
CreateDynamicObject(1829, 2177.8913574219, 1627.2242431641, 999.43316650391, 0, 0, 0);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Spawn Civil =-=-=-=-=-=-=-=--==--==--=-==*/
//CreateDynamicObject(2942, 1363.6999511719, -1745.4000244141, 13.199999809265, 0, 0, 270);
//CreateDynamicObject(2942, 1495.3994140625, -1749.8994140625, 15.10000038147, 0, 0, 179.99450683594);
CreateDynamicObject(970,1702.58300781,-1351.87414551,17.30929375,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (1)
CreateDynamicObject(970,1704.65466309,-1332.64660645,17.36398125,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (2)
CreateDynamicObject(970,1702.55212402,-1334.71545410,17.36398125,0.00000000,0.00000000,0.00000000); //object(fencesmallb) (3)
CreateDynamicObject(970,1704.67285156,-1353.94824219,17.29483604,0.00000000,0.00000000,90.00000000); //object(fencesmallb) (4)
CreateDynamicObject(979,1710.01513672,-1338.62927246,13.22303295,0.00000000,0.00000000,270.00000000); //object(sub_roadleft) (1)
CreateDynamicObject(978,1710.04553223,-1347.66015625,13.22303295,0.00000000,0.00000000,270.00000000); //object(sub_roadright) (2)
CreateDynamicObject(1237,1709.16760254,-1351.99841309,12.54687500,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (1)
CreateDynamicObject(1237,1709.26049805,-1334.42651367,12.54687500,0.00000000,0.00000000,0.00000000); //object(strtbarrier01) (2)
CreateDynamicObject(2195,1689.97033691,-1349.34741211,17.04687500,0.00000000,0.00000000,270.00000000); //object(plant_pot_3) (1)
CreateDynamicObject(2195,1690.07385254,-1337.28479004,17.04238892,0.00000000,0.00000000,270.00000000); //object(plant_pot_3) (2)
CreateDynamicObject(1361,1684.51220703,-1347.43176270,17.17516899,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (1)
CreateDynamicObject(1361,1684.50000000,-1339.27734375,17.18516350,0.00000000,0.00000000,0.00000000); //object(cj_bush_prop2) (2)
CreateDynamicObject(1231,1703.91479492,-1334.07373047,19.27013206,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (1)
CreateDynamicObject(1231,1703.84179688,-1352.77050781,19.20985794,0.00000000,0.00000000,0.00000000); //object(streetlamp2) (2)
CreateDynamicObject(1257,1721.44616699,-1312.89978027,13.82606697,0.00000000,0.00000000,0.00000000); //object(bustopm) (1)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- HQ Taxistas =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(980,1041.181,-1460.063,15.419,0.0,0.0,-92.742);
CreateDynamicObject(987,953.222,-1473.284,12.536,0.0,0.0,-0.859);
CreateDynamicObject(983,949.976,-1473.470,16.832,0.0,0.0,-90.241);
CreateDynamicObject(983,950.004,-1473.339,18.154,0.0,0.0,-90.241);
CreateDynamicObject(987,952.874,-1415.724,12.635,0.0,0.0,-89.381);
CreateDynamicObject(983,952.715,-1430.705,16.519,0.0,0.0,-2.578);
CreateDynamicObject(983,952.724,-1430.727,17.820,0.0,0.0,-1.719);
CreateDynamicObject(978,948.092,-1427.209,16.919,0.0,0.0,0.0);
CreateDynamicObject(964,90.09999847,1157.90002441,17.70000076,0.00000000,0.00000000,90.00000000); //object(cj_metal_crate) (1)
CreateDynamicObject(964,90.09999847,1159.19995117,17.70000076,0.00000000,0.00000000,87.99572754); //object(cj_metal_crate) (2)
CreateDynamicObject(964,-1703.90002441,1355.09997559,6.19999981,0.00000000,0.00000000,46.00000000); //object(cj_metal_crate) (3)
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Pacote Triads. =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(964, 1658.8597, -1792.9154, 12.555858612061, 0.00000000, 0.00000000, 0.00000000);
CreateDynamicObject(964, 1656.7108, -1791.6995, 12.555858612061, 0.00000000, 0.00000000, 0.00000000);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- HQ Reporter =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(1536,754.68400000,-1362.56100000,12.50600000,0.00000000,0.00000000,90.00000000); //
CreateDynamicObject(983,757.41900000,-1360.20600000,13.19900000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(983,754.64000000,-1360.06900000,13.18400000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(1215,754.69100000,-1356.67500000,13.06400000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(1215,757.40300000,-1356.81800000,13.08000000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(1215,757.37000000,-1363.54400000,13.08000000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(1291,773.09400000,-1386.00700000,13.20100000,0.00000000,0.00000000,0.00000000); //
CreateDynamicObject(11472,738.68500000,-1360.54800000,21.54300000,0.00000000,0.00000000,-90.00000000); //
CreateDynamicObject(1216,784.57600000,-1329.88000000,13.23900000,0.00000000,0.00000000,180.00000000); //
CreateDynamicObject(7927,366.49870000,189.72340000,1008.61030000,0.00000000,0.00000000,90.00000000); //
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Porta BOPE =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(2946, 327.39999389648, -1511.8000488281, 35, 0, 0, 142);
CreateDynamicObject(2946, 327.39999389648, -1511.8000488281, 35, 0, 0, 320.99829101563);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Grades Celas, PM, PF =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(988,266.34863281,82.44824219,1000.08843994,0.00000000,0.00000000,89.32434082); //
CreateDynamicObject(988,266.34918213,86.14559174,1000.03906250,0.00000000,0.00000000,89.32434082); //
CreateDynamicObject(988,320.89068604,315.35446167,998.14843750,0.00000000,0.00000000,89.32449341); //
CreateDynamicObject(988,320.89068604,312.80841064,998.29431152,0.00000000,0.00000000,89.32434082); //
CreateDynamicObject(3109, 321.46438598633, 302.0078125, 999.40002441406, 0.00000000, 0.00000000, 268.69067382813);
/*=-=-=--=-=-=-=-=--=-=--=-=-=-=-=- Portoes HQ PM =-=-=-=-=-=-=-=--==--==--=-==*/
CreateDynamicObject(985,1543.59997559,-1617.69995117,11.39999962,0.00000000,0.00000000,0.00000000); //object(gate_autor) (1)
CreateDynamicObject(985,1539.69995117,-1613.80004883,11.39999962,0.00000000,0.00000000,90.00000000); //object(gate_autor) (2)
CreateDynamicObject(985,1539.69995117,-1606.40002441,11.39999962,0.00000000,0.00000000,90.00000000); //object(gate_autor) (3)
CreateDynamicObject(985,1543.69995117,-1602.50000000,11.39999962,0.00000000,0.00000000,180.00000000); //object(gate_autor) (4)
CreateDynamicObject(985,1551.50000000,-1602.50000000,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (5)
CreateDynamicObject(985,1559.30004883,-1602.40002441,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (6)
CreateDynamicObject(985,1567.09997559,-1602.50000000,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (7)
CreateDynamicObject(985,1574.90002441,-1602.50000000,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (8)
CreateDynamicObject(985,1582.69995117,-1602.50000000,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (9)
CreateDynamicObject(985,1590.69995117,-1602.40002441,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (10)
CreateDynamicObject(985,1598.59997559,-1602.40002441,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (11)
CreateDynamicObject(985,1604.09997559,-1602.40002441,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (12)
CreateDynamicObject(985,1607.90002441,-1606.50000000,11.39999962,0.00000000,0.00000000,89.99450684); //object(gate_autor) (13)
CreateDynamicObject(985,1608.00000000,-1614.40002441,11.39999962,0.00000000,0.00000000,89.99450684); //object(gate_autor) (14)
CreateDynamicObject(985,1608.00000000,-1622.19995117,11.39999962,0.00000000,0.00000000,89.99450684); //object(gate_autor) (15)
CreateDynamicObject(985,1608.00000000,-1630.00000000,11.39999962,0.00000000,0.00000000,89.99450684); //object(gate_autor) (16)
CreateDynamicObject(985,1608.00000000,-1634.00000000,11.39999962,0.00000000,0.00000000,89.99450684); //object(gate_autor) (17)
CreateDynamicObject(985,1604.09997559,-1638.00000000,11.39999962,0.00000000,0.00000000,179.99450684); //object(gate_autor) (18)
//|=============== POLICIA MILITAR =====================================================================================================
	AddStaticVehicleEx(596,1528.1450,-1683.9496,5.6140,270.1498,103,1,-1); // carro pm 1
	AddStaticVehicleEx(596,1538.7369,-1644.5382,5.6141,180.1423,103,1,-1); // carro pm 2
	AddStaticVehicleEx(528,1558.9006,-1693.3123,5.9415,178.8225,1,1,-1); // carro pm 3
	AddStaticVehicleEx(596,1583.5354,-1711.4492,5.6148,359.9980,103,1,-1); // carro pm 4
	AddStaticVehicleEx(599,1546.7996,-1667.9423,6.0823,89.8966,103,1,-1); // carro pm 5
	AddStaticVehicleEx(599,1603.0945,-1700.1824,6.0806,89.6221,103,1,-1); // carro pm 6
	AddStaticVehicleEx(427,1564.6661,-1710.9261,6.0222,359.5273,103,1,-1); // carro pm 7
	AddStaticVehicleEx(427,1585.2527,-1667.6151,6.0242,269.5962,103,1,-1); // carro pm 8
	AddStaticVehicleEx(528,1603.0577,-1684.0579,5.9346,90.1354,1,1,-1); // carro pm 9
	AddStaticVehicleEx(596,1604.5824,-1630.2122,13.2354,89.0858,103,1,-1); // carro pm 10
	AddStaticVehicleEx(596,1604.6581,-1619.0682,13.2364,88.2327,103,1,-1); // carro pm 11
	AddStaticVehicleEx(437,1601.8105,-1608.3923,13.6168,89.1554,103,1,-1); // carro pm 12
	AddStaticVehicleEx(523,1545.7140,-1709.9341,5.4589,359.5055,1,1,-1); // carro pm 13
	AddStaticVehicleEx(523,1540.9708,-1706.4495,5.4605,321.1239,1,1,-1); // carro pm 14
	AddStaticVehicleEx(523,1536.2023,-1699.5582,5.4611,305.3377,1,1,-1); // carro pm 15
	AddStaticVehicleEx(523,1563.9626,-1635.8737,13.1244,358.7776,1,1,-1); // carro pm 16
	AddStaticVehicleEx(523,1553.6471,-1635.6586,13.1271,1.6618,1,1,-1); // carro pm 17
	AddStaticVehicleEx(497,1562.3970,-1657.4563,28.5724,88.8303,1,46,-1); // heli pm 18
	AddStaticVehicleEx(497,1559.3757,-1642.7686,28.5794,89.0518,1,46,-1); // heli pm 19
 	AddStaticVehicleEx(596,1546.5264,-1654.9142,5.6115,89.7843,103,1,-1); // carro pm 20
	AddStaticVehicleEx(596,1546.5048,-1680.2897,5.6168,89.7568,103,1,-1); // carro pm 21
	AddStaticVehicleEx(596,1604.6068,-1624.5585,13.2365,89.8062,103,1,-1); // carro pm 22
	AddStaticVehicleEx(596,1574.5569,-1711.3885,5.6114,359.6248,103,1,-1); // carro PM 23
	AddStaticVehicleEx(596,1546.6381,-1697.8854,13.2692,90.6866,103,1,-1);// Carro PM 24
//====================== BOPE ================================================================================
	AddStaticVehicleEx(597,1238.4108,-1669.5679,5.8306,90.3313,0,0,-1); // bope 1 - 25
	AddStaticVehicleEx(599,1259.5787,-1641.2167,6.1981,359.7493,0,0,-1); // bope 2 - 26
	AddStaticVehicleEx(597,1235.7668,-1697.1964,5.8095,0.5468,0,0,-1); // bope 3 - 27
	AddStaticVehicleEx(599,1250.9216,-1641.5134,6.2882,359.6044,0,0,-1); // bope 4 - 28
	AddStaticVehicleEx(490,1264.9115,-1697.7856,6.1594,2.1992,0,0,-1); // bope 5 - 29
	AddStaticVehicleEx(490,1274.4282,-1697.9473,6.1610,1.0064,0,0,-1); // bope 6 - 30
	AddStaticVehicleEx(427,1255.2715,-1697.0314,6.2127,0.7572,0,0,-1); // bope 7 - 31
	AddStaticVehicleEx(427,1245.7351,-1697.2594,6.2127,0.4766,0,0,-1); // bope 8 - 32
	AddStaticVehicleEx(597,1284.5651,-1633.4545,13.2420,273.4230,0,0,-1); // bope 9 - 33
	AddStaticVehicleEx(597,1284.8855,-1660.7839,13.3397,269.9905,0,0,-1); // bope 10 - 34
	AddStaticVehicleEx(523,1282.7101,-1661.4136,5.5784,93.6925,1,1,-1); // bope 11 - 35
	AddStaticVehicleEx(523,1284.7289,-1637.6106,13.0919,267.5162,1,1,-1); // bope 12 - 36
	AddStaticVehicleEx(523,1284.8640,-1656.3203,13.1192,273.2096,1,1,-1); // bope 13 - 37
	AddStaticVehicleEx(497,1238.2699,-1643.9823,44.7148,272.2018,0,0,-1); // bope 14 - 38
	AddStaticVehicleEx(497,1237.7224,-1676.4904,44.7170,269.7395,0,0,-1); // bope 15 -39
	AddStaticVehicleEx(597,1238.2612,-1660.7012,5.8555,89.8489,0,0,-1); // carro bope 16 - 40
	AddStaticVehicleEx(597,1238.1525,-1652.0837,5.8342,90.6716,0,0,-1); // carro bope 17 - 41
	AddStaticVehicleEx(522,1282.6968,-1659.1757,5.6234,93.5998,0,0,-1); // carro bope 18 - 42
	AddStaticVehicleEx(522,1283.0298,-1665.7523,5.6311,93.3193,0,0,-1); // carro bope 19 - 43
	AddStaticVehicleEx(522,1282.8912,-1663.8868,5.5965,91.0201,0,0,-1); // carro bope 20 - 44*
//==================== EXERCITO ===============================================================================
	AddStaticVehicleEx(432,-1227.8358,452.9356,7.2006,89.2371,1,1,-1); // carro exercito 1 - 45
	AddStaticVehicleEx(432,-1227.6935,468.0202,7.2005,88.6465,1,1,-1); // carro exercito 2 - 46
	AddStaticVehicleEx(596,-1334.0588,443.4516,6.8910,359.2509,86,113,-1); // carro exercito 3 - 47
	AddStaticVehicleEx(596,-1325.2241,443.1027,6.9061,359.7466,86,113,-1); // carro exercito 4 - 48
	AddStaticVehicleEx(470,-1316.0884,442.9895,7.1832,359.5066,86,113,-1); // carro exercito 5 - 49
	AddStaticVehicleEx(470,-1307.7202,442.9413,7.1828,0.4435,86,113,-1); // carro exercito 6 - 50
	AddStaticVehicleEx(433,-1295.2557,445.0778,7.6231,358.8351,1,1,-1); // carro exercito 7 - 51
	AddStaticVehicleEx(433,-1284.1067,445.2265,7.6228,357.9004,1,1,-1); // carro exercito 8 - 52
	AddStaticVehicleEx(427,-1273.9225,444.0561,7.3122,357.2698,86,113,-1); // carro exercito 9 - 53
	AddStaticVehicleEx(523,-1265.1178,443.5576,6.7418,358.8881,1,1,-1); // moto exercito 10 - 54
	AddStaticVehicleEx(523,-1259.2461,443.4483,6.7511,359.8180,1,1,-1); // moto exercito 11 - 55
	AddStaticVehicleEx(523,-1253.7181,443.5089,6.7519,1.1828,1,1,-1); // moto exercito 12 - 56
	AddStaticVehicleEx(520,-1427.8953,494.2342,18.9520,269.5899,1,1,-1); // jato exercito 13 - 57
	AddStaticVehicleEx(520,-1456.2798,508.0115,18.9878,269.0984,1,1,-1); // jato exercito 14 - 58
	AddStaticVehicleEx(548,-1458.1108,494.1015,20.2037,269.0548,86,86,-1); // heli carga exercito 15 - 59
	AddStaticVehicleEx(425,-1260.5425,495.3485,18.8045,89.6005,1,1,-1); // heli huerra exercito 16 - 60
	AddStaticVehicleEx(425,-1278.9393,495.4998,18.8066,89.7873,1,1,-1); //heli guerra exercito 17 - 61
	AddStaticVehicleEx(497,-1293.9374,495.0912,18.4509,0.3532,86,86,-1); //heli exercito 18 - 62
	AddStaticVehicleEx(430,-1281.2770,485.7846,-0.2118,267.9676,86,113,-1); // barco exercito 19 - 63
	AddStaticVehicleEx(430,-1452.4417,505.7320,-0.3274,89.2602,86,113,-1); // barco exercito 20 - 64
	AddStaticVehicleEx(430,-1485.9309,484.6871,-0.0394,91.3087,86,113,-1); // barco exercito 21 - 65
	AddStaticVehicleEx(596,-1345.1558,455.5187,6.9084,0.5128,86,113,-1); // carro exercito 22 - 66
	AddStaticVehicleEx(596,-1354.7914,455.1299,6.9092,359.9993,86,113,-1); // carro exercito 23 - 67
	AddStaticVehicleEx(596,-1363.7050,455.1025,6.9079,1.9180,86,113,-1); // carro exercito 24 - 68

//=================== SAMU ========================================================================================
	AddStaticVehicleEx(416,1179.3522,-1339.0890,13.9789,269.4357,1,1,-1); //Ambulance    [ 69 ]
	AddStaticVehicleEx(416,1178.3340,-1308.4022,13.9947,269.9916,1,1,-1); //Ambulance    [ 70 ]
	AddStaticVehicleEx(416,1184.4938,-1333.9568,13.7184,271.5624,1,1,-1); //Ambulance    [ 71 ]
	AddStaticVehicleEx(416,1184.5286,-1313.0077,13.6141,269.9820,1,1,-1); //Ambulance    [ 72 ]
	AddStaticVehicleEx(586,1182.1165,-1329.9861,13.1045,271.3401,1,1,-1); //Wayfarer    [ 73 ]
	AddStaticVehicleEx(586,1182.1830,-1331.5759,13.1035,270.7280,1,1,-1); //Wayfarer    [ 74 ]
	AddStaticVehicleEx(487,1161.0215,-1317.3961,31.7256,269.2996,1,3,-1); //Maverick    [ 75 ]


//================= AZTECAS ========================================================================================
	AddStaticVehicleEx(487,1699.1162,-2082.5488,17.7656,179.6861,103,103,-1); // aztecas 1 - 76
	AddStaticVehicleEx(566,1696.7897,-2095.5906,13.2291,179.6831,103,103,-1); // aztecas 2 - 77
	AddStaticVehicleEx(566,1700.4293,-2096.0417,13.3618,178.7404,103,103,-1); // aztecas 3 - 78
	AddStaticVehicleEx(567,1696.7385,-2117.5044,13.3411,270.1077,103,103,-1); // aztecas 4 - 79
	AddStaticVehicleEx(567,1690.3308,-2101.0779,13.5812,179.8232,103,103,-1); // aztecas 5 - 80
	AddStaticVehicleEx(468,1687.8314,-2099.5718,13.3867,181.2417,103,103,-1); // aztecas 6 - 81
	AddStaticVehicleEx(468,1684.3813,-2099.3721,13.3922,180.3136,103,103,-1); // aztecas 7 - 82
	AddStaticVehicleEx(567,1683.6796,-2117.3555,13.3092,269.2296,103,103,-1); // aztecas 8 - 83
	AddStaticVehicleEx(534,1662.6628,-2110.9648,13.3818,270.0653,103,103,-1); // aztecas 9 - 84
	AddStaticVehicleEx(482,1661.8640,-2115.6106,13.2712,270.9308,103,103,-1); // aztecas 10 - 85

//================= Taliban =========================================================================================
	AddStaticVehicleEx(602,1045.6569,-307.7800,73.8001,179.9682,94,94,-1); // carro 1 - 86
	AddStaticVehicleEx(562,1019.4441,-306.7590,73.6523,179.9775,94,94,-1); // carro 2 - 87
	AddStaticVehicleEx(561,1011.0193,-321.9078,73.8060,271.7794,94,94,-1); // carro 3 - 88
	AddStaticVehicleEx(560,1011.2922,-354.1458,73.6971,270.4571,94,94,-1); // carro 4 - 89
	AddStaticVehicleEx(533,1011.3182,-345.8668,73.7013,272.9995,94,94,-1); // carro 5 - 90
	AddStaticVehicleEx(559,1010.7554,-330.7342,73.6485,270.4005,94,94,-1); // carro 6 - 91
	AddStaticVehicleEx(521,1073.9406,-287.1685,73.5632,178.9838,94,94,-1); // carro 7 - 92
	AddStaticVehicleEx(521,1077.2178,-287.4267,73.5570,176.0852,94,94,-1); // carro 8 - 93
	AddStaticVehicleEx(521,1070.7513,-287.0531,73.5618,178.6351,94,94,-1); // carro 9 - 94
	AddStaticVehicleEx(521,1067.0688,-286.8979,73.5613,178.7430,94,94,-1); // carro 10 - 95
	AddStaticVehicleEx(432,1096.2000,-349.7411,73.9991,359.9948,94,94,-1); // carro 11 - 96
	AddStaticVehicleEx(432,1032.4320,-310.0155,74.0028,179.2535,94,94,-1); // carro 12 - 97
	AddStaticVehicleEx(520,1106.4044,-337.2657,74.7145,86.8404,94,94,-1); // carro 13 - 98
	AddStaticVehicleEx(520,1087.0541,-294.4808,74.7154,177.9423,94,94,-1); // carro 14 - 99
	AddStaticVehicleEx(425,1041.4822,-353.0217,74.5622,359.2623,94,94,-1); // carro 15 - 100
	AddStaticVehicleEx(425,1061.1993,-297.8523,74.5642,179.4342,94,94,-1); // carro 16 - 101
	AddStaticVehicleEx(487,1086.8827,-318.3174,74.1705,88.6167,94,94,-1); // carro 17 - 102
	AddStaticVehicleEx(602,1010.5461,-337.9481,73.6486,273.0331,94,94,-1); // carro 18 - 103

//================= PREFEITURA ======================================================================================
   	AddStaticVehicleEx(409,1532.1926,-1845.8784,13.3430,180.0010,0,0,-1); // limosine governo 1 - 104
	AddStaticVehicleEx(579,1535.7477,-1846.8677,13.2390,181.4477,0,0,-1); // sultan governo 2 - 105
	AddStaticVehicleEx(579,1528.0491,-1846.4027,13.2592,182.8282,0,0,-1); // sultan governo 3 - 106
	AddStaticVehicleEx(522,1520.3971,-1848.8979,13.1106,182.5410,0,0,-1); // moto governo 4 - 107
	AddStaticVehicleEx(522,1521.8660,-1848.7748,13.1123,178.7587,0,0,-1); // moto governo 5 - 108
	AddStaticVehicleEx(522,1523.3265,-1848.7078,13.1173,180.0277,0,0,-1); // moto governo 6 - 109
    AddStaticVehicleEx(487,1505.1627,-1840.7588,13.7243,88.2486,0,0,-1); // Heli Governo 7 - 110
	AddStaticVehicleEx(580,1526.6672,-1826.5502,13.3839,91.1082,0,0,-1); // Sultan Governo 8 - 111
	AddStaticVehicleEx(580,1533.7704,-1826.7501,13.3901,90.4799,0,0,-1); // Sultan Governo 9 - 112

//================ HITMANS ===========================================================================================
	AddStaticVehicleEx(560,994.0406,-1522.4337,13.2649,179.7135,13,13,-1); // carro hit 1 - 113
	AddStaticVehicleEx(561,988.5534,-1522.6683,13.3694,179.2218,13,13,-1); // carro hit 2 - 114
	AddStaticVehicleEx(562,982.1427,-1522.4034,13.2163,180.1812,13,13,-1); // carro hit 3 - 115
	AddStaticVehicleEx(533,976.0593,-1522.6068,13.2663,179.3753,13,13,-1); // carro hit 4 - 116
	AddStaticVehicleEx(602,964.5941,-1522.7526,13.3365,177.3036,13,13,-1); // carro hit 5 - 117
	AddStaticVehicleEx(521,994.6383,-1544.6744,13.1670,0.6047,13,13,-1); // carro hit 6 - 118
	AddStaticVehicleEx(521,990.5829,-1544.6696,13.1678,357.5030,13,13,-1); // carro hit 7 - 119
	AddStaticVehicleEx(521,986.0814,-1544.8763,13.1683,1.6472,13,13,-1); // carro hit 8 - 120
	AddStaticVehicleEx(521,981.5139,-1544.8911,13.1678,1.0989,13,13,-1); // carro hit 9 - 121
	AddStaticVehicleEx(521,977.9329,-1544.7877,13.1697,359.8087,13,13,-1); // carro hit 10 - 122
	AddStaticVehicleEx(487,1003.3517,-1512.9650,23.8880,359.5859,13,13,-1); // heli hitmans - 123

//=============== REPORTER ==================================================================================================
	AddStaticVehicleEx(582,739.8584,-1333.6587,13.5972,180.1957,13,13,-1); // reporte 1 - 124
	AddStaticVehicleEx(582,747.1868,-1333.6637,13.5940,180.6823,13,13,-1); // reporte 2 - 125
	AddStaticVehicleEx(582,754.7347,-1333.7186,13.5787,180.9125,13,13,-1); // reporte 3 - 126
	AddStaticVehicleEx(582,762.5927,-1333.9873,13.5941,178.1487,13,13,-1); // reporte 4 - 127
	AddStaticVehicleEx(582,783.3341,-1344.0449,13.5828,91.0566,13,13,-1); // reporte 6 - 128
	AddStaticVehicleEx(582,783.2918,-1351.6785,13.6087,89.4505,13,13,-1); // reporte 7 - 129
    AddStaticVehicleEx(582,764.1529,-1380.5381,13.7080,359.5219,13,13,-1); // reporte 8 - 130
    AddStaticVehicleEx(560,773.7608,-1381.4971,13.3785,0.5489,13,13,-1); // reporte 9 - 131
    AddStaticVehicleEx(560,781.6207,-1381.4340,13.3870,358.3725,13,13,-1); // creporte 10 - 132
    AddStaticVehicleEx(488,777.9664,-1369.7356,19.9012,358.1478,13,13,-1); // heli reporter 11 - 133
	AddStaticVehicleEx(488,743.0276,-1368.8562,25.8792,181.3057,13,13,-1); // heli reporter 12 - 134


//============== TAXISTA ===========================================================================================================
	AddStaticVehicleEx(438,981.9116,-1433.8053,13.5531,179.3187,6,6,-1); // taxi 1 - 135
	AddStaticVehicleEx(438,989.8789,-1433.5850,13.5592,184.3137,6,6,-1); // taxi 2 - 136
	AddStaticVehicleEx(420,997.8811,-1433.6967,13.3286,181.2386,6,6,-1); // taxi 3 - 137
	AddStaticVehicleEx(420,1015.6336,-1433.5183,13.3195,180.7739,6,6,-1); // taxi 4 - 138
	AddStaticVehicleEx(420,1022.6530,-1433.4480,13.3083,179.4612,6,6,-1); // taxi 5 - 139
	AddStaticVehicleEx(420,1029.0442,-1433.4532,13.3256,180.0785,6,6,-1); // taxi 6 - 140
	AddStaticVehicleEx(586,1019.9182,-1462.6682,13.0793,0.1319,6,6,-1); // taxi 7 - 141
	AddStaticVehicleEx(586,1016.4743,-1462.5500,13.0737,3.3525,6,6,-1); // taxi 8 - 142
	AddStaticVehicleEx(586,1012.8196,-1462.5608,13.0711,3.0619,6,6,-1); // taxi 9 - 143
	AddStaticVehicleEx(586,1010.4554,-1462.4133,13.0640,4.8563,6,6,-1); // taxi 10 - 144
	AddStaticVehicleEx(586,1007.3239,-1462.6339,13.0683,5.0972,6,6,-1); // taxi 11 - 145
	AddStaticVehicleEx(487,973.1631,-1465.5087,21.5196,356.6991,6,6,-1); // heli taxi 1 - 146
	AddStaticVehicleEx(487,985.3223,-1465.8511,21.4546,358.2152,6,6,-1); // heli taxi 2 - 147

//============= POLICIA FEDERAL ================================================================================================================
    AddStaticVehicleEx(596,622.7755,-611.1544,16.8120,270.5667,0,61,-1); // carro 1 - 148
    AddStaticVehicleEx(596,623.7188,-606.2141,16.7575,269.2250,0,61,-1); // carro 2 - 149
    AddStaticVehicleEx(596,613.7072,-591.5826,16.9534,271.0762,0,61,-1); // carro 3 - 150
    AddStaticVehicleEx(596,637.8110,-572.7484,15.9078,180.2999,0,61,-1); // carro 4 - 151
    AddStaticVehicleEx(597,667.9169,-546.4091,16.0578,270.2037,0,61,-1); // carro 5 - 152
    AddStaticVehicleEx(599,667.7962,-543.4321,16.0573,270.0014,0,61,-1); // carro 6 - 153
    AddStaticVehicleEx(482,610.4127,-609.1991,17.3477,179.3592,0,61,-1); // carro 7 - 154
    AddStaticVehicleEx(507,612.0129,-597.1997,17.0567,267.7983,0,61,-1); // carro 7 - 155
    AddStaticVehicleEx(507,615.4108,-608.9641,17.0525,357.0825,0,61,-1); // carro 8 - 156
    AddStaticVehicleEx(522,609.4019,-548.2192,16.4752,83.1676,0,61,-1); // moto 1 - 157
    AddStaticVehicleEx(522,604.2147,-546.5011,16.1096,278.0428,0,61,-1); // moto 2 - 158
    AddStaticVehicleEx(522,605.8050,-542.4009,16.1139,182.3792,0,61,-1); // moto 3 - 159
    AddStaticVehicleEx(522,609.2148,-542.5345,16.0849,175.5490,0,61,-1); // moto 4 - 160
    AddStaticVehicleEx(497,612.7761,-574.7137,26.3197,359.3869,0,61,-1); // heli pf 20 - 161
    AddStaticVehicleEx(497,621.2622,-575.1575,26.3193,358.8545,0,61,-1); // heli pf 21 - 162
   	AddStaticVehicleEx(522,604.2996,-547.8970,16.1235,268.2507,0,61,-1); // heli pf 22 - 163

//============ MAFIA COSA NOSTRA ====================================================================================================================================================
	AddStaticVehicleEx(560,259.5554,-1182.1217,79.9471,305.7489,124,124,-1); // carro 1 - 164
	AddStaticVehicleEx(560,268.9258,-1194.0287,80.1020,302.4061,124,124,-1); // carro 2 - 165
	AddStaticVehicleEx(559,278.1493,-1204.8749,80.3431,306.4157,124,124,-1); // carro 3 - 166
	AddStaticVehicleEx(579,295.3205,-1202.7567,80.5509,37.1596,124,124,-1); // carro 4 - 167
	AddStaticVehicleEx(480,251.9675,-1172.8113,79.5873,311.0607,124,124,-1); // carro 5 - 168
	AddStaticVehicleEx(609,283.7148,-1160.7074,80.6563,224.1292,124,124,-1); // carro 6 - 169
	AddStaticVehicleEx(609,287.8007,-1156.2727,80.6148,224.8073,124,124,-1); // carro 7 - 170
	AddStaticVehicleEx(522,306.4080,-1185.5070,80.4684,121.0544,124,124,-1); // moto 8 - 171
	AddStaticVehicleEx(522,308.1385,-1188.5916,80.4668,116.6862,124,124,-1); // moto 9 - 172
	AddStaticVehicleEx(522,309.7856,-1191.7526,80.4733,123.1474,124,124,-1); // moto 10 - 173
	AddStaticVehicleEx(487,324.6125,-1168.7344,81.1307,132.9998,124,124,-1); // heli 11 - 174

//============ MAFIA YAKUZA ============================================================================================================================================================
	AddStaticVehicleEx(609,686.7582,-1304.3781,13.2839,89.1099,179,179,-1); // carro Yakuza 1      [ 175 ]
	AddStaticVehicleEx(609,686.8018,-1300.0002,13.2569,90.7432,179,179,-1); // carro Yakuza 2     [ 176 ]
	AddStaticVehicleEx(579,686.4913,-1295.5823,13.3162,91.0317,179,179,-1); // carro Yakuza 3       [ 177 ]
	AddStaticVehicleEx(480,686.7732,-1290.7100,13.3501,89.3128,179,179,-1); // carro Yakuza 4       [ 178 ]
	AddStaticVehicleEx(559,686.2200,-1285.9563,13.3426,90.7709,179,179,-1); // carro Yakuza 5       [ 179 ]
	AddStaticVehicleEx(560,686.6278,-1281.2258,13.2807,90.7563,179,179,-1); // carro Yakuza 6      [ 180 ]
	AddStaticVehicleEx(562,685.8911,-1276.7478,13.3717,90.6977,179,179,-1); // carro Yakuza 7      [ 181 ]
	AddStaticVehicleEx(560,686.3205,-1270.9865,13.3532,88.2486,179,179,-1); // carro Yakuza 8      [ 182 ]
	AddStaticVehicleEx(522,687.5290,-1266.2338,13.1258,87.0329,179,179,-1); // moto yakuza 1         [ 183 ]
	AddStaticVehicleEx(522,687.2665,-1263.2662,13.1193,88.5126,179,179,-1); // moto yakuza 2       [ 184 ]
	AddStaticVehicleEx(487,706.2159,-1241.6147,13.8068,272.8419,179,179,-1); // heli yakuza         [ 185 ]

//=========== GROOVE STREET =======================================================================================================================================
	AddStaticVehicleEx(424,2517.4631,-1672.5947,13.8679,63.9360,86,86,-1); // carro groove 1	[ 186 ]
	AddStaticVehicleEx(566,2498.8423,-1683.0995,13.1675,98.6884,86,86,-1); // carro groove 2    [ 187 ]
	AddStaticVehicleEx(566,2508.3750,-1677.2435,13.2115,328.8571,86,86,-1); // carro groove 3    [ 188 ]
	AddStaticVehicleEx(567,2506.9568,-1663.5118,13.2760,26.0791,86,86,-1); // carro groove 4		[ 189]
	AddStaticVehicleEx(567,2471.1646,-1673.1014,13.2052,18.3936,86,86,-1); // carro groove 5    [ 190 ]
	AddStaticVehicleEx(468,2487.4153,-1685.8546,13.1794,27.4822,86,86,-1); // carro groove 6     [ 191 ]
	AddStaticVehicleEx(468,2489.4839,-1685.3478,13.1770,22.4606,86,86,-1); // carro groove 7 	    [ 192 ]
	AddStaticVehicleEx(567,2486.6494,-1655.2582,13.2035,90.0794,86,86,-1); // carro groove 8    [ 193 ]
	AddStaticVehicleEx(487,2528.1475,-1677.7980,20.1070,88.8134,86,86,-1); // heli groove       [ 194 ]
	AddStaticVehicleEx(534,2500.3098,-1655.2831,13.1487,72.7774,86,86,-1); // groove moto 1      [ 195 ]
	AddStaticVehicleEx(482,2473.4524,-1693.5681,13.6356,2.1607,86,86,-1); // groove moto 2      [ 196 ]

//=========== AL'QAEDA =======================================================================================================================================
	AddStaticVehicleEx(520,382.0672,2538.5024,17.2623,179.0163,102,102,-1); // hydra al´qaeda 1      [ 197 ]
	AddStaticVehicleEx(425,347.0407,2539.1038,17.5199,179.0246,102,102,-1); // hydra al´qaeda 2      [ 198 ]
	AddStaticVehicleEx(487,366.0395,2537.8293,16.8276,161.9232,102,102,-1); // heli al´qaeda       [ 199 ]
	AddStaticVehicleEx(432,424.8906,2516.1953,16.4970,89.8145,102,102,-1); // tanque al´qaeda 1     [ 200 ]
	AddStaticVehicleEx(432,424.3374,2504.1704,16.4971,88.5026,102,102,-1); // tanque al´qaeda 2     [ 201 ]
	AddStaticVehicleEx(520,413.2605,2452.6563,16.2054,357.5121,102,102,-1); // carro al´qaeda 1    [ 202 ]
	AddStaticVehicleEx(559,401.1563,2453.1179,16.2052,359.3275,102,102,-1); // carro al´qaeda 2    [ 203 ]
	AddStaticVehicleEx(533,413.4090,2437.3838,16.2049,1.4261,102,102,-1); // carro al´qaeda 5       [ 204 ]
	AddStaticVehicleEx(560,408.0492,2437.2141,16.2053,358.9307,102,102,-1); // carro al´qaeda 6     [ 205 ]
	AddStaticVehicleEx(579,400.6902,2437.0471,16.2054,1.0032,102,102,-1); // carro al´qaeda 7       [ 206 ]
	AddStaticVehicleEx(579,397.4241,2437.1575,16.2052,359.4397,102,102,-1); // carro al´qaeda 8     [ 207 ]
	AddStaticVehicleEx(522,392.1531,2436.7544,16.0708,359.2458,102,102,-1); // moto al´qaeda 1       [ 208 ]
	AddStaticVehicleEx(522,390.8281,2436.8748,16.0638,358.4109,102,102,-1); // moto al´qaeda 2      [ 209 ]
	AddStaticVehicleEx(520,325.2316,2540.8120,17.5310,176.7372,102,102,-1); // jato al qaeda - 210

//============ POLICIA CIVIL ==========================================================================================================================================================
    AddStaticVehicleEx(523,928.1951,-1186.9388,16.5421,93.9330,1,1,-1); // moto 1 - 211
    AddStaticVehicleEx(523,928.0604,-1184.2667,16.5343,96.7714,1,1,-1); // moto 2 - 212
    AddStaticVehicleEx(523,928.1413,-1181.7058,16.5397,95.2242,1,1,-1); // moto 3 - 213
    AddStaticVehicleEx(523,928.0582,-1179.2668,16.5393,94.1011,1,1,-1); // moto 4 - 214
    AddStaticVehicleEx(523,928.0452,-1176.8544,16.5341,93.3815,1,1,-1); // moto 5 - 215
    AddStaticVehicleEx(523,928.1005,-1174.4025,16.5388,91.4112,1,1,-1); // moto 6 - 216
    AddStaticVehicleEx(523,928.1434,-1172.0660,16.5387,89.0335,1,1,-1); // moto 7 - 217
    AddStaticVehicleEx(497,894.6740,-1282.0692,23.2492,1.6730,0,1,-1); // heli 1 origin - 218
    AddStaticVehicleEx(497,879.5734,-1280.9414,23.2721,1.7166,0,1,-1); // heli 2 origin - 219
    AddStaticVehicleEx(427,860.5519,-1302.8804,13.7738,359.9246,0,1,-1); // carro forte PC - 220
    AddStaticVehicleEx(427,850.9800,-1302.6079,13.7648,357.3034,0,1,-1); // carro forte PC - 221
    AddStaticVehicleEx(599,863.3590,-1255.9889,15.0334,272.5001,0,1,-1); // carrog PC - 222
    AddStaticVehicleEx(599,863.2979,-1245.3785,15.0488,270.5793,0,1,-1); // carrog PC - 223
    AddStaticVehicleEx(598,879.5444,-1270.7689,14.4838,357.4474,0,1,-1); // carrop PC - 224
    AddStaticVehicleEx(598,852.0914,-1197.8446,16.7235,180.5536,0,1,-1); // carrop PC - 225
    AddStaticVehicleEx(598,845.9860,-1197.6345,16.7251,181.5172,0,1,-1); // carrop PC - 226
    AddStaticVehicleEx(598,897.7189,-1205.3201,16.7057,178.9803,0,1,-1); // carrop PC - 227
    AddStaticVehicleEx(598,904.5452,-1205.3431,16.6893,177.7273,0,1,-1); // carrop PC - 228
    AddStaticVehicleEx(599,881.4277,-1198.4156,17.1789,178.0014,0,1,-1); // carrog PC - 229
    AddStaticVehicleEx(599,886.2183,-1198.3141,17.1778,179.5592,0,1,-1); // carrog PC - 230
    AddStaticVehicleEx(437,828.7781,-1208.3541,17.1099,267.9124,0,1,-1); // onibus PC - 231

//============ BALLAS ===================================================================================================================================================================================
	AddStaticVehicleEx(424,1087.0470,-1226.7360,15.5894,1.8768,147,147,-1); // carro ballas 1	[ 232 ]
	AddStaticVehicleEx(566,1094.7773,-1226.7167,15.6089,359.7791,147,147,-1); // carro ballas 2  [ 233 ]
	AddStaticVehicleEx(566,1099.2961,-1226.7606,15.5311,3.7478,147,147,-1); // carro ballas 3  [ 234 ]
	AddStaticVehicleEx(567,1104.6244,-1226.5577,15.4777,2.9383,147,147,-1); // carro ballas 4   [ 235 ]
	AddStaticVehicleEx(567,1109.9979,-1226.3903,15.4266,4.9545,147,147,-1); // carro ballas 5  [ 236 ]
	AddStaticVehicleEx(468,1110.5137,-1250.6727,15.3953,174.0996,147,147,-1); // carro ballas 6  [ 237 ]
	AddStaticVehicleEx(468,1109.1437,-1250.8435,15.4107,179.3676,147,147,-1); // carro ballas 7   [ 238 ]
	AddStaticVehicleEx(567,1103.3754,-1249.2910,15.6839,181.0157,147,147,-1); // carro ballas 8  [ 239 ]
	AddStaticVehicleEx(487,1129.0411,-1167.8796,32.1671,31.7420,147,147,-1); // heli ballas     [ 240 ]
	AddStaticVehicleEx(534,1089.3580,-1249.6661,15.4852,181.2573,147,147,-1); // moto ballas 1   [ 241 ]
	AddStaticVehicleEx(482,1096.6556,-1249.7533,15.6572,177.8184,147,147,-1); // Burrito   [ 282 ]

//============ LOS VAGOS ======================================================================================================================================================================================================
	AddStaticVehicleEx(424,2815.2373,-1179.0061,25.0517,180.5872,6,6,-1); // carro 1 Vagos   [ 243 ]
	AddStaticVehicleEx(566,2830.2166,-1196.7172,24.3299,6.1575,6,6,-1); // carro 2 Vagos   [ 244 ]
	AddStaticVehicleEx(566,2827.0225,-1196.6775,24.7475,3.7160,6,6,-1); // carro 3 Vagos	[ 245 ]
	AddStaticVehicleEx(567,2827.9844,-1169.7175,24.9368,275.6275,6,6,-1); // carro 4 Vagos   [ 246 ]
	AddStaticVehicleEx(567,2827.9863,-1164.9860,24.8984,273.9366,6,6,-1); // carro 5 Vagos   [ 247 ]
	AddStaticVehicleEx(468,2806.2368,-1183.0035,25.0839,268.8613,6,6,-1); // carro 6 Vagos     [ 248 ]
	AddStaticVehicleEx(468,2806.4138,-1184.2827,25.0877,265.3643,6,6,-1); // carro 7 Vagos     [ 249 ]
	AddStaticVehicleEx(567,2828.4563,-1173.7373,24.8942,274.2716,6,6,-1); // carro 8 Vagos     [ 250 ]
	AddStaticVehicleEx(487,2818.1929,-1168.6949,32.8456,267.1750,6,6,-1); // heli Vagos      [ 251 ]
	AddStaticVehicleEx(534,2818.6370,-1180.0420,24.9741,182.0355,6,6,-1); // moto Vagos 1      [ 252 ]
	AddStaticVehicleEx(482,2821.8257,-1179.7565,25.3500,183.2789,6,6,-1); // moto Vagos 2    [ 253 ]

//============ Comando Vermelho ======================================================================================================================================================================================================
	AddStaticVehicleEx(424,2158.5994,-1808.5166,13.1624,1.5140,3,3,-1); // carro CV 6     			[254]
	AddStaticVehicleEx(566,2166.5938,-1808.1510,13.1555,0.4833,3,3,-1); // carro CV 7   			[255]
	AddStaticVehicleEx(566,2170.3245,-1808.2133,13.1551,0.3010,3,3,-1); // carro CV 8   			[256]
	AddStaticVehicleEx(567,2161.6045,-1793.7959,13.2267,177.6644,3,3,-1); // heli CV      			[257]
	AddStaticVehicleEx(567,2157.5938,-1793.8611,13.2259,179.6278,3,3,-1); // moto CV 1     			[258]
	AddStaticVehicleEx(468,2171.4863,-1793.8191,13.0307,180.2740,3,3,-1); // moto CV 2     			[259]
	AddStaticVehicleEx(468,2170.0002,-1793.9656,13.1749,178.4637,3,3,-1); // carro CV 2   			[260]
	AddStaticVehicleEx(567,2162.7202,-1808.2142,13.2464,358.7927,3,3,-1); // carro CV 3   			[261]
	AddStaticVehicleEx(487,2160.8159,-1822.1444,19.0521,358.4818,3,3,-1); // carro CV 4   			[262]
	AddStaticVehicleEx(534,2165.2068,-1793.7007,13.0222,177.9311,3,3,-1); // carro CV 5   			[263]
	AddStaticVehicleEx(482,2173.9265,-1808.1708,13.1515,0.4743,3,3,-1); // carro CV 1     			[264]

//======= SONS OF ANARCHY ==============================================================================================================
	AddStaticVehicleEx(560,667.7987,-470.7717,16.0408,89.8071,43,43,-1); // carro Sons of Anarchy 1 - 265
	AddStaticVehicleEx(560,667.7885,-464.4575,16.0414,90.9416,43,43,-1); // carro Sons of Anarchy 2 - 266
	AddStaticVehicleEx(463,668.1661,-461.4704,15.8720,92.1609,43,43,-1); // moto Sons of Anarchy 3 - 267
	AddStaticVehicleEx(463,668.0513,-458.1648,15.8711,87.5097,43,43,-1); // moto Sons of Anarchy 4 - 268
	AddStaticVehicleEx(463,708.9815,-457.9415,15.8752,88.0381,43,43,-1); // moto Sons of Anarchy 5 - 269
	AddStaticVehicleEx(463,709.0881,-461.4273,15.8703,89.2743,43,43,-1); // moto Sons of Anarchy 6 - 270
	AddStaticVehicleEx(463,694.8484,-470.2283,15.8711,268.8323,43,43,-1); // moto Sons of Anarchy 7 - 271
	AddStaticVehicleEx(463,694.7347,-466.9656,15.8725,267.8549,43,43,-1); // moto Sons of Anarchy 8 - 272
	AddStaticVehicleEx(463,694.6725,-463.9618,15.8734,270.7029,43,43,-1); // moto Sons of Anarchy 9 - 273
	AddStaticVehicleEx(487,684.5762,-462.8774,22.7472,178.5638,43,43,-1);//heli Sons of Anarchy 10 - 274

//=============== DRIFTERS ====================================================================================================================
	AddStaticVehicleEx(560,2795.3367,-1558.4393,10.6274,269.9215,155,155,-1); // carro drift 1 - 275
	AddStaticVehicleEx(602,2795.7561,-1549.5697,10.7275,272.8098,155,155,-1); // carro drift 2 - 276
	AddStaticVehicleEx(562,2795.5571,-1566.7139,10.5712,270.0126,155,155,-1); // carro drift 3 - 277
	AddStaticVehicleEx(559,2795.4197,-1576.0251,10.5885,269.8851,155,155,-1); // carro drift 4 - 278
	AddStaticVehicleEx(480,2795.6819,-1584.2047,10.6964,269.5372,155,155,-1); // carro drift 5 - 279
	AddStaticVehicleEx(487,2779.4902,-1610.2698,11.0996,269.9724,155,155,-1); // heli drift - 280
	AddStaticVehicleEx(522,2802.9246,-1538.7069,10.4954,178.9779,155,155,-1); // moto drift - 281
	AddStaticVehicleEx(522,2811.5762,-1538.5083,10.4967,179.4510,155,155,-1); // moto drift - 282
	AddStaticVehicleEx(522,2820.8870,-1538.9305,10.4865,183.5324,155,155,-1); // moto drift - 283
	AddStaticVehicleEx(411,2823.0471,-1548.7252,10.6546,90.5089,155,155,-1); // carro dri - 284
	AddStaticVehicleEx(565,2823.4072,-1557.7672,10.5519,88.5366,155,155,-1); // carro drift - 285

//========== TRIADS =============================================================================================================================
	AddStaticVehicleEx(487,1652.0221,-1813.3892,13.7296,90.4814,65,65,-1); // heli triad - 286
	AddStaticVehicleEx(560,1634.2004,-1787.3937,13.2319,166.5005,65,65,-1); // carro triad 1 - 287
	AddStaticVehicleEx(561,1627.3525,-1786.0004,13.3357,165.7822,65,65,-1); // carro triad 2 - 288
	AddStaticVehicleEx(562,1640.4779,-1788.7513,13.1923,155.3605,65,65,-1); // carro triad 3 - 289
	AddStaticVehicleEx(602,1602.5487,-1826.1909,13.2734,270.2336,65,65,-1); // carro triad 4 - 290
	AddStaticVehicleEx(533,1602.5336,-1822.2913,13.1550,268.6098,65,65,-1); // carro triad 5 - 291
	AddStaticVehicleEx(521,1614.0743,-1841.8051,13.0973,354.4619,65,65,-1); // carro triad 6 - 292
	AddStaticVehicleEx(521,1609.9187,-1841.6311,13.0827,356.4652,65,65,-1); // carro triad 7 - 293
	AddStaticVehicleEx(521,1606.0299,-1841.5975,13.0736,355.0215,65,65,-1); // carro triad 8 - 294
	AddStaticVehicleEx(521,1601.3790,-1838.0076,13.0634,263.6828,65,65,-1); // carro triad 9 - 295
	AddStaticVehicleEx(521,1601.4847,-1833.7760,13.0586,268.0029,65,65,-1); // carro triad 10 - 296
//============== FARC ==========================================================================================================================
    AddStaticVehicleEx(562,-289.5274,1778.0225,42.3742,88.9341,175,175,-1); // carro FARC 1 - 297
    AddStaticVehicleEx(561,-290.1640,1772.8121,42.5113,88.4176,175,175,-1); // carro FARC 2 - 298
    AddStaticVehicleEx(602,-290.2047,1767.3833,42.4963,88.8853,175,175,-1); // carro FARC 3 - 299
    AddStaticVehicleEx(559,-290.3007,1762.1194,42.3455,89.1261,175,175,-1); // carro FARC 4 - 300
    AddStaticVehicleEx(533,-290.6852,1756.8600,42.4009,89.3385,175,175,-1); // carro FARC 5 - 301
    AddStaticVehicleEx(560,-290.6864,1751.7465,42.3951,88.7772,175,175,-1); // carro FARC 6 - 302
    AddStaticVehicleEx(482,-290.9297,1746.5620,42.8093,89.8602,175,175,-1); // carro FARC 7 - 303
    AddStaticVehicleEx(521,-321.1886,1746.3535,42.4089,271.7326,175,175,-1);// moto FARC 8 - 304
    AddStaticVehicleEx(521,-321.2504,1750.2207,42.3562,269.2197,175,175,-1); // moto FARC 9 - 305
    AddStaticVehicleEx(521,-321.2595,1754.5017,42.2959,270.3740,175,175,-1); // moto FARC 10 - 306
    AddStaticVehicleEx(521,-321.2346,1758.5103,42.3114,268.2691,175,175,-1); // moto FARC 11 - 307
    AddStaticVehicleEx(520,-257.3022,1887.0851,43.0124,117.9646,175,175,-1); // jato FARC 12 - 308
    AddStaticVehicleEx(425,-343.5361,1889.5758,42.8711,236.9606,175,175,-1); // heli guerra FARC 13 - 309
    AddStaticVehicleEx(487,-357.2600,1831.8311,42.4654,271.2181,175,175,-1); // heli normal FARC 14 - 310
    AddStaticVehicleEx(432,-306.4431,1895.0936,42.3048,175.3947,175,175,-1); // tank origin FARC 15 - 311
    AddStaticVehicleEx(432,-295.5010,1831.1763,42.3051,49.7383,175,175,-1); // tank origin FARC 2 16 - 312
   	AddStaticVehicleEx(520,-277.3982,1855.7278,43.0123,67.1862,175,175,-1); // jato FARC - 313
   	
//============== DETRAN ==========================================================================================================================
	AddStaticVehicleEx(525,1626.0680,-1689.0957,13.2313,180.9026,1,6,-1);//guincho 1 - 314
    AddStaticVehicleEx(525,1625.8550,-1675.6069,13.2972,180.9896,1,6,-1);//guincho 2 - 315
    AddStaticVehicleEx(525,1635.4293,-1661.7815,13.4602,88.9472,1,6,-1);//guincho 3 - 316
    AddStaticVehicleEx(597,1678.9884,-1659.0566,13.2053,269.2163,1,6,-1);//Viatura 1 - 317
    AddStaticVehicleEx(597,1679.3158,-1653.1625,13.2860,271.6710,1,6,-1);//Viatura - 318
    AddStaticVehicleEx(486,1607.7948,-1640.8583,13.9398,268.6249,1,6,-1);//Dozer - 319
    AddStaticVehicleEx(525,1625.9299,-1704.6321,13.2487,180.7615,1,6,-1);//guincho 4 - 320
    AddStaticVehicleEx(525,1635.5314,-1667.1249,13.4466,90.9697,1,6,-1);//guincho 5 - 321
    AddStaticVehicleEx(443,1627.2748,-1636.8455,13.5913,179.6387,6,6,-1);//Packer - 322

//============ HOTEL ALUGUEL 1 ===================================================================================================================================

	AddStaticVehicleEx(462,2205.5359,-1172.5005,25.2474,90.0243,1,1,-1); // moto aluguel 1     [ 323 ]
	AddStaticVehicleEx(462,2205.7000,-1176.4989,25.2977,90.0246,1,1,-1); // moto aluguel 2     [ 324 ]
	AddStaticVehicleEx(462,2206.1006,-1160.6993,25.2661,89.9991,1,1,-1); // moto aluguel 3     [ 325 ]
	AddStaticVehicleEx(462,2205.9580,-1164.7999,25.2493,92.0941,1,1,-1); // moto aluguel 4     [ 326 ]
	AddStaticVehicleEx(462,2205.8665,-1157.1348,25.2496,96.5388,1,1,-1); // moto aluguel 5     [ 327 ]
	AddStaticVehicleEx(462,2205.3691,-1153.0884,25.2626,89.1001,1,1,-1); // moto aluguel 6      [ 328 ]
    AddStaticVehicleEx(462,2205.5811,-1169.3228,25.2478,86.5836,1,1,-1); // moto aluguel 7      [ 329 ]
	
//============ ALUGUEL CARROS DE LUXO ================================================================================================================================================
	AddStaticVehicleEx(560,1256.1997,-1834.2949,13.0954,359.4290,1,1,-1); // carro 9 329
	AddStaticVehicleEx(560,1245.4479,-1834.1761,13.0977,359.7620,1,1,-1); // carro 10 330
	AddStaticVehicleEx(560,1266.7213,-1795.9613,13.1155,183.4525,1,1,-1); // carro 11 331
	AddStaticVehicleEx(560,1238.6654,-1834.4077,13.0966,0.9224,1,1,-1); // carro 12 332
	AddStaticVehicleEx(496,1279.6348,-1795.6300,13.1051,178.7478,1,1,-1); // carro 1 333
	AddStaticVehicleEx(496,1272.2917,-1795.5787,13.1177,179.8864,1,1,-1); // carro 2 334
	AddStaticVehicleEx(463,1261.3296,-1794.6663,12.9613,176.8661,1,1,-1); // carro 3 335
	AddStaticVehicleEx(463,1257.1592,-1800.0624,12.9635,231.0863,1,1,-1); // carro 4 336
	AddStaticVehicleEx(463,1251.9308,-1804.9008,12.9629,212.5586,1,1,-1); // carro 5 337
	AddStaticVehicleEx(463,1245.3558,-1809.3663,12.9660,206.9054,1,1,-1); // carro 6 338
	AddStaticVehicleEx(522,1237.6434,-1820.4106,12.9893,269.3284,1,1,-1); // carro 7 339
	AddStaticVehicleEx(522,1237.4292,-1813.8463,13.0013,268.8037,1,1,-1); // carro 8 340

//============ ALUGUEL 2 ===================================================================================================================================
    AddStaticVehicleEx(560,2147.5115,-1138.4000,25.1936,268.9845,1,1,-1); // carro aluguel 2 341
    AddStaticVehicleEx(560,2147.1299,-1148.1990,24.1398,269.2062,1,1,-1); // carro aluguel 2 342
    AddStaticVehicleEx(475,2147.1736,-1157.7615,23.6487,270.6686,1,1,-1); // carro aluguel 2 343
    AddStaticVehicleEx(475,2147.1755,-1166.4158,23.6275,269.9509,1,1,-1); // carro aluguel 2 344
    AddStaticVehicleEx(562,2146.9727,-1175.2954,23.4852,269.5535,1,1,-1); // carro aluguel 2 345
    AddStaticVehicleEx(562,2146.6350,-1185.0817,23.4820,267.8826,1,1,-1); // carro aluguel 2 346
    AddStaticVehicleEx(602,2146.7935,-1194.1978,23.6256,268.3182,1,1,-1); // carro aluguel 2 347
    AddStaticVehicleEx(602,2147.3960,-1203.9788,23.6494,270.0750,1,1,-1); // carro aluguel 2 348
    AddStaticVehicleEx(463,2163.9712,-1193.2872,23.3504,93.9094,1,1,-1); // carro aluguel 2 349
    AddStaticVehicleEx(463,2163.3760,-1182.3425,23.3517,97.2411,1,1,-1); // carro aluguel 2 350
    AddStaticVehicleEx(522,2163.9734,-1173.3328,23.3920,90.0543,1,1,-1); // carro aluguel 2 351
    AddStaticVehicleEx(522,2164.0461,-1163.2013,23.3834,92.2884,1,1,-1); // carro aluguel 2 352
    AddStaticVehicleEx(468,2164.0942,-1152.8273,23.5813,87.2379,1,1,-1); // carro aluguel 2 353
    AddStaticVehicleEx(468,2164.0437,-1143.9905,24.4694,88.3190,1,1,-1); // carro aluguel 2 354
    AddStaticVehicleEx(487,2132.0981,-1163.1504,28.3634,269.6964,1,1,-1); // heli aluguel 1 355
    AddStaticVehicleEx(487,2132.9519,-1175.0924,28.3286,268.6573,1,1,-1); // heli aluguel 1 356
    AddStaticVehicleEx(487,2133.4006,-1185.9941,28.3306,270.0460,1,1,-1); // heli aluguel 1 357
    AddStaticVehicleEx(487,1990.0573,-2381.1252,13.7196,88.3929,1,1,-1); // heli aluguel 1 358
    AddStaticVehicleEx(487,1993.2463,-2315.1545,13.7237,90.1716,1,1,-1); // heli aluguel 1 359
    AddStaticVehicleEx(487,1992.0975,-2248.2676,13.7237,85.9347,1,1,-1); // heli aluguel 1 360


//======= ENTREGA DE PRODUTOS =====================================================================================================================================================
	AddStaticVehicleEx(456,1670.7562,-1476.2228,13.5562,88.9853,5,5,-1); // truck 1    [ 361 ]
	AddStaticVehicleEx(456,1680.2968,-1476.3918,13.5573,88.9854,86,86,-1); // truck 2    [ 362 ]
	AddStaticVehicleEx(440,1697.7805,-1476.0262,13.4957,90.0862,14,14,-1); // truck 3    [ 363 ]
	AddStaticVehicleEx(440,1691.4647,-1476.0363,13.5047,90.0953,2,2,-1); // truck 4    [ 364 ]

//======= BARCOS PRAIA ==================================================================================================================================================================================================================================================================================
	AddStaticVehicleEx(452,720.1,-1694.0,-0.4,179.4,3,3,-1); // Barco Praia 1 [365]
	AddStaticVehicleEx(452,721.2,-1629.4,-0.4,180.9,4,4,-1); // Barco Praia 2 [366]
	AddStaticVehicleEx(452,739.5,-1670.5,-0.6,177.5,6,6,-1); // Barco Praia 3 [367]  
	//AddStaticVehicleEx(452,727.3513,-1494.1150,-0.3369,184.5510,6,6,-1); // Barco Praia 4 [500] 
	
//====== GUINCHOS MECANICO ==============================================================================================================================================================================================
    AddStaticVehicleEx(525,1792.8553,-1701.7682,13.4052,3.1036,0,1,-1); // carro mec 1 - 368
    AddStaticVehicleEx(525,1786.9161,-1701.9518,13.3825,0.7661,0,1,-1); // carro mec 2 - 369
    AddStaticVehicleEx(525,1780.5665,-1702.0598,13.3783,3.7116,0,1,-1); // carro mec 3 - 370
    AddStaticVehicleEx(525,1774.2678,-1702.1740,13.3807,359.5516,0,1,-1); // carro mec 4 - 371
    AddStaticVehicleEx(437,1397.9675,-2332.7224,13.6800,0.3561,3,3,-1); // carro mec 5 - 372 BUSAO

//===== ONIBUS ==============================================================================================================================================================================================
    AddStaticVehicleEx(437,1411.2141,-2332.9297,13.6802,359.6307,3,3,-1); // onibus 1 - 373 
	AddStaticVehicleEx(437,1404.3752,-2332.6462,13.6802,359.0913,3,3,-1); // onibus 2 - 374
	AddStaticVehicleEx(437,1411.2321,-2362.3940,13.6802,359.1358,3,3,-1); // onibus 3 - 375
	AddStaticVehicleEx(437,1404.6716,-2362.4756,13.6796,358.9854,3,3,-1); // onibus 4 - 376
	AddStaticVehicleEx(437,1398.1703,-2362.5554,13.6826,359.1479,3,3,-1); // onibus 5 - 377
	AddStaticVehicleEx(437,1391.4984,-2362.7532,13.6826,0.1325,3,3,-1); // onibus 6 - 378
	AddStaticVehicleEx(437,1367.7448,-2365.5542,13.6782,270.0238,3,3,-1); // onibus 7 - 379
	AddStaticVehicleEx(431,1275.19995117,-1806.19995117,13.60000038,268.75000000,-1,-1,-1); //Bus 380
	AddStaticVehicleEx(431,1275.09960938,-1812.19921875,13.60000038,268.74755859,-1,-1,-1); //Bus 381
	AddStaticVehicleEx(431,1274.90002441,-1818.19995117,13.60000038,269.50000000,-1,-1,-1); //Bus 382

//==== CAMINHÕES ================================================================================================================================================================================================================================================================================================
	AddStaticVehicleEx(514,-77.5039,-1108.1729,1.6683,161.8915,13,13,-1); // truck - 383
	AddStaticVehicleEx(514,-72.3507,-1109.7822,1.6670,161.7769,13,13,-1); // truck - 384
	AddStaticVehicleEx(514,-67.0126,-1111.7156,1.6688,160.4800,13,13,-1); // truck - 385
	AddStaticVehicleEx(435,-51.0638,-1135.2831,1.0781,68.3320,1,1,-1); // trailer - 386
	AddStaticVehicleEx(435,-53.6230,-1139.7546,1.0781,67.5604,1,1,-1); // trailer - 387
	AddStaticVehicleEx(435,-55.0517,-1144.3676,0.8018,68.1347,1,1,-1); // trailer - 388

//======= KARTS EMPRESA ==========================================================================================================================================================================
   	AddStaticVehicleEx(571,2286.2141,-2354.5000,12.8306,225.8705,0,0,-1); // kart  [389]
	AddStaticVehicleEx(571,2279.9412,-2348.4141,12.8312,225.8585,0,0,-1); // kart  [390]
	AddStaticVehicleEx(571,2291.7932,-2345.5356,12.8305,227.3060,0,0,-1); // kart  [391]
	AddStaticVehicleEx(571,2287.5615,-2341.6433,12.8306,226.5350,0,0,-1); // kart  [392]
	AddStaticVehicleEx(571,2299.6785,-2338.3186,12.8307,224.3563,0,0,-1); // kart  [393]
	AddStaticVehicleEx(571,2295.3887,-2334.9448,12.8307,227.9102,0,0,-1); // kart  [394]

//====== ALUGUEL DE MOTOS PERTO DE VINEWOOD ==================================================================================================================================

	AddStaticVehicleEx(581,1345.0170,-966.5233,31.9833,271.4976,1,1,-1); // aluguel moto 1 395
	AddStaticVehicleEx(581,1344.9006,-971.0036,31.1375,270.7914,1,1,-1);  // aluguel moto 2 396
	AddStaticVehicleEx(581,1344.7660,-975.7329,30.2356,268.1441,1,1,-1);  // aluguel moto 3 397
	AddStaticVehicleEx(581,1344.8011,-993.2944,28.2302,267.1787,1,1,-1);  // aluguel moto 4 398
	AddStaticVehicleEx(581,1344.7861,-997.7969,27.7446,269.1269,1,1,-1);  // aluguel moto 5 399
	AddStaticVehicleEx(581,1344.7242,-1002.2695,27.2690,267.6590,1,1,-1);  // aluguel moto 6 400
	//AddStaticVehicleEx(581,1344.6915,-1007.2426,26.7988,264.5697,1,1,-1);  // aluguel moto 7 401 Moto Bugado
	
//=== KARTS ================================================================================================================================================================================================================================================================
    AddStaticVehicleEx(571,-2399.2908,2217.5532,4.2681,89.0774,0,0,-1); // Kart 1 [402]
    AddStaticVehicleEx(571,-2396.9446,2212.2827,4.2581,86.7409,0,0,-1); // Kart 2 [403]
    AddStaticVehicleEx(571,-2396.8755,2214.6748,4.2681,86.6157,0,0,-1); // Kart 3 [404]
    AddStaticVehicleEx(571,-2396.5591,2217.4709,4.2681,89.6912,0,0,-1); // Kart 4 [405]
    AddStaticVehicleEx(571,-2396.5164,2220.4089,4.2681,87.4044,0,0,-1); // Kart 5 [406]
    AddStaticVehicleEx(571,-2396.5603,2222.8530,4.2681,87.6175,0,0,-1); // Kart 6 [407]
    AddStaticVehicleEx(571,-2394.0044,2212.1846,4.2585,80.9706,0,0,-1); // Kart 7 [408]
    AddStaticVehicleEx(571,-2394.0522,2214.5332,4.2594,87.5285,0,0,-1); // Kart 8 [409]
    AddStaticVehicleEx(571,-2393.9614,2217.4075,4.2647,89.2130,0,0,-1); // Kart 9 [410]
    AddStaticVehicleEx(571,-2394.0012,2220.3369,4.2678,85.6381,0,0,-1); // Kart 10 [411]
    AddStaticVehicleEx(571,-2393.9475,2222.7415,4.2680,88.2800,0,0,-1); // Kart 11 [412]
    AddStaticVehicleEx(571,-2391.5093,2212.0376,4.2680,89.5913,0,0,-1); // Kart 12 [413]
    AddStaticVehicleEx(571,-2391.5479,2214.5176,4.2683,87.8447,0,0,-1); // Kart 13 [414]
    AddStaticVehicleEx(571,-2391.4744,2217.2944,4.2677,89.6341,0,0,-1); // Kart 14 [415]
    AddStaticVehicleEx(571,-2391.6343,2220.2671,4.2679,88.9740,0,0,-1); // Kart 15 [416]
    AddStaticVehicleEx(571,-2391.4390,2222.5723,4.2681,88.0324,0,0,-1); // Kart 16 [417]
    AddStaticVehicleEx(571,-2388.9988,2211.9412,4.2639,88.5946,0,0,-1); // Kart 17 [418]
    AddStaticVehicleEx(571,-2388.8965,2214.3682,4.2683,87.8631,0,0,-1); // Kart 18 [419]
    AddStaticVehicleEx(571,-2388.7190,2217.3032,4.2686,91.1743,0,0,-1); // Kart 19 [420]
    AddStaticVehicleEx(571,-2388.5789,2220.0945,4.2598,89.6935,0,0,-1); // Kart 20 [421]
    AddStaticVehicleEx(571,-2388.6926,2222.4407,4.2490,88.9956,0,0,-1); // Kart 21 [422]
    AddStaticVehicleEx(571,-2386.6101,2211.9229,4.2677,86.4061,0,0,-1); // Kart 22 [423]
    AddStaticVehicleEx(571,-2386.4924,2214.2690,4.2674,87.8273,0,0,-1); // Kart 23 [424]
    AddStaticVehicleEx(571,-2386.4670,2217.3892,4.2687,86.1322,0,0,-1); // Kart 24 [425]
    AddStaticVehicleEx(571,-2385.0139,2220.2937,4.2682,86.7189,0,0,-1); // Kart 25 [426]
    AddStaticVehicleEx(571,-2384.8301,2222.2886,4.2624,84.9987,0,0,-1); // Kart 26 [427]

//====== MOTOS TRILHA CHILIAD ================================================================================================================================================================================================================================================================================================================================
    AddStaticVehicleEx(468,-2396.6487,-2194.7942,32.9527,244.9457,14,14,-1); // rally1 [428]
    AddStaticVehicleEx(468,-2397.9363,-2196.0374,32.9525,251.1160,10,0,-1); // rally2 [429]
    AddStaticVehicleEx(468,-2399.1172,-2196.9358,32.9529,253.3459,8,8,-1); // rally3 [430]
    AddStaticVehicleEx(468,-2400.7209,-2198.4172,32.9483,263.7230,1,1,-1); // rally4 [431]
    AddStaticVehicleEx(468,-2396.6289,-2194.7290,32.9359,237.7247,14,14,-1); // rally1 [432]
    AddStaticVehicleEx(468,-2397.8621,-2195.9563,32.9209,240.0725,10,0,-1); // rally2 [433]
    AddStaticVehicleEx(468,-2399.1553,-2197.2615,32.9516,268.3748,8,8,-1); // rally3 [434]
    AddStaticVehicleEx(468,-2400.7368,-2198.5469,32.9272,258.2426,1,1,-1); // rally4 [435]
    AddStaticVehicleEx(468,-2401.6670,-2199.7456,32.9394,242.1490,11,11,-1); // rally5 [436]
    AddStaticVehicleEx(468,-2402.8044,-2200.7349,32.9736,258.3496,2,2,-1); // rally6 [437]
    AddStaticVehicleEx(468,-2403.2639,-2202.2148,32.9559,287.4485,20,20,-1); // rally7 [438]
    AddStaticVehicleEx(468,-2403.2646,-2203.6196,32.9454,278.7190,18,18,-1); // rally8 [439]
    AddStaticVehicleEx(468,-2403.2813,-2205.2979,32.9544,270.3040,19,19,-1); // rally9 [440]
    AddStaticVehicleEx(468,-2402.6687,-2206.1614,32.9588,293.0764,5,5,-1); // rally10 [441]
    AddStaticVehicleEx(468,-2402.5225,-2207.9175,32.9407,283.6688,9,9,-1); // rally11 [442]
    AddStaticVehicleEx(468,-2402.4133,-2209.6116,32.9523,284.1946,17,17,-1); // rally12 [443]
    AddStaticVehicleEx(468,-2401.7029,-2210.8396,32.9555,273.4699,6,6,-1); // rally13 [444]
    AddStaticVehicleEx(468,-2400.9187,-2212.2036,32.9469,293.0626,0,0,-1); // rally14 [445]
    AddStaticVehicleEx(468,-2400.0249,-2213.6221,32.9497,310.2712,3,3,-1); // rally15 [446]
    AddStaticVehicleEx(468,-2398.7419,-2215.3887,32.9686,325.4236,4,4,-1); // rally16 [447]
    AddStaticVehicleEx(468,-2397.2495,-2216.1824,32.9741,321.5857,16,16,-1); // rally17 [448]
    AddStaticVehicleEx(468,-2395.8289,-2216.4360,32.9561,345.0271,13,13,-1); // rally18 [449]
    AddStaticVehicleEx(468,-2393.3403,-2216.3254,32.9401,344.7386,7,7,-1); // rally19 [450]
    AddStaticVehicleEx(468,-2391.2278,-2216.4109,32.9444,332.2098,15,15,-1); // rally20 [451]
    AddStaticVehicleEx(468,-2389.5447,-2215.9106,32.9606,355.1463,21,21,-1); // rally21 [452]
    AddStaticVehicleEx(468,-2387.7131,-2216.2065,32.9582,3.4455,12,12,-1); // rally22 [453]

//====== Auto Escola ===============================================================================================================================
   new CarAutoEsc[6];
   CarAutoEsc[0] = AddStaticVehicleEx(540,1268.9913,-1549.4031,13.3927,180.0125,1,1,-1); //carro 1 454
   CarAutoEsc[1] = AddStaticVehicleEx(540,1268.8961,-1540.4027,13.4821,180.0077,1,1,-1); //carro 2 455
   CarAutoEsc[2] = AddStaticVehicleEx(540,1268.8710,-1558.2897,13.4216,179.3625,1,1,-1); //carro 3 456
   CarAutoEsc[3] = AddStaticVehicleEx(540,1226.9891,-1558.1958,13.3838,180.0092,1,1,-1); //carro 4 457
   CarAutoEsc[4] = AddStaticVehicleEx(540,1226.9686,-1549.2131,13.3881,180.0504,1,1,-1); //carro 5 458
   CarAutoEsc[5] = AddStaticVehicleEx(540,1226.8522,-1540.8237,13.3841,180.0662,1,1,-1); //carro 6 459
   for(new i = 0; i < 6; i++)
   {
           SetVehicleNumberPlate(CarAutoEsc[i], "AUTO-ESC");
   }

//====== ORG Advogados Carros ===============================================================================================================================
	AddStaticVehicleEx(550,1373.7345,-1074.7321,25.6126,345.9485,0,0,-1); // rc1 460
	AddStaticVehicleEx(550,1372.0199,-1081.5411,24.9911,345.9271,0,0,-1); // rc2 461
	AddStaticVehicleEx(579,1373.6306,-1100.9374,24.4092,89.9452,0,0,-1); // rc3 462
	AddStaticVehicleEx(579,1373.3954,-1115.5334,24.4094,89.9503,0,0,-1); // rc4 463
	AddStaticVehicleEx(579,1373.5006,-1127.9309,24.3175,89.5521,0,0,-1); // rc5 464

//============= CARROS EXTRAS PRA ORG OU ETC ============================================================================================================
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc6 465
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc7 466
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc8 467
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc9 468
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc10 469
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc11 470
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,-1,-1,-1); // rc12 471
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,113,113,-1); // carro est 472
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,6,6,-1); // carro 2 473
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,5,5,-1); // carro 3 474
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,1,1,-1); // carro 4 475
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,3,3,-1); // carro 5 476
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,3,3,-1); // carro 6 477
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,2,2,-1); // carro 7 478
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,1,1,-1); // carro 8 479
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,86,86,-1); // carro 9 480
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,12,12,-1); // carro 10 481
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,13,13,-1); // carro 12 482
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,13,13,-1); // carro 13 483
    AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,1,1,-1); // carro 14 484
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,3,3,-1); // carro aero 485
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,9,39,-1); // carro aero 486
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,5,5,-1); // carro aero 487
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,3,3,-1); // carro 1 488
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,7,7,-1); // carro 2 489
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,8,8,-1); // carro 3 490
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,3,3,-1); // carro 4 491
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,2,2,-1); // carro extra 492
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [493]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [494]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [495]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [496]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [497]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [498]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [499]
	AddStaticVehicleEx(510,7505.2256,-19994.4023,92.8942,273.7584,182,182,-1); // ao lado da zip [500]

    for(new h = carsonserver; h < sizeof(CarInfo); h++)
	{
	CarInfo[h][ownedvehicle] = AddStaticVehicleEx(CarInfo[h][cModel],CarInfo[h][cLocationx],CarInfo[h][cLocationy],CarInfo[h][cLocationz],CarInfo[h][cAngle],CarInfo[h][cColorOne],CarInfo[h][cColorTwo],-1);
	LoadComponents(h);
	SetVehicleToRespawn(h);
	CarInfo[h][cPosX] = CarInfo[h][cLocationx];
    CarInfo[h][cPosY] = CarInfo[h][cLocationy];
    CarInfo[h][cAngulo] = CarInfo[h][cAngle];
    CarInfo[h][cPosZ] = CarInfo[h][cLocationz];
    if(!(InBike(h)))
      {
      if (!(strcmp(CarInfo[h][cOwner], "Dealership", true) == 0))
	   {
	      CarInfo[h][cFreio] = 1;
	      SetTimerEx("CarroTimer", 650, true, "i", h);
	      }
	    }
	}
	for(new t=0; t<MAX_VEHICLES; t++)
	{
		SaveLastPosition(t);
	}

		Reloginho1 = TextDrawCreate(525.000000,4.000000,"--");
		Reloginho2 = TextDrawCreate(550.000000,23.000000,"--");
		TextDrawAlignment(Reloginho1,0);
		TextDrawAlignment(Reloginho2,0);
		TextDrawBackgroundColor(Reloginho1,0x000000FF);
		TextDrawBackgroundColor(Reloginho2,0x000000FF);
		TextDrawFont(Reloginho1,3);
		TextDrawLetterSize(Reloginho1,0.499999,2.155555);
		TextDrawFont(Reloginho2,3);
		TextDrawLetterSize(Reloginho2,0.499999,2.155555);
		TextDrawSetProportional(Reloginho1,1);
		TextDrawSetProportional(Reloginho2,1);
		TextDrawSetShadow(Reloginho1,1);
		TextDrawSetShadow(Reloginho2,1);
		TextDrawSetOutline(Reloginho1,1);
		TextDrawSetOutline(Reloginho2,1);
		TextDrawShowForAll(Reloginho1);
		TextDrawShowForAll(Reloginho2);

	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    //Entrada[i] = TextDrawCreate(137.000000,93.000000," ~h~~g~Portal ~h~~y~Brasil ~h~~b~Novo Mundo                                   ~h~~p~RPG 3.2");
	    //Entrada[i] = TextDrawCreate(1.000000,315.000000,"                                                      ~g~~h~~h~Brasil ~w~Novo ~b~~h~~h~Mundo");
         Entrada[i] = TextDrawCreate(137.000000,45.000000,"  ~g~~h~~h~Brasil ~w~Novo ~b~~h~~h~Mundo"); //~g~~h~~h~Brasil ~w~Novo ~b~~h~~h~Mundo
		TextDrawBoxColor(Entrada[i],0x00000066);
		//TextDrawTextSize(Entrada[i],700.000000,5.000000); //641
		TextDrawLetterSize(Entrada[i],1.000000,5.099996);
	//TextDrawAlignment(Entrada[i],0);
		TextDrawBackgroundColor(Entrada[i],0x000000FF);
		TextDrawFont(Entrada[i],3);
		TextDrawColor(Entrada[i],0xffffffff);
	//VELOCIMETRO
 		box[i] = TextDrawCreate(198.000000,395.000000,"_");
		TextDrawUseBox(box[i],1);
		TextDrawBoxColor(box[i],0x00000066);
		TextDrawTextSize(box[i],460.000000,0.000000);
		TextDrawAlignment(box[i],0);
		TextDrawBackgroundColor(box[i],0x00000033);
		TextDrawFont(box[i],3);
		TextDrawLetterSize(box[i],0.500000, 4.800000);
		//TextDrawLetterSize(box[i],1.000000,3.000000);
		TextDrawColor(box[i],0xffffffff);
		TextDrawSetOutline(box[i],1);
		TextDrawSetProportional(box[i],1);
		TextDrawSetShadow(box[i],1);

		fahrzeug[i] = TextDrawCreate(198.000000,396.000000," ");
		TextDrawAlignment(fahrzeug[i],0);
		TextDrawBackgroundColor(fahrzeug[i],0x000000ff);
		TextDrawFont(fahrzeug[i],1);
		TextDrawLetterSize(fahrzeug[i],0.299999,1.000000);
		TextDrawColor(fahrzeug[i],0xffffffff);
		TextDrawSetOutline(fahrzeug[i],1);
		TextDrawSetProportional(fahrzeug[i],1);
		TextDrawSetShadow(fahrzeug[i],1);

		mph[i] = TextDrawCreate(368.000000,396.000000," ");
		TextDrawAlignment(mph[i],0);
		TextDrawBackgroundColor(mph[i],0x000000ff);
		TextDrawFont(mph[i],1);
		TextDrawLetterSize(mph[i],0.299999,1.000000);
		TextDrawColor(mph[i],0xffffffff);
		TextDrawSetOutline(mph[i],1);
		TextDrawSetProportional(mph[i],1);
		TextDrawSetShadow(mph[i],1);

		combustivelt[i] = TextDrawCreate(198.000000,408.000000," ");
		TextDrawAlignment(combustivelt[i],0);
		TextDrawBackgroundColor(combustivelt[i],0x000000ff);
		TextDrawFont(combustivelt[i],1);
		TextDrawLetterSize(combustivelt[i],0.299999,1.000000);
		TextDrawColor(combustivelt[i],0xffffffff);
		TextDrawSetOutline(combustivelt[i],1);
		TextDrawSetProportional(combustivelt[i],1);
		TextDrawSetShadow(combustivelt[i],1);

		zustand[i] = TextDrawCreate(368.000000,408.000000," ");
		TextDrawAlignment(zustand[i],0);
		TextDrawBackgroundColor(zustand[i],0x000000ff);
		TextDrawFont(zustand[i],1);
		TextDrawLetterSize(zustand[i],0.299999,1.000000);
		TextDrawColor(zustand[i],0xffffffff);
		TextDrawSetOutline(zustand[i],1);
		TextDrawSetProportional(zustand[i],1);
		TextDrawSetShadow(zustand[i],1);

		gps[i] = TextDrawCreate(198.000000,420.000000," ");
		TextDrawAlignment(gps[i],0);
		TextDrawBackgroundColor(gps[i],0x000000ff);
		TextDrawFont(gps[i],1);
		TextDrawLetterSize(gps[i],0.299999,1.000000);
		TextDrawColor(gps[i],0xffffffff);
		TextDrawSetOutline(gps[i],1);
		TextDrawSetProportional(gps[i],1);
		TextDrawSetShadow(gps[i],1);

		hoehe[i] = TextDrawCreate(368.000000,420.000000," ");
		TextDrawAlignment(hoehe[i],0);
		TextDrawBackgroundColor(hoehe[i],0x000000ff);
		TextDrawFont(hoehe[i],1);
		TextDrawLetterSize(hoehe[i],0.299999,1.000000);
		TextDrawColor(hoehe[i],0xffffffff);
		TextDrawSetOutline(hoehe[i],1);
		TextDrawSetProportional(hoehe[i],1);
		TextDrawSetShadow(hoehe[i],1);

		url[i] = TextDrawCreate(198.000000,432.000000,URLTHIAGO);
		TextDrawAlignment(url[i],0);
		TextDrawBackgroundColor(url[i],0x000000ff);
		TextDrawFont(url[i],1);
		TextDrawLetterSize(url[i],0.299999,1.000000);
		TextDrawColor(url[i],0xffffffff);
		TextDrawSetOutline(url[i],1);
		TextDrawSetProportional(url[i],1);
		TextDrawSetShadow(url[i],1);

         // Relogio nuclear
		Textdraw0[i] = TextDrawCreate(527.000000, 141.000000, "00:00");
		TextDrawBackgroundColor(Textdraw0[i], 255);
		TextDrawFont(Textdraw0[i], 3);
		TextDrawLetterSize(Textdraw0[i], 0.519999, 1.000000);
		TextDrawColor(Textdraw0[i], -1);
		TextDrawSetOutline(Textdraw0[i], 1);
		TextDrawSetProportional(Textdraw0[i], 1);
		TextDrawUseBox(Textdraw0[i], 1);
		TextDrawBoxColor(Textdraw0[i], 255);
		TextDrawTextSize(Textdraw0[i], 578.000000, 0.000000);
		TextDrawSetSelectable(Textdraw0[i], 0);
        /*Textdraw0[i] = TextDrawCreate(17.000000, 429.000000, "20:00");
		TextDrawBackgroundColor(Textdraw0[i], 65535);
		TextDrawFont(Textdraw0[i], 1);
		TextDrawLetterSize(Textdraw0[i], 0.500000, 1.000000);
		TextDrawColor(Textdraw0[i], 16777215);
		TextDrawSetOutline(Textdraw0[i], 1);
		TextDrawSetProportional(Textdraw0[i], 1);*/

		forum[i] = TextDrawCreate(1.000000,435.000000," ~w~~>~www.~b~~h~~h~brnm~w~.forumeiros.com                       ~g~~h~~h~versao ~w~3.7b~w~~<~");
		TextDrawUseBox(forum[i],1);
		TextDrawBoxColor(forum[i],0x00000066);
		TextDrawTextSize(forum[i],641.000000,0.000000);
		TextDrawAlignment(forum[i],0);
		TextDrawBackgroundColor(forum[i],0x000000ff);
		TextDrawFont(forum[i],3);
		TextDrawLetterSize(forum[i],0.499999,1.300000);
		TextDrawColor(forum[i],0xffffffff);
		TextDrawSetOutline(forum[i],1);
		TextDrawSetProportional(forum[i],1);
		TextDrawSetShadow(forum[i],1);

		//começo
	Intro[0] = TextDrawCreate(642.0, 1.0, "~n~");
	TextDrawLetterSize(Intro[0], 0.5, 49.5);
	TextDrawUseBox(Intro[0], 1);
	TextDrawBoxColor(Intro[0], 0x000000FF);
	TextDrawTextSize(Intro[0], -2.0, 0.0);

	Intro[1] = TextDrawCreate(190.000000, 190.000000, "~p~~h~BRNM");
	TextDrawFont(Intro[1], 2);
	TextDrawLetterSize(Intro[1], 0.570000, 1.799999);

	Intro[2] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[2], 2);
	TextDrawColor(Intro[2], 0xFFFFFF22);
	TextDrawLetterSize(Intro[2], 0.570000, 1.799999);

	Intro[3] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[3], 2);
	TextDrawColor(Intro[3], 0xFFFFFF44);
	TextDrawLetterSize(Intro[3], 0.570000, 1.799999);

	Intro[4] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[4], 2);
	TextDrawColor(Intro[4], 0xFFFFFF66);
	TextDrawLetterSize(Intro[4], 0.570000, 1.799999);

	Intro[5] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[5], 2);
	TextDrawColor(Intro[5], 0xFFFFFF88);
	TextDrawLetterSize(Intro[5], 0.570000, 1.799999);

	Intro[6] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[6], 2);
	TextDrawColor(Intro[6], 0xFFFFFFAA);
	TextDrawLetterSize(Intro[6], 0.570000, 1.799999);

	Intro[7] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[7], 2);
	TextDrawColor(Intro[7], 0xFFFFFFCC);
	TextDrawLetterSize(Intro[7], 0.570000, 1.799999);

	Intro[8] = TextDrawCreate(310.000000, 190.000000, "present...");
	TextDrawFont(Intro[8], 2);
	TextDrawColor(Intro[8], 0xFFFFFFFF);
	TextDrawLetterSize(Intro[8], 0.570000, 1.799999);

	Intro[9] = TextDrawCreate(190.0, 202.0, ".");
	TextDrawFont(Intro[9], 1);
	TextDrawLetterSize(Intro[9], 23.250051, 1.099999);

	Intro[10] = TextDrawCreate(304.00, 223.0, "~y~~h~Brasil Novo Mundo");
	TextDrawFont(Intro[10], 2);
	TextDrawLetterSize(Intro[10], 0.340000, 1.099999);

	Intro[11] = TextDrawCreate(331.0, 235.0, "~g~~h~www.brnm.forumeiros.com");
	TextDrawFont(Intro[11], 2);
	TextDrawLetterSize(Intro[11], 0.340000, 1.099999);

// _________________________ TEXT DRAW BANIDO TEMPORARIO
	TextBan[i] = TextDrawCreate(300.000000, 135.000000, "~d~~b~BANIDO~d~");
	TextDrawAlignment(TextBan[i], 2);
	TextDrawBackgroundColor(TextBan[i], 255);
	TextDrawFont(TextBan[i], 1);
	TextDrawLetterSize(TextBan[i], 0.999999, 2.990000);
	TextDrawColor(TextBan[i], -1);
	TextDrawSetOutline(TextBan[i], 1);
	TextDrawSetProportional(TextBan[i], 1);

	}
   	return true;
}

public SyncTime()
{
	new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	Fixhour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "[BRNM]: Agora são %d:00 horas",shifthour);
		BroadCast(COLOR_WHITE,string);
		ghour = tmphour;
		PayDay();
		SetHora();
	}
}
public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}
public Production()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pFishes] >= 5) { if(FishCornt[i] >= 3) { PlayerInfo[i][pFishes] = 0; } else { FishCornt[i] += 1; } }
		    if(PlayerDrunk[i] > 0) { PlayerDrunk[i] = 0; PlayerDrunkTime[i] = 0; SetPlayerDrunkLevel (i, 0); GameTextForPlayer(i, "~w~O efeito da bebida~n~~b~acabou", 3500, 1); }
 		    if(PlayerInfo[i][pPayDay] < 6) { PlayerInfo[i][pPayDay] += 1; } //+ 5 min to PayDay anti-abuse
		}
	}
}
public PayDay()  //troque a callback payday por está
{
	//Horas
	new str[125];
	//format(str,sizeof(str),"[BRNM]:Agora são %i:00 horas",hour);
	//SendClientMessageToAll(-1,str);
	//Message hitmans e triads
	if(CHitman == CTriad && Avisouc == 0)
	{
		SendClientMessageToAll(COLOR_LIGHTBLUE, "Os Hitmans e os Triads concluiram o mesmo número de contratos.");
		Avisouc = 1;
	}
	if(CHitman > CTriad && Avisouc == 0)
	{
		SendClientMessageToAll(COLOR_LIGHTBLUE, "Os Hitmans concluiram um maior número de contratos do que os Triads e ganharam um Bônus Especial.");
		CHitman = 0;
		CTriad = 0;
		Avisouc = 1;
		GanhouArmamento = 8;
	}
	if(CTriad > CHitman && Avisouc == 0)
	{
		SendClientMessageToAll(COLOR_LIGHTBLUE, "Os Triads concluiram um maior número de contratos do que os Hitmans e ganharam um Bônus Especial.");
		CHitman = 0;
		CTriad = 0;
		Avisouc = 1;
		GanhouArmamento = 26;
	}
	//Loteria
	Avisouc = 0;
	PayDayDesviar++;
	new rand = random(999);
	if(rand < 996) { rand += 3;}
	Lotto(rand);
	Checkprop();

	for(new i; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))//se está conectado
	    {
		    if(PlayerInfo[i][pPayDay] >= 3) // se tem mais de
			{
			    //Prender os cara que esta devendo
				if(MoneyMessage[i]==1)
				{
					SendClientMessage(i, COR_TRIADS, "Você devia ter debitado suas dívidas, lhe enviaram um pedido de prisão.");
				 	GameTextForPlayer(i, "~r~Apreendido !", 2000, 1);
					SetPlayerInterior(i, 6);
					SetPlayerPos(i, 264.6288,77.5742,1001.0391);
				 	PlayerInfo[i][pJailed] = 1;
				 	ResetPlayerWeapons(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(gstring, sizeof(gstring), "Você foi preso por %d segundos.   Fiança: Desativada", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_LIGHTBLUE, gstring);
				}
				if(Multa[i] > 1)
				{
					SendClientMessage(i, COR_TRIADS, "Você devia ter debitado suas dívidas, lhe enviaram um pedido de prisão.");
				 	GameTextForPlayer(i, "~r~apreendido !", 2000, 1);
				 	SetPlayerInterior(i, 6);
					SetPlayerPos(i, 264.6288,77.5742,1001.0391);
				   	PlayerInfo[i][pJailed] = 1;
				   	ResetPlayerWeapons(i);
					WantedPoints[i] = 0;
					PlayerInfo[i][pJailTime] = 240;
					format(gstring, sizeof(gstring), "Você foi preso por %d segundos.   Fiança: Desativada", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_LIGHTBLUE, gstring);
				}
				if(MoneyMessage[i]==1)
				{
					SendClientMessage(i, COLOR_LIGHTRED, "Você não pagou a sua dívida e foi preso.");
					GameTextForPlayer(i, "~r~Preso!", 2000, 1);
					SetPlayerInterior(i, 6);
					SetPlayerPos(i, 264.6288,77.5742,1001.0391);
					PlayerInfo[i][pJailed] = 1;
					ResetPlayerWeaponsEx(i);
					WantedPoints[i] = 0;
					SetPlayerWantedLevel(i, 0);
					PlayerInfo[i][pJailTime] = 600;
					format(gstring, sizeof(gstring), "Você foi preso por %d segundos.", PlayerInfo[i][pJailTime]);
					SendClientMessage(i, COLOR_LIGHTBLUE, gstring);
				}
			    format(str,sizeof(str),"%d%d%d%d", random(9), random(9), random(9), random(9));
			    PaydayCodigo[i] = str;
			    PaydayParaReceber[i] = true;
			    format(str,sizeof(str),"Digite /assinar %s para assinar seu payday.",PaydayCodigo[i]);
				SendClientMessage(i,-1,str);
				GameTextForPlayer(i, "~w~assine seu salario", 5000, 1);
			}
			else
			{
				SendClientMessage(i, COLOR_LIGHTRED, "* Você não jogou tempo suficiente para receber salário!.");
			}
		}
	}
	return 1;
}

stock IsPlayerInPatio(playerid)
{
	new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= 1646.4301 && x <= 1670.7000) return 1;
    else return 0;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
stock strtokEx(const string[], &index)
{
	new length = strlen(string);
 	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}
	new offset = index;
	new result[64];
	while ((index < length) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;
	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}
public OnPlayerRegister(playerid, password[])
{
	if(IsPlayerConnected(playerid))
	{
			new string3[64];
			new playername3[MAX_PLAYER_NAME]; 
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "Contas/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
			    strmid(PlayerInfo[playerid][pKey], password, 0, strlen(password), 255);
			    new var[512];// 32
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 32, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "HelperLevel=%d\n",PlayerInfo[playerid][pHelper]);fwrite(hFile, var);
				format(var, 32, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 32, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 32, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Bank=%d\n",PlayerInfo[playerid][pConta]);fwrite(hFile, var);
				format(var, 32, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 32, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 32, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 32, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 32, "Emprego=%d\n",PlayerInfo[playerid][pEmprego]);fwrite(hFile, var);
				format(var, 32, "Paycheck=%d\n",PlayerInfo[playerid][pSalario]);fwrite(hFile, var);
				format(var, 32, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 32, "HeadValueT=%d\n",PlayerInfo[playerid][pHeadValueT]);fwrite(hFile, var);
				format(var, 32, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 32, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 32, "Materiais=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 32, "Capacete=%d\n",PlayerInfo[playerid][pCapacete]);fwrite(hFile, var);
				format(var, 32, "Maconha=%d\n",PlayerInfo[playerid][pDrogas]);fwrite(hFile, var);
				format(var, 32, "Cocaina=%d\n",PlayerInfo[playerid][pDrogas2]);fwrite(hFile, var);
				format(var, 32, "Crack=%d\n",PlayerInfo[playerid][pDrogas3]);fwrite(hFile, var);
				format(var, 32, "Lider=%d\n",PlayerInfo[playerid][pLider]);fwrite(hFile, var);
				format(var, 32, "Member=%d\n",PlayerInfo[playerid][pMembro]);fwrite(hFile, var);
				format(var, 32, "Rank=%d\n",PlayerInfo[playerid][pCargo]);fwrite(hFile, var);
				format(var, 32, "Char=%d\n",PlayerInfo[playerid][pSkin]);fwrite(hFile, var);
				format(var, 32, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 32, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 32, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 32, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 32, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 32, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 32, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 32, "DrogasSkill=%d\n",PlayerInfo[playerid][pDrogasSkill]);fwrite(hFile, var);
				format(var, 32, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 32, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 32, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
				format(var, 32, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 32, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 32, "House=%d\n",PlayerInfo[playerid][pPHousekey]);fwrite(hFile, var);
				format(var, 32, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				format(var, 32, "Spawn=%d\n",PlayerInfo[playerid][pSpawn]);fwrite(hFile, var);
				format(var, 32, "SafeMaconha=%d\n",PlayerInfo[playerid][pSafeDrogas]);fwrite(hFile, var);
				format(var, 32, "SafeCocaina=%d\n",PlayerInfo[playerid][pSafeDrogas2]);fwrite(hFile, var);
				format(var, 32, "SafeCrack=%d\n",PlayerInfo[playerid][pSafeDrogas3]);fwrite(hFile, var);
				format(var, 32, "NivelProcurado=%d\n",WantedPoints[playerid]);fwrite(hFile, var);
				format(var, 32, "SafeMateriais=%d\n",PlayerInfo[playerid][psMats]);fwrite(hFile, var);
				format(var, 32, "Cidadania=%d\n",PlayerInfo[playerid][pCidadania]);fwrite(hFile, var);
				format(var, 32, "ContaVIP=%d\n",PlayerInfo[playerid][pVIP]);fwrite(hFile, var);
				format(var, 32, "DiasVIP=%d\n",PlayerInfo[playerid][pDiaVIP]);fwrite(hFile, var);
				format(var, 32, "HoraVIP=%d\n",PlayerInfo[playerid][pHoraVIP]);fwrite(hFile, var);
   				format(var, 32, "MesVIP=%d\n",PlayerInfo[playerid][pMesVIP]);fwrite(hFile, var);
   				format(var, 32, "AnoVIP=%d\n",PlayerInfo[playerid][pAnoVIP]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
                    PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 32, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 32, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 32, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 32, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 32, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 32, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 32, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 32, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 32, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 32, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 32, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 32, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 32, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 32, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 32, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 32, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 32, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 32, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 32, "Avisos=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 32, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 32, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 32, "Luta=%d\n",PlayerInfo[playerid][pLuta]);fwrite(hFile, var);
				format(var, 32, "Dorgado=%d\n",PlayerInfo[playerid][pDorgado]);fwrite(hFile, var);
				format(var, 32, "Dorgado2=%d\n",PlayerInfo[playerid][pDorgado2]);fwrite(hFile, var);
				format(var, 32, "Doenca=%d\n",PlayerInfo[playerid][pDoenca]);fwrite(hFile, var);
				format(var, 32, "Creditos=%d\n",PlayerInfo[playerid][pCreditos]);fwrite(hFile, var);
				format(var, 32, "LU=%s\n",PlayerInfo[playerid][pLastLogin]);fwrite(hFile, var);
				format(var, 32, "Gun1=%d\n", PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 32, "Gun2=%d\n", PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 32, "Gun3=%d\n", PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 32, "Gun4=%d\n", PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 32, "Gun5=%d\n", PlayerInfo[playerid][pGun5]);fwrite(hFile, var);
				format(var, 32, "Gun6=%d\n", PlayerInfo[playerid][pGun6]);fwrite(hFile, var);
				format(var, 32, "Gun7=%d\n", PlayerInfo[playerid][pGun7]);fwrite(hFile, var);
				format(var, 32, "Gun8=%d\n", PlayerInfo[playerid][pGun8]);fwrite(hFile, var);
				format(var, 32, "Gun9=%d\n", PlayerInfo[playerid][pGun9]);fwrite(hFile, var);
				format(var, 32, "Gun10=%d\n", PlayerInfo[playerid][pGun10]);fwrite(hFile, var);
				format(var, 32, "Gun11=%d\n", PlayerInfo[playerid][pGun11]);fwrite(hFile, var);
				format(var, 32, "Gun12=%d\n", PlayerInfo[playerid][pGun12]);fwrite(hFile, var);
				format(var, 32, "Ammo1=%d\n", PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 32, "Ammo2=%d\n", PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 32, "Ammo3=%d\n", PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 32, "Ammo4=%d\n", PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 32, "Ammo5=%d\n", PlayerInfo[playerid][pAmmo5]);fwrite(hFile, var);
				format(var, 32, "Ammo6=%d\n", PlayerInfo[playerid][pAmmo6]);fwrite(hFile, var);
				format(var, 32, "Ammo7=%d\n", PlayerInfo[playerid][pAmmo7]);fwrite(hFile, var);
				format(var, 32, "Ammo8=%d\n", PlayerInfo[playerid][pAmmo8]);fwrite(hFile, var);
				format(var, 32, "Ammo9=%d\n", PlayerInfo[playerid][pAmmo9]);fwrite(hFile, var);
				format(var, 32, "Ammo10=%d\n", PlayerInfo[playerid][pAmmo10]);fwrite(hFile, var);
				format(var, 32, "Ammo11=%d\n", PlayerInfo[playerid][pAmmo11]);fwrite(hFile, var);
				format(var, 32, "Ammo12=%d\n", PlayerInfo[playerid][pAmmo12]);fwrite(hFile, var);
                format(var, 32, "Caixinha=%d\n",PlayerInfo[playerid][pCaixinha]);fwrite(hFile, var);
				format(var, 32, "Ban=%d\n",PlayerInfo[playerid][pBan]);fwrite(hFile, var);
				format(var, 32, "pPlantei=%d\n",PlayerInfo[playerid][pPlantei]);fwrite(hFile, var);
				fclose(hFile);
			}
			SendClientMessage(playerid, 0x33FF00FF, "[BRNM]: Você agora pode digitar /logar (senha)");
			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Fazendo Seu Login:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil {FFD700}Novo{00B2EE}Mundo {FFFFFF}.\n\n{FFFFFF}Status da Conta: {00FF00}Registrada\n\n\n{FFFFFF}Acesse Nosso Portal:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/portal\n\n\n{FFFFFF}Acesse Nosso Fórum:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/forum\n\n\n{0000FF}Por Favor Digite Sua Senha Para Logar", "Logar", "Esperar");
	}
	return true;
}
public OnPlayerLogin(playerid,password[])
{
	new tmp2[256];
    new string2[64];
	format(string2, sizeof(string2), "Contas/%s.ini", PlayerName(playerid));
	strmid(PlayerInfo[playerid][pKey], dini_Get(string2, "Key"), 0, strlen(dini_Get(string2, "Key")), 255);
	new File: UserFile = fopen(string2, io_read);
	if (UserFile)
	{
		if(strcmp(PlayerInfo[playerid][pKey],password, true ) == 0)
		{
			    new key[ 256 ] , val[ 256 ];
			    new Data[ 256 ];
			    while (fread(UserFile, Data, sizeof(Data)))
				{
					key = ini_GetKey( Data );
					if( strcmp( key , "Level" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLevel] = strval( val ); }
			    	if( strcmp( key , "AdminLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAdmin] = strval( val ); }
			    	if( strcmp( key , "HelperLevel" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHelper] = strval( val ); }
			        if( strcmp( key , "UpgradePoints" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][gPupgrade] = strval( val ); }
			        if( strcmp( key , "ConnectedTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConnectTime] = strval( val ); }
			        if( strcmp( key , "Registered" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pReg] = strval( val ); }
			        if( strcmp( key , "Sex" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSex] = strval( val ); }
			        if( strcmp( key , "Muted" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMuted] = strval( val ); }
			        if( strcmp( key , "Respect" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pExp] = strval( val ); }
			        if( strcmp( key , "Money" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCash] = strval( val ); }
			        if( strcmp( key , "Bank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pConta] = strval( val ); }
			        if( strcmp( key , "Crimes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCrimes] = strval( val ); }
			        if( strcmp( key , "Kills" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pKills] = strval( val ); }
			        if( strcmp( key , "Deaths" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDeaths] = strval( val ); }
			        if( strcmp( key , "Phonebook" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPhoneBook] = strval( val ); }
			        if( strcmp( key , "LottoNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLottoNr] = strval( val ); }
			        if( strcmp( key , "Fishes" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishes] = strval( val ); }
			        if( strcmp( key , "BiggestFish" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBiggestFish] = strval( val ); }
			        if( strcmp( key , "Emprego" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pEmprego] = strval( val ); }
			        if( strcmp( key , "Paycheck" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSalario] = strval( val ); }
			        if( strcmp( key , "HeadValue" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHeadValue] = strval( val ); }
			        if( strcmp( key , "HeadValueT" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHeadValueT] = strval( val ); }
			        if( strcmp( key , "Jailed" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailed] = strval( val ); }
			        if( strcmp( key , "JailTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pJailTime] = strval( val ); }
			        if( strcmp( key , "Capacete" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCapacete] = strval( val ); }
			        if( strcmp( key , "Materiais" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMats] = strval( val ); }
			        if( strcmp( key , "Maconha" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrogas] = strval( val ); }
			        if( strcmp( key , "Cocaina" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrogas2] = strval( val ); }
			        if( strcmp( key , "Crack" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrogas3] = strval( val ); }
			        if( strcmp( key , "Lider" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLider] = strval( val ); }
			        if( strcmp( key , "Member" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMembro] = strval( val ); }
			        if( strcmp( key , "Rank" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCargo] = strval( val ); }
			        if( strcmp( key , "Char" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSkin] = strval( val ); }
			        if( strcmp( key , "ContractTime" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pContractTime] = strval( val ); }
			        if( strcmp( key , "DetSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDetSkill] = strval( val ); }
			        if( strcmp( key , "SexSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSexSkill] = strval( val ); }
			        if( strcmp( key , "BoxSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoxSkill] = strval( val ); }
			        if( strcmp( key , "LawSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLawSkill] = strval( val ); }
			        if( strcmp( key , "MechSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMechSkill] = strval( val ); }
			        if( strcmp( key , "NewsSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pNewsSkill] = strval( val ); }
			        if( strcmp( key , "DrogasSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrogasSkill] = strval( val ); }
			        if( strcmp( key , "CookSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCookSkill] = strval( val ); }
			        if( strcmp( key , "FishSkill" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishSkill] = strval( val ); }
			        if( strcmp( key , "pSHealth" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSHealth] = floatstr( val ); }
			        if( strcmp( key , "Team" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTeam] = strval( val ); }
			        if( strcmp( key , "PhoneNr" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPnumber] = strval( val ); }
			        if( strcmp( key , "House" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPHousekey] = strval( val ); }
			        if( strcmp( key , "Bizz" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPbiskey] = strval( val ); }
			        if( strcmp( key , "Pos_x" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_x] = floatstr( val ); }
			        if( strcmp( key , "Pos_y" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_y] = floatstr( val ); }
			        if( strcmp( key , "Pos_z" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPos_z] = floatstr( val ); }
			        if( strcmp( key , "CarLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCarLic] = strval( val ); }
                    if( strcmp( key , "FlyLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFlyLic] = strval( val ); }
					if( strcmp( key , "BoatLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBoatLic] = strval( val ); }
			        if( strcmp( key , "FishLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pFishLic] = strval( val ); }
			        if( strcmp( key , "GunLic" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGunLic] = strval( val ); }
			        if( strcmp( key , "PayDay" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPayDay] = strval( val ); }
			        if( strcmp( key , "CDPlayer" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCDPlayer] = strval( val ); }
			        if( strcmp( key , "Wins" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWins] = strval( val ); }
			        if( strcmp( key , "Loses" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLoses] = strval( val ); }
			        if( strcmp( key , "AlcoholPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAlcoholPerk] = strval( val ); }
			        if( strcmp( key , "DrugPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDrugPerk] = strval( val ); }
			        if( strcmp( key , "MiserPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMiserPerk] = strval( val ); }
			        if( strcmp( key , "PainPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPainPerk] = strval( val ); }
			        if( strcmp( key , "TraderPerk" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTraderPerk] = strval( val ); }
			        if( strcmp( key , "Tutorial" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTut] = strval( val ); }
			        if( strcmp( key , "Avisos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pWarns] = strval( val ); }
			        if( strcmp( key , "Married" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMarried] = strval( val ); }
			        if( strcmp( key , "MarriedTo" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMarriedTo], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Spawn" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSpawn] = strval( val ); }
			        if( strcmp( key , "SafeMaconha" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSafeDrogas] = strval( val ); }
			        if( strcmp( key , "SafeCocaina" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSafeDrogas2] = strval( val ); }
			        if( strcmp( key , "SafeCrack" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pSafeDrogas3] = strval( val ); }
			        if( strcmp( key , "NivelProcurado" , true ) == 0 ) { val = ini_GetValue( Data ); WantedPoints[playerid] = strval( val ); }
			        if( strcmp( key , "SafeMateriais" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][psMats] = strval( val ); }
			        if( strcmp( key , "Cidadania" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCidadania] = strval( val ); }
			        if( strcmp( key , "ContaVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pVIP] = strval( val ); }
                    if( strcmp( key , "DiasVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDiaVIP] = strval( val ); }
                    if( strcmp( key , "HoraVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pHoraVIP] = strval( val ); }
                    if( strcmp( key , "MesVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMesVIP] = strval( val ); }
                    if( strcmp( key , "AnoVIP" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAnoVIP] = strval( val ); }
			        if( strcmp( key , "Luta" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLuta] = strval( val ); }
			        if( strcmp( key , "Dorgado" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDorgado] = strval( val ); }
			        if( strcmp( key , "Dorgado2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDorgado2] = strval( val ); }
			        if( strcmp( key , "Doenca" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDoenca] = strval( val ); }
					if( strcmp( key , "HoraLogin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLastHora] = strval( val ); }
                    if( strcmp( key , "MinutoLogin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLastMinuto] = strval( val ); }
                    if( strcmp( key , "DiaLogin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLastDia] = strval( val ); }
                    if( strcmp( key , "MesLogin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLastMes] = strval( val ); }
                    if( strcmp( key , "AnoLogin" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pLastAno] = strval( val ); }
			        if( strcmp( key , "Creditos" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCreditos] = strval( val ); }
			        if( strcmp( key , "LU" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pLastLogin], val, 0, strlen(val)-1, 255); }
			        if( strcmp( key , "Gun1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun1] = strval( val ); }
					if( strcmp( key , "Gun2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun2] = strval( val ); }
					if( strcmp( key , "Gun3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun3] = strval( val ); }
					if( strcmp( key , "Gun4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun4] = strval( val ); }
					if( strcmp( key , "Gun5" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun5] = strval( val ); }
					if( strcmp( key , "Gun6" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun6] = strval( val ); }
					if( strcmp( key , "Gun7" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun7] = strval( val ); }
					if( strcmp( key , "Gun8" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun8] = strval( val ); }
					if( strcmp( key , "Gun9" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun9] = strval( val ); }
					if( strcmp( key , "Gun10" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun10] = strval( val ); }
					if( strcmp( key , "Gun11" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun11] = strval( val ); }
					if( strcmp( key , "Gun12" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pGun12] = strval( val ); }
					if( strcmp( key , "Ammo1" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo1] = strval( val ); }
					if( strcmp( key , "Ammo2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo2] = strval( val ); }
					if( strcmp( key , "Ammo3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo3] = strval( val ); }
					if( strcmp( key , "Ammo4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo4] = strval( val ); }
					if( strcmp( key , "Ammo5" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo5] = strval( val ); }
					if( strcmp( key , "Ammo6" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo6] = strval( val ); }
					if( strcmp( key , "Ammo7" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo7] = strval( val ); }
					if( strcmp( key , "Ammo8" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo8] = strval( val ); }
					if( strcmp( key , "Ammo9" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo9] = strval( val ); }
					if( strcmp( key , "Ammo10" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo10] = strval( val ); }
					if( strcmp( key , "Ammo11" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo11] = strval( val ); }
					if( strcmp( key , "Ammo12" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAmmo12] = strval( val ); }
                    if( strcmp( key , "Caixinha" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pCaixinha] = strval( val ); }
                    if( strcmp( key , "Ban" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pBan] = strval( val ); } 
		            if( strcmp( key , "DiasBanTemp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pDiaBanTemp] = strval( val ); }
                    if( strcmp( key , "MesBanTemp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pMesBanTemp] = strval( val ); }
                    if( strcmp( key , "AnoBanTemp" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAnoBanTemp] = strval( val ); }
					if( strcmp( key , "AdminAgendou" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pAdminAgendou], val, 0, strlen(val)-1, 255); }
					if( strcmp( key , "MotivoAgendou" , true ) == 0 ) { val = ini_GetValue( Data ); strmid(PlayerInfo[playerid][pMotivoAgendou], val, 0, strlen(val)-1, 255); }
					if( strcmp( key , "Agendado" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pAgendado] = strval( val ); }
					if( strcmp( key , "TempoAgendado" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pTempoAgendado] = strval( val ); } 
					if( strcmp( key , "pPlantei" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPlantei] = strval( val ); }
					SetTimerEx("CheckDesbanAuto", 150, 0, "i", playerid);
			        logouagora[playerid] = 1;
			        //CheckAdmin(playerid);
			        CheckOwnerb(playerid);
					CheckOwnerh(playerid);
					//CheckVip(playerid);
                }//end while
                fclose(UserFile);//close the file after everything has been read in the while
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Sua senha está errada ! Se errar a senha 5 vezes, será banido !");
			SetPlayerCameraPos(playerid, 1835.8206, -1030.4900, 156.1523); 
			SetPlayerCameraLookAt(playerid, 1835.1846, -1031.2672, 156.0911); 
			SetPlayerPos(playerid, 1852.4108,-1022.1168,24.0716);
			SetPlayerInterior(playerid, 0);
			ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Fazendo Seu Login:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil {FFD700}Novo{00B2EE}Mundo {FFFFFF}.\n\n{FFFFFF}Status da Conta: {00FF00}Registrada\n\n\n{FFFFFF}Acesse Nosso Portal:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/portal\n\n\n{FFFFFF}Acesse Nosso Fórum:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/forum\n\n\n{0000FF}Por Favor Digite Sua Senha Para Logar", "Logar", "Esperar");
	        fclose(UserFile);
	        gPlayerLogTries[playerid] += 1;
	        if(gPlayerLogTries[playerid] == 5)
			{
				new stri[64], tmp[20], tmp3[20], ip[16];
				GetPlayerIp(playerid, ip, sizeof ip);
				format(stri, sizeof(stri), "IPsBanidos/%s.ini",ip);
				getdate(Ano, Mes, Dia);
				format(tmp, 20, "%d/%d/%d", Dia, Mes, Ano);
				gettime(Hora, Minuto, Segundo);
				format(tmp3, 20, "%d:%d:%d", Hora, Minuto, Segundo);
				dini_Create(stri);
				dini_Set(stri,"Motivo","Errou a senha 5 vezes");
				dini_Set(stri,"Admin","Homem_Aranha");
				dini_Set(stri,"Data",tmp);
				dini_Set(stri,"Hora",tmp3);
				dini_Set(stri,"Nick",PlayerName(playerid));
				Kick(playerid);
			}
	        return true;
		}
		ClearChatbox(playerid, 100);
		ResetPlayerMoney(playerid);
		ConsumingMoney[playerid] = 1;
		GivePlayerMoney(playerid,PlayerInfo[playerid][pCash]);
		CurrentMoney[playerid] = PlayerInfo[playerid][pCash];
		SetPlayerWantedLevel(playerid, WantedPoints[playerid]);
		if(PlayerInfo[playerid][pReg] == 0)
		{
			PlayerInfo[playerid][pLevel] = 2;
			PlayerInfo[playerid][pSHealth] = 100;
			PlayerInfo[playerid][pPos_x] = 2246.6;
			PlayerInfo[playerid][pPos_y] = -1161.9;
			PlayerInfo[playerid][pPos_z] = 1029.7;
			PlayerInfo[playerid][pInt] = 0;
			PlayerInfo[playerid][pLocal] = 255;
			PlayerInfo[playerid][pTeam] = 3;
			if(PlayerInfo[playerid][pSex] == 1){SetPlayerSkin(playerid, 60);}else{SetPlayerSkin(playerid, 226);}
			new randphone = 1000 + random(8999);//
			PlayerInfo[playerid][pPnumber] = randphone;
			PlayerInfo[playerid][pPHousekey] = 255;
			PlayerInfo[playerid][pPbiskey] = 255;
			PlayerInfo[playerid][pConta] = 100;
			PlayerInfo[playerid][pReg] = 1;
			PlayerInfo[playerid][pEmprego] = 0;
			PlayerInfo[playerid][pKills] = 0;
			PlayerInfo[playerid][pDeaths] = 0;
			PlayerInfo[playerid][pPlantei] = 0;
			ResetPlayerMoney(playerid);
		}
		if(PlayerInfo[playerid][pWarns] == 1) //1 aviso
		{
		    SendClientMessage(playerid, COLOR_YELLOW, "Sua Conta Já tem 1 Aviso!");
		    SendClientMessage(playerid, COLOR_YELLOW, "Se Você tiver 3 avisos será banido automaticamente!");
		} 
		CheckDesbanAuto(playerid);
		if(PlayerInfo[playerid][pWarns] == 2) //2 avisos
		{
		    SendClientMessage(playerid, COLOR_YELLOW, "Sua Conta Já tem 2 Avisos!");
		    SendClientMessage(playerid, COLOR_YELLOW, "Se Você tiver 3 avisos será banido automaticamente!");
		}
		if(PlayerInfo[playerid][pWarns] >= 3) //3 avisos
		{
		    PlayerInfo[playerid][pWarns] = 0;
		}
		new string[128];
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
  		SendClientMessage(playerid, COLOR_GREEN,"···········································");
  		SendClientMessage(playerid, COLOR_YELLOW, "Seja Bem Vindo(a)");
  		SendClientMessage(playerid, COLOR_YELLOW, "Obrigado Por Escolher Em Jogar Aqui");
  		SendClientMessage(playerid, COLOR_WHITE, "{FFFFFF}Nosso Forum: www.{FFD700}brnm{FFFFFF}.forumeiros.com");
		format(string, sizeof(string), "BRNM: {FAB875}%d Players Online.", ContarJogadores());
		SendClientMessage(playerid,COLOR_YELLOW2,string);
		SendClientMessage(playerid, COLOR_YELLOW, "Caso precise de ajuda use: /relatorio");
  		SendClientMessage(playerid, COLOR_GREEN,"···········································");
		printf("%s has logged in.",PlayerName(playerid));
		new Info[6][10];
	    split(PlayerInfo[playerid][pLastLogin],Info,'/');
  		format(string2, sizeof(string2), "Seu último login foi no dia %d/%d/%d horário %d:%d:%d",strval(Info[0]),strval(Info[1]),strval(Info[2]),strval(Info[3]),strval(Info[4]),strval(Info[5]));
  		SendClientMessage(playerid, COLOR_AZULBB,string2);
  		DateProp(playerid);
  		new dia,mes,ano,hora,mins,seg,string3[20];
	    getdate(ano,mes,dia);
		CheckDesbanAuto(playerid);
	    gettime(hora,mins,seg);
  		format(string3, sizeof(string3),"%d/%d/%d/%d/%d/%d",dia,mes,ano,hora,mins,seg);
  		strmid(PlayerInfo[playerid][pLastLogin],string3,0,strlen(string3),255);
		PlayerInfo[playerid][pLastDia] = dia;
    	PlayerInfo[playerid][pLastMes] = mes;
    	PlayerInfo[playerid][pLastAno] = ano;
    	PlayerInfo[playerid][pLastHora] = hora;
    	PlayerInfo[playerid][pLastMinuto] = mins;
        if (PlayerInfo[playerid][pVIP] > 0 && (day >= PlayerInfo[playerid][pDiaVIP] && hour >= PlayerInfo[playerid][pHoraVIP] && month >= PlayerInfo[playerid][pMesVIP] && year >= PlayerInfo[playerid][pAnoVIP]))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Você não é mais um jogador VIP/Premium, renove seu VIP para receber seus benefícios de volta.");
			PlayerInfo[playerid][pVIP] = 0;
		    PlayerInfo[playerid][pDiaVIP] = 0;
		    PlayerInfo[playerid][pHoraVIP] = 0;
		    PlayerInfo[playerid][pMesVIP] = 0;
			PlayerInfo[playerid][pAnoVIP] = 0;
		}
		else if (PlayerInfo[playerid][pVIP] == 0)
		{
			SendClientMessage(playerid, COLOR_YELLOW,"[BRNM]: Você é jogador Vip.");
  		}
    	else if (PlayerInfo[playerid][pVIP] == 1)
		{
			SendClientMessage(playerid, COLOR_YELLOW,"[BRNM]: Você é jogador Vip Premium.");
		}
		if (AdmCheck(playerid) == 0 && PlayerInfo[playerid][pAdmin] > 0)//teste adminfo
		{
			PlayerInfo[playerid][pAdmin] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "[BRNM]: Você não é mais um Administrador.");
		}
		if (HelperCheck(playerid) == 0 && PlayerInfo[playerid][pHelper] > 0)//teste adminfo
		{
			PlayerInfo[playerid][pHelper] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "[BRNM]: Você não é mais um Helper.");
		}
		else if(PlayerInfo[playerid][pAdmin] > 0)
		{
			format(string2, sizeof(string2), "[BRNM]: Você Logou Como Administrador Level [%d].",PlayerInfo[playerid][pAdmin]);
			SendClientMessage(playerid, COLOR_YELLOW,string2);
		}
		else if(PlayerInfo[playerid][pHelper] > 0)
		{
			format(string2, sizeof(string2), "[BRNM]: Você Logou Como Helper Level [%d].",PlayerInfo[playerid][pHelper]);
			SendClientMessage(playerid, COLOR_YELLOW,string2);
		} 
	   if(IsPlayerConnected(playerid)) { 
   
         if(PlayerInfo[playerid][pAdmin] >= SUB_DONO) {
	    
		admtrampando[playerid] = 1;
	    admhide[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Admin Dono]Você entrou automaticamente em modocia para desativar digite /modocia.");
		OnPlayerCommandText(playerid, "/desligarpar");
	    }
	}   
		if(FoiDesban[playerid] == 1)
		{
		SendClientMessage(playerid, COLOR_BLUE, "|___________________________________[ Você foi desbanido ]___________________________________|");
		SendClientMessage(playerid, COLOR_YELLOW, "[BRNM] Seu ban temporario acabou, você foi desbanido.");
		SendClientMessage(playerid, COLOR_YELLOW, "[BRNM] Não viole mais nem uma regra ou pode acabar sendo banido permanente.");
		SendClientMessage(playerid, COLOR_YELLOW, "[BRNM] Leia as regras em nosso forum, http://brnm.forumeiros.com/t1-regras-do-servidor. Bom Jogo");
        FoiDesban[playerid] = 0;
		}
		SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pSkin], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
		if(gTeam[playerid] == 0)
		{
			gTeam[playerid] = 3;
		}
		else
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		MedicBill[playerid] = 0;
		gPlayerLogged[playerid] = 1;
		SpawnPlayer(playerid);
		format(tmp2, sizeof(tmp2), "~w~Bem vindo ~n~~b~~h~~h~   %s", PlayerName(playerid));
		GameTextForPlayer(playerid, tmp2, 5000, 1);
  		SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL_SILENCED, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
    	SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);
    	ScoreLevel(playerid);
    	//new check = PlayerInfo[playerid][pLevel]+1;
        /*format(gstring,sizeof(gstring),"~b~Nome: ~w~%s    ~b~Level: ~w~%d    ~b~Respeito: ~w~%d~b~ / ~w~%d    ~b~Celular: ~w~%d    ~b~Creditos: ~w~%d", PlayerName(playerid), PlayerInfo[playerid][pLevel],
		PlayerInfo[playerid][pExp], check*levelexp, PlayerInfo[playerid][pPnumber], PlayerInfo[playerid][pCreditos]);
	    TextDrawSetString(forum2[playerid], gstring);*/
	    gmsg[playerid] = 1;
	    TextDrawHideForPlayer(playerid, Entrada[playerid]);
    	tempotd[playerid] = SetTimerEx("PiscarTD", 9000, 1, "i", playerid);
    	if(PlayerInfo[playerid][pPlantei] == 1)
		{
		    WantedPoints[playerid] = 5;
		    new wantedlevel;
          	wantedlevel = GetPlayerWantedLevel(playerid);
      		SetPlayerWantedLevel(playerid, wantedlevel+WantedPoints[playerid]);
		    PlayerInfo[playerid][pPlantei] = 0;
		}
    	if(BOMBAON == 1)
		{
			PlantouBombaNuclear[playerid] = 1;
			PlayAudioStreamForPlayer(playerid, "https://dl.dropboxusercontent.com/s/kn5rxhl2glflp21/Alarme%20de%20avacua%C3%A7%C3%A3o%20Nuclear%20%28nuclear%20evacuation%20alarm%29.mp3?token_hash=AAFbRKqJ5CcVHRI6fp8X0JhNSqg_BuHjgag2ZvQZxUNR9w&dl=1");
			TextDrawShowForPlayer(playerid, Textdraw0[playerid]);
		}
		TempoLogin = SetTimerEx("LoginAgora", 10000, 0, "i", playerid);
	}
	return true;
}
forward OnPlayerUpdateEx(playerid);
public OnPlayerUpdateEx(playerid)
{
    if(IsPlayerConnected(playerid) && gPlayerLogged[playerid])
	{
	    //if(GetPlayerInterior(playerid) >= 1) SetPlayerArmedWeapon(playerid,0);
		if(GetTickCount() - gpTimes[playerid] >= 1000)
		{
			gpTimes[playerid] = GetTickCount();
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "Contas/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
				new var[512]; // 32
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 32, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "HelperLevel=%d\n",PlayerInfo[playerid][pHelper]);fwrite(hFile, var);
				format(var, 32, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 32, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 32, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Bank=%d\n",PlayerInfo[playerid][pConta]);fwrite(hFile, var);
				format(var, 32, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 32, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 32, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 32, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 32, "Emprego=%d\n",PlayerInfo[playerid][pEmprego]);fwrite(hFile, var);
				format(var, 32, "Paycheck=%d\n",PlayerInfo[playerid][pSalario]);fwrite(hFile, var);
				format(var, 32, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 32, "HeadValueT=%d\n",PlayerInfo[playerid][pHeadValueT]);fwrite(hFile, var);
				format(var, 32, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 32, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 32, "Materiais=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 32, "Maconha=%d\n",PlayerInfo[playerid][pDrogas]);fwrite(hFile, var);
				format(var, 32, "Cocaina=%d\n",PlayerInfo[playerid][pDrogas2]);fwrite(hFile, var);
				format(var, 32, "Crack=%d\n",PlayerInfo[playerid][pDrogas3]);fwrite(hFile, var);
				format(var, 32, "Lider=%d\n",PlayerInfo[playerid][pLider]);fwrite(hFile, var);
				format(var, 32, "Member=%d\n",PlayerInfo[playerid][pMembro]);fwrite(hFile, var);
				format(var, 32, "Rank=%d\n",PlayerInfo[playerid][pCargo]);fwrite(hFile, var);
				format(var, 32, "Char=%d\n",PlayerInfo[playerid][pSkin]);fwrite(hFile, var);
				format(var, 32, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 32, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 32, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 32, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 32, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 32, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 32, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 32, "DrogasSkill=%d\n",PlayerInfo[playerid][pDrogasSkill]);fwrite(hFile, var);
				format(var, 32, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 32, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 32, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
				format(var, 32, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 32, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 32, "House=%d\n",PlayerInfo[playerid][pPHousekey]);fwrite(hFile, var);
				format(var, 32, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				format(var, 32, "Spawn=%d\n",PlayerInfo[playerid][pSpawn]);fwrite(hFile, var);
				format(var, 32, "SafeMaconha=%d\n",PlayerInfo[playerid][pSafeDrogas]);fwrite(hFile, var);
				format(var, 32, "SafeCocaina=%d\n",PlayerInfo[playerid][pSafeDrogas2]);fwrite(hFile, var);
				format(var, 32, "SafeCrack=%d\n",PlayerInfo[playerid][pSafeDrogas3]);fwrite(hFile, var);
				format(var, 32, "NivelProcurado=%d\n",WantedPoints[playerid]);fwrite(hFile, var);
				format(var, 32, "SafeMateriais=%d\n",PlayerInfo[playerid][psMats]);fwrite(hFile, var);
				format(var, 32, "Cidadania=%d\n",PlayerInfo[playerid][pCidadania]);fwrite(hFile, var);
				format(var, 32, "ContaVIP=%d\n",PlayerInfo[playerid][pVIP]);fwrite(hFile, var);
				format(var, 32, "DiasVIP=%d\n",PlayerInfo[playerid][pDiaVIP]);fwrite(hFile, var);
				format(var, 32, "HoraVIP=%d\n",PlayerInfo[playerid][pHoraVIP]);fwrite(hFile, var);
   				format(var, 32, "MesVIP=%d\n",PlayerInfo[playerid][pMesVIP]);fwrite(hFile, var);
   				format(var, 32, "AnoVIP=%d\n",PlayerInfo[playerid][pAnoVIP]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
					PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 32, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 32, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 32, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 32, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 32, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 32, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 32, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 32, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 32, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 32, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 32, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 32, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 32, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 32, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 32, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 32, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 32, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 32, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 32, "Avisos=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 32, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 32, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 32, "Luta=%d\n",PlayerInfo[playerid][pLuta]);fwrite(hFile, var);
				format(var, 32, "Dorgado=%d\n",PlayerInfo[playerid][pDorgado]);fwrite(hFile, var);
				format(var, 32, "Dorgado2=%d\n",PlayerInfo[playerid][pDorgado]);fwrite(hFile, var);
				format(var, 32, "Doenca=%d\n",PlayerInfo[playerid][pDoenca]);fwrite(hFile, var);
				format(var, 32, "DiaLogin=%d\n",PlayerInfo[playerid][pLastDia]);fwrite(hFile, var);
            	format(var, 32, "MesLogin=%d\n",PlayerInfo[playerid][pLastMes]);fwrite(hFile, var);
            	format(var, 32, "AnoLogin=%d\n",PlayerInfo[playerid][pLastAno]);fwrite(hFile, var);
            	format(var, 32, "HoraLogin=%d\n",PlayerInfo[playerid][pLastHora]);fwrite(hFile, var);
            	format(var, 32, "MinutoLogin=%d\n",PlayerInfo[playerid][pLastMinuto]);fwrite(hFile, var);
				format(var, 32, "Creditos=%d\n",PlayerInfo[playerid][pCreditos]);fwrite(hFile, var);
				format(var, 32, "LU=%s\n",PlayerInfo[playerid][pLastLogin]);fwrite(hFile, var);
				GetPlayerWeaponData(playerid, 1, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
		    	GetPlayerWeaponData(playerid, 2, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
		    	GetPlayerWeaponData(playerid, 3, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
		    	GetPlayerWeaponData(playerid, 4, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
		    	GetPlayerWeaponData(playerid, 5, PlayerInfo[playerid][pGun5], PlayerInfo[playerid][pAmmo5]);
		    	GetPlayerWeaponData(playerid, 6, PlayerInfo[playerid][pGun6], PlayerInfo[playerid][pAmmo6]);
		    	GetPlayerWeaponData(playerid, 7, PlayerInfo[playerid][pGun7], PlayerInfo[playerid][pAmmo7]);
		    	GetPlayerWeaponData(playerid, 8, PlayerInfo[playerid][pGun8], PlayerInfo[playerid][pAmmo8]);
		    	GetPlayerWeaponData(playerid, 9, PlayerInfo[playerid][pGun9], PlayerInfo[playerid][pAmmo9]);
		    	GetPlayerWeaponData(playerid, 10, PlayerInfo[playerid][pGun10], PlayerInfo[playerid][pAmmo10]);
		    	GetPlayerWeaponData(playerid, 11, PlayerInfo[playerid][pGun11], PlayerInfo[playerid][pAmmo11]);
		    	GetPlayerWeaponData(playerid, 12, PlayerInfo[playerid][pGun12], PlayerInfo[playerid][pAmmo12]);
				format(var, 32, "Gun1=%d\n", PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 32, "Gun2=%d\n", PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 32, "Gun3=%d\n", PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 32, "Gun4=%d\n", PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 32, "Gun5=%d\n", PlayerInfo[playerid][pGun5]);fwrite(hFile, var);
				format(var, 32, "Gun6=%d\n", PlayerInfo[playerid][pGun6]);fwrite(hFile, var);
				format(var, 32, "Gun7=%d\n", PlayerInfo[playerid][pGun7]);fwrite(hFile, var);
				format(var, 32, "Gun8=%d\n", PlayerInfo[playerid][pGun8]);fwrite(hFile, var);
				format(var, 32, "Gun9=%d\n", PlayerInfo[playerid][pGun9]);fwrite(hFile, var);
				format(var, 32, "Gun10=%d\n", PlayerInfo[playerid][pGun10]);fwrite(hFile, var);
				format(var, 32, "Gun11=%d\n", PlayerInfo[playerid][pGun11]);fwrite(hFile, var);
				format(var, 32, "Gun12=%d\n", PlayerInfo[playerid][pGun12]);fwrite(hFile, var);
				format(var, 32, "Ammo1=%d\n", PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 32, "Ammo2=%d\n", PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 32, "Ammo3=%d\n", PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 32, "Ammo4=%d\n", PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 32, "Ammo5=%d\n", PlayerInfo[playerid][pAmmo5]);fwrite(hFile, var);
				format(var, 32, "Ammo6=%d\n", PlayerInfo[playerid][pAmmo6]);fwrite(hFile, var);
				format(var, 32, "Ammo7=%d\n", PlayerInfo[playerid][pAmmo7]);fwrite(hFile, var);
				format(var, 32, "Ammo8=%d\n", PlayerInfo[playerid][pAmmo8]);fwrite(hFile, var);
				format(var, 32, "Ammo9=%d\n", PlayerInfo[playerid][pAmmo9]);fwrite(hFile, var);
				format(var, 32, "Ammo10=%d\n", PlayerInfo[playerid][pAmmo10]);fwrite(hFile, var);
				format(var, 32, "Ammo11=%d\n", PlayerInfo[playerid][pAmmo11]);fwrite(hFile, var);
				format(var, 32, "Ammo12=%d\n", PlayerInfo[playerid][pAmmo12]);fwrite(hFile, var);
                format(var, 32, "Caixinha=%d\n",PlayerInfo[playerid][pCaixinha]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    	{
        	for(new i = 0; i < sizeof(SpikeInfo); i++)
  	    	{
  	       		if(IsPlayerInRangeOfPoint(playerid, 3.0, SpikeInfo[i][sX], SpikeInfo[i][sY], SpikeInfo[i][sZ]))
           		{
  	           		if(SpikeInfo[i][sCreated] == 1)
  	           		{
  	               		new panels, doors, luzes, tires;
  	               		new carid = GetPlayerVehicleID(playerid);
		           		GetVehicleDamageStatus(carid, panels, doors, luzes, tires);
		           		tires = encode_tires(1, 1, 1, 1);
		           		UpdateVehicleDamageStatus(carid, panels, doors, luzes, tires);
  	           		}
  	       		}
  	    	}
  		}
	}
	if(GetPlayerVehicleID(playerid) != 0) {
        if(GetPlayerVehicleID(playerid) != GetPVarInt(playerid, "Veiculo_Anterior")) {
            if(GetPVarInt(playerid, "Troca_Veiculo") > gettime()) {
            
            	new arquivoip[64], tmp[20], tmp3[20], ip[16], arquivoban[64], string[128];
				GetPlayerIp(playerid, ip, sizeof ip);
				format(arquivoip, sizeof(arquivoip), "IPsBanidos/%s.ini",ip);
				getdate(Ano, Mes, Dia);
				format(tmp, 20, "%d/%d/%d", Dia, Mes, Ano);
				gettime(Hora, Minuto, Segundo);
				format(tmp3, 20, "%d:%d:%d", Hora, Minuto, Segundo);
				format(arquivoban, sizeof(arquivoban), "Banidos/%s.ini",PlayerName(playerid));
				format(string, sizeof(string), "AdmCmd: %s foi banido por Homem_Aranha, Motivo: Mod Car Teleport", PlayerName(playerid));
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				dini_Create(arquivoip);
				dini_Create(arquivoban);
				dini_Set(arquivoip,"Motivo","Mod Car Teleport");
				dini_Set(arquivoip,"Admin","Homem_Aranha");
				dini_Set(arquivoip,"Data",tmp);
				dini_Set(arquivoip,"Hora",tmp3);
				dini_Set(arquivoip,"Nick",PlayerName(playerid));
				dini_Set(arquivoban,"Motivo","Mod Car Teleport");
				dini_Set(arquivoban,"Admin","Homem_Aranha");
				dini_Set(arquivoban,"Data",tmp);
				dini_Set(arquivoban,"Hora",tmp3);
				Kick(playerid);
				return 1;
            }
            SetPVarInt(playerid, "Veiculo_Anterior", GetPlayerVehicleID(playerid));
            SetPVarInt(playerid, "Troca_Veiculo", gettime() + 2);
        }
    }
    if(GetTickCount() - armedbody_pTick[playerid] > 113){ //prefix check itter
		new weaponid[13],weaponammo[13],pArmedWeapon;
		pArmedWeapon = GetPlayerWeapon(playerid);
		GetPlayerWeaponData(playerid,1,weaponid[1],weaponammo[1]);
		GetPlayerWeaponData(playerid,2,weaponid[2],weaponammo[2]);
		GetPlayerWeaponData(playerid,4,weaponid[4],weaponammo[4]);
		GetPlayerWeaponData(playerid,5,weaponid[5],weaponammo[5]);
		#if ARMEDBODY_USE_HEAVY_WEAPON
		GetPlayerWeaponData(playerid,7,weaponid[7],weaponammo[7]);
		#endif
		if(weaponid[1] && weaponammo[1] > 0){
			if(pArmedWeapon != weaponid[1]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,0)){
					SetPlayerAttachedObject(playerid,0,GetWeaponModel(weaponid[1]),1, 0.199999, -0.139999, 0.030000, 0.500007, -115.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,0)){
					RemovePlayerAttachedObject(playerid,0);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,0)){
			RemovePlayerAttachedObject(playerid,0);
		}
		if(weaponid[2] && weaponammo[2] > 0){
			if(pArmedWeapon != weaponid[2]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,1)){
					SetPlayerAttachedObject(playerid,1,GetWeaponModel(weaponid[2]),8, -0.079999, -0.039999, 0.109999, -90.100006, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,1)){
					RemovePlayerAttachedObject(playerid,1);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,1)){
			RemovePlayerAttachedObject(playerid,1);
		}
		if(weaponid[4] && weaponammo[4] > 0){
			if(pArmedWeapon != weaponid[4]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,2)){
					SetPlayerAttachedObject(playerid,2,GetWeaponModel(weaponid[4]),7, 0.000000, -0.100000, -0.080000, -95.000000, -10.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,2)){
					RemovePlayerAttachedObject(playerid,2);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,2)){
			RemovePlayerAttachedObject(playerid,2);
		}
		if(weaponid[5] && weaponammo[5] > 0){
			if(pArmedWeapon != weaponid[5]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,3)){
					SetPlayerAttachedObject(playerid,3,GetWeaponModel(weaponid[5]),1, 0.200000, -0.119999, -0.059999, 0.000000, 206.000000, 0.000000, 1.000000, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,3)){
					RemovePlayerAttachedObject(playerid,3);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,3)){
			RemovePlayerAttachedObject(playerid,3);
		}
		#if ARMEDBODY_USE_HEAVY_WEAPON
		if(weaponid[7] && weaponammo[7] > 0){
			if(pArmedWeapon != weaponid[7]){
				if(!IsPlayerAttachedObjectSlotUsed(playerid,4)){
					SetPlayerAttachedObject(playerid,4,GetWeaponModel(weaponid[7]),1,-0.100000, 0.000000, -0.100000, 84.399932, 112.000000, 10.000000, 1.099999, 1.000000, 1.000000);
				}
			}
			else {
				if(IsPlayerAttachedObjectSlotUsed(playerid,4)){
					RemovePlayerAttachedObject(playerid,4);
				}
			}
		}
		else if(IsPlayerAttachedObjectSlotUsed(playerid,4)){
			RemovePlayerAttachedObject(playerid,4);
		}
		#endif
		armedbody_pTick[playerid] = GetTickCount();
	}
	return true;
}
public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
    //GetPlayerState(issuerid) == PLAYER_STATE_DRIVER ||
    if(GetPlayerState(issuerid) == PLAYER_STATE_PASSENGER )
    {
        new Float:Vida, Float:Colete;
        GetPlayerHealth(playerid, Vida);
        GetPlayerArmour(playerid, Colete);
        SetPlayerHealth(playerid, Vida + amount);
		SetPlayerArmour(playerid, Colete + amount);
        SetPlayerArmedWeapon(issuerid, 0);
		SendClientMessage(issuerid, COLOR_WHITE, "Não cometa DRIVE-BY (DB) ou será punido!");
    }
    return 1;
}
stock BadFloat(Float:x)
{
    if(x >= 10.0 || x <= -10.0)return true;
     return false;
}
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
    if( hittype == BULLET_HIT_TYPE_PLAYER && (BadFloat(fX) || BadFloat(fY) || BadFloat(fZ)) )
    {
        Kick(playerid);
        return 0;
    }
    return 1;
}
forward OnPlayerSave(playerid);
public OnPlayerSave(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		if(gPlayerLogged[playerid])
		{
			new string3[64];
			new playername3[MAX_PLAYER_NAME];
			GetPlayerName(playerid, playername3, sizeof(playername3));
			format(string3, sizeof(string3), "Contas/%s.ini", playername3);
			new File: hFile = fopen(string3, io_write);
			if (hFile)
			{
				new var[512]; // 32
				format(var, 32, "Key=%s\n", PlayerInfo[playerid][pKey]);fwrite(hFile, var);
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				format(var, 32, "Level=%d\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
				format(var, 32, "AdminLevel=%d\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
				format(var, 32, "HelperLevel=%d\n",PlayerInfo[playerid][pHelper]);fwrite(hFile, var);
				format(var, 32, "UpgradePoints=%d\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
				format(var, 32, "ConnectedTime=%d\n",PlayerInfo[playerid][pConnectTime]);fwrite(hFile, var);
				format(var, 32, "Registered=%d\n",PlayerInfo[playerid][pReg]);fwrite(hFile, var);
				format(var, 32, "Sex=%d\n",PlayerInfo[playerid][pSex]);fwrite(hFile, var);
				format(var, 32, "Muted=%d\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
				format(var, 32, "Respect=%d\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
				format(var, 32, "Money=%d\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
				format(var, 32, "Bank=%d\n",PlayerInfo[playerid][pConta]);fwrite(hFile, var);
				format(var, 32, "Crimes=%d\n",PlayerInfo[playerid][pCrimes]);fwrite(hFile, var);
				format(var, 32, "Kills=%d\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
				format(var, 32, "Deaths=%d\n",PlayerInfo[playerid][pDeaths]);fwrite(hFile, var);
				format(var, 32, "Phonebook=%d\n",PlayerInfo[playerid][pPhoneBook]);fwrite(hFile, var);
				format(var, 32, "LottoNr=%d\n",PlayerInfo[playerid][pLottoNr]);fwrite(hFile, var);
				format(var, 32, "Fishes=%d\n",PlayerInfo[playerid][pFishes]);fwrite(hFile, var);
				format(var, 32, "BiggestFish=%d\n",PlayerInfo[playerid][pBiggestFish]);fwrite(hFile, var);
				format(var, 32, "Emprego=%d\n",PlayerInfo[playerid][pEmprego]);fwrite(hFile, var);
				format(var, 32, "Paycheck=%d\n",PlayerInfo[playerid][pSalario]);fwrite(hFile, var);
				format(var, 32, "HeadValue=%d\n",PlayerInfo[playerid][pHeadValue]);fwrite(hFile, var);
				format(var, 32, "Jailed=%d\n",PlayerInfo[playerid][pJailed]);fwrite(hFile, var);
				format(var, 32, "JailTime=%d\n",PlayerInfo[playerid][pJailTime]);fwrite(hFile, var);
				format(var, 32, "Materiais=%d\n",PlayerInfo[playerid][pMats]);fwrite(hFile, var);
				format(var, 32, "Maconha=%d\n",PlayerInfo[playerid][pDrogas]);fwrite(hFile, var);
				format(var, 32, "Cocaina=%d\n",PlayerInfo[playerid][pDrogas2]);fwrite(hFile, var);
				format(var, 32, "Crack=%d\n",PlayerInfo[playerid][pDrogas3]);fwrite(hFile, var);
				format(var, 32, "Lider=%d\n",PlayerInfo[playerid][pLider]);fwrite(hFile, var);
				format(var, 32, "Member=%d\n",PlayerInfo[playerid][pMembro]);fwrite(hFile, var);
				format(var, 32, "Rank=%d\n",PlayerInfo[playerid][pCargo]);fwrite(hFile, var);
				format(var, 32, "Char=%d\n",PlayerInfo[playerid][pSkin]);fwrite(hFile, var);
				format(var, 32, "ContractTime=%d\n",PlayerInfo[playerid][pContractTime]);fwrite(hFile, var);
				format(var, 32, "DetSkill=%d\n",PlayerInfo[playerid][pDetSkill]);fwrite(hFile, var);
				format(var, 32, "SexSkill=%d\n",PlayerInfo[playerid][pSexSkill]);fwrite(hFile, var);
				format(var, 32, "BoxSkill=%d\n",PlayerInfo[playerid][pBoxSkill]);fwrite(hFile, var);
				format(var, 32, "LawSkill=%d\n",PlayerInfo[playerid][pLawSkill]);fwrite(hFile, var);
				format(var, 32, "MechSkill=%d\n",PlayerInfo[playerid][pMechSkill]);fwrite(hFile, var);
				format(var, 32, "NewsSkill=%d\n",PlayerInfo[playerid][pNewsSkill]);fwrite(hFile, var);
				format(var, 32, "DrogasSkill=%d\n",PlayerInfo[playerid][pDrogasSkill]);fwrite(hFile, var);
				format(var, 32, "CookSkill=%d\n",PlayerInfo[playerid][pCookSkill]);fwrite(hFile, var);
				format(var, 32, "FishSkill=%d\n",PlayerInfo[playerid][pFishSkill]);fwrite(hFile, var);
				format(var, 32, "pSHealth=%.1f\n",PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
				format(var, 32, "Team=%d\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
				format(var, 32, "PhoneNr=%d\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
				format(var, 32, "House=%d\n",PlayerInfo[playerid][pPHousekey]);fwrite(hFile, var);
				format(var, 32, "Bizz=%d\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
				format(var, 32, "Spawn=%d\n",PlayerInfo[playerid][pSpawn]);fwrite(hFile, var);
				format(var, 32, "SafeMaconha=%d\n",PlayerInfo[playerid][pSafeDrogas]);fwrite(hFile, var);
				format(var, 32, "SafeCocaina=%d\n",PlayerInfo[playerid][pSafeDrogas2]);fwrite(hFile, var);
				format(var, 32, "SafeCrack=%d\n",PlayerInfo[playerid][pSafeDrogas3]);fwrite(hFile, var);
				format(var, 32, "NivelProcurado=%d\n",WantedPoints[playerid]);fwrite(hFile, var);
				format(var, 32, "SafeMateriais=%d\n",PlayerInfo[playerid][psMats]);fwrite(hFile, var);
				format(var, 32, "Cidadania=%d\n",PlayerInfo[playerid][pCidadania]);fwrite(hFile, var);
			    format(var, 32, "ContaVIP=%d\n",PlayerInfo[playerid][pVIP]);fwrite(hFile, var);
				format(var, 32, "DiasVIP=%d\n",PlayerInfo[playerid][pDiaVIP]);fwrite(hFile, var);
				format(var, 32, "HoraVIP=%d\n",PlayerInfo[playerid][pHoraVIP]);fwrite(hFile, var);
   				format(var, 32, "MesVIP=%d\n",PlayerInfo[playerid][pMesVIP]);fwrite(hFile, var);
   				format(var, 32, "AnoVIP=%d\n",PlayerInfo[playerid][pAnoVIP]);fwrite(hFile, var);
				if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0))
				{
					PlayerInfo[playerid][pPos_x] = 1684.9;
					PlayerInfo[playerid][pPos_y] = -2244.5;
					PlayerInfo[playerid][pPos_z] = 13.5;
				}
				if(Spectate[playerid] != 255)
				{
					PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
					PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
					PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
					PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
					PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				}
				format(var, 32, "Pos_x=%.1f\n",PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
				format(var, 32, "Pos_y=%.1f\n",PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
				format(var, 32, "Pos_z=%.1f\n",PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
				format(var, 32, "CarLic=%d\n",PlayerInfo[playerid][pCarLic]);fwrite(hFile, var);
                format(var, 32, "FlyLic=%d\n",PlayerInfo[playerid][pFlyLic]);fwrite(hFile, var);
				format(var, 32, "BoatLic=%d\n",PlayerInfo[playerid][pBoatLic]);fwrite(hFile, var);
				format(var, 32, "FishLic=%d\n",PlayerInfo[playerid][pFishLic]);fwrite(hFile, var);
				format(var, 32, "GunLic=%d\n",PlayerInfo[playerid][pGunLic]);fwrite(hFile, var);
				format(var, 32, "PayDay=%d\n",PlayerInfo[playerid][pPayDay]);fwrite(hFile, var);
				format(var, 32, "CDPlayer=%d\n",PlayerInfo[playerid][pCDPlayer]);fwrite(hFile, var);
				format(var, 32, "Wins=%d\n",PlayerInfo[playerid][pWins]);fwrite(hFile, var);
				format(var, 32, "Loses=%d\n",PlayerInfo[playerid][pLoses]);fwrite(hFile, var);
				format(var, 32, "AlcoholPerk=%d\n",PlayerInfo[playerid][pAlcoholPerk]);fwrite(hFile, var);
				format(var, 32, "DrugPerk=%d\n",PlayerInfo[playerid][pDrugPerk]);fwrite(hFile, var);
				format(var, 32, "MiserPerk=%d\n",PlayerInfo[playerid][pMiserPerk]);fwrite(hFile, var);
				format(var, 32, "PainPerk=%d\n",PlayerInfo[playerid][pPainPerk]);fwrite(hFile, var);
				format(var, 32, "TraderPerk=%d\n",PlayerInfo[playerid][pTraderPerk]);fwrite(hFile, var);
				format(var, 32, "Tutorial=%d\n",PlayerInfo[playerid][pTut]);fwrite(hFile, var);
				format(var, 32, "Avisos=%d\n",PlayerInfo[playerid][pWarns]);fwrite(hFile, var);
				format(var, 32, "Married=%d\n",PlayerInfo[playerid][pMarried]);fwrite(hFile, var);
				format(var, 32, "MarriedTo=%s\n",PlayerInfo[playerid][pMarriedTo]);fwrite(hFile, var);
				format(var, 32, "Luta=%d\n",PlayerInfo[playerid][pLuta]);fwrite(hFile, var);
				format(var, 32, "Dorgado=%d\n",PlayerInfo[playerid][pDorgado]);fwrite(hFile, var);
				format(var, 32, "Dorgado2=%d\n",PlayerInfo[playerid][pDorgado]);fwrite(hFile, var);
				format(var, 32, "Doenca=%d\n",PlayerInfo[playerid][pDoenca]);fwrite(hFile, var);
				format(var, 32, "DiaLogin=%d\n",PlayerInfo[playerid][pLastDia]);fwrite(hFile, var);
            	format(var, 32, "MesLogin=%d\n",PlayerInfo[playerid][pLastMes]);fwrite(hFile, var);
            	format(var, 32, "AnoLogin=%d\n",PlayerInfo[playerid][pLastAno]);fwrite(hFile, var);
            	format(var, 32, "HoraLogin=%d\n",PlayerInfo[playerid][pLastHora]);fwrite(hFile, var);
            	format(var, 32, "MinutoLogin=%d\n",PlayerInfo[playerid][pLastMinuto]);fwrite(hFile, var);
				format(var, 32, "Creditos=%d\n",PlayerInfo[playerid][pCreditos]);fwrite(hFile, var);
				format(var, 32, "LU=%s\n",PlayerInfo[playerid][pLastLogin]);fwrite(hFile, var);
				GetPlayerWeaponData(playerid, 1, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
		    	GetPlayerWeaponData(playerid, 2, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
		    	GetPlayerWeaponData(playerid, 3, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
		    	GetPlayerWeaponData(playerid, 4, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
		    	GetPlayerWeaponData(playerid, 5, PlayerInfo[playerid][pGun5], PlayerInfo[playerid][pAmmo5]);
		    	GetPlayerWeaponData(playerid, 6, PlayerInfo[playerid][pGun6], PlayerInfo[playerid][pAmmo6]);
		    	GetPlayerWeaponData(playerid, 7, PlayerInfo[playerid][pGun7], PlayerInfo[playerid][pAmmo7]);
		    	GetPlayerWeaponData(playerid, 8, PlayerInfo[playerid][pGun8], PlayerInfo[playerid][pAmmo8]);
		    	GetPlayerWeaponData(playerid, 9, PlayerInfo[playerid][pGun9], PlayerInfo[playerid][pAmmo9]);
		    	GetPlayerWeaponData(playerid, 10, PlayerInfo[playerid][pGun10], PlayerInfo[playerid][pAmmo10]);
		    	GetPlayerWeaponData(playerid, 11, PlayerInfo[playerid][pGun11], PlayerInfo[playerid][pAmmo11]);
		    	GetPlayerWeaponData(playerid, 12, PlayerInfo[playerid][pGun12], PlayerInfo[playerid][pAmmo12]);
				format(var, 32, "Gun1=%d\n", PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
				format(var, 32, "Gun2=%d\n", PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
				format(var, 32, "Gun3=%d\n", PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
				format(var, 32, "Gun4=%d\n", PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
				format(var, 32, "Gun5=%d\n", PlayerInfo[playerid][pGun5]);fwrite(hFile, var);
				format(var, 32, "Gun6=%d\n", PlayerInfo[playerid][pGun6]);fwrite(hFile, var);
				format(var, 32, "Gun7=%d\n", PlayerInfo[playerid][pGun7]);fwrite(hFile, var);
				format(var, 32, "Gun8=%d\n", PlayerInfo[playerid][pGun8]);fwrite(hFile, var);
				format(var, 32, "Gun9=%d\n", PlayerInfo[playerid][pGun9]);fwrite(hFile, var);
				format(var, 32, "Gun10=%d\n", PlayerInfo[playerid][pGun10]);fwrite(hFile, var);
				format(var, 32, "Gun11=%d\n", PlayerInfo[playerid][pGun11]);fwrite(hFile, var);
				format(var, 32, "Gun12=%d\n", PlayerInfo[playerid][pGun12]);fwrite(hFile, var);
				format(var, 32, "Ammo1=%d\n", PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
				format(var, 32, "Ammo2=%d\n", PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
				format(var, 32, "Ammo3=%d\n", PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
				format(var, 32, "Ammo4=%d\n", PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
				format(var, 32, "Ammo5=%d\n", PlayerInfo[playerid][pAmmo5]);fwrite(hFile, var);
				format(var, 32, "Ammo6=%d\n", PlayerInfo[playerid][pAmmo6]);fwrite(hFile, var);
				format(var, 32, "Ammo7=%d\n", PlayerInfo[playerid][pAmmo7]);fwrite(hFile, var);
				format(var, 32, "Ammo8=%d\n", PlayerInfo[playerid][pAmmo8]);fwrite(hFile, var);
				format(var, 32, "Ammo9=%d\n", PlayerInfo[playerid][pAmmo9]);fwrite(hFile, var);
				format(var, 32, "Ammo10=%d\n", PlayerInfo[playerid][pAmmo10]);fwrite(hFile, var);
				format(var, 32, "Ammo11=%d\n", PlayerInfo[playerid][pAmmo11]);fwrite(hFile, var);
				format(var, 32, "Ammo12=%d\n", PlayerInfo[playerid][pAmmo12]);fwrite(hFile, var);
				format(var, 32, "Ban=%d\n",PlayerInfo[playerid][pBan]);fwrite(hFile, var);
				format(var, 32, "DiasBanTemp=%d\n", PlayerInfo[playerid][pDiaBanTemp]);fwrite(hFile, var);
				format(var, 32, "MesBanTemp=%d\n", PlayerInfo[playerid][pMesBanTemp]);fwrite(hFile, var);
				format(var, 32, "AnoBanTemp=%d\n",PlayerInfo[playerid][pAnoBanTemp]);fwrite(hFile, var);
				format(var, 32, "pPlantei=%d\n",PlayerInfo[playerid][pPlantei]);fwrite(hFile, var);
				fclose(hFile);
			}
		}
	}
	return true;
}
public OnPropUpdate()
{
	new idx;
	new File: file2;
	while (idx < sizeof(HouseInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hHealthx],
		HouseInfo[idx][hHealthy],
		HouseInfo[idx][hHealthz],
		HouseInfo[idx][hArmorrx],
		HouseInfo[idx][hArmorry],
		HouseInfo[idx][hArmorrz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hHel],
		HouseInfo[idx][hArm],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hLevel],
		HouseInfo[idx][hWorld]);

		HouseInfo[idx][hWorld] = idx;
		if(idx == 0)
		{
			file2 = fopen("BrasilGames/Casas.cfg", io_write);
		}
		else
		{
			file2 = fopen("BrasilGames/Casas.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%f|%f|%f|%d|%d|%d|%d|%d|%d\n",
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bMessage],
		BizzInfo[idx][bExtortion],
		BizzInfo[idx][bEntranceX],
		BizzInfo[idx][bEntranceY],
		BizzInfo[idx][bEntranceZ],
		BizzInfo[idx][bExitX],
		BizzInfo[idx][bExitY],
		BizzInfo[idx][bExitZ],
		BizzInfo[idx][bLevelNeeded],
		BizzInfo[idx][bBuyPrice],
		BizzInfo[idx][bEntranceCost],
		BizzInfo[idx][bTill],
		BizzInfo[idx][bLocked],
		BizzInfo[idx][bInterior]);
		//BizzInfo[idx][VirtualWorld]);
		if(idx == 0)
		{
			file2 = fopen("BrasilGames/Empresas.cfg", io_write);
		}
		else
		{
			file2 = fopen("BrasilGames/Empresas.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(SBizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d|%s|%s|%s|%f|%f|%f|%d|%d|%d|%d|%d\n",
		SBizzInfo[idx][sbOwned],
		SBizzInfo[idx][sbOwner],
		SBizzInfo[idx][sbMessage],
		SBizzInfo[idx][sbExtortion],
		SBizzInfo[idx][sbEntranceX],
		SBizzInfo[idx][sbEntranceY],
		SBizzInfo[idx][sbEntranceZ],
		SBizzInfo[idx][sbLevelNeeded],
		SBizzInfo[idx][sbBuyPrice],
		SBizzInfo[idx][sbEntranceCost],
		SBizzInfo[idx][sbTill],
		SBizzInfo[idx][sbLocked]);
		if(idx == 0)
		{
			file2 = fopen("BrasilGames/MiniEmpresas.cfg", io_write);
		}
		else
		{
			file2 = fopen("BrasilGames/MiniEmpresas.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return true;
}
public OnPropUpdate2()
{
    new idx;
	new File: file2;
    idx = carsonserver;
 	while (idx < sizeof(CarInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%d,%f,%f,%f,%f,%d,%d,%s,%s,%d,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		CarInfo[idx][cModel],
		CarInfo[idx][cLocationx],
		CarInfo[idx][cLocationy],
		CarInfo[idx][cLocationz],
		CarInfo[idx][cAngle],
		CarInfo[idx][cColorOne],
		CarInfo[idx][cColorTwo],
		CarInfo[idx][cOwner],
		CarInfo[idx][cDescription],
		CarInfo[idx][cValue],
		CarInfo[idx][cLicense],
		CarInfo[idx][cOwned],
		CarInfo[idx][cLock],
		CarInfo[idx][mod1],
		CarInfo[idx][mod2],
		CarInfo[idx][mod3],
		CarInfo[idx][mod4],
		CarInfo[idx][mod5],
		CarInfo[idx][mod6],
		CarInfo[idx][mod7],
		CarInfo[idx][mod8],
		CarInfo[idx][mod9],
		CarInfo[idx][mod10],
		CarInfo[idx][mod11],
		CarInfo[idx][mod12],
		CarInfo[idx][mod13],
		CarInfo[idx][mod14],
		CarInfo[idx][mod15],
		CarInfo[idx][mod16],
		CarInfo[idx][mod17],
		CarInfo[idx][paintjob],
		CarInfo[idx][cFreio],
		CarInfo[idx][VeiculoAprendido]);
		if(idx == carsonserver)
		{
			file2 = fopen("masini.cfg", io_write);
		}
		else
		{
			file2 = fopen("masini.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}
public IsAnOwnableCar(vehicleid)
{
 if(vehicleid >= carsonserver && vehicleid <= 1000) { return 1; }
	return 0;
}
public BroadCast(COLOR,const string[])
{
	SendClientMessageToAll(COLOR, string);
	return true;
}

public ABroadCast(COLOR,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pAdmin] >= level)
			{
				SendClientMessage(i, COLOR, string);
				printf("%s", string);
			}
		}
	}
	return true;
}
public HelperBroadCast(COLOR,const string[],level)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (PlayerInfo[i][pHelper] >= level)
			{
				SendClientMessage(i, COLOR, string);
				printf("%s", string);
			}
		}
	}
	return true;
}

public OOCNews(COLOR,const string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(!gNews[i])
		    {
				SendClientMessage(i, COLOR, string);
			}
		}
	}
}

public SendEmpregoMessage(Emprego, COLOR, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pEmprego] == Emprego)
		    {
				SendClientMessage(i, COLOR, string);
			}
		}
	}
}

public SendFamilyMessage(family, COLOR, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pMembro] == family || PlayerInfo[i][pLider] == family)
		    {
                if(!gFam[i])
                {
					SendClientMessage(i, COLOR, string);
				}
			}
		}
	}
}

public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimer("StopMusic", 5000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

public StopMusic()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

public PlayerFixRadio(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    SetTimer("PlayerFixRadio2", 1000, 0);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
		Fixr[playerid] = 1;
	}
}

public PlayerFixRadio2()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

//---------------------------<[ OnPlayerCommandText ]>--------------------------------------------------------
public OnPlayerCommandText(playerid, cmdtext[])
{

	if(ComandoTutorial[playerid] >= 1) return SendClientMessage(playerid, COLOR_RED, "Você só pode usar comandos depois do Tutorial !");
	if(RoubandoComando[playerid] >= 1) return SendClientMessage(playerid, COLOR_RED, "Você não pode usar comandos roubando !");
	new comando[126],
		//string[256],
		index,
		pname[MAX_PLAYER_NAME];
		comando = strtok(cmdtext, index);


    PlayerInactivity[playerid] = 0;
    new idx;
 	new string[256];
	new playerdinheiro;
	new playermoney;
	new playername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new plname[MAX_PLAYER_NAME];
	new animid;
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys;
	new idcar = GetPlayerVehicleID(playerid);
	cmd = strtok(cmdtext, idx);
	new vehid;
	vehid = GetPlayerVehicleID(playerid);
	//SpamProtection(playerid);
	if(strcmp(cmd,"/cancelarcarro",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) { return 1; }
			if(strcmp(x_job,"oferecido",true) == 0) { OwnableCarOffer[playerid] = 999; OwnableCarID[playerid] = 0; OwnableCarPrice[playerid] = 0; }
			else { return 1; }
			format(string, sizeof(string), "* Você cancelou: %s.", x_job);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}
		return 1;
	}

	if(strcmp(cmd,"/aceitarcarro",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_job[256];
			x_job = strtok(cmdtext, idx);
			if(!strlen(x_job)) { return 1; }
			if(strcmp(x_job,"oferecido",true) == 0)
			{
			    if(OwnableCarOffer[playerid] < 999)
			    {
			        if(OwnableCarID[playerid] == 0) { return 1; }
			        if(OwnableCarPrice[playerid] == 0 || OwnableCarPrice[playerid] > 1500001) { return 1; }

			        if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3]) { }
			        else if(OwnableCarID[playerid] == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4]) { }
			        else { SendClientMessage(playerid, COLOR_GREY, "  Oferta já não está disponível"); return 1; }
			        if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pVIP] == 0)
					{
							SendClientMessage(playerid, COLOR_GREY, "Apenas Jogadores Vip Premium Podem Adquirir 4 Carros !");
							RemovePlayerFromVehicleEx(playerid);
							return true;
					}
			        if(GetPlayerMoney(playerid) >= OwnableCarPrice[playerid])
			        {
						if(IsPlayerConnected(OwnableCarOffer[playerid]))
						{
						    GetPlayerName(OwnableCarOffer[playerid], giveplayer, sizeof(giveplayer));
						    GetPlayerName(playerid, sendername, sizeof(sendername));
						    if(PlayerInfo[playerid][pPcarkey] == -1)
							{
								if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = -1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  O vendedor do veículo precisa esta no seu carro !");
									return 1;
								}
								format(string, sizeof(string), "* Você comprou um carro por $%d de %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* O Player %s comprou seu carro $%d.",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	GivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	GivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 999);
							}
						    else if(PlayerInfo[playerid][pPcarkey2] == -1)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey2] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = -1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  O vendedor do veiculo precisa esta no seu carro !");
									return 1;
								}
								format(string, sizeof(string), "* Você comprou um carro por $%d de %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* O Player %s comprou seu carro $%d.",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	GivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	GivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 999);
							}
						    else if(PlayerInfo[playerid][pPcarkey3] == -1)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey3] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = -1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  O vendedor do veiculo precisa esta no seu carro !");
									return 1;
								}
								format(string, sizeof(string), "* Você comprou um carro por $%d de %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* O Player %s comprou seu carro $%d.",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	GivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	GivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 999);
							}
							else if(PlayerInfo[playerid][pPcarkey4] == -1)
							{
							    if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey2] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey3] = -1;
								}
								else if(GetPlayerVehicleID(OwnableCarOffer[playerid]) == PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4])
								{
									PlayerInfo[playerid][pPcarkey4] = PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4];
						    		PlayerInfo[OwnableCarOffer[playerid]][pPcarkey4] = -1;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "  O vendedor do veiculo precisa esta no seu carro !");
									return 1;
								}
								format(string, sizeof(string), "* Você comprou um carro por $%d de %s.",OwnableCarPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_WHITE, string);
								format(string, sizeof(string), "* O Player %s comprou seu carro $%d.",sendername,OwnableCarPrice[playerid]);
								SendClientMessage(OwnableCarOffer[playerid], COLOR_WHITE, string);
						    	RemovePlayerFromVehicle(OwnableCarOffer[playerid]);
						    	GivePlayerMoney(playerid, - OwnableCarPrice[playerid]);
						    	GivePlayerMoney(OwnableCarOffer[playerid], OwnableCarPrice[playerid]);
						    	strmid(CarInfo[OwnableCarID[playerid]][cOwner], sendername, 0, strlen(sendername), 999);
							}
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "  Você já tem 4 carros ! ");
						        return 1;
							}
							OnPropUpdate2();
							SavePlayerData(playerid);
							SavePlayerData(OwnableCarOffer[playerid]);
						    OwnableCarOffer[playerid] = -1;
							OwnableCarID[playerid] = 0;
							OwnableCarPrice[playerid] = 0;
							GameTextForPlayer(playerid, "~w~Parabens~n~Nao se esqueca do /v estacionar!", 5000, 3);
							SendClientMessage(playerid, COLOR_GRAD2, "Parabens pela sua nova aquisição!");
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /v para ver os comandos do veículo!");
							return 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Vendedor do carro está off-line !");
			        		return 1;
						}
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguém ofereceu serviço lhe qualquer carro !");
			        return 1;
			    }
			}
			else { return 1; }
		}
		return 1;
	}
	if (strcmp(cmd, "/vcarrosinativos", true) == 0)
	{
	   if (PlayerInfo[playerid][pAdmin] >= 1341) // se for o adm dono
	   {
	      tmp = strtok(cmdtext, idx); //copia o que vem dps do comando
	      if (!strlen(tmp))
	      {
	         return SendClientMessage(playerid, -1, "USE: /vendercarros dia/mês/ano");
	      }
	      new data[3][125];
	      split(tmp, data, '/');
	      if ((strval(data[0]) > 31) || (strval(data[1]) > 12))
	      {
	         return SendClientMessage(playerid, -1, "Error: Data inválida, use uma data correta");
	      }
	      //chama a função que ira vender os carros apartir de uma data
	      VendCarInat(strval(data[0]), strval(data[1]), strval(data[2]));
	   }
	   else
	   {
	      return SendClientMessage(playerid, -1, "Você não tem permissão para usar este comando.");
	   }
	}
    if(!strcmp(cmdtext, "/avendercarro", true))
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= DONO)
    {
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
			return 1;
		}
	            new Float:x,Float:y,Float:z;
         		new Float:a;
         		format(string, sizeof(string), "carkeys/%s.ini", CarInfo[vehid][cOwner]);
         		if(dini_Int(string, "CarKey") == vehid)
         		{
         		    dini_IntSet(string, "CarKey", -1);
         		}
         		else if(dini_Int(string, "CarKey2") == vehid)
         		{
         		    dini_IntSet(string, "CarKey2", -1);
         		}
         		else if(dini_Int(string, "CarKey3") == vehid)
         		{
         		    dini_IntSet(string, "CarKey3", -1);
         		}
		        else if(dini_Int(string, "CarKey4") == vehid)
         		{
         		    dini_IntSet(string, "CarKey4", -1);
         		}
         		CarInfo[vehid][cOwned] = 0;
         		strmid(CarInfo[vehid][cOwner], "Dealership", 0, strlen("Dealership"), 999);
         		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
         		GameTextForPlayer(playerid, "~w~Voce vendeu o veiculo!", 10000, 3);
         		GetVehiclePos(vehid, x, y, z);
         		GetVehicleZAngle(vehid, a);
         		CarInfo[vehid][cLocationx] = x;
         		CarInfo[vehid][cLocationy] = y;
         		CarInfo[vehid][cLocationz] = z;
         		CarInfo[vehid][cAngle] = a;
         		CarInfo[vehid][VeiculoAprendido] = 0;
				TaCongelado[playerid] = false;
         		RemovePlayerFromVehicle(playerid);
         		TogglePlayerControllable(playerid, 1);
         		format(CarInfo[vehid][cLicense], 32 ,"ÀVenda");
	            SetVehicleNumberPlate(vehid,CarInfo[vehid][cLicense]);
         		OnPropUpdate2(); SavePlayerData(playerid);
         		DestroyVehicle(vehid);
				new thiscar = CreateVehicle(CarInfo[vehid][cModel],CarInfo[vehid][cLocationx],CarInfo[vehid][cLocationy],CarInfo[vehid][cLocationz]+1.0,CarInfo[vehid][cAngle],CarInfo[vehid][cColorOne],CarInfo[vehid][cColorTwo],60000);
				LoadComponents(thiscar);
                if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
			    {
			        if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
			        {
		    			DestroyObject(SomVeiculoObjeto[0][GetPlayerVehicleID(playerid)]);
	    				SomPos[0][GetPlayerVehicleID(playerid)][0] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][1] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][2] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][3] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][4] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][5] = 0;
   					}
            		else
					{
			    		for(new i; i < 3;i++)
						{
			        		DestroyObject(SomVeiculoObjeto[i][GetPlayerVehicleID(playerid)]);
		    				SomPos[i][GetPlayerVehicleID(playerid)][0] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][1] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][2] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][3] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][4] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][5] = 0;
						    }
						}
   					}
			    SomInstalado[GetPlayerVehicleID(playerid)] = false;
	            return 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está autorizado a usar esse comando !");
	            return 1;
	        }
	    }
	    return 1;
	}
	if(strcmp(cmd, "/asetchave", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /asetchave [playerid/ParteDoNome] [carkey] [quantidade]");
				SendClientMessage(playerid, COLOR_GRAD4, "|1 CarKey |2 CarKey2 |3 CarKey3 |4 CarKey4");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
            if(PlayerInfo[playerid][pAdmin] >= MASTER)
    {
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
			return 1;
		}
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "USE: /asetchave [playerid/ParteDoNome] [carkey] [quantidade]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 CarKey |2 CarKey2 |3 CarKey3 |4 CarKey4");
						return 1;
					}
					new stat;
					stat = strval(tmp);
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "USE: /asetchave [playerid/ParteDoNome] [carkey] [quantidade]");
						SendClientMessage(playerid, COLOR_GRAD4, "|1 CarKey |2 CarKey2 |3 CarKey3 |4 CarKey4");
						return 1;
					}
					new amount;
					amount = strval(tmp);
					switch (stat)
					{
						case 1:
						{
								PlayerInfo[giveplayerid][pPcarkey] = amount;
								format(string, sizeof(string), "   A chave do carro foi definida para o jogador %d", amount);
								SavePlayerData(playerid);
						}
						case 2:
						{
								PlayerInfo[giveplayerid][pPcarkey2] = amount;
								format(string, sizeof(string), "   A chave do carro foi definida para o jogador %d", amount);
								SavePlayerData(playerid);
						}
						case 3:
						{
								PlayerInfo[giveplayerid][pPcarkey3] = amount;
								format(string, sizeof(string), "   A chave do carro foi definida para o jogador %d", amount);
								SavePlayerData(playerid);
						}
						case 4:
						{
								PlayerInfo[giveplayerid][pPcarkey4] = amount;
								format(string, sizeof(string), "   A chave do carro foi definida para o jogador %d", amount);
								SavePlayerData(playerid);
						}
						default:
						{
								format(string, sizeof(string), "   Código da chave do carro inválido.", amount);
						}
					}
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
			}
			else
			{
                SendClientMessage(playerid, COLOR_GRAD1, "   Apenas os administradores podem usar este comando!");
                return 1;
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/removertuning", true) == 0)
	{
	    if(IsPlayerInVehicle(playerid, vehid))
	    {
	        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4])
	        {
                ShowPlayerDialog(playerid, DIALOGID+6, DIALOG_STYLE_LIST, "Lista Tuning", "Aerofólio\nPara-Choque Diantero\nPara-Choque Traseiro\nSpoiler Lateral\nRoof Scoop\nEscapamentos\nNitro\nSuspensão Hidráulica\nRodas\nPaintjob\nRemover Todos os Componentes","Confirma", "Cancela");
			}
			else
			{
                SendClientMessage(playerid, COLOR_WHITE, "Este carro não te pertence.");
                return 1;
	        }
	    }
	    else
	    {
            SendClientMessage(playerid, COLOR_WHITE, "Você tem que estar no veiculo para remover o tunnig!!");
            return 1;
	    }
    }
	if(strcmp(cmd, "/admremovertuning", true) == 0) {
	if(PlayerInfo[playerid][pAdmin] >= 1337) {
 if(IsPlayerInVehicle(playerid, vehid))
    {
	if(CarMods(vehid)) 	{
       new Float:XX,Float:YY,Float:ZZ; new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
       GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
       GetVehicleHealth(vehid, CarHP); OldCarHP = CarHP;
	   GetVehiclePos(vehid,XX,YY,ZZ); CarInfo[vehid][paintjob] = -1; CarInfo[vehid][mod1] = 0; CarInfo[vehid][mod2] = 0;
	   CarInfo[vehid][mod3] = 0; CarInfo[vehid][mod4] = 0; CarInfo[vehid][mod5] = 0; CarInfo[vehid][mod6] = 0; CarInfo[vehid][mod7] = 0;
	   CarInfo[vehid][mod8] = 0; CarInfo[vehid][mod9] = 0; CarInfo[vehid][mod10] = 0; CarInfo[vehid][mod11] = 0; CarInfo[vehid][mod12] = 0;
	   CarInfo[vehid][mod13] = 0; CarInfo[vehid][mod14] = 0; CarInfo[vehid][mod15] = 0; CarInfo[vehid][mod16] = 0; CarInfo[vehid][mod17] = 0;
       SetVehicleToRespawn(vehid); SetVehiclePos(vehid,XX,YY,ZZ);
       PutPlayerInVehicle(playerid,vehid,0); SetVehicleHealth(vehid, OldCarHP);
	   UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	   format(string, sizeof(string), "Todos os componentes foi removido do veículo ID[%d]", vehid);
	   SendClientMessage(playerid, COLOR_BLUE, string);
       LoadComponents(vehid); OnPropUpdate2(); SavePlayerData(playerid);
       if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
			    {
			        if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
			        {
		    			DestroyObject(SomVeiculoObjeto[0][GetPlayerVehicleID(playerid)]);
	    				SomPos[0][GetPlayerVehicleID(playerid)][0] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][1] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][2] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][3] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][4] = 0;
						SomPos[0][GetPlayerVehicleID(playerid)][5] = 0;
   					}
            		else
					{
			    		for(new i; i < 3;i++)
						{
			        		DestroyObject(SomVeiculoObjeto[i][GetPlayerVehicleID(playerid)]);
		    				SomPos[i][GetPlayerVehicleID(playerid)][0] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][1] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][2] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][3] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][4] = 0;
							SomPos[i][GetPlayerVehicleID(playerid)][5] = 0;
					    	}
					    }
   					}
			        SomInstalado[GetPlayerVehicleID(playerid)] = false;
	   }
       else { SendClientMessage(playerid, COLOR_WHITE,"Esse veículo não tem todos componentes.");}}
	   else { SendClientMessage(playerid, COLOR_WHITE,"Você não está em um veículo.");}}
	   else { SendClientMessage(playerid, COLOR_WHITE,"Você não tem permissão para usar esse comando!");}
	   return 1;
	}
	if (strcmp(cmd, "/meuscarros", true) == 0)
	{
 		if(IsPlayerConnected(playerid))
	    {
            new carkey = PlayerInfo[playerid][pPcarkey];
		    new carkey2 = PlayerInfo[playerid][pPcarkey2];
		    new carkey3 = PlayerInfo[playerid][pPcarkey3];
		    new carkey4 = PlayerInfo[playerid][pPcarkey4];
            if (PlayerInfo[playerid][pPcarkey] != -1)
		    {
		        format(string, sizeof(string), "1| VeiculoModelo:[%s] VehValor:[%d] VehCor1:[%d] VehCor2:[%d] VehTrancado:[%d]", CarInfo[carkey][cDescription], CarInfo[carkey][cValue], CarInfo[carkey][cColorOne], CarInfo[carkey][cColorTwo], CarInfo[carkey][cLock]);
		        SendClientMessage(playerid, COLOR_GRAD5,string);
		    }
		    if (PlayerInfo[playerid][pPcarkey2] != -1)
		    {
		        format(string, sizeof(string), "2| VeiculoModelo:[%s] VehValor:[%d] VehCor1:[%d] VehCor2:[%d] VehTrancado:[%d]", CarInfo[carkey2][cDescription], CarInfo[carkey2][cValue], CarInfo[carkey2][cColorOne], CarInfo[carkey2][cColorTwo], CarInfo[carkey2][cLock]);
		        SendClientMessage(playerid, COLOR_GRAD5,string);
		    }
	    	if (PlayerInfo[playerid][pPcarkey3] != -1)
	    	{
		        format(string, sizeof(string), "3| VeiculoModelo:[%s] VehValor:[%d] VehCor1:[%d] VehCor2:[%d] VehTrancado:[%d]", CarInfo[carkey3][cDescription], CarInfo[carkey3][cValue], CarInfo[carkey3][cColorOne], CarInfo[carkey3][cColorTwo], CarInfo[carkey3][cLock]);
		        SendClientMessage(playerid, COLOR_GRAD5,string);
	    	}
	    	if (PlayerInfo[playerid][pPcarkey4] != -1)
	    	{
		        format(string, sizeof(string), "4| VeiculoModelo:[%s] VehValor:[%d] VehCor1:[%d] VehCor2:[%d] VehTrancado:[%d]", CarInfo[carkey4][cDescription], CarInfo[carkey4][cValue], CarInfo[carkey4][cColorOne], CarInfo[carkey4][cColorTwo], CarInfo[carkey4][cLock]);
		        SendClientMessage(playerid, COLOR_GRAD5,string);
	    	}
		}
		return 1;
	}
    if (strcmp("/phit", cmdtext, true, 10) == 0) // Coloque o Comando que irá Abrir o Portão ( Será usado depois Também )
    {
    if ((IsAHit(playerid)) && PlayerToPoint(7.0, playerid, 958.5,-1559.59998,15.3)) // Troque X,Y,Z Pelas Coordenadas do Portão Fechado ! Troque 7.0 Pela Distancia que o Comando poderá ser Usado a Partir das Cood que você Colocou !
        {
            MoveObject(Gate3,958.5,-1559.59998,19.2,3.0); // Troque X,Y,Z Pelas Coordenadas do Portão Aberto ! 3.0 = Velocidade para ele se Mecher !
            SetTimerEx("CloseGate3", 5000, false, "i", Gate3); // Troque 10000 pelo que Tempo que vai Levar para o Portão Fechar ( Lembrando que o TEMPO é em MS, ou seja, 10000 = 10 Segundos )!
            GameTextForPlayer(playerid, "Portao Hitmans Aberto", 10000, 3); // Coloque aqui a Mensagem que quer que Mande para o Player, EX: O Gate vai Facgar em 10 Segundos !
            return 1;
        }
    }
    	if (strcmp("/pballas", cmdtext, true, 10) == 0) // Coloque o Comando que irá Abrir o Portão ( Será usado depois Também )
    {
    if ((IsABallas(playerid)) && PlayerToPoint(7.0, playerid, 1141.40002,-1206.40002,20.8)) // Troque X,Y,Z Pelas Coordenadas do Portão Fechado ! Troque 7.0 Pela Distancia que o Comando poderá ser Usado a Partir das Cood que você Colocou !
        {
            MoveObject(Gate,1141.40002,-1206.30005,26.3,3.0); // Troque X,Y,Z Pelas Coordenadas do Portão Aberto ! 3.0 = Velocidade para ele se Mecher !
            SetTimerEx("CloseGate", 5000, false, "i", Gate); // Troque 10000 pelo que Tempo que vai Levar para o Portão Fechar ( Lembrando que o TEMPO é em MS, ou seja, 10000 = 10 Segundos )!
            GameTextForPlayer(playerid, "Portao Ballas Aberto", 10000, 3); // Coloque aqui a Mensagem que quer que Mande para o Player, EX: O Gate vai Facgar em 10 Segundos !
            return 1;
        }
    }
    if (strcmp("/ptriad", cmdtext, true, 10) == 0) // Coloque o Comando que irá Abrir o Portão ( Será usado depois Também )
    {
    if ((IsATriad(playerid)) && PlayerToPoint(7.0, playerid, 1621.30005,-1862.09998,15.3)) // Troque X,Y,Z Pelas Coordenadas do Portão Fechado ! Troque 7.0 Pela Distancia que o Comando poderá ser Usado a Partir das Cood que você Colocou !
        {
            MoveObject(Gate2,1621.30005,-1862.09998,19.4,3.0); // Troque X,Y,Z Pelas Coordenadas do Portão Aberto ! 3.0 = Velocidade para ele se Mecher !
            SetTimerEx("CloseGate2", 5000, false, "i", Gate2); // Troque 10000 pelo que Tempo que vai Levar para o Portão Fechar ( Lembrando que o TEMPO é em MS, ou seja, 10000 = 10 Segundos )!
            GameTextForPlayer(playerid, "Portao Triads Aberto", 10000, 3); // Coloque aqui a Mensagem que quer que Mande para o Player, EX: O Gate vai Facgar em 10 Segundos !
            return 1;
        }
    }
//Casa Mad Dog
if(strcmp(cmd, "/p1", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1245.4347,-766.2789,92.1860)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
    if (PlayerInfo[playerid][pPHousekey] == 1 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        MoveObject(PortaoCasaMadDog, 1245.5508, -767.3086, 88.2596,3,0.0,0.0,0.0);
        SetTimerEx("PortaoCMadDog", 5000, false, "i", GateCasaMadDog);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
//
if(strcmp(cmd, "/p230", true) == 0)
{
	
	if(PlayerToPoint(10.0, playerid, 1028.1202,-1730.3079,13.5469))
	{
    GetPlayerName(playerid, playername, sizeof(playername));
    if (PlayerInfo[playerid][pPHousekey] == 230 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        MoveDynamicObject(CasaMVIP4p, 1027.4020, -1725.6104, 13.4879, 0.1, 0.0000, 180.0000, 171.3648);
        MoveDynamicObject(CasaMVIP4p2, 1027.5145, -1734.7024, 13.4857, 0.1, 0.0000, 180.0000, 190.1787);
        SetTimerEx("PortaoCMansao4", 5000, false, "i", GateCasaMVIP4);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
    }
    if(PlayerToPoint(10.0, playerid, 1027.8131,-1763.9877,13.5469))
	{
    GetPlayerName(playerid, playername, sizeof(playername));
    if (PlayerInfo[playerid][pPHousekey] == 230 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        MoveDynamicObject(CasaMVIP4p3, 1027.2101, -1759.4048, 13.4879, 0.1, 0.0000, 180.0000, 173.7917);
        MoveDynamicObject(CasaMVIP4p4, 1027.0420, -1768.5371, 13.4857, 0.1, 0.0000, 180.0000, 180.5011);
        SetTimerEx("PortaoC2Mansao4", 5000, false, "i", GateCasaMVIP4);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
//Casas Mansão perto da praia
if(strcmp(cmd, "/p227", true) == 0)
{
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PlayerToPoint(8.0, playerid, 927.1511,-1611.2917,13.5469))
	{
       if (PlayerInfo[playerid][pPHousekey] == 227 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
       {
        MoveDynamicObject(CasaMVIP1, 927.4365, -1615.6812, 13.5657,  0.1, 0.0000, 180.0000, 357.2552);
        MoveDynamicObject(CasaMVIP1p, 927.5252, -1606.5366, 13.5679, 0.1, 0.0000, 180.0000, 358.1987);
        SetTimerEx("PortaoMVIP1", 5000, false, "i", GateCasaMVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
       }
       return true;
	}
	else if(PlayerToPoint(3.0, playerid, 927.0744,-1596.0996,13.5469))
	{
     if (PlayerInfo[playerid][pPHousekey] == 227 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
       {
		if(PortaoM1Portaop == 0)
		{
           MoveDynamicObject(CasaMVIP1pp, 927.4511, -1594.3092, 13.7805,  1.0, 0.0000, 0.0000, 90.4498);
           SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
           PortaoM1Portaop = 1;
           return true;
        }
        if(PortaoM1Portaop == 1)
        {
           MoveDynamicObject(CasaMVIP1pp, 927.4549, -1596.0452, 13.7805,  1.0, 0.0000, 0.0000, 90.4498);
           SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
           PortaoM1Portaop = 0;
		   return true;
         }
	   }
	}

    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
if(strcmp(cmd, "/p227g", true) == 0)
{
   if(PlayerToPoint(5.0, playerid, 936.4185,-1610.5184,13.5212))
    {
	GetPlayerName(playerid, playername, sizeof(playername));
    if(PortaoM1Portaog == 0)
    {
       if(PlayerInfo[playerid][pPHousekey] == 227 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
       {
        PortaoM1Portaog = 1;
        MoveDynamicObject(CasaMVIP1g, 936.8027, -1610.5074, 15.8699,1.0,0.0000, 89.0000, 0.0000);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Garagem aberta!");
    }
 }
 else if(PortaoM1Portaog == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 227 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveDynamicObject(CasaMVIP1g, 936.8027, -1610.5074, 14.1446, 1.0, 0.0000, 0.0000, 0.0000);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Garagem fecheada!");
        PortaoM1Portaog = 0;
    }
   }
 }
 if(PlayerToPoint(5.0, playerid, 936.4476,-1619.1097,13.5212))
    {
	GetPlayerName(playerid, playername, sizeof(playername));
    if(PortaoM1Portaog1 == 0)
    {
       if(PlayerInfo[playerid][pPHousekey] == 227 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
       {
        PortaoM1Portaog1 = 1;
        MoveDynamicObject(CasaMVIP1g2, 936.8260, -1617.4591, 15.9075,1.0,0.0000, 89.0000, 0.0000);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Garagem aberta!");
    }
 }
 else if(PortaoM1Portaog1 == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 227 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveDynamicObject(CasaMVIP1g2, 936.8260, -1617.4591, 14.1446, 1.0, 0.0000, 0.0000, 0.0000);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Garagem fecheada!");
        PortaoM1Portaog1 = 0;
    }
   }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
if(strcmp(cmd, "/p231", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1201.8534,-1864.4059,13.5496)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
    if(CasaVIP1Portao == 0)
    {
      if(PlayerInfo[playerid][pPHousekey] == 231 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
      {
        CasaVIP1Portao = 1;
        MoveObject(CasaVIP1, 1202.0543, -1865.0961, 14.9045,1.0,0.0,91.0000, 270.0000);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
 }
 else if(CasaVIP1Portao == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 231 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(CasaVIP1, 1202.0939, -1865.5991, 13.7862, 1.0, 0.0000, 0.0000, 270.0000);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        CasaVIP1Portao = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}

if(strcmp(cmd, "/p232", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1170.9745,-1865.0005,13.5496)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
  if(CasaVIP2Portao == 0)
  {
    if (PlayerInfo[playerid][pPHousekey] == 232 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        CasaVIP2Portao = 1;
        MoveObject(CasaVIP2, 1171.2732, -1865.4771, 14.8982,1.0,0.0,91.0000, 270.0000);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
 }
  else if(CasaVIP2Portao == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 232 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(CasaVIP2, 1171.2732, -1865.4771, 13.7692, 1.0, 0.0000, 0.0000, 270.0000);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        CasaVIP2Portao = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}

if(strcmp(cmd, "/p233", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1139.8862,-1865.1259,13.5696)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
  if(CasaVIP3Portao == 0)
  {
    if (PlayerInfo[playerid][pPHousekey] == 233 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        CasaVIP3Portao = 1;
        MoveObject(CasaVIP3, 1140.4081, -1865.6025, 14.9129,1.0,0.0,91.0000, 269.8990);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
 }
  else if(CasaVIP3Portao == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 233 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(CasaVIP3, 1140.4081, -1865.6025, 13.8009, 1.0, 0.0000, 0.0000, 270.0000);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        CasaVIP3Portao = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}

if(strcmp(cmd, "/p234", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1108.9038,-1864.9777,13.5696)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
  if(CasaVIP4Portao == 0)
  {
    if (PlayerInfo[playerid][pPHousekey] == 234 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        CasaVIP4Portao = 1;
        MoveObject(CasaVIP4, 1109.5100, -1865.4539, 14.9182,1.0,0.0,91.0000, 269.8990);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
 }
  else if(CasaVIP4Portao == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 234 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(CasaVIP4, 1109.5100, -1865.4539, 13.8081, 1.0, 0.0000, 0.0000, 269.8990);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        CasaVIP4Portao = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
if(strcmp(cmd, "/p235", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1077.8983,-1864.8257,13.5696)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
  if(CasaVIP5Portao == 0)
  {
    if (PlayerInfo[playerid][pPHousekey] == 235 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        CasaVIP5Portao = 1;
        MoveObject(CasaVIP5, 1078.5649, -1865.3242, 14.9234,1.0,0.0,91.0000, 269.8990);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
 }
  else if(CasaVIP5Portao == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 235 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(CasaVIP5, 1078.5649, -1865.3242, 13.8083, 1.0, 0.0000, 0.0000, 269.8990);//GateClosed
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        CasaVIP5Portao = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
if(strcmp(cmd, "/p30", true) == 0) 
{ 
    GetPlayerName(playerid, playername, sizeof(playername)); 
    if (PlayerInfo[playerid][pPHousekey] == 30 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) 
    {
        MoveObject(Gate5, 282.10001,-1320.09998,59.9,3.0); 
        SetTimerEx("CloseGate5", 5000, false, "i", Gate5); 
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto"); 
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa."); 
    return 1;   
}
if(strcmp(cmd, "/p229", true) == 0)
{
 	if(!PlayerToPoint(14.0, playerid, 927.1538,-1717.1125,13.5469)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PortaoMPMansao229 == 0)
    {
      if (PlayerInfo[playerid][pPHousekey] == 229 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
      {
        PortaoMPMansao229 = 1;
        MoveObject(PMansao229, 927.5349, -1712.7682, 13.4679, 0.1, 0.0000, 180.0000, 1.0052);
        MoveObject(PMansao229p2, 927.4742, -1721.9093, 13.4857, 0.1,0.0000, 180.0000, 357.8010);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
     }
 }
  else if(PortaoMPMansao229 == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 229 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(PMansao229, 927.5349, -1712.7682, 13.4679,0.1, 0.0000, 180.0000, 269.7149);
        MoveObject(PMansao229p2, 927.4742, -1721.9093, 13.4857, 0.1, 0.0000, 180.0000, 89.6070);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        PortaoMPMansao229 = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
if(strcmp(cmd, "/p228", true) == 0)
{
 	if(!PlayerToPoint(14.0, playerid, 927.0973,-1634.1132,13.5469)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
    if(PortaoMPMansao228 == 0)
    {
      if (PlayerInfo[playerid][pPHousekey] == 228 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
      {
        PortaoMPMansao228 = 1;
        MoveObject(PMansao228, 927.5529, -1629.5178, 13.4679,0.1, 0.0000, 180.0000, 0.1495);
        MoveObject(PMansao228p2, 927.5292, -1638.6429, 13.4857, 0.1, 0.0000, 180.0000, 0.2558);
        //SetTimerEx("PortaoCasaVIP1", 10000, false, "i", GeteCasaVIP1);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
     }
 }
  else if(PortaoMPMansao228 == 1)
  {
	if (PlayerInfo[playerid][pPHousekey] == 228 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
	{
        MoveObject(PMansao228, 927.5529, -1629.5178, 13.4679,1.0, 0.0000, 180.0000, 269.7149);
        MoveObject(PMansao228p2, 927.5292, -1638.6429, 13.4857, 1.0, 0.0000, 180.0000, 89.6070);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
        PortaoMPMansao228 = 0;
    }
 }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
if(strcmp(cmd, "/p157", true) == 0)
{
	if(!PlayerToPoint(14.0, playerid, 1259.1371,-1273.4330,13.5512)) {
	return true;
	}
    GetPlayerName(playerid, playername, sizeof(playername));
    if (PlayerInfo[playerid][pPHousekey] == 157 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0)
    {
        MoveObject(PortaoCHosp, 1265.1359, -1270.4331, 14.0361,3,0.0,0.0,1.1315);
        SetTimerEx("PortaoCasaHosp", 5000, false, "i", GateCasaHosp);
        SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
    }
    else SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
    return 1;
}
//Portão Casa 27
if(strcmp(cmd, "/p27", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 27 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
		{
			MoveObject(Gate6, 263.89999,-1333.30005,60.4,3.0);
			SetTimerEx("CloseGate6", 5000, false, "i", Gate6);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			return 1;
	    }
}
//Portão Casa 117
if(strcmp(cmd, "/p117", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 217 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
		{
			MoveObject(Gate7, 637.90002,-1110.30005,47.5,3.0);
			SetTimerEx("CloseGate7", 5000, false, "i", Gate7);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			return 1;
	    }
}
//Portão Casa 98
if(strcmp(cmd, "/p98", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 98 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
		{
			MoveObject(Gate8, 211.2,-1350.5,46.9,3.0);
			SetTimerEx("CloseGate8", 5000, false, "i", Gate8);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			return 1;
	    }
}
//Portão Casa 33
if(strcmp(cmd, "/p33", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 33 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
		{
			MoveObject(Gate9, 345.20001,-1193.69995,72.8,3.0);
			SetTimerEx("CloseGate9", 5000, false, "i", Gate9);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			return 1;
	    }
}
//Portão Casa 24
if(strcmp(cmd, "/p24", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 24 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
		{
			MoveObject(Gate10, 261.39999,-1231.80005,68.5,3.0);
			SetTimerEx("CloseGate10", 5000, false, "i", Gate10);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			return 1;
	    }
}
	if(!strcmp(cmdtext, "/viafacil", true))
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2, 60.1402, -1533.1696, 5.2082))
		{
			//new string[128];
		 	format(string, 128, "Plano 1 - 10 Pass	R$ 1.000,00\nPlano 2 - 20 Pass	R$ 1.900,00\nPlano 3 - 30 Pass	R$ 2.800,00\nPlano 4 - 50 Pass	R$ 5.000,00\nPlano 5 - 100 Pass	R$ 9.000,00");
			ShowPlayerDialog(playerid, 9998, DIALOG_STYLE_LIST, "Plano - Via Fácil", string, "Comprar", "Fechar");
		}
		else SendClientMessage(playerid, 0xFF0000FF, "ERRO - Você não está no pedágio.");
		return 1;
	}
	
	
	if((strcmp(cmd, "/atualizar3dtext", true)==0 || strcmp(cmd, "/a3d", true) ==0) && PlayerInfo[playerid][pAdmin] == DONO)
	{
		Atualizar3Dtexts();
		return true;
	}
	
	
	if(!strcmp("/resetarflood", comando, true))
	{
		// Não é Admin Rcon
		if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, ColorFlood, "[Anti-Flood] Você não é Admin RCON.");

	    // New (Resposta)
	    new resposta[MAX_PLAYER_NAME];
		resposta = strtok(cmdtext, index);

	    // Sem Resposta
	    if(!strlen(resposta)) return SendClientMessage(playerid, ColorFlood, "[Anti-Flood] /ResetarFlood [PlayerID/NOME]");

	    // Definir Resposta Como Jogador
	    new player = ReturnUser(resposta);

	    // sizeof Não Conectado
	    if(!IsPlayerConnected(playerid)) return SendClientMessage(playerid, ColorFlood, "[Anti-Flood] Jogador Não Conectado.");

	    // Funções Do Player
	    GetPlayerName(playerid, pname, sizeof(pname));
	    format(string, sizeof(string), "[Anti-Flood] {FFFF00}%s{24B1DB} resetou o seu Flood.", pname);
	    SendClientMessage(player, ColorFlood, string);
	    FloodAlert[player] = 0;

	    // Funções Do PlayerID
	    GetPlayerName(player, pname, sizeof(pname));
	    format(string, sizeof(string), "[Anti-Flood] Você resetou o Flood de {FFFF00}%s{24B1DB}.", pname);
	    SendClientMessage(playerid, ColorFlood, string);
	    return 1;
	}

	  if(strcmp(cmd, "/reportar", true) == 0)
    {
        new areport[256];
        tmp = strtok(cmdtext, idx);
        new otherplayer = strval(tmp);
        if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_RED, "USE: /reportar [id] [motivo]"); 
		giveplayerid = strval(tmp);
        new length = strlen(cmdtext);
        while ((idx < length) && (cmdtext[idx] <= ' '))
        {
        idx++;
        }
        new offset = idx;
        new result[64];
        while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
        {
        result[idx - offset] = cmdtext[idx];
        idx++;
        }
		if(EnviouReport[playerid] == 1)
		{
		SendClientMessage(playerid,0x808080C8,"Você já enviou uma denuncia! Aguarde 30 segundos para enviar outro!");
		return 1;
		} 
        result[idx - offset] = EOS;
        if(!strlen(result)) return SendClientMessage(playerid, COLOR_RED, "USE: /reportar [id] [motivo]");
        if(!IsPlayerConnected(otherplayer)) return SendClientMessage(playerid, COLOR_WHITE, "[ERRO] Jogador indisponível.");
        {
        SendClientMessage(playerid, COLOR_RED, "[AVISO] Seu report foi enviado para a Administração.");  
		EnviouReport[playerid] = 1; 
		timerreport[playerid] = SetTimerEx("TempoReport", 30000, 0, "i", playerid);
        } 
        format(areport,sizeof(areport),"[%d]%s Reportou %s[%d] - Motivo: {FFFF00}[%s]", playerid, PlayerName(playerid), PlayerName(giveplayerid), otherplayer, result);
        for(new i=0;i<MAX_PLAYERS;i++)
        {
            if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] >= 1)
            {
            SendClientMessage(i,COLOR_LIGHTBLUE,areport);
            }
        }
        return 1;
    }
    if(strcmp(cmd, "/relatorio", true) == 0 || strcmp(cmd, "/relatorio", true) == 0)
	 {
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não está logado!");
	            return true;
	        }
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE , "USE: /relatorio [texto]");
				return true;
			}
			if(EnviouRelatorio[playerid] == 1)
			{
			SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para nos enviar outro relatório."); 
			SendClientMessage(playerid,0x808080C8,"Sempre inclua o assunto do seu relatorio para um melhor atendimento.");
			return 1;
			}
			if(PlayerInfo[playerid][pVIP] == 0)
            {
				format(string, sizeof(string), "Relatorio VIP de %s - ID[%d]: %s", sendername, playerid, (result));
                ABroadCast(0x33CCFFAA,string,1); 
				EnviouRelatorio[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE , "Seu relatorio foi enviado aos admins.");
				timerrelatorio[playerid] = SetTimerEx("TempoRelatorio", 60000, 0, "i", playerid);
			}
			else if(PlayerInfo[playerid][pVIP] == 1)
            {
                format(string, sizeof(string), "Relatorio S-VIP de %s - ID[%d]: %s", sendername, playerid, (result));
                ABroadCast(COLOR_LIGHTBLUE,string,1);
                EnviouRelatorio[playerid] = 1;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu relatorio foi enviado aos admins.");
				timerrelatorio[playerid] = SetTimerEx("TempoRelatorio", 60000, 0, "i", playerid);
            }
		}
	    return true;

	}
	if((strcmp(cmd, "/deletarconta", true)==0 || strcmp(cmd, "/dc", true) ==0) && PlayerInfo[playerid][pAdmin] == DONO)
	{
	    new file[64];
	    tmp = strtok(cmdtext, idx);
     	if(!strlen(tmp))  return SendClientMessage(playerid, COLOR_GRAD2, "USE: /deletarconta [Nick]");
     	if (PlayerInfo[playerid][pAdmin] != DONO)
		{
     		SendClientMessage(playerid, COLOR_GREY,"Você não tem permissão para usar esse comando!");
     		return true;
		}
        format(file,sizeof(file),"Contas/%s.ini",tmp);
	    if(!dini_Exists(file))
		{
			SendClientMessage(playerid, COLOR_WHITE, "[ERROR] Esse nome não está regristrado em nosso servidor");
		    return true;
		}
		getdate(v[0], v[1], v[2]);
		gettime(v[3], v[4], v[5]);
		format(string, 128, "[%d/%d/%d] [%d:%d:%d] %s Apagou a conta: %s", v[2], v[1], v[0], v[3], v[4], v[5] , PlayerName(playerid), tmp);
		AComandosLog(string);
		format(string, 128, "%s.bak", file);
     	DINI_fcopytextfile(file, string);
     	fremove(file);
     	format(string, sizeof(string), "* A conta do jogador(a) %s foi deletada com sucesso!", tmp);
     	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
     	return true;
	}
	if(strcmp(cmd,"/mudarnick",true)==0)
    {
		if(IsPlayerConnected(playerid))
	    {
	     	if(MudarNickAceito[playerid] == 0)
	     	{
				SendClientMessage(playerid, COLOR_GRAD1, "Você precisa pedir permissão para um admin mudar seu nick, use /relatorio");
	     		return true;
	     	}
  			new x_Nick[128];
	     	x_Nick = strtok(cmdtext, idx);
	     	if(!strlen(x_Nick))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /mudarnick [nome]");
				return true;
			}
			format(string, sizeof(string), "Contas/%s.ini", x_Nick);
			if(fexist(string))
			{
                SendClientMessage(playerid, COLOR_GREY,"Este nick ja está sendo usado!");
				return true;
			}
			if(mudandonick[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY,"Espere terminar de mudar seu nick!");
				return true;
			}
			mudandonick[playerid] = 1;
			GetPlayerName(playerid,playername,sizeof(playername));
			format(string, sizeof(string), "Contas/%s.ini", playername);
			if(fexist(string))	fremove(string);
   			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
	        	if(strcmp(playername,BizzInfo[i][bOwner],true)==0)
	        	{
	        	    strmid(BizzInfo[i][bOwner], x_Nick, 0, strlen(x_Nick), 255);
	        	}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
	        	if(strcmp(playername,SBizzInfo[i][sbOwner],true)==0)
	        	{
	        	    strmid(SBizzInfo[i][sbOwner], x_Nick, 0, strlen(x_Nick), 255);
	        	}
			}
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
	        	if(strcmp(playername,HouseInfo[h][hOwner],true)==0)
	        	{
	        	    strmid(HouseInfo[h][hOwner], x_Nick, 0, strlen(x_Nick), 255);
	        	}
			}
			for(new i = 0; i < sizeof(AdmInfo); i++)
	    	{
	        	if(strcmp(playername,AdmInfo[i][gMembro],true)==0)
				{
	        	    strmid(AdmInfo[i][gMembro], x_Nick, 0, strlen(x_Nick), 999);
		        }
 			}
			for(new i = 0; i < sizeof(HelperInfo); i++)
	    	{
	        	if(strcmp(playername,HelperInfo[i][hMembro],true)==0)
				{
	        	    strmid(HelperInfo[i][hMembro], x_Nick, 0, strlen(x_Nick), 999);
		        }
 			}
 			for(new c = 0; c < sizeof(CarInfo); c++)
	    		{
 					if(PlayerInfo[playerid][pPcarkey] == CarInfo[c][ownedvehicle] || PlayerInfo[playerid][pPcarkey2] == CarInfo[c][ownedvehicle] || PlayerInfo[playerid][pPcarkey3] == CarInfo[c][ownedvehicle] || PlayerInfo[playerid][pPcarkey4] == CarInfo[c][ownedvehicle])
					{
		        	    strmid(CarInfo[c][cOwner], x_Nick, 0, strlen(x_Nick), 999);
	        		}
	        	}
	        if(GetPlayerOrg(playerid) != 0)
	        {
	            new arquivo[128];
				format(arquivo, sizeof(arquivo), "ORG Arquivos/Org%d.cfg",GetPlayerOrg(playerid));
	        	for(new i = 1; i < sizeof(InfoOrg); i++)
				{
	    			if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
		    		{
		    			if(strcmp(playername,InfoOrg[i][Lider],true)==0)
		    			{
		    	    		strmid(InfoOrg[i][Lider], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
							dini_Set(arquivo,"Lider",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][SubLider],true)==0)
		    			{
		    				strmid(InfoOrg[i][SubLider], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
       	    				dini_Set(arquivo,"SubLider",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro1],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro1], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro1",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro2],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro2], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro2",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro3],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro3], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro3",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro4],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro4], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro4",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro5],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro5], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro5",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro6],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro6], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro6",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro7],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro7], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro7",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro8],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro8], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro8",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro9],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro9], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro9",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro10],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro10], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro10",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro11],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro11], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro11",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro12],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro12], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro12",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro13],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro13], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro13",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro14],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro14], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro14",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro15],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro15], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro15",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro15],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro16], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro16",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro15],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro17], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro17",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro15],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro18], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro18",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro15],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro19], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro19",x_Nick);
		    			}
		    			if(strcmp(playername,InfoOrg[i][Membro15],true)==0)
		    			{
	    					strmid(InfoOrg[i][Membro20], x_Nick, 0, strlen(x_Nick), MAX_PLAYER_NAME);
        					dini_Set(arquivo,"Membro20",x_Nick);
		    			}
					}
				}
	        }
			getdate(year, month, day);
			gettime(hour,minute);
   			format(string, sizeof(string), "%s Mudou o Nick para %s ( %d/%d/%d - %d:%d)",playername,x_Nick, day, month, year,hour, minute);
   			ABroadCast(COLOR_YELLOW,string,1);
   			NickLog(string);
   			SetPlayerName(playerid,x_Nick);
   			format(string, sizeof(string), "Você mudou seu nick para %s",x_Nick );
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
   			SendClientMessage(playerid, COLOR_LIGHTBLUE,"Tire uma SS apertando F8 para não esquecer seu novo nick!");
   			MudarNickAceito[playerid] = 0;
   			OnPropUpdate();
			OnPropUpdate2(); SavePlayerData(playerid);
		    SaveAdm();
		    SaveHelper();
		    OnPlayerSave(playerid);
		    mudandonick[playerid] = 0;
   			return true;
        }
		return true;
	}
	if(strcmp(cmd,"/amudarnick",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /amudarnick [ id ]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			GetPlayerName(playerid, sendername, 256);
			if (PlayerInfo[playerid][pAdmin] >= 1341)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                        MudarNickAceito[playa] = 1;
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						//format(string, sizeof(string), "Você autorizou %s a mudar o nick.", giveplayer);
			        	//SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		         		format(string, sizeof(string), "Admin %s: Autorizou você a mudar o nick, digite /mudarnick.", sendername);
		        		SendClientMessage(playa, COLOR_LIGHTBLUE, string);
		        		format(string, sizeof(string), "ADMIN CMD: %s autorizou %s a mudar o nick !",sendername,giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
				return true;
			}
		}
		return true;
	}
	if (strcmp(cmd, "/mercadorials", true) == 0)
	{
	    if(PlayerInfo[playerid][pEmprego] != 10)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você não é um caminhoneiro");
			return true;
	    }
	    if(var1[playerid] != 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você deve esperar 5 minutos pra entregar mais mercadorias");
			return true;
	    }
	    if(TruckMission[playerid] != 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você deve entregar a mercadoria primeiro");
			return true;
	    }
	    if(!PlayerToPoint(60.0 ,playerid, -71.5407,-1123.4725,1.6677))
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você precisa estar na HQ pra pegar mercadoria");
			return true;
	    }
	    SetPlayerCheckpoint(playerid, 1756.1359,-2064.8230,13.2708, 8.0);
        TruckMission[playerid] = 1;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Entregue a mercadoria no checkpoint marcado no mapa.");
	    return true;
	}
	if (strcmp(cmd, "/mercadorialv", true) == 0)
	{
	    if(PlayerInfo[playerid][pEmprego] != 10)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você não é um caminhoneiro");
			return true;
	    }
	    if(var1[playerid] != 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você deve esperar o tempo de recarga pra entregar mais mercadorias");
			return true;
	    }
	    if(TruckMission[playerid] != 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você deve entregar a mercadoria primeiro");
			return true;
	    }
	    if(!PlayerToPoint(60.0 ,playerid, -71.5407,-1123.4725,1.6677))
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você precisa estar na HQ pra pegar mercadoria");
			return true;
	    }
	    SetPlayerCheckpoint(playerid, 2054.3250,1919.5562,11.8507, 8.0);
        TruckMission[playerid] = 3;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Entregue a mercadoria no checkpoint marcado no mapa.");
	    return true;
	}
	if (strcmp(cmd, "/mercadoriasf", true) == 0)
	{
	    if(PlayerInfo[playerid][pEmprego] != 10)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você não é um caminhoneiro");
			return true;
	    }
	    if(var1[playerid] != 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você deve esperar o tempo de recarga pra entregar mais mercadorias");
			return true;
	    }
	    if(TruckMission[playerid] != 0)
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você deve entregar a mercadoria primeiro");
			return true;
	    }
	    if(!PlayerToPoint(60.0 ,playerid, -71.5407,-1123.4725,1.6677))
	    {
			SendClientMessage(playerid, COLOR_GREY, "Você precisa estar na HQ pra pegar mercadoria");
			return true;
	    }
	    SetPlayerCheckpoint(playerid, -1729.3041,-123.8946,3.2335, 8.0);
        TruckMission[playerid] = 2;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Entregue a mercadoria no checkpoint marcado no mapa.");
	    return true;
	}

	if(strcmp(cmd,"/cancelarcorrida",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new Veh = GetPlayerVehicleID(playerid);
	        if(!IsAOniCar(Veh))
	        {
			    SendClientMessage(playerid, COLOR_GREY, "   Voce não está em um ônibus!");
			    return true;
	        }
			if(PlayerInfo[playerid][pEmprego] == 8)
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "* Voce está de folga e recebeu R$%d.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					GivePlayerMoney(playerid, TransportMoney[playerid]);
					ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return true;
				}
				else
				{
			    	BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid] = 100;
   					format(string, sizeof(string), "Motorista de onibus %s está em serviço, Corrida: R$100 - Vá para o terminal mais próximo", PlayerName(playerid));
   					OOCNews(TEAM_GROVE_COLOR,string);
			    	SendClientMessage(playerid, COLOR_RED,"Você começou o circuito, siga os checkpoints até finalizar a viajem");
			    	SendClientMessage(playerid, COLOR_RED,"Você receberá R$50 a cada checkpoint que passar.");
			    	SendClientMessage(playerid, COLOR_RED,"USE: /cancelarcorrida novamente para parar o serviço");
			    	SetPlayerCheckpoint(playerid, 1369.0927,-1736.0730,13.4787,8.0);
					gPlayerTerminal[playerid] = 1;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY,"Você não é um motorista de ônibus.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/online", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < MASTER)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Você não tem permissão para usar esse comando.");
			return true;
	    }
     if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
			return true;
		}
		format(gstring, sizeof(gstring), "{16E031}BRNM: {FAB875}%d Players Online.", ContarJogadores());
		SendClientMessageToAll(COLOR_LIGHTBLUE, gstring);
		return true;
	}
	if(strcmp(cmd,"/stopani",true)==0 || strcmp(cmd,"/pararanim",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
   		if(PlayerToPoint(3.0,playerid,2144.3711,1641.4792,993.5761) || PlayerToPoint(3.0,playerid,303.9886,-169.0725,999.5938) || PlayerToPoint(3.0,playerid,294.8029,-57.8727,1001.5156) || PlayerToPoint(3.0,playerid,162.1254,-79.7925,1001.8047) ||
		PlayerToPoint(3.0,playerid,211.3817,-96.1272,1005.2578) || PlayerToPoint(3.0,playerid,820.8934,8.5365,1004.1958) || PlayerToPoint(3.0,playerid,205.4959,-11.5585,1005.2109))
		{
			SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar este comnado agora!");
			return true;
		}
	        ClearAnimations(playerid);
	        ClearAnimations(playerid);
	    }
	    return true;
	}
	//EXERCITO ========================================================================================================================================================================

	if(strcmp(cmd, "/pontos", true) == 0)
    {
        if(TendoGuerra == 0)
        {
            SendClientMessage(playerid, COLOR_GREY, " Não está tendo guerra!");
  			return true;
        }
        if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
        {
            if(Territorio[almortos] > Territorio[exemortos] && Territorio[talmortos] > Territorio[exemortos] && Territorio[FARCmortos] > Territorio[exemortos])//exercito ownou
 			{
                SendClientMessage(playerid, COLOR_EXE, "Você e o Exército estão ganhando a guerra.");
        		format(string, sizeof(string), "Morreram %d membros do Taliban, %d membros da Al'qaeda, %d membros da F.A.R.C e %d membros do Exercito!",Territorio[talmortos], Territorio[almortos], Territorio[FARCmortos], Territorio[exemortos]);
       			SendClientMessage(playerid, COLOR_EXE, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[almortos] && Territorio[talmortos] > Territorio[almortos] && Territorio[FARCmortos] > Territorio[almortos])//al'qaeda ownou
 			{
                SendClientMessage(playerid, COLOR_EXE, "Vocês estão perdendo a guerra para a Al'qaeda.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Taliban, %d membros da F.A.R.C e %d membros da Al'Qaeda!",Territorio[exemortos], Territorio[talmortos], Territorio[FARCmortos], Territorio[almortos]);
       			SendClientMessage(playerid, COLOR_EXE, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[talmortos] && Territorio[almortos] > Territorio[talmortos] && Territorio[FARCmortos] > Territorio[talmortos])//Taliban ownou
 			{
                SendClientMessage(playerid, COLOR_EXE, "Vocês estão perdendo a guerra para o Taliban.");
 	  			format(string, sizeof(string), "Morreram %d membros seus, %d membros da F.A.R.C, %d membros da Al'qaeda e %d membros do Taliban!",Territorio[exemortos], Territorio[FARCmortos], Territorio[almortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COLOR_EXE, string);
       			return true;
 			}
     		else if(Territorio[exemortos] > Territorio[FARCmortos] && Territorio[talmortos] > Territorio[FARCmortos] && Territorio[almortos] > Territorio[FARCmortos])//FARC ownou
 			{
                SendClientMessage(playerid, COLOR_EXE, "Vocês estão perdendo a guerra para a F.A.R.C.");
 	  			format(string, sizeof(string), "Morreram %d membros seus, %d membros da Al'qaeda, %d membros do Taliban e %d membros da F.A.R.C!",Territorio[exemortos], Territorio[almortos], Territorio[talmortos], Territorio[FARCmortos]);
       			SendClientMessage(playerid, COLOR_EXE, string);
       			return true;
 			}
 			else
 			{
                SendClientMessage(playerid, COLOR_EXE, "Está Havendo Um Empate na Guerra.");
 			    format(string, sizeof(string), "Morreram %d membros seus, %d membros da Al'qaeda %d membros da F.A.R.C e %d membros do Taliban!",Territorio[exemortos], Territorio[almortos], Territorio[FARCmortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COLOR_EXE, string);
       			return true;
 			}
        }
        else if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
        {
            if(Territorio[almortos] > Territorio[exemortos] && Territorio[talmortos] > Territorio[exemortos] && Territorio[FARCmortos] > Territorio[exemortos])//exercito ownou
 			{
                SendClientMessage(playerid, COR_Taliban, "Vocês estão perdendo a guerra para o Exército.");
        		format(string, sizeof(string), "Morreram %d membros seus, %d membros da Al'qaeda, %d membros da F.A.R.C e %d membros do Exército!",Territorio[talmortos], Territorio[almortos], Territorio[FARCmortos], Territorio[exemortos]);
       			SendClientMessage(playerid, COR_Taliban, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[almortos] && Territorio[talmortos] > Territorio[almortos] && Territorio[FARCmortos] > Territorio[almortos])//al'qaeda ownou
 			{
                SendClientMessage(playerid, COR_Taliban, "Vocês estão perdendo a guerra para a Al'qaeda.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da F.A.R.C e %d membros da Al'Qaeda!",Territorio[talmortos], Territorio[exemortos],Territorio[FARCmortos], Territorio[almortos]);
       			SendClientMessage(playerid, COR_Taliban, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[talmortos] && Territorio[almortos] > Territorio[talmortos]&& Territorio[FARCmortos] > Territorio[talmortos])//Taliban ownou
 			{
                SendClientMessage(playerid, COR_Taliban, "Você e o Taliban estão ganhando a guerra.");
 	  			format(string, sizeof(string), "Morreram %d membros do Exército, %d membros da Al'qaeda, %d membros da F.A.R.C e %d membros do Taliban!",Territorio[exemortos], Territorio[almortos], Territorio[FARCmortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COR_Taliban, string);
       			return true;
 			}
     		else if(Territorio[exemortos] > Territorio[FARCmortos] && Territorio[talmortos] > Territorio[FARCmortos] && Territorio[almortos] > Territorio[FARCmortos])//FARC ownou
 			{
                SendClientMessage(playerid, COR_Taliban, "Vocês estão perdendo a guerra para a F.A.R.C.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da Al'Qaeda e %d membros da F.A.R.C!",Territorio[talmortos], Territorio[exemortos],Territorio[almortos], Territorio[FARCmortos]);
       			SendClientMessage(playerid, COR_Taliban, string);
       			return true;
 			}
 			else
 			{
                SendClientMessage(playerid, COR_Taliban, "Está Havendo Um Empate na Guerra.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da Al'Qaeda e %d membros da F.A.R.C!",Territorio[talmortos], Territorio[exemortos], Territorio[almortos], Territorio[FARCmortos]);
       			SendClientMessage(playerid, COR_Taliban, string);
       			return true;
 			}
        }
        else if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
        {
            if(Territorio[almortos] > Territorio[exemortos] && Territorio[talmortos] > Territorio[exemortos] && Territorio[FARCmortos] > Territorio[exemortos])//exercito ownou
 			{
                SendClientMessage(playerid, COR_AL, "Vocês estão perdendo a guerra para o Exército.");
        		format(string, sizeof(string), "Morreram %d membros seus, %d membros do Taliban, %d membros da F.A.R.C e %d membros do Exército!",Territorio[almortos], Territorio[talmortos], Territorio[FARCmortos], Territorio[exemortos]);
       			SendClientMessage(playerid, COR_AL, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[talmortos] && Territorio[almortos] > Territorio[talmortos] && Territorio[FARCmortos] > Territorio[talmortos])//Taliban ownou
 			{
                SendClientMessage(playerid, COR_AL, "Vocês estão perdendo a guerra para o Taliban.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da F.A.R.C e %d membros do Taliban!",Territorio[almortos], Territorio[exemortos], Territorio[FARCmortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COR_AL, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[almortos] && Territorio[talmortos] > Territorio[almortos] && Territorio[FARCmortos] > Territorio[almortos])//al'qaeda ownou
 			{
                SendClientMessage(playerid, COR_AL, "Você e a Al'Qaeda estão ganhando a guerra.");
 	  			format(string, sizeof(string), "Morreram %d membros do Exército, %d membros da F.A.R.C, %d membros do Taliban e %d membros da Al'Qaeda!",Territorio[exemortos],Territorio[FARCmortos], Territorio[talmortos], Territorio[almortos]);
       			SendClientMessage(playerid, COR_AL, string);
       			return true;
 			}
     		else if(Territorio[exemortos] > Territorio[FARCmortos] && Territorio[talmortos] > Territorio[FARCmortos] && Territorio[almortos] > Territorio[FARCmortos])//FARC ownou
 			{
                SendClientMessage(playerid, COR_AL, "Vocês estão perdendo a guerra para a F.A.R.C.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros do Taliban e %d membros da F.A.R.C!",Territorio[almortos], Territorio[exemortos], Territorio[talmortos], Territorio[FARCmortos]);
       			SendClientMessage(playerid, COR_AL, string);
       			return true;
 			}
 			else
 			{
                SendClientMessage(playerid, COR_AL, "Está Havendo Um Empate na Guerra.");
 				format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da F.A.R.C e %d membros do Taliban!",Territorio[almortos], Territorio[exemortos], Territorio[FARCmortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COR_AL, string);
       			return true;
 			}
        }
        else if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
        {
            if(Territorio[almortos] > Territorio[exemortos] && Territorio[talmortos] > Territorio[exemortos] && Territorio[FARCmortos] > Territorio[exemortos])//exercito ownou
 			{
                SendClientMessage(playerid, COR_FARC, "Vocês estão perdendo a guerra para o Exército.");
        		format(string, sizeof(string), "Morreram %d membros seus, %d membros da Al'qaeda, %d membros do Taliban e %d membros do Exército!",Territorio[FARCmortos], Territorio[almortos], Territorio[talmortos], Territorio[exemortos]);
       			SendClientMessage(playerid, COR_FARC, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[almortos] && Territorio[talmortos] > Territorio[almortos] && Territorio[FARCmortos] > Territorio[almortos])//al'qaeda ownou
 			{
                SendClientMessage(playerid, COR_FARC, "Vocês estão perdendo a guerra para a Al'qaeda.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros do Taliban e %d membros da Al'Qaeda!",Territorio[FARCmortos], Territorio[exemortos],Territorio[talmortos], Territorio[almortos]);
       			SendClientMessage(playerid, COR_FARC, string);
       			return true;
 			}
 			else if(Territorio[exemortos] > Territorio[FARCmortos] && Territorio[talmortos] > Territorio[FARCmortos]&& Territorio[almortos] > Territorio[FARCmortos])//FARC ownou
 			{
                SendClientMessage(playerid, COR_FARC, "Você e a F.A.R.C estão ganhando a guerra.");
 	  			format(string, sizeof(string), "Morreram %d membros do Exército, %d membros da Al'qaeda, %d membros do Taliban e %d membros da F.A.R.C!",Territorio[exemortos], Territorio[almortos], Territorio[talmortos], Territorio[FARCmortos]);
       			SendClientMessage(playerid, COR_FARC, string);
       			return true;
 			}
     		else if(Territorio[exemortos] > Territorio[talmortos] && Territorio[almortos] > Territorio[talmortos] && Territorio[FARCmortos] > Territorio[talmortos])//Taliban ownou
 			{
                SendClientMessage(playerid, COR_FARC, "Vocês estão perdendo a guerra para o Taliban.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da Al'Qaeda e %d membros do Taliban!",Territorio[FARCmortos], Territorio[exemortos],Territorio[almortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COR_FARC, string);
       			return true;
 			}
 			else
 			{
                SendClientMessage(playerid, COR_FARC, "Está Havendo Um Empate na Guerra.");
      			format(string, sizeof(string), "Morreram %d membros seus, %d membros do Exército, %d membros da Al'Qaeda e %d membros do Taliban!",Territorio[FARCmortos], Territorio[exemortos], Territorio[almortos], Territorio[talmortos]);
       			SendClientMessage(playerid, COR_FARC, string);
       			return true;
 			}
        }
        else
        {
            SendClientMessage(playerid, COLOR_GREY, "  Sua Organização não possui nenhuma guerra");
        }
		return true;
	}
//=====================================[INFOORG]================================//
// 	if (strcmp(cmd, "/limparvaga", cmdtext, true, 20) == 0 || strcmp("/lvaga", true) == 0)
 	if(strcmp(cmd, "/limparvaga", true) == 0 || strcmp(cmd, "/lvaga", true) == 0)
	{
		if(PlayerInfo[playerid][pLider] < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Somente líderes podem usar este comando!");
			return true;
		}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /limparvaga [Vaga]");
			return true;
		}
		new Vaga2 = strval(tmp);
		new org = GetPlayerOrg(playerid);
		new arquivo[128], id;
		format(arquivo, sizeof(arquivo), "ORG Arquivos/Org%d.cfg",org);
		if(strcmp(tmp,"sub",true)==0)
		{
   			if(IsPlayerOnline(InfoOrg[org][SubLider]))
  			{
  			    id=GetPlayerID(InfoOrg[org][SubLider]);
		  		Demitir(playerid, id);
 			}
		    strmid(InfoOrg[org][SubLider], "Ninguem", 0, strlen("Ninguem"), 255);
		    dini_Set(arquivo,"SubLider","Ninguem");
		    SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga do Sub Líder");
		    return true;
		}
		if(Vaga2 == 1)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro1]);
		    if(IsPlayerOnline(InfoOrg[org][Membro1])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro1], "Ninguem", 0, strlen("Ninguem"), 255);
		   	dini_Set(arquivo,"Membro1","Ninguem");
		   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 1");
		   	return true;
		}
		if(Vaga2 == 2)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro2]);
		    if(IsPlayerOnline(InfoOrg[org][Membro2])) Demitir(playerid, id);
  			strmid(InfoOrg[org][Membro2], "Ninguem", 0, strlen("Ninguem"), 255);
 			dini_Set(arquivo,"Membro2","Ninguem");
 			SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 2");
		}
		if(Vaga2 == 3)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro3]);
		    if(IsPlayerOnline(InfoOrg[org][Membro3])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro3], "Ninguem", 0, strlen("Ninguem"), 255);
		   	dini_Set(arquivo,"Membro3","Ninguem");
		   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 3");
		}
		if(Vaga2 == 4)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro4]);
		    if(IsPlayerOnline(InfoOrg[org][Membro4])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro4], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro4","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 4");
		}
		if(Vaga2 == 5)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro5]);
		    if(IsPlayerOnline(InfoOrg[org][Membro5])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro5], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro5","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 5");
		}
		if(Vaga2 == 6)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro6]);
		    if(IsPlayerOnline(InfoOrg[org][Membro6])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro6], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro6","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 6");
		}
		if(Vaga2 == 7)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro7]);
		    if(IsPlayerOnline(InfoOrg[org][Membro7])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro7], "Ninguem", 0, strlen("Ninguem"), 255);
		   	dini_Set(arquivo,"Membro7","Ninguem");
		   	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 7");
		}
		if(Vaga2 == 8)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro8]);
		    if(IsPlayerOnline(InfoOrg[org][Membro8])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro8], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro8","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 8");
		}
		if(Vaga2 == 9)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro9]);
		    if(IsPlayerOnline(InfoOrg[org][Membro9])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro9], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro9","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 9");
		}
		if(Vaga2 == 10)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro10]);
		    if(IsPlayerOnline(InfoOrg[org][Membro10])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro10], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro10","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 10");
		}
		if(Vaga2 == 11)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro11]);
		    if(IsPlayerOnline(InfoOrg[org][Membro11])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro11], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro11","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 11");
		}
		if(Vaga2 == 12)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro12]);
		    if(IsPlayerOnline(InfoOrg[org][Membro12])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro12], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro12","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 12");
		}
		if(Vaga2 == 13)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro13]);
		    if(IsPlayerOnline(InfoOrg[org][Membro13])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro13], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro13","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 13");
		}
		if(Vaga2 == 14)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro14]);
		    if(IsPlayerOnline(InfoOrg[org][Membro14])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro14], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro14","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 14");
		}
		if(Vaga2 == 15)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro15]);
		    if(IsPlayerOnline(InfoOrg[org][Membro15])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro15], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro15","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 15");
		}
		if(Vaga2 == 16)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro16]);
		    if(IsPlayerOnline(InfoOrg[org][Membro16])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro16], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro16","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 15");
		}
		if(Vaga2 == 17)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro17]);
		    if(IsPlayerOnline(InfoOrg[org][Membro17])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro17], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro17","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 15");
		}
		if(Vaga2 == 18)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro18]);
		    if(IsPlayerOnline(InfoOrg[org][Membro18])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro18], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro18","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 15");
		}
		if(Vaga2 == 19)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro19]);
		    if(IsPlayerOnline(InfoOrg[org][Membro19])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro19], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro19","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 15");
		}
		if(Vaga2 == 20)// id da vaga
		{
		    id=GetPlayerID(InfoOrg[org][Membro20]);
		    if(IsPlayerOnline(InfoOrg[org][Membro20])) Demitir(playerid, id);
		    strmid(InfoOrg[org][Membro20], "Ninguem", 0, strlen("Ninguem"), 255);
        	dini_Set(arquivo,"Membro20","Ninguem");
        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você Limpou a Vaga 15");
		}
		//else{ SendClientMessage(playerid, COLOR_GRAD2," Vaga mínima 1, máxima 15"); }
	    return true;
	}
   	if(strcmp(cmd, "/infoorg", true) ==0 || strcmp(cmd, "/infoorganizacao", true) ==0)
    {
        if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
      		{
      		    new InfoOrgThiago[1500];
		        new org = GetPlayerOrg(playerid);
		        new arquivo[128];
		        //SendClientMessage(playerid, COLOR_WHITE, "{B5B5B5}|=============[ {5CACEE}Vagas da Organização {B5B5B5}]=============|");
				format(string,sizeof(string),"Líder: %s - Cargo: Líder\n",InfoOrg[org][Lider]);
				strcat(InfoOrgThiago,string);
				format(string,sizeof(string),"Sub-Líder: %s - Cargo: Sub-Líder\n",InfoOrg[org][SubLider]);
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro1]);
				format(string,sizeof(string),"Vaga 1: %s - Cargo: %d\n",InfoOrg[org][Membro1],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro2]);
				format(string,sizeof(string),"Vaga 2: %s - Cargo: %d\n",InfoOrg[org][Membro2],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro3]);
				format(string,sizeof(string),"Vaga 3: %s - Cargo: %d\n",InfoOrg[org][Membro3],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro4]);
				format(string,sizeof(string),"Vaga 4: %s - Cargo: %d\n",InfoOrg[org][Membro4],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro5]);
				format(string,sizeof(string),"Vaga 5: %s - Cargo: %d\n",InfoOrg[org][Membro5],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro6]);
				format(string,sizeof(string),"Vaga 6: %s - Cargo: %d\n",InfoOrg[org][Membro6],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro7]);
				format(string,sizeof(string),"Vaga 7: %s - Cargo: %d\n",InfoOrg[org][Membro7],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro8]);
				format(string,sizeof(string),"Vaga 8: %s - Cargo: %d\n",InfoOrg[org][Membro8],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro9]);
				format(string,sizeof(string),"Vaga 9: %s - Cargo: %d\n",InfoOrg[org][Membro9],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro10]);
				format(string,sizeof(string),"Vaga 10: %s - Cargo: %d\n",InfoOrg[org][Membro10],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro11]);
				format(string,sizeof(string),"Vaga 11: %s - Cargo: %d\n",InfoOrg[org][Membro11],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro12]);
				format(string,sizeof(string),"Vaga 12: %s - Cargo: %d\n",InfoOrg[org][Membro12],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro13]);
				format(string,sizeof(string),"Vaga 13: %s - Cargo: %d\n",InfoOrg[org][Membro13],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro14]);
				format(string,sizeof(string),"Vaga 14: %s - Cargo: %d\n",InfoOrg[org][Membro14],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro15]);
				format(string,sizeof(string),"Vaga 15: %s - Cargo: %d\n",InfoOrg[org][Membro15],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro16]);
				format(string,sizeof(string),"Vaga 16: %s - Cargo: %d\n",InfoOrg[org][Membro16],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro17]);
				format(string,sizeof(string),"Vaga 17: %s - Cargo: %d\n",InfoOrg[org][Membro17],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro18]);
				format(string,sizeof(string),"Vaga 18: %s - Cargo: %d\n",InfoOrg[org][Membro18],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro19]);
				format(string,sizeof(string),"Vaga 19: %s - Cargo: %d\n",InfoOrg[org][Membro19],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				format(arquivo, sizeof(arquivo), "Contas/%s.ini",InfoOrg[org][Membro20]);
				format(string,sizeof(string),"Vaga 20: %s - Cargo: %d",InfoOrg[org][Membro20],dini_Int(arquivo,"Rank"));
				strcat(InfoOrgThiago,string);
				ShowPlayerDialog(playerid, 8799, DIALOG_STYLE_MSGBOX, "Membros da Organização:", InfoOrgThiago, "Fechar", "");
				return true;
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY," Você não faz parte de uma organização!");
		        return true;
		    }
		}
        return true;
    }
   	if (strcmp(cmd, "/limparlider", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < MASTER)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Somente admins master ou dono podem usar este comando!");
			return true;
		}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /limparlider [organização]");
			return true;
		}
		new Vaga2 = strval(tmp);
		if(Vaga2 < 1 || Vaga2 > 25) { SendClientMessage(playerid, COLOR_GREY, "Vaga mínima 1, máximo 25 !"); return true; }
		new id=GetPlayerID(InfoOrg[Vaga2][Lider]);
		format(string, sizeof(string), "ADMIN: %s limpou a vaga %d do líder %s",PlayerName(playerid), Vaga2, InfoOrg[Vaga2][Lider]);
		LideresLog(string);
		if(IsPlayerOnline(InfoOrg[Vaga2][Lider])) DemitirLider(id);
		strmid(InfoOrg[Vaga2][Lider], "Ninguem", 0, strlen("Ninguem"), 255);
		format(gstring, 128, "ORG Arquivos/Org%d.cfg", Vaga2);
       	dini_Set(gstring,"Lider","Ninguem");
		format(string, sizeof(string), "Você limpou o líder da organização Nº %d",Vaga2);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    return true;
	}
	if(strcmp(cmd,"/carid",true) == 0)
	{
	if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 1341)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return 1;
				}
		new vehicle;
		vehicle = GetPlayerVehicleID(playerid);
		if(IsPlayerInAnyVehicle(playerid))
        {
		format(string,sizeof(string), "Carro ID: %d", vehicle);
		SendClientMessage(playerid, COLOR_GREY, string);
		return true;
	}
	else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não está em um veículo!");
			    return true;
			}
  }
}
	if(strcmp(cmd,"/setpos",true)== 0 && PlayerInfo[playerid][pAdmin] == DONO)
	{
		new plid,Float:setpos[3];
		tmp = strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COR_PM, "USE: /setpos [id] [X] [Y] [Z]");
		plid = strval(tmp);
		for(new x=0;x<3;x++)
		{
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp)) return SendClientMessage(playerid, COR_PM, "USE: /setpos [id] [X] [Y] [Z]");
			setpos[x] = floatstr(tmp);
		}
		SetPlayerPos(plid,setpos[0],setpos[1],setpos[2]);
		SendClientMessage(playerid, COR_PM, "Posição setada!");
		return true;
	}

	if((strcmp(cmd, "/promoveradmin", true) == 0 || strcmp(cmd, "/padmin", true) == 0) && (PlayerInfo[playerid][pAdmin] == DONO))
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /padmin [id] [Nivel]");
				return true;
			}
			new level, para1;
			para1 = strval(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /padmin [id] [Nivel]");
				return true;
			}
			level = strval(tmp);
			strmid(giveplayer, AdmInfo[para1][gMembro], 0, strlen(AdmInfo[para1][gMembro]), 255);
			if(strcmp(giveplayer,"Vazio", true ) == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Não tem nenhum admin nessa vaga");
				return true;
			}
			if(IsPlayerOnline(giveplayer))
  			{
				SendClientMessage(playerid, COLOR_GRAD2, "O Viado está online");
				return true;
 			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			getdate(year, month, day);
			gettime(hour,minute,second);
			new arquivo[64];
		    format(arquivo, sizeof(arquivo), "Contas/%s.ini",giveplayer);
		    dini_IntSet(arquivo,"AdminLevel",level);
			format(string, sizeof(string), "   Você promoveu o(a) %s Para o level %d de Admin.", giveplayer,level);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "(OFF)%s deu admin nivel %d para %s [%d/%d/%d] ás [%d:%d:%d].", sendername, level, giveplayer, day,
			month, year, hour, minute, second);
			PAdminsLog(string);
		}
		return true;
	}
	if(strcmp(cmd, "/rcarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "[BRNM]: Voce não esta autorizado a usar este comando!");
			    return true;
			}
			if(IsPlayerInAnyVehicle(playerid))
			{
			    //SetVehicleHealth(GetPlayerVehicleID(playerid), 1000.0);
			    RepairVehicle(GetPlayerVehicleID(playerid));
			    PlayerPlaySound(playerid, 1057, 0,0,0);
			    SendClientMessage(playerid, COLOR_GREY, "[BRNM]: Carro concertado!");
			}
		}
		return true;
	}

if(strcmp(cmd, "/blindaradm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		if(PlayerInfo[playerid][pAdmin] >= DONO) {
			if(IsPlayerInAnyVehicle(playerid))
			{
                RepairVehicle(GetPlayerVehicleID(playerid));
			    SetVehicleHealth(GetPlayerVehicleID(playerid), 10000.0);
			    PlayerPlaySound(playerid, 1057, 0,0,0);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[BRNM]: Blindagem Ativada!");
			} 
		  }else { 
		   
		    SendClientMessage(playerid, COLOR_LIGHTGREEN, "[BRNM]: Voce não esta autorizado a usar este comando!");
			return true;
		  
		  }
		}
		return true;
	}
	if (strcmp(cmd, "/limparadm", true) == 0 || strcmp(cmd, "/limparadmin", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] < 1341)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Você não está autorizado a usar este comando!");
			return true;
		}
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /limparadm [ Vaga ]");
			return true;
		}
		new Vagao = strval(tmp);
		if(Vagao < 1 || Vagao > 30) { SendClientMessage(playerid, COLOR_GREY, "Vaga mínima 1 máximo 30!"); return true; }
		getdate(year, month, day);
		gettime(hour,minute,second);
		format(string, sizeof(string), "%s apagou a vaga %d de %s [%d/%d/%d] ás [%d:%d:%d].", PlayerName(playerid), Vagao, AdmInfo[Vagao][gMembro], day,
		month, year, hour, minute, second);
		PAdminsLog(string);
		strmid(AdmInfo[Vagao][gMembro], "Vazio", 0, strlen("Vazio"), 255);
		AdmInfo[Vagao][AdminVaga] = 0;
	    SaveAdm();
	    format(string, sizeof(string), "Você Limpou A Vaga Nº %d",Vagao);
		SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	    return true;
	}
	if (strcmp(cmd, "/infoadm", true) == 0 || strcmp(cmd, "/infoadmin", true) == 0 || strcmp(cmd, "/infoadmins", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < 1341)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para usar esse comando.");
			return true;
	    }
	    new lol = 0;
	    new arquivo[128];
		SendClientMessage(playerid, COLOR_WHITE, "|______________[ Admins do Server ]______________|");
	    while (lol < sizeof(AdmInfo))
		{
			if(lol == 0)
			{
			    format(string, sizeof(string), "Dono: %s", AdmInfo[0][gMembro]);
				SendClientMessage(playerid, COLOR_AZULBB, string);
			}
			else
			{
			    if(strcmp(AdmInfo[lol][gMembro],"Vazio",true) != 0)
				{
				    if(PlayerInfo[playerid][pAdmin] == DONO)
				    {
				    	format(arquivo, sizeof(arquivo), "Contas/%s.ini",AdmInfo[lol][gMembro]);
		    			format(string, sizeof(string), "Vaga %d: %s, Cargo: %d", lol, AdmInfo[lol][gMembro],dini_Int(arquivo,"AdminLevel"));
						SendClientMessage(playerid, COLOR_AZULBB, string);
					}
					else
				    {
				    	format(arquivo, sizeof(arquivo), "Contas/%s.ini",AdmInfo[lol][gMembro]);
		    			format(string, sizeof(string), "Vaga %d: %s", lol, AdmInfo[lol][gMembro]);
						SendClientMessage(playerid, COLOR_AZULBB, string);
					}
				}
			}
			lol++;
		}
		return true;
   	}

	if (strcmp(cmd, "/infohelper", true) == 0 || strcmp(cmd, "/infohelpers", true) == 0)
	{
	    if(PlayerInfo[playerid][pAdmin] < DONO)
	    {
			SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para usar esse comando.");
			return true;
	    }
	    new lolt = 0;
	    new arquivo[128];
		SendClientMessage(playerid, COLOR_WHITE, "|______________[ Helpers do Server ]______________|");
	    while (lolt < sizeof(HelperInfo))
		{
			if(lolt == 0)
			{
			    format(string, sizeof(string), "Master: %s", HelperInfo[0][hMembro]);
				SendClientMessage(playerid, COLOR_AZULBB, string);
			}
			else
			{
			    if(strcmp(HelperInfo[lolt][hMembro],"Vazio",true) != 0)
				{
				    if(PlayerInfo[playerid][pAdmin] == DONO)
				    {
				    	format(arquivo, sizeof(arquivo), "Contas/%s.ini",HelperInfo[lolt][hMembro]);
		    			format(string, sizeof(string), "Vaga %d: %s, Cargo: %d", lolt, HelperInfo[lolt][hMembro],dini_Int(arquivo,"HelperLevel"));
						SendClientMessage(playerid, COLOR_AZULBB, string);
					}
					else
				    {
				    	format(arquivo, sizeof(arquivo), "Contas/%s.ini",HelperInfo[lolt][hMembro]);
		    			format(string, sizeof(string), "Vaga %d: %s", lolt, HelperInfo[lolt][hMembro]);
						SendClientMessage(playerid, COLOR_AZULBB, string);
					}
				}
			}
			lolt++;
		}
		return true;
   	}

if (strcmp(cmd, "/limparhelper", true) == 0 || strcmp(cmd, "/limparhelpers", true) == 0){if(PlayerInfo[playerid][pAdmin] < GERENTE){SendClientMessage(playerid, COLOR_GRAD2, "Você não está autorizado a usar este comando!");return true;}tmp = strtok(cmdtext, idx);if(!strlen(tmp)){SendClientMessage(playerid, COLOR_GRAD2, "USE: /limparhelper [ Vaga ]");return true;}new Vagao = strval(tmp);
if(Vagao < 1 || Vagao > 20) { SendClientMessage(playerid, COLOR_GREY, "Vaga mínima 1 máximo 20!"); return true; }getdate(year, month, day);gettime(hour,minute,second);format(string, sizeof(string), "%s apagou a vaga %d de %s [%d/%d/%d] ás [%d:%d:%d].", PlayerName(playerid), Vagao, HelperInfo[Vagao][hMembro], day,
month, year, hour, minute, second);PHelpersLog(string);strmid(HelperInfo[Vagao][hMembro], "Vazio", 0, strlen("Vazio"), 255);HelperInfo[Vagao][HelperVaga] = 0;SaveHelper();format(string, sizeof(string), "Você Limpou A Vaga Nº %d",Vagao);SendClientMessage(playerid, COLOR_LIGHTBLUE, string);return true;}

if(strcmp(cmd, "/resetarobj",true) == 0){if(IsPlayerConnected(playerid)){if (PlayerInfo[playerid][pAdmin] >= MASTER){
DestroyObject(pRoadCones[playerid]);pRoadCones[playerid] = 0;DestroyObject(PlayerInfo[playerid][pParedao]);PlayerInfo[playerid][pParedao] = 0;DestroyObject(pRoadblock[playerid]);pRoadblock[playerid] = 0;DestroyObject(PlayerInfo[playerid][pBarraca]);PlayerInfo[playerid][pBarraca] = 0;SendClientMessage(playerid, COR_PM,"Você retirou todos os objetos como Barreiras, Bloqueios e etc...");}}return true;}

if(strcmp(cmd, "/resetarpcosa",true) == 0)
{
if(IsPlayerConnected(playerid))
{
if (PlayerInfo[playerid][pAdmin] >= 2){DestroyObject(acn);acn = CreateObject(2933, 321.39999389648, -1188.1999511719, 77.099998474121, 0, 359, 37.996215820313);}}return true;}


    if(strcmp(cmd, "/darvip", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < DONO)
	    	{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não está autorizado a usar este comando!");
				return 1;
	    	}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darvip [id] [Meses]");
				return 1;
			}
			new para1;
			new level;
			new meses;
			new cash =  GetPlayerMoney(playerid);
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			meses = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darvip [id] [Meses]");
				return 1;
			}
			level = strval(tmp);
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
		            if(level < 1)return SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você não pode definir para 0 meses!");
					format(string, sizeof string, "Você deu %d meses de Vip Premium para %s", level, giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    format(string, sizeof(string), "[BRNM]Seu VIP Premium foi ativado e seus %d lhe foram entregue (De %d Para %d).",3000000*meses, cash, cash + 3000000*meses);
					SendClientMessage(para1, COLOR_YELLOW, string);
					format(string, sizeof(string), "%s deu vip premium ao %s (%d/%d/%d - %d:%d)",sendername,giveplayer,day, month, year,hour, minute);
					VipsLog(string);
					GivePlayerMoney(para1, 3000000*meses);
    	            PlayerInfo[para1][pVIP] = 1;
					PlayerInfo[para1][pDiaVIP] = day;
					PlayerInfo[para1][pHoraVIP] = hour + 1;
					PlayerInfo[para1][pMesVIP] = month+level;
					PlayerInfo[para1][pAnoVIP] = year;
					if(PlayerInfo[para1][pMesVIP] > 12)
					{
					    PlayerInfo[para1][pMesVIP] -= 12;
					    PlayerInfo[para1][pAnoVIP]++;
					}
					format(string, sizeof(string), "O vencimento do seu VIP Premium é: %d/%d/%d (dd/mm/aaaa) ás %d hora(s).",PlayerInfo[para1][pDiaVIP], PlayerInfo[para1][pMesVIP], PlayerInfo[para1][pAnoVIP], PlayerInfo[para1][pHoraVIP]);
					SendClientMessage(para1, COLOR_YELLOW, string);
				}
                 OnPlayerSave(para1);
			}
		}
		return 1;
	}
	/*if(strcmp(cmd, "/darvip", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darvip [ID] [Meses]");
				return 1;
			}
			giveplayerid = ReturnUser(tmp);
			new meses;
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			SendClientMessage(playerid, COLOR_GRAD2, "USE: /darvip [ID] [Meses]");
			return 1;
			}
			meses = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= DONO)
			{
			    if(admtrampando[playerid] < 1)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de trabalho!");
				return 1;
				}
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
	               	{
						if(month+meses >= 13)
						{
							format(string, sizeof(string), "Você deu Conta VIP Premium ao Jogador %s.", PlayerName(giveplayerid));
							SendClientMessage(playerid, COLOR_DBLUE, string);
							format(string, sizeof(string), "[BRNM] Seu Vip Premium foi ativado e você recebeu %d meses de VIP Premium e R$%d, Aproveite Nossos beneficios!",meses,3000000*meses);
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
							format(string, sizeof(string), "O vencimento do seu VIP Premium é: %d/%d/%d (dd/mm/aaaa) ás %d hora(s).", day,month+meses-12,year+1, hour + 1);
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
	                        //PlayerInfo[giveplayerid][pConta] += 3000000*meses;
                            GivePlayerMoney(giveplayerid, 3000000*meses);
	                        PlayerInfo[giveplayerid][pVIP] = 1;
	                        PlayerInfo[giveplayerid][pDiaVIP] = day;
	                        PlayerInfo[giveplayerid][pMesVIP] = month;
	                        PlayerInfo[giveplayerid][pHoraVIP] = hour + 1;
	                        if(PlayerInfo[giveplayerid][pMesVIP]+meses >= 13)
							{
		                        PlayerInfo[giveplayerid][pMesVIP] = meses;
							}
							else
							{
							    PlayerInfo[giveplayerid][pMesVIP] += meses;
							}
	                        PlayerInfo[giveplayerid][pAnoVIP] = year+1;
						}
						if(month+meses <= 12)
						{
							format(string, sizeof(string), "Você deu Conta VIP Premium ao Jogador %s.", PlayerName(giveplayerid));
							SendClientMessage(playerid, COLOR_DBLUE, string);
							format(string, sizeof(string), "[BRNM] Seu Vip Premium foi ativado e você recebeu %d meses de VIP Premium e R$%d, Aproveite Nossos beneficios!",meses,3000000*meses);
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
							format(string, sizeof(string), "O vencimento do seu VIP Premium é: %d/%d/%d (dd/mm/aaaa) ás %d hora(s).", day,month+meses,year, hour + 1); // day,month+meses-12,year+1,hour + 1
							SendClientMessage(giveplayerid, COLOR_YELLOW, string);
	                        //PlayerInfo[giveplayerid][pConta] += 3000000*meses;
	                        GivePlayerMoney(giveplayerid, 3000000*meses);
	                        PlayerInfo[giveplayerid][pVIP] = 1;
	                        PlayerInfo[giveplayerid][pDiaVIP] = day;
	                        PlayerInfo[giveplayerid][pMesVIP] = month; //month = 12 |||| meses = 1
	                        PlayerInfo[giveplayerid][pHoraVIP] = hour + 1;
	                        if(PlayerInfo[giveplayerid][pMesVIP]+meses >= 13)
							{
		                        PlayerInfo[giveplayerid][pMesVIP] = meses;
							}
							else
							{
							    PlayerInfo[giveplayerid][pMesVIP] += meses;
							}
	                        PlayerInfo[giveplayerid][pAnoVIP] = year;
                        }
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
        	}
		}
		return 1;
	}*/
   if(strcmp(cmd, "/retirarvip", true) == 0 || strcmp(cmd, "/rvip", true) == 0)
	{
   		if(IsPlayerConnected(playerid))
	    { 
		    if (PlayerInfo[playerid][pAdmin] < DONO)
			{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está autorizado a usar este comando!");
					return true;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /retirarvip [ID do Player] [Motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
   			if(giveplayerid != INVALID_PLAYER_ID)
		    {
		       	if (PlayerInfo[giveplayerid][pVIP] == 0)
				{

					SendClientMessage(playerid, COLOR_GRAD1," O Jogador não é VIP!");
					return true;
				}
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /retirarvip [ID do Player] [Motivo]");
					return true;
				}
				format(string, sizeof string, "Você retirou o VIP Premium de %s, Motivo: %s", giveplayer, (result));
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				format(string, sizeof string, "O Admin %s Retirou seu VIP Premium, Motivo: %s", sendername, (result));
				SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				getdate(year, month, day);
				gettime(hour,minute,second);
				format(string, sizeof(string), "%s retirou o VIP Premium de %s (%d/%d/%d - %d:%d)",sendername,giveplayer, day, month, year,hour, minute);
				VipsLog(string);
				PlayerInfo[giveplayerid][pVIP] = 0;
				PlayerInfo[giveplayerid][pDiaVIP] = 0;
				PlayerInfo[giveplayerid][pHoraVIP] = 0;
				PlayerInfo[giveplayerid][pMesVIP] = 0;
				PlayerInfo[giveplayerid][pAnoVIP] = 0;
			}
			return 1;
		}
	}
	if (strcmp(cmd, "/mudarluta", true) == 0)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 2.0, 768.2192,-3.9873,1000.7203) || IsPlayerInRangeOfPoint(playerid, 2.0, 1264.4309,-1232.0305,13.5869) || IsPlayerInRangeOfPoint(playerid, 2.0, 1300.0574,-787.2704,88.3125))
		{
		    Controle(playerid, 0);
			ShowPlayerDialog(playerid, DIALOGID+7, DIALOG_STYLE_LIST, "Estilos De Luta", "Cotoveladas\nBoxe\nRua\nKickBoxing\nKarate\nNormal", "Confirma", "Cancela");
		}
		else
		{
            SendClientMessage(playerid, COLOR_GREY, " Voce não está no ginásio de luta de LS.");
		}
		return true;
	}
	if(strcmp(cmd,"/assaltar",true)==0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
		   SendClientMessage(playerid,COLOR_YELLOW," Você não assaltar agora!");
		   return true;
	    }
		if(PlayerInfo[playerid][pMembro] != 5 && PlayerInfo[playerid][pLider] != 5 && PlayerInfo[playerid][pMembro] != 14 && PlayerInfo[playerid][pLider] != 14
		&& PlayerInfo[playerid][pMembro] != 17 && PlayerInfo[playerid][pLider] != 17 && PlayerInfo[playerid][pMembro] != 18 && PlayerInfo[playerid][pLider] != 18
		&& PlayerInfo[playerid][pMembro] != 19 && PlayerInfo[playerid][pLider] != 19 && PlayerInfo[playerid][pMembro] != 20 && PlayerInfo[playerid][pLider] != 20
		&& PlayerInfo[playerid][pMembro] == 21 && PlayerInfo[playerid][pLider] == 21)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não pode usar esse comando!" );
   			return true;
        }
		if(IsPlayerConnected(playerid))
    	{
 			if(UsouComando[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Você já usou esse comando uma vez, espere mais 5 minutos!");
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /assaltar [id] [Quantia]");
				return true;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /assaltar [id] [Quantia]");
				return true;
			}
			new money = strval(tmp);
			if(money < 1000 || money > 50000) { SendClientMessage(playerid, COLOR_GREY, " O Preço Tem que ser entre R$ 1000 e R$ 50000!"); return true; }
			if (IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
					if(PlayerInfo[giveplayerid][pLevel] == 2)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não pode assaltar novatos!");
						return true;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
				   		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você está assaltando R$%d de %s.", money, giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s: Isso é um assalto, pague R$%d !", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "/aceitar assalto para aceitar");
	                    format(string, sizeof(string), "*%s está assaltando %s!", sendername,giveplayer);
				        ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				        OfAssalto[giveplayerid] = playerid;
						precoassalto[giveplayerid] = money;
						SetPlayerCriminal(playerid,255, "Tentativa de Assalto");
				        UsouComando[playerid] = 1;
						SetTimerEx("UsarNovamente",300000,0,"d",playerid);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Esse jogador não está perto de você!");
					}
	    		}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   ID/Nome Invalido !");
				    return true;
				}
			}
	    }
		return true;
	}
	if(strcmp(cmd, "/mala", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[64];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
			    SendClientMessage(playerid, COLOR_AZULBB, "USE: /mala [Nome]");
			    SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis para VIPS: info, guardar(Guardar Arma), pegar(Pegar Arma)");
			    if(IsACop(playerid))
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis para COPs: revistar(Revista a Mala), apreender(Retira as Armas)");
			    }
			    return true;
			}
			if(strcmp(x_nr,"info",true) == 0)
			{
				if(PlayerInfo[playerid][pVIP] < 0)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Você precisa ser um usuário VIP para usar esse comando !");
			    	return true;
				}
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
       			for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = ChecarveiculoThiago(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Você não está perto de nenhum carro !");
			        }

			        case 1:
			        {
			        	if(CarroMala(result))
		        		{
							if(PlayerInfo[playerid][pPcarkey] == result) { }
							else if(PlayerInfo[playerid][pPcarkey2] == result) { }
							else if(PlayerInfo[playerid][pPcarkey3] == result) { }
							else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               		    	else
               		    	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Porta-Malas trancado !");
			           			return true;
							}
						}
						else
			            {
			            	SendClientMessage(playerid, COLOR_GREY, "  Somente carros VIP tem espaço no porta-malas !");
			            	return true;
						}
			            if(IsPlayerInAnyVehicle(playerid))
      					{
			                SendClientMessage(playerid, COLOR_GREY, "  Você não pode abrir o porta-malas de dentro do carro");
			            	return true;
               			}
						SendClientMessage(playerid, COLOR_WHITE, "|______________[ Sistema de Porta-Malas ]______________|");
						for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
						{
						    new gunname[100];
						    if(vehTrunk[result][slot] != 0)
						    {
						        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						        format(string, sizeof(string), "| Arma %i: %s (Munição: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						    else
						    {
						        format(string, sizeof(string), "| Arma %i: Vazio (Munição: N/A)", slot);
						        SendClientMessage(playerid, COLOR_WHITE, string);
						    }
						}
               			GetPlayerName(playerid, sendername, sizeof(sendername));
                        format(string, sizeof(string), "* %s está mexendo no porta-malas.", sendername);
                  		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						return true;
			        }
			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
			            return true;
			        }
			    }
			    return true;
			}
			else if(strcmp(x_nr,"guardar",true) == 0)
			{
				if(PlayerInfo[playerid][pVIP] < 0)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Você precisa ser um usuário VIP para usar esse comando !");
			    	return true;
				}
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = ChecarveiculoThiago(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }
			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Você não está perto de nenhum carro !");
			        }

			        case 1:
			        {
			            if(vehTrunkCounter[result] != (MAX_TRUNK_SLOTS-1))
			            {
                			if(CarroMala(result))
		        			{
								if(PlayerInfo[playerid][pPcarkey] == result) { }
								else if(PlayerInfo[playerid][pPcarkey2] == result) { }
								else if(PlayerInfo[playerid][pPcarkey3] == result) { }
								else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               		    		else
               		    		{
			               			SendClientMessage(playerid, COLOR_GREY, "  Porta-Malas trancado !");
			           				return true;
								}
							}
			            	if(ReduceTime[playerid] == 1)
			            	{
			            	    SendClientMessage(playerid, COLOR_GREY, "   Espere 3 segundos para usar o comando de novo !");
			            	    return true;
			            	}
			                if(IsPlayerInAnyVehicle(playerid))
			                {
			                    SendClientMessage(playerid, COLOR_GREY, "  Você não pode abrir o porta-malas de dentro do carro");
			                    return true;
			                }
                            new buffer[512];
                            new gunname[100];
                            new gunID = GetPlayerWeapon(playerid);
                            new gunAmmo = GetPlayerAmmo(playerid);

                            if(gunID != 0 && gunAmmo != 0)
                            {
                                ReduceTime[playerid] = 1;
                				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
                                GetWeaponName(gunID, gunname, sizeof(gunname));
                                vehTrunkCounter[result]++;
                                vehTrunk[result][vehTrunkCounter[result]] = gunID;
                                vehTrunkAmmo[result][vehTrunkCounter[result]] = gunAmmo;
                                format(buffer, sizeof(buffer), "Você guardou uma %s (Munição: %i) no porta-mala do carro.", gunname, gunAmmo);
                                SendClientMessage(playerid, COLOR_WHITE, buffer);
                                RemovePlayerWeapon(playerid, gunID);
                                GetPlayerName(playerid, sendername, sizeof(sendername));
                                format(string, sizeof(string), "* %s abre o porta-malas e guarda armas.", sendername);
                                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                SaveTrunk();
                                return true;
                            }
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, " Porta-mala cheio");
			                return true;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
			            return true;
			        }
			    }
			    return true;
			}
			else if(strcmp(x_nr,"pegar",true) == 0)
			{
				if(PlayerInfo[playerid][pVIP] < 0)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Você precisa ser um usuário VIP para usar esse comando !");
			    	return true;
				}
			    new counter = 0;
			    new result;
			    new plyName[MAX_PLAYER_NAME];

			    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			    for(new i; i != MAX_VEHICLES; i++)
			    {
			        new dist = ChecarveiculoThiago(3.5, playerid, i);
			        if(dist)
			        {
			            result = i;
			            counter++;
			        }
			    }

			    switch(counter)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Você não está perto de nenhum carro !");
			            return true;
			        }
			        case 1:
			        {
			            if(IsPlayerInAnyVehicle(playerid))
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Você não pode abrir o porta-malas de dentro do carro");
			                return true;
			            }
			            if(ReduceTime[playerid] == 1)
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Espere 3 segundos para usar o comando de novo !");
			                return true;
		            	}
		            	if(CarroMala(result))
		        		{
							if(PlayerInfo[playerid][pPcarkey] == result) { }
							else if(PlayerInfo[playerid][pPcarkey2] == result) { }
							else if(PlayerInfo[playerid][pPcarkey3] == result) { }
							else if(PlayerInfo[playerid][pPcarkey4] == result) { }
               		    	else
               		    	{
			               		SendClientMessage(playerid, COLOR_GREY, "  Porta-Malas trancado !");
			           			return true;
							}
						}
			            if(vehTrunkCounter[result] != 0)
			            {
			                ReduceTime[playerid] = 1;
               				SetTimerEx("ReduceTimer", 3000, false, "i", playerid);
			                new buffer[512];
			                new gunName[100];

			                GivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
			                format(buffer, sizeof(buffer), "Você pegou uma %s (Munição: %i) do porta-mala do veiculo.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                SendClientMessage(playerid, COLOR_WHITE, buffer);
			                vehTrunk[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
			                vehTrunkCounter[result]--;
			                GetPlayerName(playerid, sendername, sizeof(sendername));
			                format(string, sizeof(string), "* %s abre o porta-malas e retira armas.", sendername);
			                ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                SaveTrunk();
			                return true;
			            }
			            else
			            {
			                SendClientMessage(playerid, COLOR_GREY, "   Porta-mala vazio ! ");
			                return true;
			            }
			        }

			        default:
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
			            return true;
			        }
			    }
			    return true;
			}
			else if(strcmp(x_nr,"revistar",true) == 0)
			{
			    if(IsACop(playerid))
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = ChecarveiculoThiago(3.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "   Você não está perto de nenhum carro !");
			        	}

			        	case 1:
			        	{
			            	if(IsPlayerInAnyVehicle(playerid))
      						{
			                	SendClientMessage(playerid, COLOR_GREY, "  Você não pode abrir o porta-malas de dentro do carro");
			            		return true;
               				}
							SendClientMessage(playerid, COLOR_WHITE, "|______________[ Sistema de Porta-Malas ]______________|");
							for(new slot = 1; slot != MAX_TRUNK_SLOTS; slot++)
							{
							    new gunname[100];
							    if(vehTrunk[result][slot] != 0)
							    {
							        GetWeaponName(vehTrunk[result][slot], gunname, sizeof(gunname));
						    	    format(string, sizeof(string), "| Arma %i: %s (Munição: %i)", slot, gunname, vehTrunkAmmo[result][slot]);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
						    	else
						    	{
						        	format(string, sizeof(string), "| Arma %i: Vazio (Munição: N/A)", slot);
						        	SendClientMessage(playerid, COLOR_WHITE, string);
						    	}
							}
							GetPlayerName(playerid, sendername, sizeof(sendername));
    	                    format(string, sizeof(string), "* COP %s abre o porta-malas e ve o que tem dentro.", sendername);
        	          		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							return true;
			        	}

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
				            return true;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial ! ");
					return true;
				}
			    return true;
			}
			else if(strcmp(x_nr,"apreender",true) == 0)
			{
			    if(IsACop(playerid))
			    {
			    	new counter = 0;
			    	new result;
			    	new plyName[MAX_PLAYER_NAME];

				    GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
				    for(new i; i != MAX_VEHICLES; i++)
				    {
				        new dist = ChecarveiculoThiago(3.5, playerid, i);
			    	    if(dist)
			        	{
			           		result = i;
			            	counter++;
			        	}
			    	}
			    	switch(counter)
			    	{
			        	case 0:
			        	{
			            	SendClientMessage(playerid, COLOR_GREY, "   Você não está perto de nenhum carro !");
			        	}

			        	case 1:
			        	{
			            	if(IsPlayerInAnyVehicle(playerid))
      						{
			                	SendClientMessage(playerid, COLOR_GREY, "  Você não pode apreender o que está no porta-malas de dentro do carro");
			            		return true;
               				}
               				if(vehTrunkCounter[result] != 0)
			            	{
			                	new gunName[100];
			                	GetWeaponName(vehTrunk[result][vehTrunkCounter[result]], gunName, sizeof(gunName));
			                	GivePlayerWeapon(playerid, vehTrunk[result][vehTrunkCounter[result]], vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                	format(gstring, sizeof(gstring), "Você apreendeu uma %s (Munição: %i) do porta-mala do veiculo.", gunName, vehTrunkAmmo[result][vehTrunkCounter[result]]);
			                	SendClientMessage(playerid, COLOR_WHITE, gstring);
			                	vehTrunk[result][vehTrunkCounter[result]] = '\0';
			                	vehTrunkAmmo[result][vehTrunkCounter[result]] = '\0';
			                	vehTrunkCounter[result]--;
			                	GetPlayerName(playerid, sendername, sizeof(sendername));
			                	format(gstring, sizeof(gstring), "* COP %s apreende armas do porta-malas.", sendername);
        	          			ProxDetector(30.0, playerid, gstring, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			                	SaveTrunk();
			                	return true;
			            	}
			            	else
			            	{
			                	SendClientMessage(playerid, COLOR_GREY, "   Porta-mala vazio ! ");
			                	return true;
			            	}
			        	}

				        default:
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Foi encontrado mais de um carro nesse raio");
				            return true;
			    	    }
			    	}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial ! ");
					return true;
				}
			    return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /mala [name]");
			    SendClientMessage(playerid, COLOR_WHITE, "Nomes Disponíveis: info, garma(Guardar Arma), parma(Pegar Arma)");
			    if(IsACop(playerid))
			    {
			        SendClientMessage(playerid, COLOR_WHITE, "/mala revistar & apreender Somente para Policiais");
			    }
			    return true;
			}
	    }
	    return true;
	}
//=======================[NOVO ROUBAR]========================
	if(strcmp(cmd,"/roubar",true)==0)
	{
	    if(PlayerInfo[playerid][pMembro] != 5 && PlayerInfo[playerid][pLider] != 5
		&& PlayerInfo[playerid][pMembro] != 14 && PlayerInfo[playerid][pLider] != 14
		&& PlayerInfo[playerid][pMembro] != 17 && PlayerInfo[playerid][pLider] != 17
		&& PlayerInfo[playerid][pMembro] != 18 && PlayerInfo[playerid][pLider] != 18
		&& PlayerInfo[playerid][pMembro] != 19 && PlayerInfo[playerid][pLider] != 19
		&& PlayerInfo[playerid][pMembro] != 20 && PlayerInfo[playerid][pLider] != 20
		&& PlayerInfo[playerid][pMembro] != 21 && PlayerInfo[playerid][pLider] != 21
		&& GetPlayerOrg(playerid) != 6 && GetPlayerOrg(playerid) != 12
		&& GetPlayerOrg(playerid) != 13	&& GetPlayerOrg(playerid) != 15
		&& GetPlayerOrg(playerid) != 23)
	    {
			SendClientMessage(playerid,COLOR_GREY,"Você não pode assaltar !");
            return true;
		}
		if(roubando[playerid] == 1)
	    {
	   		SendClientMessage(playerid, COLOR_GRAD5, "Você ja está roubando algum lugar.");
	    	return true;
    	}
		if(PlayerToPoint(2.0,playerid, 2144.4177,1641.5360,993.5761))
		{
	    	if(roubobanco == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return true;
	    	}
	    	if(temporoubobanco == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre do banco espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar o cofre banco! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar o banco.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo ao Banco");
            roubando[playerid] = 1;
            ProvocoBanco[playerid] = 1;
            roubobanco = 1;
            temporoubobanco = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 2144.3711,1641.4792,993.5761);
            SetPlayerFacingAngle(playerid,1.2666);
            SetTimer("Aroubo", 220000, 0);
            SetTimerEx("AnimRouboBanco", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
        	tempobanco = SetTimerEx("RouboBanco", 40000, 0, "i", playerid);
        	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
        	RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}
		else if(PlayerToPoint(2.0,playerid,820.6042,8.3990,1004.1962))
		{
	    	if(roubolot == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nesse cofre.");
	    		return true;
	    	}
	    	if(temporoubolot == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram o cofre da Lotérica espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar o cofre da Lotérica! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar a Lotérica.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo a Lotérica");
            roubando[playerid] = 1;
            ProvocoLot[playerid] = 1;
            roubolot = 1;
            temporoubolot = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 820.9382,8.4020,1004.1957);
            SetPlayerFacingAngle(playerid,91.2409);
            SetTimer("Aroubo2", 220000, 0);
        	tempolot = SetTimerEx("RouboLot", 40000, 0, "i", playerid);
         	SetTimerEx("AnimRouboLot", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
           	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
            RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}
		else if(PlayerToPoint(2.0,playerid,303.9740,-168.8060,999.5938))
		{
	    	if(rouboloja1 == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nessa loja.");
	    		return true;
	    	}
	    	if(temporouboloja1 == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Loja de Armas 1 espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar a Loja de Armas 1! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar a Loja de Armas 1.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo a Loja de Armas 1");
            roubando[playerid] = 1;
            ProvocoLoja1[playerid] = 1;
            rouboloja1 = 1;
            temporouboloja1 = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 303.9886,-169.0725,999.5938);
            SetPlayerFacingAngle(playerid,178.6149);
            SetTimer("Aroubo3", 220000, 0);
        	tempoloja1 = SetTimerEx("RouboLoja1", 40000, 0, "i", playerid);
         	SetTimerEx("AnimRouboLoja", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
           	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
           	RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}
		else if(PlayerToPoint(2.0,playerid,294.8272,-57.8448,1001.5156))
		{
	    	if(rouboloja2 == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nessa loja.");
	    		return true;
	    	}
	    	if(temporouboloja2 == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Ammu Nation espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar a Ammu Nation! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar a Ammu Nation.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo a Ammu Nation");
            roubando[playerid] = 1;
            ProvocoLoja2[playerid] = 1;
            rouboloja2 = 1;
            temporouboloja2 = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 294.8029,-57.8727,1001.5156);
            SetPlayerFacingAngle(playerid,356.5900);
            SetTimer("Aroubo4", 220000, 0);
        	tempoloja2 = SetTimerEx("RouboLoja2", 40000, 0, "i", playerid);
         	SetTimerEx("AnimRouboAmmu", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
           	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
            RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}
		//========== BINCO ==================================================================================
		    else if(PlayerToPoint(2.0,playerid,211.3917,-96.1839,1005.2578))
		    {
	    	if(roubobinco == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nessa Loja de Roupas.");
	    		return true;
	    	}
	    	if(temporoubobinco == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Binco espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar a Binco ! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar a Binco.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo a Loja de Roupas");
            roubando[playerid] = 1;
            ProvocoBinco[playerid] = 1;
            roubobinco = 1;
            temporoubobinco = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 211.3817,-96.1272,1005.2578);
            SetPlayerFacingAngle(playerid,2.5667);
            SetTimer("Aroubo6", 220000, 0);
        	tempobinco = SetTimerEx("RouboBinco", 40000, 0, "i", playerid);
         	SetTimerEx("AnimRouboBinco", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
           	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
           	RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}
		//================= ZIP =========================================================================
  			else if(PlayerToPoint(2.0,playerid,162.1060,-79.8251,1001.8047))
		    {
	    	if(roubozip == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nessa Loja de Roupas.");
	    		return true;
	    	}
	    	if(temporoubozip == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Zip espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar a Zip ! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar a Zip.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo a Loja de Roupas");
            roubando[playerid] = 1;
            ProvocoZip[playerid] = 1;
            roubozip = 1;
            temporoubozip = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 162.1254,-79.7925,1001.8047);
            SetPlayerFacingAngle(playerid,269.5058);
            SetTimer("Aroubo7", 220000, 0);
        	tempozip = SetTimerEx("RouboZip", 40000, 0, "i", playerid);
         	SetTimerEx("AnimRouboZip", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
           	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
           	RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}

		//================= VICTIM =========================================================================
  			else if(PlayerToPoint(2.0,playerid,205.4029,-11.5629,1005.2109))
		    {
	    	if(roubovictim == 1)
	    	{
	   			SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma tentativa de roubo nessa Loja de Roupas.");
	    		return true;
	    	}
	    	if(temporoubovictim == 1)
	    	{
	   			SendClientMessage(playerid,COLOR_GREY,"Já roubaram a Victim espere 3 minutos para roubar de novo !");
	    		return true;
	    	}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            format(string, sizeof(string), "[Segurança] %s e os %s estão tentando roubar a Victim ! ID:[%d]", playername, NomeORG(playerid) , playerid);
			SendClientMessageToAll(GetPlayerColor(playerid), string);
			SendClientMessage(playerid, COLOR_GRAD5, "Espere 40 segundos para terminar de roubar a Victim.");
			SetPlayerCriminal(playerid,255, "Tentativa de Roubo a Loja de Roupas");
            roubando[playerid] = 1;
            ProvocoVictim[playerid] = 1;
            roubovictim = 1;
            temporoubovictim = 1;
            Controle(playerid, 0);
            SetPlayerPos(playerid, 205.4959,-11.5585,1005.2109);
            SetPlayerFacingAngle(playerid,90.3009);
            SetTimer("Aroubo8", 220000, 0);
            tempovictim = SetTimerEx("RouboVictim", 40000, 0, "i", playerid);
            SetTimerEx("AnimRouboVictim", 900, 0, "i", playerid);
            ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
           	SetPlayerAttachedObject(playerid, 0, 1550, 1, 0.000000, -0.313611, 0.021003, 0.445490, 86.754409, 355.370239, 0.926815, 1.000000, 1.000000);
           	RoubandoComando[playerid] = 1;
        	KillRoubando[playerid] = SetTimerEx("Roubando", 40000, 0, "i", playerid);
        	SetTimerEx("AcabarMochila", 120000, 0, "i", playerid);
        	return true;
		}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não esta em um local de assalto !");
				return true;
			}
		//return true;
	}
    //CREEEEEEEEEEEEEEEEEEEEEUUUUUUUUUUUUUUUUUU
    if(strcmp(cmd, "/creu", true) == 0 || strcmp(cmd, "/créu", true) == 0)
    {
        GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* %s está dançando o Créu !.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        ApplyAnimation(playerid,"CHOPPA","CHOPPA_back",4.1,1,1,1,1,1);
        SendClientMessage(playerid, COLOR_DBLUE, "ÉÉÉÉ Crééééééu BRNM OWNA PORRA !!!");
        return true;
    }

// praia
	if (strcmp(cmd, "/praia", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 229.359,-1807.635,4.141); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,229.359,-1807.635,4.141);
					SetPlayerFacingAngle(playerid,226.0);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
			}
		}
		return true;
	}
	//depositoconce
if (strcmp(cmd, "/concedeposito", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1341)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 5813.2998,-6893.2002,13); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,5813.2998,-6893.2002,13);
					SetPlayerFacingAngle(playerid,226.0);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
			}
		}
		return true;
	}
	if (strcmp(cmd, "/irtunning", true) == 0 || strcmp(cmd, "/tunning", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2692.8701,211.2929,4.3281); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,-2692.8701,211.2929,4.3281);
					SetPlayerFacingAngle(playerid,226.0);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
			}
		}
		return true;
	}
	if (strcmp(cmd, "/fim", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -2415.3999,2219.0083,4.9844); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,-2415.3999,2219.0083,4.9844);
					SetPlayerFacingAngle(playerid,226.0);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
			}
		}
		return true;
	}
	if (strcmp(cmd, "/ircamera", true) == 0 || strcmp(cmd, "/ircameraa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 539.5369,-891.6889,1304.2013); LinkVehicleToInterior(tmpcar, 0);
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
				}
				else
				{
					SetPlayerInterior(playerid,0);
					SetPlayerVirtualWorld(playerid,0);
					SetPlayerPos(playerid,539.5369,-891.6889,1304.2013);
					SetPlayerFacingAngle(playerid,2.7415);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/descricao", true) == 0 && PlayerInfo[playerid][pAdmin] == DONO)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtokEx(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ Editar ]______________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /descricao [nome] (Use para casas e empresas)");
				return true;
			}
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Descrição da Casa: %d mudada para %s", i, tmp);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					strmid(HouseInfo[i][hDiscription], tmp, 0, strlen(tmp), 255);
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Descrição da Empresa(Empresa com interior): %d mudada para %s", i, tmp);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					strmid(BizzInfo[i][bMessage], tmp, 0, strlen(tmp), 255);
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "Descrição da SEmpresa(Empresa sem interior): %d mudada para %s", i, tmp);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					strmid(SBizzInfo[i][sbMessage], tmp, 0, strlen(tmp), 255);
				}
			}
			Atualizar3Dtexts();
			OnPropUpdate();
		}
		return true;
	}
	if(strcmp(cmd,"/trazersemp",true)==0  && PlayerInfo[playerid][pAdmin] == DONO)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	    {
	       	SendClientMessage(playerid,COLOR_GREY,"USE: /trazersemp [ID]");
	       	return true;
	    }
		new idsemp = strval(tmp);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		SBizzInfo[idsemp][sbEntranceX] = x;
		SBizzInfo[idsemp][sbEntranceY] = y;
		SBizzInfo[idsemp][sbEntranceZ] = z;
		return true;
	}
	if(strcmp(cmd,"/trazeremp",true)==0  && PlayerInfo[playerid][pAdmin] == DONO)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	    {
	       	SendClientMessage(playerid,COLOR_GREY,"USE: /trazeremp [ID]");
	       	return true;
	    }
		new idemp = strval(tmp);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		BizzInfo[idemp][bEntranceX] = x;
		BizzInfo[idemp][bEntranceY] = y;
		BizzInfo[idemp][bEntranceZ] = z;
		return true;
	}
	if(strcmp(cmd,"/trazercasa",true)==0  && PlayerInfo[playerid][pAdmin] == DONO)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
	    {
	       	SendClientMessage(playerid,COLOR_GREY,"USE: /trazercasa [ID]");
	       	return true;
	    }
		new idcasa = strval(tmp);
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);
		HouseInfo[idcasa][hEntrancex] = x;
		HouseInfo[idcasa][hEntrancey] = y;
		HouseInfo[idcasa][hEntrancez] = z;
		return true;
	}
	if(strcmp(cmd,"/mudarcasa",true)==0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
		{
		    tmp = strtok(cmdtext, idx);
	    	if(HouseEntered[playerid] != 255)
   			{
   				SendClientMessage(playerid,COLOR_GREY,"Você não pode usar esse comando dentro de uma casa");
	        	return true;
	    	}
	    	if(GetPlayerMoney(playerid) < 200)
			{
				SendClientMessage(playerid, COLOR_GRAD5, "Você não tem dinheiro suficiente R$200");
				return true;
			}
			if(!strlen(tmp))
	    	{
	        	SendClientMessage(playerid,COLOR_GREY,"USE: /mudarcasa [1 a 10]");
	        	return true;
	    	}
			new idcasa = strval(tmp);
	    	switch (idcasa)
			{
				case 1:
				{
					HouseInfo[House][hExitx] = 2467.4951;
					HouseInfo[House][hExity] = -1698.4037;
					HouseInfo[House][hExitz] = 1013.5078;
					HouseInfo[House][hInt] = 2;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 1.");
				}
	    		case 2:
				{
				    HouseInfo[House][hExitx] = 318.564971;
					HouseInfo[House][hExity] = 1118.209960;
					HouseInfo[House][hExitz] = 1083.882812;
					HouseInfo[House][hInt] = 5;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 2.");
				}
				case 3:
				{
				    HouseInfo[House][hExitx] = 2324.419921;
					HouseInfo[House][hExity] = -1145.568359;
					HouseInfo[House][hExitz] = 1050.710083;
					HouseInfo[House][hInt] = 12;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 3.");
				}
				case 4:
				{
				    HouseInfo[House][hExitx] = 235.508994;
					HouseInfo[House][hExity] = 1189.169897;
					HouseInfo[House][hExitz] = 1080.339966;
					HouseInfo[House][hInt] = 3;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 4.");
				}
				case 5:
				{
				    HouseInfo[House][hExitx] = 225.756989;
					HouseInfo[House][hExity] = 1240.000000;
					HouseInfo[House][hExitz] = 1082.149902;
					HouseInfo[House][hInt] = 2;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 5.");
				}
				case 6:
				{
				    HouseInfo[House][hExitx] = 223.043991;
					HouseInfo[House][hExity] = 1289.259888;
					HouseInfo[House][hExitz] = 1082.199951;
					HouseInfo[House][hInt] = 1;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 6.");
				}
				case 7:
				{
				    HouseInfo[House][hExitx] = 225.630997;
					HouseInfo[House][hExity] = 1022.479980;
					HouseInfo[House][hExitz] = 1084.069946;
					HouseInfo[House][hInt] = 7;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 7.");
				}
				case 8:
				{
				    HouseInfo[House][hExitx] = 328.493988;
					HouseInfo[House][hExity] = 1480.589966;
					HouseInfo[House][hExitz] = 1084.449951;
					HouseInfo[House][hInt] = 15;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 8.");
				}
				case 9:
				{
				    HouseInfo[House][hExitx] = 234.0843;
					HouseInfo[House][hExity] = 1064.6896;
					HouseInfo[House][hExitz] = 1084.2108;
					HouseInfo[House][hInt] = 6;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 9.");
				}
				case 10:
				{
				    HouseInfo[House][hExitx] = 260.4075;
					HouseInfo[House][hExity] = 1238.6646;
					HouseInfo[House][hExitz] = 1084.2578;
					HouseInfo[House][hInt] = 9;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "Interior setado para id 10.");
				}

			}
			GivePlayerMoney(playerid,-200);
			SBizzInfo[13][sbTill] += 200;
			ExtortionSBiz(13, 200);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			OnPropUpdate();
			return true;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem uma casa");
			return true;
		}
	}

//||||||||||||||||||||||||||| fim dos teleportes ||||||||||||||||||||||||
  	if (strcmp(cmd, "/autorizacao", true) == 0)
	{
        new org = GetPlayerOrg(playerid);
		if(org == 25)
		{
			new name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
		    if(PlayerToPoint(2.0, playerid, 249.6155,67.6277,1003.6406))
		    {
		    	if(playerid != INVALID_PLAYER_ID)
		        {
		        	SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você comprou uma licença para liberar um preso -R$2000.");
	  				GivePlayerMoney(playerid, -2000);
					ApprovedAdvogado[playerid] = 1;
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é um Advogado");
		}
		return true;
	}
// ||||||||||||||||||||||||||||||||||ELEVADORES ORGS/GANGS/MAFIAS||||||||||||||||||||||||||||||||||
	if (strcmp(cmd, "/epc", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
		{
		    if(PlayerToPoint(2.0, playerid, 903.3665,-1272.1648,14.5035))
			{
	    		SetPlayerPos(playerid, 901.4695,-1276.5393,23.0861);
    		}
		    if(PlayerToPoint(2.0, playerid, 901.4695,-1276.5393,23.0861))
		    {
		        SetPlayerPos(playerid, 903.3665,-1272.1648,14.5035);
		    }
		}
		return true;
	}
 	if (strcmp(cmd, "/epf", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
		{
		    if(PlayerToPoint(2.0, playerid, 611.1056,-583.5060,18.2109))
			{
	    		SetPlayerPos(playerid, 618.5693,-566.6214,26.1432);
    		}
		    if(PlayerToPoint(2.0, playerid, 618.5693,-566.6214,26.1432))
		    {
		        SetPlayerPos(playerid, 611.1056,-583.5060,18.2109);
		    }
		}
		return true;
	}
	if (strcmp(cmd, "/epr", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
		{
		    if(PlayerToPoint(2.0, playerid, 1275.4336,-1650.2966,13.5291))
			{
	    		SetPlayerPos(playerid, 1258.8270,-1686.1508,44.4594);
    		}
		    if(PlayerToPoint(2.0, playerid, 1258.8270,-1686.1508,44.4594))
		    {
		        SetPlayerPos(playerid, 1275.4336,-1650.2966,13.5291);
		    }
		}
		return true;
	}

	if (strcmp(cmd, "/etaxi", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10)
		{
		    if(PlayerToPoint(2.0, playerid, 964.0209,-1465.8312,13.4589))
			{
	    		SetPlayerPos(playerid, 965.7349,-1465.6044,21.3783);
    		}
		    if(PlayerToPoint(2.0, playerid, 965.7349,-1465.6044,21.3783))
		    {
		        SetPlayerPos(playerid, 964.0209,-1465.8312,13.4589);
		    }
		}
		return true;
	}

	if (strcmp(cmd, "/ealuguel", true) == 0)
	{
	    if(PlayerToPoint(2.0, playerid, 2139.7847,-1176.8256,23.9922))
		{
	   		SetPlayerPos(playerid, 2138.6680,-1168.9967,28.1484);
    	}
	    if(PlayerToPoint(2.0, playerid, 2138.6680,-1168.9967,28.1484))
	    {
	        SetPlayerPos(playerid, 2139.7847,-1176.8256,23.9922);
	    }
		return true;
	}
	if (strcmp(cmd, "/edetran", true) == 0)
	{
	if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)
		{
	    if(PlayerToPoint(2.0, playerid, 1653.8035,-1655.3170,22.5156))
		{
	   		SetPlayerPos(playerid, 1676.8268,-1645.2245,14.2286);
    	}
	    if(PlayerToPoint(2.0, playerid, 1676.8268,-1645.2245,14.2286))
	    {
	        SetPlayerPos(playerid, 1653.8035,-1655.3170,22.5156);
	    }
	}
	return true;
}
if (strcmp(cmd, "/edeposito", true) == 0)
	{
	if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)
		{
	    if(PlayerToPoint(2.0, playerid, 1657.5554,-1656.3943,22.5156))
		{
	   		SetPlayerPos(playerid, 1658.4657,-1691.3813,15.6094);
    	}
	    if(PlayerToPoint(2.0, playerid, 1658.4657,-1691.3813,15.6094))
	    {
	        SetPlayerPos(playerid, 1657.5554,-1656.3943,22.5156);
	    }
	}
	return true;
} 
	if (strcmp(cmd, "/ecv", true) == 0)//Comando Vermelho
	{
	    if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
		{
		    if(PlayerToPoint(2.0, playerid, 2155.8628,-1814.8253,13.5469))
			{
	    		SetPlayerPos(playerid, 2154.7327,-1822.2981,18.8672);
    		}
		    if(PlayerToPoint(2.0, playerid, 2154.7327,-1822.2981,18.8672))
		    {
		        SetPlayerPos(playerid, 2155.8628,-1814.8253,13.5469);
		    }
		}
		return true;
	}
	if (strcmp(cmd, "/hqpf", true) == 0)
	{
	    if(PlayerToPoint(2.0, playerid, 627.6543,-571.9244,17.6055))
		{
            SetPlayerInterior(playerid, 0);
    		SetPlayerPos(playerid, 2122.5610,-2270.5774,20.6719);
    		PlayerInfo[playerid][pInt] = 0;
   		}
	    if(PlayerToPoint(2.0, playerid, 2122.5610,-2270.5774,20.6719))
	    {
		    SetPlayerInterior(playerid, 0);
	        SetPlayerPos(playerid, 627.6543,-571.9244,17.6055);
	        PlayerInfo[playerid][pInt] = 0;
	    }
		return true;
	}
	if (strcmp(cmd, "/ehit", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8)
		{
		    if(PlayerToPoint(2.0, playerid, 970.1837,-1520.5553,13.5502))
			{
	    		SetPlayerPos(playerid, 969.8785,-1516.9382,23.7241);
    		}
		    if(PlayerToPoint(2.0, playerid, 969.8785,-1516.9382,23.7241))
		    {
		        SetPlayerPos(playerid, 970.1837,-1520.5553,13.5502);
		    }
		}
		return true;
	}

    //-------------------------------[Pay]--------------------------------------------------------------------------
	if(strcmp(cmd, "/pagar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /pagar [id] [quantidade]");
				return true;
			}

			//giveplayerid = strval(tmp);
	        giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /pagar [id] [quantidade]");
				return true;
			}
			if(admtrampando[giveplayerid] != 0 && PlayerInfo[giveplayerid][pAdmin] >= 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar para admins em trabalho!");
			    return true;
			}
			moneys = strval(tmp);
			if(moneys > 1000 && PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser nível 2 ou mais para pagar mais que R$ 1000");
				return true;
			}
			if(moneys < 1 || moneys > 1000)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Pagamento mínimo 1, máximo 1000 por vez");
			    return true;
			}
		    new log[35];
		    format(log, sizeof(log), "Emprestimo/%s.ini", PlayerName(playerid));
			if(dini_Int(log, "Emprestimo") >= 1)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você primeiro precisa quitar o empréstimo!");
			    return true;
   			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pLocal] == 106)
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando neste local");
						return true;
					}
					if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						playerdinheiro = GetPlayerMoney(playerid);
						if (playerdinheiro >= moneys)
						{
						    ConsumingMoney[giveplayerid] = 1;
							GivePlayerMoney(playerid, (0 - moneys));
							GivePlayerMoney(giveplayerid, moneys);
							format(string, sizeof(string), "   Você pagou %s(Para: %d), R$%d.", giveplayer,giveplayerid, moneys);
							PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "   Você recebeu R$%d de %s(ID: %d).", moneys, sendername, playerid);
							SendClientMessage(giveplayerid, COLOR_GRAD1, string);
							format(string, sizeof(string), "%s deu grana para %s", sendername, giveplayer);
							PayLog(string);
							if(moneys >= 1000000)
							{
								ABroadCast(COLOR_YELLOW,string,1);
							}
							PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "* %s deu alguma grana para %s.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "   Você não está com essa grana no bolso.");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Jogador está longe.");
					}
				}//invalid id
			}
			else
			{
				format(string, sizeof(string), "   %d não é um jogador ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return true;
	}

	if(strcmp(cmd, "/caridade", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /caridade [quantidade]");
				return true;
			}
			if(PlayerInfo[playerid][pLocal] == 106)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando neste local");
				return true;
			}
			moneys = strval(tmp);
			if(moneys < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Mínimo R$1");
				return true;
			}
			if(GetPlayerMoney(playerid) < moneys)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "Você não está com essa grana no bolso.");
				return true;
			}
			GivePlayerMoney(playerid, -moneys);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "%s obrigado pela sua doação de R$%d.",sendername, moneys);
			printf("%s", string);
			SBizzInfo[25][sbTill] += moneys;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			PayLog(string);
			SaveStuff();
		}
		return true;
	}

	new bombath;
	if(strcmp(cmd, "/comprarbomba", true)==0 || strcmp(cmd, "/cbomba", true)==0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		new location = PlayerInfo[playerid][pLocal];
		if(location == 99 || location == 100 || location == 102)
	    {
	    if(GetPlayerMoneyEx(playerid) < 200) return SendClientMessage(playerid,COLOR_GREY,"Você não tem R$200 para comprar uma bomba.");
		if (pbomba3[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Você já comprou uma bomba deverá esperar 10 minutos");
        {
	        if(org == 6 || org == 15 || org == 23)
	        {
	        SendClientMessage(playerid, 0x33FF00FF, "Você comprou uma bomba por R$200");
	        pbomba3[playerid] = 1;
	        pbomba[playerid] = 1;
	        GivePlayerMoney(playerid, - 200);
		    return true;
			}
		  }
		}
	}
	if(strcmp(cmd, "/plantarbomba", true)==0 || strcmp(cmd, "/pbomba", true)==0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if(usarbombas == 1) return SendClientMessage(playerid, COLOR_GREY, "Uma bomba já foi plantada,você deverá esperar");
	    {
		if (pbomba[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Você já plantou uma bomba deverá esperar.");
        {
	        if(org == 6 || org == 15 || org == 23)
	        {
            format(string, sizeof(string), "Terrorista{23f518} %s {f5f3f0}Plantou uma bomba em algum local da cidade",playername);
  			SendClientMessageToAll(COLOR_WHITE, string);
  			GetPlayerPos(playerid,PosBombaX,PosBombaY,PosBombaZ);
  			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
  			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
  			new Float: X, Float: Y, Float: Z;
  			bombath = CreateObject(1279,X,Y,Z,0,0,0);
	        pbomba[playerid] = 0;
	        pbomba2[playerid] = 1;
	        usarbombas = 1;
	        SetTimer("usarbomba", 2700000, false);
		    return true;
			}
		}
		}
	}
    if(strcmp(cmd, "/desarmarbomba", true)==0 || strcmp(cmd, "/dsbomba", true)==0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if (pbomba2[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "Você não plantou uma bomba");
        {
	        if(org == 6 || org == 15 || org == 23)
	        {
            format(string, sizeof(string), "Terrorista{23f518} %s {f5f3f0}Desarmou a bomba",playername);
  			SendClientMessageToAll(COLOR_WHITE, string);
  			SetTimerEx("usebomb", 1200000, false, "i", playerid);
  			DestroyObject(bombath);
  			DestroyObject(bombath);
  			DestroyObject(bombath);
	        pbomba[playerid] = 0;
	        pbomba2[playerid] = 0;
		    return true;
			}
		}
	}
    if(strcmp(cmd, "/detonarbomba", true)==0 || strcmp(cmd, "/dbomba", true)==0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if (pbomba2[playerid] != 1) return SendClientMessage(playerid, COLOR_GREY, "Você não plantou uma bomba");
        {
	        if(org == 6 || org == 15 || org == 23)
	        {
            format(string, sizeof(string), "Terrorista{23f518} %s {f5f3f0}Detonou a bomba",playername);
  			SendClientMessageToAll(COLOR_WHITE, string);
  			CreateExplosion(PosBombaX,PosBombaY,PosBombaZ,7,30.0);
  			CreateExplosion(PosBombaX,PosBombaY+3,PosBombaZ,7,30.0);
  			CreateExplosion(PosBombaX+8,PosBombaY,PosBombaZ+4,7,30.0);
  			CreateExplosion(PosBombaX,PosBombaY+2,PosBombaZ+4,7,30.0);
  			CreateExplosion(PosBombaX+10,PosBombaY+2,PosBombaZ+4,7,30.0);
  			CreateExplosion(PosBombaX+12,PosBombaY+2,PosBombaZ+4,7,30.0);
  			CreateExplosion(PosBombaX+20,PosBombaY+2,PosBombaZ+20,7,30.0);
  			CreateExplosion(PosBombaX+23,PosBombaY+2,PosBombaZ+22,7,30.0);
  			CreateExplosion(PosBombaX+30,PosBombaY+5,PosBombaZ+40,7,30.0);
  			CreateExplosion(PosBombaX+38,PosBombaY+7,PosBombaZ+20,7,30.0);
  			CreateExplosion(PosBombaX+45,PosBombaY+10,PosBombaZ+80,7,30.0);
  			SetTimerEx("usebomb", 1200000, false, "i", playerid);
	        pbomba[playerid] = 0;
	        pbomba2[playerid] = 0;
  			DestroyObject(bombath);
  			DestroyObject(bombath);
  			DestroyObject(bombath);
		    return true;
			}
		}
	}
	 if(strcmp(cmd, "/dsbombanuclear", true)==0)
	 {
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
  		if (org == 3)
  		{
	        if(PlayerToPoint(5.0,playerid, PosBombaXN,PosBombaYN,PosBombaZN))
	        {
	        format(string, sizeof(string), "[Notícias] O %s do Exercito está tentando desarmar a bomba nuclear.",PlayerName(playerid));
  			SendClientMessageToAll(COLOR_EXE, string);
  			SetTimerEx("usebombnuclear", 1200000, false, "i", playerid);
			SetTimerEx("DesativandoBomba3", 5000, false, "i", playerid);
		    return true;
		    }
		}
	}
 	if(strcmp(cmd, "/comprarnuclear", true )==0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if(PlayerToPoint(3.0,playerid,-1437.9080,-1538.4395,101.7578))
	    {
		if (pbombanuclear3[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Você já comprou uma bomba nuclear deverá esperar 1 hora.");
        {
	        if(org == 6 || org == 15)
	        {
	        if(GetPlayerMoney(playerid) < 1000000) { SendClientMessage(playerid, COLOR_GREY, "Você não tem R$1.000.000");return true;}
	        SendClientMessage(playerid, 0x33FF00FF, "Você comprou uma Bomba nuclear no valor de R$1.000.000.");
	        pbombanuclear3[playerid] = 1;
	        pbombanuclear[playerid] = 1;
	        GivePlayerMoneyEx(playerid, -1000000);
		    return 1;
			}
			else
			{
                SendClientMessage(playerid, COLOR_GREY, "Você não é terrorista não pode comprar bomba(s).");
                return true;
   			}
		  }
		}
		return true;
	 }
	if(strcmp(cmd, "/plantarnuclear", true) == 0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: tempo [ 10-25 Minutos ] [ R$1000000-R$3000000 ]");
			SendClientMessage(playerid, COLOR_GRAD1, "Exemplo : /plantarnuclear 13 1000000");
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /plantarnuclear [tempo] [dinheiro]");
			return true;
		}
		new stat;
		stat = strval(tmp);
		if(stat < 10 || stat > 25)
		{
		   SendClientMessage(playerid, COLOR_GREY, "De 10 a 25 Minutos");
		   return true;
        }
		new dinheirobomb;
		tmp = strtok(cmdtext, idx);
		dinheirobomb = strval(tmp);
		if(dinheirobomb < 1000000 || dinheirobomb > 3000000)
		{
		   SendClientMessage(playerid, COLOR_GREY, "De R$1000000 a R$3000000");
		   return true;
        }
        if(GetPlayerInterior(playerid) > 0)
        {
		   SendClientMessage(playerid, COLOR_GREY, "Você não colocar bomba nuclear em interiores!");
		   return true;
        }
		if(usarbombasnuclear == 1) return SendClientMessage(playerid, COLOR_GREY, "Uma bomba nuclear já foi plantada espere 1 hora.");
	    {
			if (pbombanuclear[playerid] == 0) return SendClientMessage(playerid, COLOR_GREY, "Você não tem uma bomba nuclear vá até mercado negro e compre uma.");
	        {
		        if(org == 6 || org == 15)
		        {
					TimeM = stat;
					TimeS = 0;
				   /* for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pLider] == 7 && PlayerInfo[i][pMembro] == 3 || PlayerInfo[i][pLider] == 3)
							{
								  //Esse espaço somente para veficiar se o lider ou o membro está online.
							}
							else
							{
							   SendClientMessage(playerid, COLOR_GREY, "O Exercito ou Prefeito não está online você não pode plantar a bomba!");
							   return true;
							}

                        }
					}*/
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(PlayerInfo[i][pLider] == 7 || PlayerInfo[i][pLider] == 3)
						    {
						        if(PlayerInfo[i][pLider] == 7)
						        {
						            SendClientMessage(i,COR_PRE,"[Notícias]: Bomba plantada Prefeito evite a explosão a qualquer custo.");
						            SendClientMessage(i,COR_PRE,"Importante: Ofereçã uma recompensa para os jogadores matar-lo o terrorista.");
								}
						        if(PlayerInfo[i][pLider] == 1 || PlayerInfo[i][pLider] == 2 || PlayerInfo[i][pLider] == 11 || PlayerInfo[i][pLider] == 16)
								{
									SendClientMessage(i,COLOR_YELLOW,"[Notícias]: Bomba nuclear plantada ajude o Exercito na missão.");
								}
							}
							else if(PlayerInfo[i][pLider] == 1 || PlayerInfo[i][pLider] == 2 || PlayerInfo[i][pLider] == 11 || PlayerInfo[i][pLider] == 16)
							{
								SendClientMessage(i, COLOR_YELLOW ,"Evite a explosão a qualquer custo matando o terrorista.");
							}
						}
					}
		            format(string, sizeof(string), "{3399FF}[Terrorista]: %s{f5f3f0} Plantou uma {E10E0E}Bomba Nuclear{f5f3f0}. Tempo da Bomba %d:0%d",playername,TimeM,TimeS, dinheirobomb);
		  			SendClientMessageToAll(COLOR_WHITE, string);
		  			format(string, sizeof(string), "[Terrorista]: %s Eu quero R$%d ou vou explodir tudo mundo!",playername, dinheirobomb);
		  			SendClientMessageToAll(GetPlayerColor(playerid), string);
                    SendClientMessageToAll(COLOR_YELLOW, "[Notícias]: Bomba Plantada Organizações Governamentais evitem explosão a qualquer custo.");
                    //SendClientMessage(playerid,-1, "CUIDADO A BOMBA SÓ PODERÁ SER DETONADA DE ACORDO COM AS REGRAS DO SERVER SUJEITO A PUNIÇÃO.");
					GetPlayerPos(playerid,PosBombaXN,PosBombaYN,PosBombaZN);
		  			new Float:x,Float:y,Float:z, Float:a;
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, a);
					x += (2 * floatsin(-a, degrees));
					y += (2 * floatcos(-a, degrees));
		   			NuclearBomb = CreateObject(3786, x, y, z - 0.55, 0, 0, 96);
		  			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		  			ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			        pbombanuclear[playerid] = 0;
			        pbombanuclear2[playerid] = 1;
			        usarbombasnuclear = 1;
			        BOMBAON = 1;
			        BOMBAONTIME = 1;
			        ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
			        SendClientMessage(playerid,0xFFCC33FF,"Bomba Ativada. Use /detonarnuclear para Detonar a {E10E0E}Bomba Nuclear{f5f3f0}.");
			        SetTimer("usarbombanuclear", 3600000, false);
			        SetWeather(44);
					TimeT = SetTimer("UpdateTimeT", 1000, true);
			        if(IsPlayerConnected(playerid))
			    	{
			    		for(new i = 0; i < MAX_PLAYERS; i++)
						{
							PlayAudioStreamForPlayer(i, "https://dl.dropboxusercontent.com/s/kn5rxhl2glflp21/Alarme%20de%20avacua%C3%A7%C3%A3o%20Nuclear%20%28nuclear%20evacuation%20alarm%29.mp3?token_hash=AAFbRKqJ5CcVHRI6fp8X0JhNSqg_BuHjgag2ZvQZxUNR9w&dl=1");
							PlantouBombaNuclear[i] = 1;
							TextDrawShowForPlayer(i, Textdraw0[i]);
						}
					}
					PlayerInfo[playerid][pPlantei] = 1;
			    	return 1;
				}
		  	}
		}
		return 1;
	}
	if(strcmp(cmd, "/desarmarnuclear", true )==0)
	{
		new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if (pbombanuclear2[playerid] != 1) return SendClientMessage(playerid, 0x999999AA, "Você não Ativou nenhuma {E10E0E}Bomba Nuclear{f5f3f0}");
        {
	        if(org == 6 || org == 15)
	        if(PlayerToPoint(5.0,playerid, PosBombaXN,PosBombaYN,PosBombaZN))
	        {
            format(string, sizeof(string), "{3399FF}[Terrorista]: %s{f5f3f0} Desarmou uma {E10E0E}Bomba Nuclear{f5f3f0}.",playername);
  			SendClientMessageToAll(COLOR_WHITE, string);
  			SetTimerEx("usebombnuclear", 3600000, false, "i", playerid);
  			DestroyObject(NuclearBomb);
  			DestroyObject(NuclearBomb);
  			KillTimer(TimeT);
  			KillTimer(VERVIDA);
  			TimeM = 0;
			TimeS = 0;
			BOMBAON = 0;
	        pbombanuclear[playerid] = 0;
	        pbombanuclear2[playerid] = 0;
  			if(IsPlayerConnected(playerid))
	    	{
	    	    pBombNuclear[playerid] = 0;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    PlantouBombaNuclear[i] = 0;
			    TextDrawHideForPlayer(i, Textdraw0[i]);
        		StopAudioStreamForPlayer(i);
			}

			}
		}
		return 1;
	}
	if(strcmp(cmd, "/detonarnuclear", true )==0)
	{
  		new org = GetPlayerOrg(playerid);
		new Float:x,Float:y,Float:z;
		GetPlayerName(playerid,playername,sizeof(playername));
		if(TimeM < 3) return SendClientMessage(playerid, 0x999999AA, "Você não pode desativar a {E10E0E}Bomba Nuclear{f5f3f0} menos de 3 Minutos");
		if (pbombanuclear2[playerid] != 1) return SendClientMessage(playerid, 0x999999AA, "Você Não Tem Nenhum Controle de {E10E0E}Bomba Nuclear{f5f3f0}");
        {
	        if(org == 6 || org == 15)
	        {
	    		GetObjectPos(NuclearBomb, x, y, z);
	        	DestroyObject(NuclearBomb);
	        	CreateExplosion(x, y, z, 7, 10);
	        	CreateExplosion(x, y, z+3, 7, 10);
	        	CreateExplosion(x, y, z+6, 7, 10);
	        	CreateExplosion(x, y, z+9, 7, 10);
	        	CreateExplosion(x, y, z+12, 7, 10);
	        	CreateExplosion(x, y, z+15, 7, 10);
	        	CreateExplosion(x, y, z+18, 7, 10);
	        	CreateExplosion(x, y, z+21, 7, 10);
	        	CreateExplosion(x, y+7, z+21, 7, 10);
	        	CreateExplosion(x, y-7, z+21, 7, 10);
	        	CreateExplosion(x+7, y, z+21, 7, 10);
	        	CreateExplosion(x-7, y, z+21, 7, 10);
	        	CreateExplosion(x, y, z+24, 7, 10);
	        	CreateExplosion(x, y+10, z+24, 7, 10);
	        	CreateExplosion(x, y-10, z+24, 7, 10);
	        	CreateExplosion(x+10, y, z+24, 7, 10);
	        	CreateExplosion(x-10, y, z+24, 7, 10);
	        	CreateExplosion(x, y, z+27, 7, 10);
	        	CreateExplosion(x, y+7, z+27, 7, 10);
	        	CreateExplosion(x, y-7, z+27, 7, 10);
	        	CreateExplosion(x+7, y, z+27, 7, 10);
	        	CreateExplosion(x-7, y, z+27, 7, 10);
	        	CreateExplosion(x, y, z+30, 7, 10);
	        	CreateExplosion(x, y+3, z+30, 7, 10);
	        	CreateExplosion(x, y-3, z+30, 7, 10);
	        	CreateExplosion(x+3, y, z+30, 7, 10);
	        	CreateExplosion(x-3, y, z+30, 7, 10);
	        	KillTimer(TimeT);
	  			TimeM = 0;
				TimeS = 0;
				BOMBAON = 0;
				KillTimer(TimeT);
	 			KillTimer(VERVIDA);
	        	SendClientMessage(playerid,COR_GRO,"Bomba Detonada.");
	        	GetPlayerName(playerid, sendername, sizeof(sendername));
	            format(string, 128, "{E10E0E}[Terrorista]: %s{f5f3f0} Detonou a {E10E0E}Bomba Nuclear{f5f3f0}.",sendername, playerid);
			    SendClientMessageToAll(0xFFFFFFAA , string);
				SetWeather(45);
	  			SetTimerEx("usebombnuclear", 3600000, false, "i", playerid);
		        pbombanuclear[playerid] = 0;
		        pbombanuclear2[playerid] = 0;
			}
  			for(new i = 0; i < MAX_PLAYERS; i++)
	    	{
 		       if(IsPlayerConnected(i))
			   {
				   if(IsPlayerInRangeOfPoint(i, 200.0, 101.9628,1327.7841,1131.8562) || IsPlayerInRangeOfPoint(i, 200.0, 117.9559,1328.1917,1137.8330))
			       {
                         pBombNuclear[playerid] = 0;
                         new Float:px, Float:py, Float:pz;
						 GetPlayerPos(i, px, py, pz);
						 PlayerPlaySound(i, 1159, px, py, pz);
						 PlantouBombaNuclear[i] = 1;
						 StopAudioStreamForPlayer(i);
						 TextDrawHideForPlayer(i, Textdraw0[i]);
					}
				    return true;
				 }
				 VERVIDA = SetTimer("Vidaperder", 10000, false);
			     if(IsPlayerInRangeOfPoint(i,5000,x,y,z))
				   {
					  if(IsPlayerInAnyVehicle(i))
					  {
						   SetVehicleHealth(GetPlayerVehicleID(i),0.0);
					   }
					   for(new allplayers = 0; allplayers < GetMaxPlayers(); allplayers++)
					   SetPlayerHealth(allplayers, 0.0);
					   //PlayerPlaySound(playerid, 1159, x, y, z);
					   pBombNuclear[playerid] = 0;
					}
					new Float:px, Float:py, Float:pz;
					GetPlayerPos(i, px, py, pz);
					PlayerPlaySound(i, 1159, px, py, pz);
				 	PlantouBombaNuclear[i] = 1;
				 	StopAudioStreamForPlayer(i);
					TextDrawHideForPlayer(i, Textdraw0[i]);
				}
			}
  	         return true;
		}
	if(strcmp(cmd, "/localizarbomba", true)==0)
	{
	   if(PlayerInfo[playerid][pLider] == 3 || PlayerInfo[playerid][pMembro] == 3)
	   {
    	   if(PlayerToPoint(3.0,playerid, -1289.6526,508.3094,11.1953))
     	   {
			  if(BOMBAON == 1)
			  {
     	        SetTimerEx("LocalizandoBomba3", 5000, false, "i", playerid);
     	        SendClientMessage(playerid, COR_EXE, "Computador: Rastreando Alto índice de radiação por favor aguarde.");
		        return true;
		      }
		      else
		      {
				 SendClientMessage(playerid, COLOR_GREY, "Não tem nem um(a) bomba nuclear plantada.");
				 return true;
		      }
		   }
       }
	    else
	    {
	        SendClientMessage(playerid, COR_EXE, "Você não é do Exército!");
            return true;
	    }
	}
	if(strcmp(cmd, "/coordenadabomba", true)==0)
	{
    	if(PlayerInfo[playerid][pBombL] == 1)
     	{
     	    SetPlayerCheckpoint(playerid, PosBombaXN+10,PosBombaYN+32,PosBombaZN+8,8.0);
		    return true;
		}
		else
		{
			SendClientMessage(playerid,  COR_EXE, "O Exército Ainda não Localizou a Bomba ou Você não é do Exército");
			return true;
		}
	}
 	if(strcmp(cmd, "/tunar", true) == 0)
	{
	    if(!PlayerToPoint(3.0,playerid,2774.0159,-1603.3855,10.9219) && !PlayerToPoint(3.0, playerid, 1871.7122,-1844.0450,14.6965)) { SendClientMessage(playerid, COLOR_GRAD2, "Você não está no tunning"); return true; }
	    {
		new playerstate = GetPlayerState(playerid);
		if(playerstate == PLAYER_STATE_DRIVER)
		{
		    return ModCar(playerid);
		}
		else if(playerstate == PLAYER_STATE_PASSENGER)
		{
		    return ModCar(playerid);
		}
		else
		{
		   return SendClientMessage(playerid, COLOR_RED, "[ERRO]: Você não está em um veiculo!");
		}
		}
		}

   if (strcmp(cmd, "/viajar", true) == 0)
   {
      if(IsPlayerInRangeOfPoint(playerid, 2.0, 1642.3599,-2238.1589,13.4979) || IsPlayerInRangeOfPoint(playerid, 2.0, -1421.4819,-287.3259,14.1484) || IsPlayerInRangeOfPoint(playerid, 2.0, 1673.2532,1447.8350,10.7860))
      {
         ShowPlayerDialog(playerid, ViajarThiago, DIALOG_STYLE_LIST, "Viagens BRNM", "Los Santos  R$50\nLas Venturas  R$50\nSan Fierro  R$50", "Viajar", "Cancelar");
         SendClientMessage(playerid, -1, "Escolha a cidade para onde deseja viajar...");
         return true;
      }
      else SendClientMessage(playerid, -1, "Para usar este comando deve estar perto do aeroporto !");
      return true;
   }

   	/*if(strcmp(cmd, "/travarcaixinha", true) == 0)
 	{
 	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] > 3)
	 	{
	 	    caixinha = 0;
	 	    SendClientMessage(playerid, COLOR_YELLOW, "[BRNM] Caixinha travada!");
	 	}
		return true;
	}
	if(strcmp(cmd, "/liberarcaixinha", true) == 0)
 	{
 	    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] > 3)
	 	{
	 	    caixinha = char;
	 	    SendClientMessage(playerid, COLOR_YELLOW, "[BRNM] Caixinha liberada!");
		}
		return true;
	}*/

	if (strcmp(cmd, "/mudarplaca", true)   == 0)
	{
	ShowPlayerDialog(playerid, 10101, DIALOG_STYLE_INPUT, "D.E.T.R.A.N", "Digite um nome para sua Placa:\n\nMaximo de 8 digitos", "Alterar", "Cancelar");
	return true;
	}

if(strcmp(cmd, "/meavalie", true) == 0)
{
if(IsPlayerConnected(playerid))
{
if(PlayerInfo[playerid][pHelper] >= 1)
{
tmp = strtok(cmdtext,idx);
giveplayerid = ReturnUser(tmp);
if(Avaliado[playerid] == 1)
{
format(string,sizeof(string),"Você tem que esperar 5 minutos para poder enviar um /meavalie de novo.");
SendClientMessage(playerid, COLOR_GRAD1, string);
return true;
}
if(!strlen(tmp))
{
SendClientMessage(playerid,COLOR_GRAD1,"USE: /meavalie [ID/Nome]");
return true;
}
if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GRAD1, "Você não pode pedir avaliação a si mesmo!"); return true; }
if(IsPlayerConnected(giveplayerid))
{
Avaliado[playerid] = 1;
PedirAvaliar = playerid;
TempoAvaliar[playerid] = SetTimerEx("Avaliar", 120000, 0, "i", playerid);
SendClientMessage(playerid, VERDE2, "Você enviou o seu pedido de avaliação, aguarde resposta!");
format(string,sizeof(string)," {00FF00}Helper %s: {FFFFFF}gostou da minha ajuda ?",PlayerName(playerid));
ShowPlayerDialog(giveplayerid, 9282, DIALOG_STYLE_MSGBOX, "Avaliação do Helper", string, "Sim", "Nao");
}
}
}
return true;
}

	if(strcmp(cmd, "/infoserver", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_GREEN,"···········································");
		    SendClientMessage(playerid, COLOR_YELLOW, "IP do Servidor: 66.85.154.132:7777");
		    SendClientMessage(playerid, COLOR_YELLOW2, "{FFFFFF}Forum do Servidor: www.{FFD700}brnm{FFFFFF}.forumeiros.com");
			format(string, sizeof(string), "{16E031}BRNM: {FAB875}%d Players Online.", ContarJogadores());
			SendClientMessage(playerid,COLOR_YELLOW,string);
		    SendClientMessage(playerid, COLOR_GREEN,"···········································");
		}
		return true;
	}
	if (strcmp(cmd, "/andar", true) == 0)
	{
		tmp = strtok(cmdtext,idx);
		if (!strlen(tmp)) return SendClientMessage(playerid,COLOR_GRAD1,"USE: /andar [0-13]");
		SetPlayerWalkingStyle(playerid, strval(tmp));
		format(string, sizeof(string), "Seu novo estilo de andar e o numero: %d", strval(tmp));
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
		return true;
	}
    	if(strcmp("/tazer", cmd, true) == 0)
	{
	    new org = GetPlayerOrg(playerid);
   		if(org != 1 && org != 2 && org != 3 && org != 11 && org != 16)
   		{
			SendClientMessage(playerid,COLOR_GREY," Você não é um Oficial!");
   			return 1;
    	}
        SetPlayerAttachedObject(playerid, 7, 18642, 6, 0.06, 0.01, 0.08, 180.0, 0.0, 0.0);
	    HaveTaser[playerid] = 1;
		format(tmp,sizeof(tmp),"Você pegou sua tazer");
		SendClientMessage(playerid,COLOR_LIGHTBLUE,tmp);
		SendClientMessage(playerid, COLOR_GRAD1, "Use: /rtazer Para remover sua tazer.");
		GetPlayerName(playerid,sendername,sizeof(sendername));
   		format(string, sizeof(string), "%s Pegou sua tazer.", sendername, playerid);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	else if(strcmp("/rtazer", cmd, true) == 0)
	{
	    new org = GetPlayerOrg(playerid);
   		if(org != 1 && org != 2 && org != 3 && org != 11 && org != 16)
   		{
			SendClientMessage(playerid,COLOR_GREY," Você não é um Oficial!");
   			return 1;
    	}
        RemovePlayerAttachedObject(playerid, 0);
        HaveTaser[playerid] = 0;
		format(tmp,sizeof(tmp),"Você guardou sua tazer.");
		SendClientMessage(playerid,COLOR_LIGHTBLUE,tmp);
		SendClientMessage(playerid, COLOR_GRAD1, "Use: /tazer Para pegar sua arma de choque.");
		GetPlayerName(playerid,sendername,sizeof(sendername));
   		format(string, sizeof(string), "%s Guardou sua tazer.", sendername, playerid);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	}
	if(strcmp(cmd, "/Cativeiroinvd", true)==0)
	{
		if (invadiocat[playerid] == 1) return SendClientMessage(playerid, COLOR_GREY, "Você devera esperar 3 minutos por já ter Explodido o Cativeiro");
        {
            new org = GetPlayerOrg(playerid);
            GetPlayerName(playerid,playername,sizeof(playername));
	   		if(org != 1 && org != 2 && org != 3 && org != 11 && org != 16)
	   		{
				SendClientMessage(playerid,COLOR_GREY," Você não é um Policial!");
	   			return true;
	    	}
	        if(PlayerToPoint(15.0, playerid, 2349.23535156,-659.25500488,127.84769440)|| PlayerToPoint(15.0, playerid, 2349.23535156,-659.25500488,127.84769440))
		    {
		    format(string, sizeof(string), "O Policial{E8000B} %s {f5f3f0}está está tentando Explodir o Portão do Cativeiro para impedir um Sequestro",playername);
  			SendClientMessageToAll(COLOR_WHITE, string);
  			SendClientMessage(playerid, COLOR_GREY, "Espere 20 Segundos para que a Bomba Detone");
  			SetTimerEx("invadircat", 20000, 0, "i", playerid);
  			SetTimer("Usarcat", 220000, 0);
  			invadiocat[playerid] = 1;
		    return true;
			}
		}
	}

 	if(strcmp(cmd, "/Cativeiro", true) == 0)
    {
        new org = GetPlayerOrg(playerid);
		GetPlayerName(playerid,playername,sizeof(playername));
		if ((org == 5 || org == 14 || org == 17 || org == 18 || org == 19 || org == 20 || org == 13 || org == 12 || org == 15 || org == 6 || org == 21 || org == 23) && PlayerToPoint(20.0, playerid,2349.23168945,-659.26922607,125.21961975))
	    {
			MoveObject(Portaocat, 2349.231689,-659.269226,118.219619,3);
			GameTextForPlayer(playerid, "~w~Cativeiro~n~~b~Aberto", 5000, 3);
			SetTimer("Portaogcatandando",5000, false);
		}
		return true;
    }
   if (strcmp("/motoron", cmdtext, true, 10) == 0)
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carro = GetPlayerVehicleID(playerid);
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
        {
        if(chealth <= 300.0) {
        
        GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
		SetVehicleParamsEx(carro, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
        
        return true;
		}
        if(carro != INVALID_VEHICLE_ID)
        {
                if(motor[playerid] == 0)
                {
                    GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
                    SetVehicleParamsEx(carro, VEHICLE_PARAMS_ON, lu, alar, por, cap, porma, ob);
                    motor[playerid] = 1;
                    SendClientMessage(playerid, 0xFFFFFFAA, "Veiculo {2F991A}Ligado!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "* %s liga o motor do veículo.", sendername);
                    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                }

		      }
            } 
    }
     if (strcmp("/motoroff", cmdtext, true, 10) == 0)
    {
        new mot, lu, alar, por, cap, porma, ob;
        new carro = GetPlayerVehicleID(playerid); 
	  if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
      {
        if(chealth <= 300.0) {

        GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
		SetVehicleParamsEx(carro, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);

        return true;
		}
        if(carro != INVALID_VEHICLE_ID)
            { 
                if(motor[playerid] == 1)
                {
                    GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
                    SetVehicleParamsEx(carro, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
                    motor[playerid] = 0;
                    SendClientMessage(playerid, 0xFFFFFFAA, "Veiculo {E31919}Desligado!");
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "* %s desliga o motor do veículo.", sendername);
                    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                } 
              if(chealth <= 300.0) {

                motor[playerid] = 0;

                }
			  }
            }
    }
    if(strcmp(cmd, "/blindar", true) ==0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(!PlayerToPoint(2.0,playerid,1025.0767,-1024.0460,31.7695))
            {
                SendClientMessage(playerid,COLOR_RED,"Você não está na Oficina de Blindagem!");
                return 1;
            }
		    new vehicleid = GetPlayerVehicleID(playerid);
			if(GetPlayerMoneyEx(playerid) < 5000)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
				return 1;
			}
            if(!IsPlayerInAnyVehicle(playerid))
            {
                SendClientMessage(playerid,COLOR_GRAD2,"Você não está dentro de um veículo!");
                return 1;
            }
            new modeloo = GetVehicleModel(vehicleid);
            if(modeloo == 522 || modeloo == 581 || modeloo == 586 || modeloo == 521 || modeloo == 468 || modeloo == 463 || modeloo == 461 || modeloo == 462 || modeloo == 448)
            {
                SendClientMessage(playerid,COLOR_RED,"Este Modelo de Veiculo nao Pode ser Blindado!.");
                return 1;
            }
            new Text3D:vehicle3Dtext;
            new carid = GetPlayerVehicleID(playerid);
            SendClientMessage(playerid, COLOR_GREEN, "Você blindou seu veículo, ele resistirá a tiros e batidas!");
            GivePlayerMoney(playerid, -5000);
            RepairVehicle(GetPlayerVehicleID(playerid));
			SetVehicleHealth(GetPlayerVehicleID(playerid), 5000.0);
			format(string,sizeof(string), "BLINDADO", 10 + random(89), 10 + random(89));
            vehicle3Dtext = Create3DTextLabel(string, -1, 0.0, 0.0, 0.0, 20.0, 0, 1 );
            Attach3DTextLabelToVehicle(vehicle3Dtext, carid, 0.0, 0.0, 0.0);
            return 1;
        }
        else
        {
            SendClientMessage(playerid,COLOR_GREY,"Você não está na Oficina ou não está em um veículo.");
        }
	}
   	if(strcmp(cmd, "/cveiculo", true) == 0 || strcmp(cmd, "/controleveiculo", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			ShowPlayerDialog(playerid, DIALOG_RANGE, DIALOG_STYLE_LIST,"Controle do Veiculo","\n{0FE700}Luzes \n{B9FF00}Alarme \n{F5E000}Abrir/Fechar Capô \n{8433CD}Abrir/Fechar Porta-Malas ","Ok","Sair");
		}
		return true;
	}

 	if(strcmp(cmd, "/sacar_input_type", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {

	        if(IsPlayerConnected(playerid))
	        {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sacar [Quantidade]");
				format(string, sizeof(string), "  Voce tem R$%d na sua conta!.", PlayerInfo[playerid][pConta]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return true;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sacar [Quantidade]");
				format(string, sizeof(string), "  Voce tem R$%d na sua conta!.", PlayerInfo[playerid][pConta]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return true;
			}
			if (cashdeposit > PlayerInfo[playerid][pConta] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Voce  não tem tudo isso na sua conta! !");
				return true;
			}
		    ConsumingMoney[playerid] = 1;
		    new saldo;
		    saldo = PlayerInfo[playerid][pConta];
			GivePlayerMoneyEx(playerid,cashdeposit);
			PlayerInfo[playerid][pConta] = saldo-cashdeposit;
			format(string, sizeof(string), "[BRNM] Você Sacou R$%d da sua conta. Total: R$%d ", cashdeposit,PlayerInfo[playerid][pConta]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return true;
			}else
			{
			SendClientMessage(playerid, COLOR_GREY, "  Você não esta no banco ou em um Caixa Eletronico!");
			}
		}
		return true;
	}

    if(strcmp(cmd, "/votacao", true) == 0)
        {
			if (PlayerInfo[playerid][pAdmin] >= 3)
  			{
            if(Votacao[playerid] == 1) return SendClientMessage(playerid, -1, "Já existe uma votação em andamento!");
                ShowPlayerDialog(playerid, cPergunta, DIALOG_STYLE_INPUT, "{FFFFFF}» {C9C9C9}Insira a pergunta da votação: {FFFFFF}«", "Insira a pergunta que será feita na votação:", "Confirmar","Cancelar");
                return true;
            }
        }
        if(strcmp(cmd, "/encerrarvotacao", true) == 0)
        {
      		if (PlayerInfo[playerid][pAdmin] >= 3)
   			{
            SendClientMessage(playerid, 0x00FF00FF, "Encerrastes a votação!");
            Votacao[playerid] = 0;
            
            new Nome[MAX_PLAYER_NAME];
            GetPlayerName(playerid, Nome, sizeof(Nome));
            format(aStr, sizeof(aStr), "%s encerrou a votação » VOTOS: {00FF00}SIM » [%d] {FFFFFF}e {E31919}NÃO » [%d]", Nome, Sim, Nao);
            SendClientMessageToAll(-1, aStr);
            Sim = 0;
            Nao = 0;
            for(new a = 0; a < MAX_PLAYERS; a++)
            {
                Votou[a] = 0;
            }
            return true;
        	}
        }
   if(strcmp(cmd, "/votekick", true) == 0)
    {
    	new reason[256];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "[USE]: /votekick [ID] [Motivo]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "Irá iniciar uma votação para kickar um jogador. (Duração de 30 segundos)");
			SendClientMessage(playerid, COLOR_LIGHTRED, "Qualquer abuso, brincaderias ou mal uso resultará no seu banimento permanente, use com responsabilidade.");
			return 1;
		}
	    if(ContarJogadores() < 3) // <= 3
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Precisa ter mais de 3 players para iniciar uma votação.");
			return 1;
		}
		if(PlayerInfo[playerid][pLevel] < 4) {
        SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser mais de level 4 para iniciar uma votação.");
        return true;
        }
        for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] > 0)
			{
            	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Tem Administradores online USE: /relatorio para pedir ajuda.");
       	            return 1;
  	           }
        }
		if(VoteKick == 1)
		{
			SendClientMessage(playerid, COLOR_LIGHTRED,  "Há uma Votação em andamento, Por Favor Aguarde..");
			return 1;
		}
		if(PlayerInfo[giveplayerid][pAdmin] >= 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode kickar um Administrador.");
			return 1;
		}
		giveplayerid = ReturnUser(tmp);
		if(giveplayerid != INVALID_PLAYER_ID)
		{
	    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			while ((idx < length) && ((idx - offset) < (sizeof(reason) - 1)))
			{
				reason[idx - offset] = cmdtext[idx];
				idx++;
			}
			reason[idx - offset] = EOS;
			if(!strlen(reason))
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "[USE]: /votekick [ID] [Motivo]");
				return 1;
			}
			else
			{

				format(string, sizeof(string), "O Jogador %s iniciou uma votação para kickar %s Motivo: %s", PlayerName(playerid), PlayerName(giveplayerid), reason, VOTETIME / 1000);
				print(string);
				SendClientMessageToAll(COLOR_LIGHTRED, string);
				SendClientMessageToAll(COLOR_LIGHTRED, "Se este jogador estiver utilizando cheat ou violando alguma regra digite /sim para kicka-lo.");
				Votes = 1;
				SetTimerEx("VoteTimer", VOTETIME, 0, "i", giveplayerid);
				VoteKick = 1;
				Voted[playerid] = 1;
			}
		}
		else if(giveplayerid == INVALID_PLAYER_ID)
		{
			format(string, sizeof(string), "%d Não é um jogador valido.", giveplayerid);
			SendClientMessage(playerid, COLOR_LIGHTRED, string);
		}
   }
   
	if(strcmp(cmd, "/sim", true) == 0)
	{
		if(VoteKick == 0) {
	    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Não hã votação em andamento.");
		return true;
		}
	    if(Voted[playerid] == 1)
	    {
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você ja votou.");
		}
		else
		{
            new ContadorJogadores = ContarJogadores();
		    Voted[playerid] = 1;
		    Votes++;
		    format(string, sizeof(string), "Você votou (%d/%d)", PlayerName(playerid), Votes, (ContadorJogadores /= 2)+1);
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		}
		return 1;
}
	if(strcmp(cmd, "/neon", true) == 0)
	{
 	if(PlayerInfo[playerid][pVIP] == 1)
	{
	if(IsPlayerInAnyVehicle(playerid))
	{
    ShowPlayerDialog(playerid, 8899, DIALOG_STYLE_LIST, "Tunning de Neons BRNM:", "Azul\nVermelho\nVerde\nBranco\nRosa\nAmarelo\nRemover todos os Neons", "Selecionar", "Cancelar");
    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 10.0);
    }
    else
    {
    SendClientMessage(playerid, COLOR_WHITE,"Você não está em um veículo");
    }
    }
    return true;
	}

	if (strcmp(cmd, "/teleportes", true) == 0){
 	if(IsPlayerConnected(playerid)){
 	if(PlayerInfo[playerid][pAdmin] >= 1 || PlayerInfo[playerid][pHelper] >= 1){
	ShowPlayerDialog(playerid,TELEPORTE,DIALOG_STYLE_LIST,"Teleportes","Head Quarters\nTerritorios\nLugares em geral\nEventos","Aceitar","Cancelar");}
	}return true;}

if(strcmp(cmd, "/criarevento", true) == 0){if(IsPlayerConnected(playerid)){
if(PlayerInfo[playerid][pAdmin] >= 4){if(Evento == 1){SendClientMessage(playerid, COLOR_WHITE, "Já está decorrendo um evento use, /pararevento para abrir outro!");return true;}if(Evento == 0){
SendClientMessage(playerid, COLOR_WHITE, "Você está criando um evento e chamando todos do BRNM.");
for(new i = 0; i < MAX_PLAYERS; i++){if(IsPlayerConnected(i)){
Evento = 1;GetPlayerName(playerid, sendername, sizeof(sendername));
format(string,sizeof(string),"Administração: %s está chamando todos para um Evento.\nPara ir ao evento clique em 'SIM'.\nPara não ir clique em 'NÃO'.",sendername);
ShowPlayerDialog(i, EVENTOC, DIALOG_STYLE_MSGBOX, "EVENTO INICIADO", string, "Sim", "Não");
GetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);}}}}return true;}}

if(strcmp(cmd, "/pararevento", true) == 0){if(PlayerInfo[playerid][pAdmin] >= 4){if(Evento == 0){SendClientMessage(playerid, COLOR_DBLUE, "Não está ativo um evento atualmente, use /criarevento para criar um!");return true;}
if(Evento == 1){Evento = 0;GetPlayerName(playerid, sendername, sizeof(sendername));
format(string, sizeof(string), "Administrador(a) %s cancelou um evento que estava ocorrendo.", sendername);
SendClientMessageToAll(COLOR_LIGHTBLUE,string);}}return true;}


     if(strcmp(cmd, "/grampear", true) == 0 || strcmp(cmd, "/rastrear", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "USE: /grampear [ID/Nome]");
                return true;
            }
            if(strcmp(tmp,"off",true)==0)
            {
                PlayerInfo[playerid][pGrampo] = INVALID_PLAYER_ID;
                SendClientMessage(playerid, COLOR_GRAD1, "Você desligou a escuta");
                return true;
            }
            if(gTeam[playerid] == 2  || IsACop(playerid))
			{
                if(IsPlayerConnected(giveplayerid))
                {
                    if(giveplayerid != INVALID_PLAYER_ID)
                    {
                        PlayerInfo[playerid][pGrampo] = giveplayerid;
                        format(string, sizeof(string), "Você grampeou o Tefelone de %s.", PlayerName(giveplayerid));
                        SendClientMessage(playerid, COLOR_GRAD1, "Para desligar a escuta use: /grampear off");
                        SendClientMessage(playerid, COLOR_GREY, string);
                        return true;
                    }
                }
            }
            else
            {
                format(string, sizeof(string), "   %d nao e um jogador ativo.", giveplayerid);
                SendClientMessage(playerid, COLOR_GRAD1, string);
            }
        }
        return true;
    }
//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/rg", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				ShowStats(playerid,playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está logado !");
			}
		}
		return true;
	}
	//-------------------------------[Mostrar RG]--------------------------------------------------------------------------
	if (strcmp(cmd, "/mostrarrg", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /mostrarrg [ID/Nome]");
					return true;
				}
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				if (ProxDetectorS(5.0, playerid, giveplayerid)) { 
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowStats(giveplayerid,playerid);
						format(string, sizeof(string), "* %s mostrou o seu rg para %s.",PlayerName(playerid),PlayerName(giveplayerid));
			            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}else {

				  SendClientMessage(playerid, COLOR_GREY, "O Jogador está longe de você.");
				  return true;
				}
		      }
		}
		return true;
	}
	if(strcmp(cmd, "/desligarpar", true) == 0 && PlayerInfo[playerid][pAdmin] >= 1)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (HidePM[playerid] == 0)
			{
				HidePM[playerid] = 1;
				SendClientMessage(playerid, COLOR_WHITE, "   Mensagens Privadas Desativadas !");
			}
			else if (HidePM[playerid] == 1)
			{
				HidePM[playerid] = 0;
				SendClientMessage(playerid, COLOR_WHITE, "   Mensagens Privadas Ativadas !");
			}
		}
		return true;
	}
	//-------------------- DISFARÇE DOS HITMANS ------------------------------------------------------------------------
	if(strcmp(cmd, "/dhitman", true) == 0)
	{
	    if(PlayerToPoint(1.0,playerid,344.5580,309.7243,999.1557) || PlayerToPoint(1.0,playerid,1658.3202,-1841.8921,13.5465))
	    {
	        if(PlayerInfo[playerid][pLider] == 8 || PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 22 || PlayerInfo[playerid][pMembro] == 22)
	        {
	        Controle(playerid, 0);
            ShowPlayerDialog(playerid, dhitman, DIALOG_STYLE_LIST, "DisFARCe Assassinos", "Civil\nB.O.P.E\nYakuza\nCosa Nostra\nGroove\nS.A.M.U\nPolicia Federal\nPolicia Militar\nExercito\nAl'qaeda\nTaliban\nBallas\nVagos\nAztecas\nComando Vermelho\nDrifters", "Vestir", "Cancelar");
            return true;
		    }
		}
	}
	if(strcmp(cmd, "/dpf", true) == 0)
	{
	    if(PlayerToPoint(1.0,playerid,609.1560,-601.8568,17.2266))
	    {
	        if(PlayerInfo[playerid][pLider] == 11 || PlayerInfo[playerid][pMembro] == 11)
	        {
	        Controle(playerid, 0);
            ShowPlayerDialog(playerid, 1520, DIALOG_STYLE_LIST, "Disfarce Policial", "Civil\nCivil 2\nCivil 3\nFarda", "Vestir", "Cancelar");
            return true;
		    }
		}
	}
	if (strcmp(cmd, "/stop", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) == 1) return SendClientMessage(playerid,COLOR_RED," Animations are inaccessible in transport!");

		ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		return true;
	}

	if(strcmp(cmd, "/capacete", true) == 0)
	{
	   if(IsPlayerInAnyVehicle(playerid))
       {
		   if(PlayerInfo[playerid][pCapacete] == 1)
           {
               if(CapacetePlayer[playerid] == 0)
		       {
			       CapacetePlayer[playerid] = 1;
                   GetPlayerName(playerid, sendername, sizeof(sendername));
                   SendClientMessage(playerid, COLOR_YELLOW,"[BRNM] Você colocou o Capacete, Agora Esta Protegido (/tirarcapacete)");
                   format(string, sizeof(string), "%s Coloca seu Capacete!.", sendername);
			       ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			       SetPlayerAttachedObject ( playerid, 5 , 18645 , 2 , 0.07 , 0 , 0 , 88 , 75 , 0 ) ;
               }
	           else
	           {
			      SendClientMessage(playerid, COLOR_GREY,"Você já está de Capacete");
		       }
           }
		   else
		   {
			  SendClientMessage(playerid, COLOR_GREY," Você não tem um Capacete");
		   }
       }
	   else
	   {
		   SendClientMessage(playerid, COLOR_GREY," Você não está em um Veículo ");
	   }
       return true;
    }
//==============================================================================
    if (strcmp(cmd, "/tirarcapacete", true) == 0)
    {
        if(CapacetePlayer[playerid] == 1)
        {
            CapacetePlayer[playerid] = 0;
            GetPlayerName(playerid, sendername, sizeof(sendername));
            SendClientMessage(playerid, COLOR_YELLOW,"[BRNM] Você está sem Capacete, Use: (/capacete)");
            format(string, sizeof(string), "%s Tira seu Capacete!.", sendername);
			ProxDetector(10.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
            RemovePlayerAttachedObject(playerid, 1);
        }
       	else
        {
            SendClientMessage(playerid, COLOR_YELLOW,"[BRNM] Você já está sem Capacete!");
        }
        return true;
    }
	if(strcmp(cmdtext, "/sorvete", true )==0)
	{
		if(PlayerToPoint(2.0,playerid,1498.7177,-1616.7062,13.3700))// se quiser usar outro || PlayerToPoint(1.5,playerid,1812.1256,-1394.0400,13.4288)
		{
			ShowPlayerDialog(playerid, sorveteria, DIALOG_STYLE_LIST, "Sorveteria [BRNM]", "Sorvete de Palito R$10\nSorvete de Copinho R$15\nSorvete de Casquinha R$20\nSorvete na Taça R$8\nSorvete de Limão R$8\nSorvete de Uva R$7\nSorvete de Morango R$6\nSorvete de Flocos R$10\nSorvete de Dois Amores R$11\nSorvete de Chocolate R$15\nÁgua com Gás R$5\nCoca-Cola R$20\nCerveja R$30", "Comprar", "Sair");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/comerchurrasco", true )==0)
	{
		if(PlayerToPoint(2.0,playerid,1238.2737,-1263.3185,13.5294) || PlayerToPoint(2.0, playerid, 1276.8843,-835.1474,77.2711) || PlayerToPoint(2.0,playerid,933.2353,-1589.9604,13.5503) || PlayerToPoint(2.0, playerid, 988.7175,-1613.2692,13.5212) || PlayerToPoint(2.0, playerid, 986.7035,-1727.6809,13.5772))
		{
			ShowPlayerDialog(playerid, dialogcomerchurrasco, DIALOG_STYLE_LIST, "Churrasco", "Coração no Espeto\nCarne de Vaca\nCarne de Jacaré\nCarne de Frango\nAgua\nSuco", "Comprar", "Sair");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/cardapio", true) == 0)
	{
	if(PlayerToPoint(2.0, playerid, 1310.5232,-1251.0765,14.5019))
	{
	   ShowPlayerDialog(playerid, DialogRestaurant, DIALOG_STYLE_LIST, "Cardápio Restaurante LS", "Massa\nFrutos Do Mar\nSaladas E Sopas\nCarne\nSobremesas\nBebidas", "Cardápio's", "Sair");
	   }
	  return 1;
	}
	if(strcmp(cmdtext, "/cabeloshopping", true )==0)
	{
		if(PlayerToPoint(1.5,playerid, 414.8116,-50.1285,1001.8984) || PlayerToPoint(1.5,playerid, 414.9881,-52.1974,1001.8984) || PlayerToPoint(1.5,playerid, 415.0535,-54.3463,1001.8984))
		{
			ShowPlayerDialog(playerid, cabeloshopping, DIALOG_STYLE_LIST, "{FFA500}SHOPPING-Cabeleleiro", "Cabelo 1\nCabelo 2\nCabelo 3\nCabelo 4\nCabelo 5\nRemover", "Comprar", "Sair");
		}
		return 1;
	}
	if(strcmp(cmd, "/roubarcaixa", true) == 0) {

	   if(PlayerInfo[playerid][pMembro] != 5 && PlayerInfo[playerid][pLider] != 5
		&& PlayerInfo[playerid][pMembro] != 14 && PlayerInfo[playerid][pLider] != 14
		&& PlayerInfo[playerid][pMembro] != 17 && PlayerInfo[playerid][pLider] != 17
		&& PlayerInfo[playerid][pMembro] != 18 && PlayerInfo[playerid][pLider] != 18
		&& PlayerInfo[playerid][pMembro] != 19 && PlayerInfo[playerid][pLider] != 19
		&& PlayerInfo[playerid][pMembro] != 20 && PlayerInfo[playerid][pLider] != 20
		&& PlayerInfo[playerid][pMembro] != 21 && PlayerInfo[playerid][pLider] != 21
		&& GetPlayerOrg(playerid) != 6 && GetPlayerOrg(playerid) != 12
		&& GetPlayerOrg(playerid) != 13	&& GetPlayerOrg(playerid) != 15
		&& GetPlayerOrg(playerid) != 23)
	    {
			SendClientMessage(playerid,COLOR_GREY,"Você não pode Explodir Caixas!");
            return true;
		}
		new Float: pfX, Float: pfY, Float: pfZ;
	    for(new i = (sizeof(Caixa) - 1); i > -1; --i) {
		if(IsPlayerInRangeOfPoint(playerid, 2.0, EfX[i], EfY[i], EfZ[i])) {
        if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "[ERRO] Você não pode usar esse comando em um veiculo!.");
	    if(CaixaExplodido[i]) return SendClientMessage(playerid, COLOR_GRAD1, "Você só poderá roubar mais caixas após 5 minutos.");
		if(VaiExplodir[i]) return SendClientMessage(playerid, COLOR_LIGHTRED, "[ERRO] O caixa já vai explodir.");
	 	GetPlayerPos(playerid, pfX, pfY, pfZ);
	    SetTimerEx("InfoCaixas", 10000, false, "ifffii", playerid, pfX, pfY, pfZ, CreateObject(1654, pfX, (pfY + 0.4), (pfZ - 0.8), 0, 0, 0), i);
	    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        format(string, sizeof(string), "[Segurança] %s e os %s estão tentando explodir um caixa eletrônico! ID:[%d]", playername, NomeORG(playerid) , playerid);
		SendClientMessageToAll(GetPlayerColor(playerid), string);
	    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0);
		SetPlayerCriminal(playerid,255, "Roubo a Caixa Eletrônico");
	    SendClientMessage(playerid, COLOR_YELLOW, "Dinamite Plantada! Corra!");
        SetPlayerWantedLevel(playerid, (GetPlayerWantedLevel(playerid) + 1));
	    VaiExplodir[i] = true;
        return true;
		}
	}
    return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto de nenhum caixa eletrônico.");
	
	
 }
	
if(strcmp(cmd, "/pegaranglo", true) == 0 || strcmp(cmd, "/panglo", true) == 0) {  
	
   if(PlayerInfo[playerid][pAdmin] >= DONO) { 

	new Float:Angle, angloplayer[26];
	GetPlayerFacingAngle(playerid, Angle);
	format(angloplayer, sizeof(angloplayer), "Seu Fancing Angle: %0.2f", Angle);
	SendClientMessage(playerid, 0xFFFFFFFF, angloplayer); 
	}else { 
	SendClientMessage(playerid, COLOR_GRAD1, "Você não tem permissão para usar esse comando.");
	return 1; 
	}

}
	if(strcmp(cmd, "/detran", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(2.0, playerid, -2033.4347,-117.3490,1035.1719))
			{
			    if(GetPlayerMoneyEx(playerid) < 600) return SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}[{CD96E3}Auto Escola{FFFFFF}]: Você não tem R$600 para fazer a prova.");
				new listitems[] = "Tirar Carteira de Motorista       R$600\n";
		        ShowPlayerDialog(playerid,510,DIALOG_STYLE_LIST,"Auto Escola",listitems,"Confirmar","Sair");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Você não está no D.E.T.R.A.N !");
			}
		}
		return true;
	}

 	if(strcmp(cmd, "/infocontratos", true) == 0 || strcmp(cmd, "/infoc", true) == 0)
    {
    new info[256];
    format(info, sizeof(info), "~> Hitmans <~:\n%d Contratos Concluidos\n\n\n~> Triads <~:\n%d Contratos Concluidos",CHitman,CTriad);
    ShowPlayerDialog(playerid,1416,DIALOG_STYLE_MSGBOX,"Contratos Concluidos:",info,"Ok","");
    return true;
	}
	// FORUM Do BRNM

	if (strcmp(cmd, "/forum", true) == 0)
	{
 		ShowPlayerDialog(playerid, 5053, DIALOG_STYLE_MSGBOX, "{FFFFFF}Forum do {00EE00}Brasil {FFD700}Novo {00B2EE}Mundo", "\n\n{98FA66}www.brnm.forumeiros.com\n\n\n\n\n{FFFFFF}Obrigado e tenha um ótimo jogo.", "Ok", "Sair");
		return true;
	}
	if(!strcmp("/creditos", cmdtext, true))
	{
		if (PlayerToPoint(2.0, playerid, 1691.4391,-1334.9795,17.4275))
		{
		Controle(playerid, 0);
		ShowPlayerDialog(playerid, 5053, DIALOG_STYLE_MSGBOX, "Creditos do BRNM", "{FFFFFF}Créditos totalmente a você.\nPor estar sempre conosco na alegria e na tristeza.\nObrigado por jogar conosco.\nVocê é a razão de vida para nosso BRNM.\nTenha um ótimo jogo.", "BRNM", "BRNM");
		}
		return true;
	}

  	if (strcmp(cmd, "/rc", true) == 0)
	{
 		ShowPlayerDialog(playerid, 5053, DIALOG_STYLE_MSGBOX, "{FFFFFF}Raidicall do {00EE00}Brasil {FFD700}Novo {00B2EE}Mundo", "\n\n{98FA66}IP: 0000000\n\nObs: Raidicall\n\n\n{FFFFFF}Obrigado e tenha um ótimo jogo.", "Ok", "Sair");
		return true;
	}

	//SISTEMA VIP DO HC

	if (strcmp(cmd, "/vip", true) == 0)
	{
    	ShowPlayerDialog(playerid, 5053, DIALOG_STYLE_MSGBOX, "{00E813}Seja {3B68FF}VIP", "{FFFFFF}/forum  - {00E813}Contas VIP's\n\n{FFEE00}Acesse - www.brnm.forumeiros.com\n{3B68FF}Veja mais informações em /ajuda\n\n\n\n\n{FFFFFF}Obrigado e tenha um ótimo jogo.", "Ok", "Sair");
		return true;
	}

 	if (strcmp(cmd, "/getemprego", true) == 0)
	{
    	if(PlayerInfo[playerid][pEmprego] != 0)
    	{
		   SendClientMessage(playerid,COLOR_YELLOW," Você já tem emprego,digite /sairdoemprego !");
		   return true;
    	}
		if (PlayerToPoint(2.0, playerid, 361.8300,173.5202,1008.3828))
		{
			Controle(playerid, 0);
    		ShowPlayerDialog(playerid,2569,DIALOG_STYLE_LIST,"{51A7FC}Empregos","{FFEA00}Detetive\n{FFEA00}Profissional do sexo\n{FFEA00}Vendedor de Drogas\n{FFEA00}Mecanico\n{FFEA00}Seguranca\n{FFEA00}Vendedor de Armas\n{FFEA00}Boxeador\n{FFEA00}Motorista de Onibus\n{FFEA00}Mendigo\n{FFEA00}Caminhoneiro","Aceitar","Cancelar");
			EmDialog[playerid] = 1;
		}
		return true;
	}
	if (strcmp(cmd, "/licencas", true) == 0)
	{
		if (PlayerToPoint(2.0, playerid, 1490.2411,1307.2179,1093.2891))
		{
    		Controle(playerid, 0);
    		ShowPlayerDialog(playerid,2571,DIALOG_STYLE_LIST,"{D54DF0}Licencas","{00FFC8}Voo     {FFD000}R$800\n{00FFC8}Navegacao     {FFD000}R$800\n{00FFC8}Pesca Legal     {FFD000}R$400\n{00FFC8}Porte Armas     {FFD000}R$1200","Ok","Cancelar");
    	}
		return true;
	}
	if (strcmp(cmd, "/gps", true) == 0)
	{
		Controle(playerid, 0);
    	ShowPlayerDialog(playerid,2568,DIALOG_STYLE_LIST,"{D54DF0}GPS do {00EE00}Brasil {FFD700}Novo {00B2EE}Mundo{FFFFFF}","Locais em Geral\nHead Quarters\nTerritorios\nCasas Por ID\nEmpresas Por ID\nMercado Negro\nDesligar GPS","Aceitar","Sair");
    	EmDialog[playerid] = 1;
		return true;
	}
//Subir e descer LV
  	if (strcmp(cmd, "/evagos", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
		{
		    if(PlayerToPoint(2.0, playerid, 2808.0322,-1176.3846,25.3794))
			{
	    		SetPlayerPos(playerid, 2807.4321,-1174.6454,32.6688);
    		}
		    if(PlayerToPoint(2.0, playerid, 2807.4321,-1174.6454,32.6688))
		    {
		        SetPlayerPos(playerid, 2808.0322,-1176.3846,25.3794);
		    }
		}
		return true;
	}
	if (strcmp(cmd, "/esamu", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
		{
		    if(PlayerToPoint(2.0, playerid, 1172.8306,-1361.4685,13.9624))
			{
	    		SetPlayerPos(playerid, 1161.5500,-1329.5240,31.4951);
    		}
		    if(PlayerToPoint(2.0, playerid, 1161.5586,-1329.5938,31.4949))
		    {
		        SetPlayerPos(playerid, 1173.2058,-1361.8076,13.9652);
		    }
		}
		return true;
	}
	if (strcmp(cmd, "/egroove", true) == 0)
	{
	    if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
		{
		    if(PlayerToPoint(2.0, playerid, 2522.9346,-1679.4137,15.4970))
			{
	    		SetPlayerPos(playerid, 2524.4297,-1681.8153,19.9302);
    		}
		    if(PlayerToPoint(2.0, playerid, 2524.4297,-1681.8153,19.9302))
		    {
		        SetPlayerPos(playerid, 2522.9346,-1679.4137,15.4970);
		    }
		}
		return true;
	}
//-----------------------------------------------------------------
	if(strcmp(cmd, "/dn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(PlayerInfo[playerid][pJailed] != 0)
    			{
	   				SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
					return true;
    			}
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz-2);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não é admin !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(PlayerInfo[playerid][pJailed] != 0)
    			{
	   				SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
					return true;
    			}
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly, slz+2);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não é admin !");
			}
		}
		return true;
	}
	 if(strcmp(cmd, "/bancof", true) == 0)
 	{
 	    if(IsPlayerConnected(playerid)) //Coloque as coordenadas aqui
	 	{
	   		if(IsPlayerInRangeOfPoint(playerid, 1.5, 2309.3223,-8.3691,26.7422)) //Banco
        	{
 		    	ShowPlayerDialog(playerid, DIALOG_EMPRESTIMO, DIALOG_STYLE_LIST, "Banco","Fazer Empréstimo\nVer Status\nInformações de Empréstimo\nQuitar Empréstimo","Confirmar", "Cancelar");
        		return true;
      		} // apenas dono da empresa pode verificar status
	 	}
		return 1;
	}
	if (strcmp(cmd, "/voar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(PlayerInfo[playerid][pJailed] != 0)
    			{
	   				SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
					return true;
    			}
				new Float:px, Float:py, Float:pz, Float:pa;
				GetPlayerFacingAngle(playerid,pa);
				if(pa >= 0.0 && pa <= 22.5) //n1
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				else if(pa >= 332.5 && pa < 0.0) //n2
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py+30, pz+5);
				}
				else if(pa >= 22.5 && pa <= 67.5) //nw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py+15, pz+5);
				}
				else if(pa >= 67.5 && pa <= 112.5) //w
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-30, py, pz+5);
				}
				else if(pa >= 112.5 && pa <= 157.5) //sw
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px-15, py-15, pz+5);
				}
				else if(pa >= 157.5 && pa <= 202.5) //s
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px, py-30, pz+5);
				}
				else if(pa >= 202.5 && pa <= 247.5)//se
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py-15, pz+5);
				}
				else if(pa >= 247.5 && pa <= 292.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+30, py, pz+5);
				}
				else if(pa >= 292.5 && pa <= 332.5)//e
				{
					GetPlayerPos(playerid, px, py, pz);
					SetPlayerPos(playerid, px+15, py+15, pz+5);
				}
				else
				{
				    GetPlayerPos(playerid, px, py, pz);
				    SetPlayerPos(playerid, px+15, py+15, pz+5);
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não e admin !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
			    if(PlayerInfo[playerid][pJailed] != 0)
    			{
	   				SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
					return true;
    			}
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly+2, slz);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não é admin !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/rt", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				if(PlayerInfo[playerid][pJailed] != 0)
    			{
	   				SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
					return true;
    			}
				new Float:slx, Float:sly, Float:slz;
				GetPlayerPos(playerid, slx, sly, slz);
				SetPlayerPos(playerid, slx, sly-2, slz-2);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não é admin !! !");
			}
		}
		return true;
	}
//-------------------------------[Check]--------------------------------------------------------------------------
	if (strcmp(cmd, "/ver", true) == 0 || strcmp(cmd, "/verificar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /ver [id]");
					return true;
				}
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				//giveplayerid = strval(tmp);
	            giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						ShowStats(playerid,giveplayerid);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Este Jogador não está ativo!");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não é admin !");
			}
		}
		return true;
	}
	if (strcmp(cmd, "/agenda", true) == 0 || strcmp(cmd, "/telefone", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pPhoneBook] == 1)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /agenda [id]");
					return true;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						format(string, 128, "Nick: %s ~ Numero: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   ID Inválido !");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "   Você não tem uma agenda! digite /gps 24-7 !");
			}
		}
		return true;
	}
//-------------------------------[BuyLevel]--------------------------------------------------------------------------
	if (strcmp(cmd, "/comprarnivel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] != 0)
			{
				PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
				if(PlayerInfo[playerid][pLevel] >= 0)
				{
					new nxtlevel = PlayerInfo[playerid][pLevel]+1;
					new costlevel = nxtlevel*levelcost;//10k for testing purposes
					new expquantidade = nxtlevel*levelexp;
					if(GetPlayerMoney(playerid) < costlevel)
					{
						format(gstring, 128, "   Você não tem: (R$%d) !",costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, gstring);
						return true;
					}
					else if (PlayerInfo[playerid][pExp] < expquantidade)
					{
						format(gstring, 128, "   Você precisa de %d pontos de respeito, Você tem: [%d] !",expquantidade,PlayerInfo[playerid][pExp]);
						SendClientMessage(playerid, COLOR_GRAD1, gstring);
						return true;
					}
					else
					{
						format(gstring, sizeof(gstring), "~g~Comprou Nivel~n~~w~Agora seu Nivel e %d", nxtlevel);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						PlayerPlayMusic(playerid);
						GivePlayerMoney(playerid, (-costlevel));
						PlayerInfo[playerid][pLevel]++;
						ScoreLevel(playerid);
						PlayerInfo[playerid][pExp] = 0;
						PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
						GameTextForPlayer(playerid, gstring, 5000, 1);
						format(gstring, 128, "   Você comprou o nivel %d por (R$%d) Digite /melhorar", nxtlevel, costlevel);
						SendClientMessage(playerid, COLOR_GRAD1, gstring);
						format(gstring, 128, "   Você tem %d pontos de melhora",PlayerInfo[playerid][gPupgrade]);
						SendClientMessage(playerid, COLOR_GRAD2, gstring);
					}
				}
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está logado !");
			}
		}
		return true;
	}
//-------------------------------[UPGRADE]--------------------------------------------------------------------------
	if (strcmp(cmd, "/resetarmelhorias", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está logado !");
				return true;
			}
			if (GetPlayerMoney(playerid) < 100)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   O reset custa R$100 !");
				return true;
			}
			if (PlayerInfo[playerid][pLevel] < 2)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você deve ter no mínimo nível 2 !");
				return true;
			}
			PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
			PlayerInfo[playerid][pSHealth] = 0.0;
			PlayerInfo[playerid][pAlcoholPerk] = 0;
			PlayerInfo[playerid][pDrugPerk] = 0;
			PlayerInfo[playerid][pMiserPerk] = 0;
			PlayerInfo[playerid][pPainPerk] = 0;
			PlayerInfo[playerid][pTraderPerk] = 0;
			GivePlayerMoney(playerid,-100);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			format(string, 128, "   Você tem %d pontos de melhoria !",PlayerInfo[playerid][gPupgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		return true;
	}
	if (strcmp(cmd, "/comprararma", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(GetPlayerMoney(playerid) < 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não tem todo esse dinheiro!!");
			    return true;
			}
			new gun;
			new gunid[16];
			new guncharge;
			new ammocharge;
			new location = PlayerInfo[playerid][pLocal];
			if(location == 99 || location == 100 || location == 102)
			{
				new mod = 100;
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "|______________[ Armas ]______________|");
					SendClientMessage(playerid, COLOR_GRAD2,"USE: /comprararma [arma] [munição]");
					format(gstring, 128, "Armas: parachute (R$%d) golfclub (R$%d) nightstick (R$%d) baseballbat (R$%d) shovel (R$%d) poolcue (R$%d)",
					GunPrice[0][0]/100*mod,GunPrice[1][0]/100*mod,GunPrice[2][0]/100*mod,GunPrice[3][0]/100*mod,GunPrice[4][0]/100*mod,GunPrice[5][0]/100*mod,GunPrice[6][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gstring);
					format(gstring, 128, "Armas: purpledildo (R$%d) whitedildo (R$%d) longwhitedildo (R$%d) whitedildo2 (R$%d) flowers (R$%d) cane",
					GunPrice[7][0]/100*mod,GunPrice[8][0]/100*mod,GunPrice[9][0]/100*mod,GunPrice[10][0]/100*mod,GunPrice[11][0]/100*mod,GunPrice[12][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gstring);
					format(gstring, 128, "Armas: eagle (R$%d) pistola (R$%d) mp5 (R$%d)",
					GunPrice[13][0]/100*mod,GunPrice[14][0]/100*mod,GunPrice[15][0]/100*mod,GunPrice[16][0]/100*mod,GunPrice[17][0]/100*mod,GunPrice[18][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gstring);
					format(gstring, 128, "Armas: shotgun (R$%d) ak47 (R$%d) m4 (R$%d) rifle (R$%d)",
					GunPrice[19][0]/100*mod,GunPrice[20][0]/100*mod,GunPrice[21][0]/100*mod,GunPrice[22][0]/100*mod,GunPrice[23][0]/100*mod,GunPrice[24][0]/100*mod);
					SendClientMessage(playerid, COLOR_GRAD3, gstring);
					format(gstring, 128, "Armas: pistolammo (R$%d) shotgunammo (R$%d) smgammo (R$%d) assaultammo (R$%d) rifleammo (R$%d)",
					GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
					SendClientMessage(playerid, COLOR_GRAD3, gstring);
					return true;
				}
				strmid(gunid, tmp, 0, strlen(cmdtext), 255);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /comprararma [arma] [munição]");
					return true;
				}
				new ammo = strval(tmp);
				if(ammo < 1 || ammo > 999) { SendClientMessage(playerid, COLOR_GREY, "   Munição tem que ser entre 1 e 999 !"); return true; }
				if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
				{
					gun = 46;
					guncharge = GunPrice[0][0]/100*mod;
					ammocharge = 0;
				}
				else if (strcmp(gunid, "golfclub", true, strlen(gunid)) == 0)
				{
					gun = 2; guncharge = GunPrice[1][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "nightstick", true, strlen(gunid)) == 0)
				{
					gun = 3; guncharge = GunPrice[2][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "baseballbat", true, strlen(gunid)) == 0)
				{
					gun = 5; guncharge = GunPrice[4][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "shovel", true, strlen(gunid)) == 0)
				{
					gun = 6; guncharge = GunPrice[5][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
				{
					gun = 7; guncharge = GunPrice[6][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "purpledildo", true, strlen(gunid)) == 0)
				{
					gun = 10; guncharge = GunPrice[7][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "whitedildo", true, strlen(gunid)) == 0)
				{
					gun = 11; guncharge = GunPrice[8][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "longwhitedildo", true, strlen(gunid)) == 0)
				{
					gun = 12; guncharge = GunPrice[9][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "whitedildo2", true, strlen(gunid)) == 0)
				{
					gun = 13; guncharge = GunPrice[10][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "flowers", true, strlen(gunid)) == 0)
				{
					gun = 14; guncharge = GunPrice[11][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
				{
					gun = 15; guncharge = GunPrice[12][0]/100*mod; ammocharge = 0;
				}
				else if (strcmp(gunid, "eagle", true, strlen(gunid)) == 0)
				{
					gun = 24; guncharge = GunPrice[15][0]/100*mod; ammocharge = GunPrice[25][0]*ammo;
				}
				else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
				{
					gun = 29; guncharge = GunPrice[18][0]/100*mod; ammocharge = GunPrice[27][0]*ammo;
				}
				else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
				{
					gun = 25; guncharge = GunPrice[19][0]/100*mod; ammocharge = GunPrice[26][0]*ammo;
				}
				else if (strcmp(gunid, "ak47", true, strlen(gunid)) == 0)
				{
					gun = 30; guncharge = GunPrice[22][0]/100*mod; ammocharge = GunPrice[28][0]*ammo;
				}
				else if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
				{
					gun = 31; guncharge = GunPrice[23][0]/100*mod; ammocharge = GunPrice[28][0]*ammo;
				}
				else if (strcmp(gunid, "rifle", true, strlen(gunid)) == 0)
				{
					gun = 33; guncharge = GunPrice[24][0]/100*mod; ammocharge = GunPrice[29][0]*ammo;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "Vendedor: Nunca ouvi falar dessa arma.");
					return true;
				}
				if((guncharge+ammocharge) > GetPlayerMoney(playerid))
				{
					format(gstring, 128, "   Você não tem R$%d para pagar !",guncharge+ammocharge);
					SendClientMessage(playerid, COLOR_GRAD3, gstring);
					return true;
				}
				new payout = guncharge + ammocharge;
				format(gstring, 128, "Você comprou um(a) %s com %d bala(s) por R$%d",gunid,ammo,payout);
				SendClientMessage(playerid, COLOR_GRAD3, gstring);
				if(location == 102 && IsACop(playerid)) { }
				else { GivePlayerMoney(playerid, - payout); }
				BizzInfo[location-99][bTill] += payout;
				ExtortionBiz(location-99, payout);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				GivePlayerWeapon(playerid, gun, ammo);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(gstring, sizeof(gstring), "%s comprou armas por R$%d na empresa %d", sendername, payout, location-99);
				printf("%s", gstring);
				//PayLog(gstring);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE,"Você não está em uma loja de armas.");
				return true;
			}
		}
		return true;
	}
 //MudarNomeSim?
	if (strcmp(cmd, "/melhorar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new gunid[16];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(gstring, sizeof(gstring), "USE: /melhorar [pontos] (Você tem %d pontos de melhora)",PlayerInfo[playerid][gPupgrade]);
				SendClientMessage(playerid, COLOR_WHITE, "|______________[ UPGRADES ]______________|");
				SendClientMessage(playerid, COLOR_GRAD2,gstring);
				if(PlayerInfo[playerid][pLevel] == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Nível 2 Melhorias: Alcool, Drogas");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Nível 3 Melhorias: Alcool, Drogas, Comercio");
				}
				else if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Nível 4 Melhorias: Alcool, Drogas, Avareza, Comercio");
				}
				else if(PlayerInfo[playerid][pLevel] >= 5)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Nível 5 Melhorias: Alcool, Drogas, Avareza, Comercio, PainKillers");
				}
				SendClientMessage(playerid, COLOR_GRAD5, "Extra: Vida");
				return true;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (PlayerInfo[playerid][gPupgrade] >= 1)
			{
				if (PlayerInfo[playerid][pLevel] >= 1 && (strcmp(gunid, "Vida", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pSHealth] < 50)
					{
						PlayerInfo[playerid][pSHealth] = PlayerInfo[playerid][pSHealth]+5.0;
						format(gstring, 128, "Atualização: você vai nascer com %.2f de vida (+5)",PlayerInfo[playerid][pSHealth]+50);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Você já está no máximo de vida");
						return true;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "Alcool", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pAlcoholPerk] < 3)
					{
						PlayerInfo[playerid][pAlcoholPerk] += 1;
						format(gstring, 128, "Nova Atualização: Agora seu nível de alcool é %d.",PlayerInfo[playerid][pAlcoholPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Seu nível de alcool já está no máximo !");
						return true;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 2 && (strcmp(gunid, "Drogas", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pDrugPerk] < 3)
					{
						PlayerInfo[playerid][pDrugPerk] += 1;
						format(gstring, 128, "Nova Atualização: Agora seu nível de drogas é %d.",PlayerInfo[playerid][pDrugPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Seu nível de drogas já está no máximo !");
						return true;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "Avareza", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pMiserPerk] < 3)
					{
						PlayerInfo[playerid][pMiserPerk] += 1;
						format(gstring, 128, "Nova Atualização: Agora sua avareza é nível %d.",PlayerInfo[playerid][pMiserPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Sua atualização de Avareza está no máximo !");
						return true;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "Comercio", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pTraderPerk] < 3)
					{
						PlayerInfo[playerid][pTraderPerk] += 1;
						format(gstring, 128, "Nova Atualização: Agora seu Comércio é nível %d.",PlayerInfo[playerid][pTraderPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Sua atualização de comércio está no máximo !");
						return true;
					}
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "painkillers", true, strlen(gunid)) == 0))
				{
					if (PlayerInfo[playerid][pPainPerk] < 3)
					{
						PlayerInfo[playerid][pPainPerk] += 1;
						format(gstring, 128, "Nova Atualização: Seu nível de Pain Killers agora é %d.",PlayerInfo[playerid][pPainPerk]);
						PlayerInfo[playerid][gPupgrade]--;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD6, "   Sua atualização de Pain Killers já está no máximo !");
						return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Atualização desconhecida");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "   Você tem 0 Pontos de Melhoria");
				return true;
			}
			SendClientMessage(playerid, COLOR_GRAD6, gstring);
			PlayerInfo[playerid][gPupgrade]--;
		}
		return true;
	}

//-------------------------------[Login]--------------------------------------------------------------------------
 	if (strcmp(cmd, "/logar", true) ==0 )
	{
	    if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
	    {
            new string3[128];
			new ip[16];
			GetPlayerIp(playerid, ip, sizeof ip);
			format(string3, sizeof(string3), "Banidos/%s.ini", PlayerName(playerid));
			if(fexist(string3)) //autoban
			{
               ClearChatbox(playerid, 10);
		       Kick(playerid);
			}
			format(string3, sizeof(string3), "IPsBanidos/%s.ini", ip);
			if(fexist(string3))
			{
		   	   ClearChatbox(playerid, 10);
			   Kick(playerid);
		     }
		     new tmppass[64];
			if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, " Você já está logado.");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /logar [Senha]");
				//ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "{00EE00}Brasil {FFD700}Novo {00B2EE}Mundo", "=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=--=-=-=-=-=-=-=-=-=-=\n\n\nBem Vindo ao {00EE00}BR {FFD700}NM {00B2EE}RPG\n\n{FFFFFF}Conta: {00FF00}Registrada\n{FFFFFF}Digite Sua Senha para Logar !", "Logar", "Esperar");
				ShowPlayerDialog(playerid, 1, DIALOG_STYLE_PASSWORD, "Fazendo Seu Login:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil {FFD700}Novo{00B2EE}Mundo {FFFFFF}.\n\n{FFFFFF}Status da Conta: {00FF00}Registrada\n\n\n{FFFFFF}Acesse Nosso Portal:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/portal\n\n\n{FFFFFF}Acesse Nosso Fórum:\nwww.{FFD700}brnm{FFFFFF}.forumeiros.com/forum\n\n\n{0000FF}Por Favor Digite Sua Senha Para Logar", "Logar", "Esperar");
				return true;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
			//Encrypt(tmppass);
			OnPlayerLogin(playerid,tmppass);
		}
		return true;
	}
	if (strcmp(cmd, "/registrar", true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREY, " Você já está logado.");
				return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, 64, "Contas/%s.ini", sendername);
			new File: hFile = fopen(string, io_read);
			if (hFile)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "O Nick que você está usando já existe, use outro por favor.");
				fclose(hFile);
 				ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Fazendo Seu Login:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}Brasil{FFD700}Novo {00B2EE}Mundo{FFFFFF}.\n\nStatus da Conta: {FF0000}Não Registrada\n\n{FFFFFF}Use: {00FF00}Nome_Sobrenome\n\n{FFFFFF}Exemplo: {ffff00}Gabriel_Lost{FFFFFF}\n\n\n     www.{FFD700}brnm{FFFFFF}.forumeiros.com\n\n\n{FFFFFF}Digite Sua Senha Para Logar !", "Logar", "Cancelar");
				return true;
			}
	        new tmppass[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Por favor, USE: /registrar [Senha]");
				//SendClientMessage(playerid, COR_TRIADS, "{FF8C00}---<> Use Nome_Sobrenome ( Ex: {00FF00}Johnny_Bravo{FF8C00} ) <>---");
 				ShowPlayerDialog(playerid, 2, DIALOG_STYLE_PASSWORD, "Fazendo Seu Registro:", "{FFFFFF}Seja Bem Vindo(a)\n     {00EE00}B{FFD700}G{00B2EE}O{FFFFFF}.\n\nStatus da Conta: {FF0000}Não Registrada\n\n{FFFFFF}Use: {00FF00}Nome_Sobrenome\n\n{FFFFFF}Exemplo: {ffff00}Guru_Josh{FFFFFF}\n\n\n     www.{FFD700}brnm{FFFFFF}.forumeiros.com\n\n\n{FFFFFF}Digite Sua Senha Para Registrar !", "Registrar", "Cancelar");
				return true;
			}
			strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
		//	Encrypt(tmppass);
			OnPlayerRegister(playerid,tmppass);
		}
		return true;
	}
//MudeSenha
	if (strcmp(cmd,"/MudarSenha",true) ==0  || strcmp(cmd,"/changepassword",true) ==0 )
	{
	    if(IsPlayerConnected(playerid))
	 	{
	 	    if(gPlayerLogged[playerid] == 0)
	        {
	           	SendClientMessage(playerid,CINZA,"Você não está logado !");
	           	return true;
      		}
	 		if(MudarSenhaAceito[playerid] == 0)
	     	{
				SendClientMessage(playerid, COLOR_GRAD1, "Você precisa pedir permissão para um admin mudar seu nick, use /relatorio");
	     		return true;
	     	}
	        if(gPlayerLogged[playerid] == 0)
	        {
	           	SendClientMessage(playerid,CINZA,"Você não está logado !");
	           	return true;
	        }
			GetPlayerName(playerid,sendername,sizeof(sendername));
			format(string,sizeof(string),"Contas/%s.ini",sendername);
	        new tmppass[64];
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid,CINZA1,"Use: /mudarsenha [Nova Senha]");
				SendClientMessage(playerid,CINZA1,"Guarde a senha ou tire SS da tela apertando F8 para não esquecer!");
				return true;
			}
			strmid(tmppass,tmp,0,strlen(cmdtext),255);
		//	Encrypt(tmppass);
			OnPlayerRegister(playerid,tmppass);
			return true;
		}
	}
	if(strcmp(cmd,"/amudarsenha",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /amudarsenha [ id ]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			GetPlayerName(playerid, sendername, 256);
			if (PlayerInfo[playerid][pAdmin] >= DONO)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
                        MudarSenhaAceito[playa] = 1;
                        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						//format(string, sizeof(string), "Você autorizou %s a mudar a Senha.", giveplayer);
			        	//SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		         		format(string, sizeof(string), "Admin %s: Autorizou você a mudar a Senha, digite /mudarsenha.", sendername);
		        		SendClientMessage(playa, COLOR_LIGHTBLUE, string);
		        		format(string, sizeof(string), "ADMIN CMD: %s autorizou %s a mudar a Senha !",sendername,giveplayer);
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar este comando!");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd,"/An",true) == 0 || strcmp(cmd,"/anuncio",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
			if(PlayerInfo[playerid][pConnectTime] < 2)
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Após 2 horas jogadas, você poderá mandar anúncios livres.");
				ShowPlayerDialog(playerid, DIALOG_ANUNCIO,DIALOG_STYLE_LIST,"Menu De Anúncios","Anunciar Venda de Drogas\nAnunciar Venda de Armas\nAnunciar Serviço Segurança\nAnunciar Serviço Advogado\nProcuro ORG/GANG/MAFIA\nPreciso de Um Táxi/Ônibus\nPreciso de Um Advogado\nPreciso de Um Policial\nPreciso de Um Médico\nPreciso de Um Mecânico\nPreciso de Um Segurança\nCompro Uma Casa","Confirmar", "Cancelar");
				return true;
			}
			GetPlayerName(playerid,sendername,sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid,COLOR_GRAD2,"USE: (/An)uncio [Texto do Anuncio]");
				return true;
			}
			new praVoce = idx * 25;
			if(GetPlayerMoney(playerid) < praVoce)
	        {
	            format(string,sizeof(string),"* Você usou %d caracteres que custam R$%d,Você não tem esse dinheiro.",offset,praVoce);
	            SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
	            return true;
	        }
	        if(panuncio == 1)
	        {
	        SendClientMessage(playerid,COLOR_GRAD2,"Espere um minuto para poder anunciar novamente!");
	        return true;
	        }
	        if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Não Divulgue Ip Aqui Podera Levar BAN PERMANENTE");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
			GivePlayerMoney(playerid,- praVoce);
			SBizzInfo[7][sbTill] += 30;
			ExtortionSBiz(7,30);
            format(string,sizeof(string),"Anuncio: %s, Contato: %s ID:[%d] - Telefone:[%d]", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
			OOCNews(TEAM_GROVE_COLOR,string);
			print(string);
			format(string,sizeof(string),"~r~Pagou R$%d ~n~~w~Mensagem continha %d Caracteres",praVoce,idx);
			GameTextForPlayer(playerid,string,5000,5);
			panuncio = 1;
			TempoAn = SetTimer("Anuncio", 60000, 0);
		}
		return true;
	}

  /*  if(strcmp(cmd, "/anuncio", true) == 0 || strcmp(cmd, "/an", true) == 0)
 	{
 	    if(IsPlayerConnected(playerid))
	 	{
	 	    ShowPlayerDialog(playerid, DIALOG_ANUNCIO,DIALOG_STYLE_LIST,"Menu De Anúncios","Anunciar Venda de Drogas\nAnunciar Venda de Armas\nAnunciar Serviço Segurança\nAnunciar Serviço Advogado\nProcuro ORG/GANG/MAFIA\nPreciso de Um Táxi/Ônibus\nPreciso de Um Advogado\nPreciso de Um Policial\nPreciso de Um Médico\nPreciso de Um Mecânico\nPreciso de Um Segurança\nCompro Uma Casa","Confirmar", "Cancelar");
	 	}
		return true;
	}*/
//================ Dialog Caixas - Comandos auxiliares ====================================
 	if(strcmp(cmd,"/an_2_input",true) == 0)
    {
	    if(IsPlayerConnected(playerid))
        {
			tmp = strtok(cmdtext,idx);
			if(gPlayerLogged[playerid] == 0)
			{
				SendClientMessage(playerid, CINZA, "Você deve estar logado!");
			}
			new stat;
			stat = strval(tmp);
			new cel = PlayerInfo[playerid][pPnumber];
			GetPlayerName(playerid,sendername,sizeof(sendername));
			SemAn[playerid]++;
			if(panuncio == 1)
	        {
	        SendClientMessage(playerid,COLOR_GRAD2,"   Por Favor, Tente Após 30 Segundos Para o Proximo Anúncio !");
	        return true;
	        }
    		if (PlayerInfo[playerid][pLevel] >= 2)
			{
				switch (stat)
				{
					case 1:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	       				{
	          					SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	          					return true;
	     				}
	      				GivePlayerMoneyEx(playerid,- 150);
						SBizzInfo[7][sbTill] += 150;
						ExtortionSBiz(7,150);
						GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       				format(string,sizeof(string),"Anuncio: Vendo Armas,Nome: %s, Celular: %d",sendername,cel);
						OOCNews(AN_COLOR,string);
					}
					case 56:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	       				{
	          					SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	          					return true;
	     				}
	      				GivePlayerMoneyEx(playerid,- 150);
						SBizzInfo[7][sbTill] += 150;
						ExtortionSBiz(7,150);
						GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       				format(string,sizeof(string),"Anuncio: V>Drogas ( Vendo Drogas ),Nome: %s, Celular: %d",sendername,cel);
						OOCNews(AN_COLOR,string);
					}
					case 57:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Compro Armas interesados me liguem,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 2:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Compro Drogas interesados meu liguem,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 111:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Precisa de um segurança particular Me ligue,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 112:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Procuro Org/Gang/Máfia,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 113:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Preciso de Um Ônibus/Táxi,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 114:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Preciso de Um Advogado,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 115:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Preciso de Um Policial,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 116:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Preciso de Um Médico,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 117:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Preciso de Um Mecânico,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 118:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Preciso de Um Segurança,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
					case 119:
					{
						if(GetPlayerMoneyEx(playerid) < 50)
	        			{
	           				SendClientMessage(playerid,AZUL3,"É necessário ter R$50!");
	           				return true;
	       			    }
	       			    GivePlayerMoneyEx(playerid,- 150);
					    SBizzInfo[7][sbTill] += 150;
					    ExtortionSBiz(7,150);
					    GameTextForPlayer(playerid,"~r~-R$50",5000,5);
	       			    format(string,sizeof(string),"Anuncio: Compro Uma Casa,Nome: %s, Celular: %d",sendername,cel);
					    OOCNews(AN_COLOR,string);
					}
				}
				panuncio = 1;
            	TempoAn = SetTimer("Anuncio", 30000, 0);
			}
			else
			{
				SendClientMessage(playerid,CINZA,"É preciso ter no minimo Nivel 2 para anunciar!");
			}
		}
	    return true;
	}
//===============================[anuncios das orgs]===================================//
	if(strcmp(cmd, "/alqaeda", true) == 0 || strcmp(cmd, "/alq", true) == 0)
	{
	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 15)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/alq)aeda [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				if(panuncioalqaeda == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Da Al'qaeda ______________|");
				format(string,sizeof(string),"Anuncio: %s, Terrorista: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				SendClientMessageToAll(COR_AL, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panuncioalqaeda = 1;
				TempoAnAlqaeda = SetTimer("AnuncioAlqaeda", 60000, 0);
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/FARC", true) == 0)
	{
	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 23)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/FARC) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				if(panuncioFARC == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Da F.A.R.C ______________|");
				format(string,sizeof(string),"Anuncio: %s, Terrorista: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				SendClientMessageToAll(COR_FARC, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panuncioFARC = 1;
				TempoAnFARC = SetTimer("AnuncioFARC", 60000, 0);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/Taliban", true) == 0 || strcmp(cmd, "/tal", true) == 0)
	{
	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 6)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/tal)iban [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				if(panuncioTaliban == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Do Taliban ______________|");
				format(string,sizeof(string),"Anuncio: %s, Terrorista: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				SendClientMessageToAll(COR_Taliban, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panuncioTaliban = 1;
				TempoAnTaliban = SetTimer("AnuncioTaliban", 60000, 0);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/anunciogang", true) == 0 || strcmp(cmd, "/ang", true) == 0)
	{
	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 5 || GetPlayerOrg(playerid) == 14 || GetPlayerOrg(playerid) == 17 || GetPlayerOrg(playerid) == 18 || GetPlayerOrg(playerid) == 19 || GetPlayerOrg(playerid) == 20 || GetPlayerOrg(playerid) == 21)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/ang) ou (/anunciogang) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				if(panunciogang == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________[ Anuncio Dos Gangsters ]______________|");
				format(string,sizeof(string),"Anuncio: %s, Gangster: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				if(GetPlayerOrg(playerid) == 5) SendClientMessageToAll(COR_AZTECAS, string);
				else if(GetPlayerOrg(playerid) == 14) SendClientMessageToAll(COR_GRO, string);
				else if(GetPlayerOrg(playerid) == 17) SendClientMessageToAll(COR_BALLAS, string);
				else if(GetPlayerOrg(playerid) == 18) SendClientMessageToAll(COR_VAGOS, string);
				else if(GetPlayerOrg(playerid) == 19) SendClientMessageToAll(0xF6000000, string);
				else if(GetPlayerOrg(playerid) == 20) SendClientMessageToAll(COR_SONS, string);
				else if(GetPlayerOrg(playerid) == 21) SendClientMessageToAll(COR_DRIFTERS, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panunciogang = 1;
				TempoAnGang = SetTimer("AnuncioGang", 60000, 0);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/anunciomafia", true) == 0 || strcmp(cmd, "/anmafia", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 12 || GetPlayerOrg(playerid) == 13)
			{
			if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/anmafia) ou (/anunciomafia) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				if(panunciomafia == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Dos Mafiosos ______________|");
				format(string,sizeof(string),"Anuncio: %s, Mafioso: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				if(GetPlayerOrg(playerid) == 12) SendClientMessageToAll(COR_COSA, string);
				else if(GetPlayerOrg(playerid) == 13) SendClientMessageToAll(COR_YAK, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panunciomafia = 1;
				TempoAnMafia = SetTimer("AnuncioMafia", 60000, 0);
			}
		}
		return true;
	}

	if(strcmp(cmd, "/anunciohitmans", true) == 0 || strcmp(cmd, "/anhitmans", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 8)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/anhitmans) ou (/anunciohitmans) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
           		}
				if(panunciohitmans == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Dos Hitmans ______________|");
				format(string,sizeof(string),"Anuncio: %s, Hitman: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				SendClientMessageToAll(COR_HITMAN, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panunciohitmans = 1;
				TempoAnHitmans = SetTimer("AnuncioHitmans", 60000, 0);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/anunciotriad", true) == 0 || strcmp(cmd, "/antriad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 22)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/antriads) ou (/anunciotriads) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
           		}
				if(panunciotriads == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Dos Triads ______________|");
				format(string,sizeof(string),"Anuncio: %s, Triad: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				SendClientMessageToAll(COR_TRIADS, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panunciotriads = 1;
				TempoAnTriads = SetTimer("AnuncioTriads", 60000, 0);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/anunciotaxi", true) == 0 || strcmp(cmd, "/antaxi", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(GetPlayerOrg(playerid) == 10)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 4 para usar este comando!");
			    	return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/antaxi) ou (/anunciotaxi) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				if(panunciotaxi == 1)
	        	{
	        		SendClientMessage(playerid,COLOR_GRAD2,"Espere 60 segundos para poder anunciar novamente!");
	        		return true;
	        	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Dos Taxistas ______________|");
				format(string,sizeof(string),"Anuncio: %s, Taxista: %s - ID [%d] - Telefone (%d)", result,sendername,playerid,PlayerInfo[playerid][pPnumber]);
				SendClientMessageToAll(COR_HITMAN, string);
				print(string);
				SBizzInfo[7][sbTill] += 30;
		    	ExtortionSBiz(7, 30);
				panunciotaxi = 1;
				TempoAnTaxi = SetTimer("AnuncioTaxi", 60000, 0);
			}
		}
		return true;
	}
//----------------------------------[government]-----------------------------------------------
	if(strcmp(cmd, "/governo", true) == 0 || strcmp(cmd, "/gov", true) == 0)
	{
    	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
	        new org = GetPlayerOrg(playerid);
            if(gTeam[playerid] == 2  || IsACop(playerid) || org == 4 || org == 25)
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelomenos cargo 4 para usar este comando!");
				    return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/gov)erno [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
	        	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
	        	if(org == 25)
				{
	                SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Dos Advogados ______________|");
					format(string, sizeof(string), "Advogado %s: %s", sendername, result);
			        SendClientMessageToAll(COLOR_DBLUE, string);
			        SBizzInfo[7][sbTill] += 30;
					ExtortionSBiz(7, 30);
					return true;
				}
	            else if(org != 4)
	            {
					SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Do Governo ______________|");
					format(string, sizeof(string), "Oficial %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_DBLUE, string);
					SBizzInfo[7][sbTill] += 30;
			    	ExtortionSBiz(7, 30);
				}
				else
				{
					SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio Da S.A.M.U ______________|");
					format(string, sizeof(string), "Médico %s: %s", sendername, result);
					SendClientMessageToAll(COLOR_DBLUE, string);
					SBizzInfo[7][sbTill] += 30;
			    	ExtortionSBiz(7, 30);
				}
				print(string);
			}
		}
		return true;
	}

//----------------------------------[Prefeito]-----------------------------------------------
	if(strcmp(cmd, "/prefeitura", true) == 0 || strcmp(cmd, "/pre", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_YELLOW," Você não pode se comunicar na cadeia!");
		   return true;
	    }
	    if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
            if(gTeam[playerid] == 7  || IsAGOV(playerid))
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você precisa ter pelomenos cargo 4 para usar este comando");
				    return true;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/pre)feito [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio da Prefeitura ______________|");
				format(string, sizeof(string), "Governo %s: %s", sendername, result);
				SendClientMessageToAll(COLOR_DBLUE, string);
				SBizzInfo[7][sbTill] += 30;
				print(string);
			    ExtortionSBiz(7, 30);
			}
		}
		return true;
	}
	//==================/govd----------------------------///////
	//----------------------------------[Prefeito]-----------------------------------------------
	if(strcmp(cmd, "/govd", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_YELLOW," Você não pode se comunicar na cadeia!");
		   return true;
	    }
	    if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
            if(gTeam[playerid] == 24  || IsADetran(playerid))
			{
				if(PlayerInfo[playerid][pCargo] < 4)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você precisa ter pelomenos cargo 4 para usar este comando");
				    return true;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: (/govd) [texto]");
					return true;
				}
				if(TentouDivulgar(result))
            	{
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            	}
				SendClientMessageToAll(COLOR_WHITE, "|______________ Anuncio do DETRAN ______________|");
				format(string, sizeof(string), "Detran %s: %s", sendername, result);
				SendClientMessageToAll(COLOR_DBLUE, string);
				SBizzInfo[7][sbTill] += 30;
				print(string);
			    ExtortionSBiz(7, 30);
			}
		}
		return true;
	}
//----------------------------------[to]-----------------------------------------------
    if(strcmp(cmd, "/desativar", true) == 0)
	{
		if(gPlayerLogged[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD3, "    Você não fez o login");
			return true;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|______________ Desabilitar ______________|");
			SendClientMessage(playerid, COLOR_WHITE,"/desativar [nome]");
			SendClientMessage(playerid, COLOR_GREY,"Nomes Disponíveis: org, noticias, celular");
			return true;
		}
	    if(strcmp(tmp, "noticias", true) == 0)
	    {
			if (!gNews[playerid])
			{
				gNews[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Chat de notícias desativado !");
			}
			else if (gNews[playerid])
			{
				gNews[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Chat de notícias ativado !");
			}
		}
	    if(strcmp(tmp, "org", true) == 0)
	    {
			if (!gFam[playerid])
			{
				gFam[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "   Chat da organização desativado !");
			}
			else if (gFam[playerid])
			{
				gFam[playerid] = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "   Chat da organização ativado !");
			}
		}
	    else if(strcmp(tmp, "celular", true) == 0)
	    {
	        if(PlayerInfo[playerid][pVIP] >= 0 || PlayerInfo[playerid][pAdmin] > 1)
	        {
				if (!PhoneOnline[playerid])
				{
					PhoneOnline[playerid] = 1;
					SendClientMessage(playerid, COLOR_GRAD2, "   Você desligou seu celular (não receberá ligações nem SMS) !");
					CellTime[playerid] = 0;
					Mobile[playerid] = 255;
					new pSpecialAction = GetPlayerSpecialAction(playerid);
					if (pSpecialAction == SPECIAL_ACTION_USECELLPHONE)
					{
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
					}
				}
				else if (PhoneOnline[playerid])
				{
					PhoneOnline[playerid] = 0;
					SendClientMessage(playerid, COLOR_GRAD2, "   Você ligou seu celular !");
				}
			}
		}
		else
		{
            SendClientMessage(playerid, COLOR_WHITE, "|______________ Desabilitar ______________|");
			SendClientMessage(playerid, COLOR_WHITE,"/desativar [nome]");
			SendClientMessage(playerid, COLOR_GREY,"Nomes Disponíveis: org, noticias, celular");
		}
		return true;
	}
	if(strcmp(cmd, "/desativard", true) == 0)
	{
	  if(PlayerInfo[playerid][pAdmin] >= 4)
	  {
		if(dDesativado == 0)
		{
           dDesativado = 1;
           SendClientMessage(playerid, COLOR_GREY, "[BRNM]: Você desativou o /d agora os jogadores não podem mais falar.");
         }
		 else if(dDesativado == 1)
         {
           dDesativado = 0;
           SendClientMessage(playerid, COLOR_GREY, "[BRNM]: Você ativou o /d agora os jogadores podem falar.");
         }
	  }
	 return true;
	}
//----------------------------------[Emote]-----------------------------------------------
	if(strcmp(cmd, "/eu", true) == 0)
	{
    	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está logado !");
	            return true;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /eu [action]");
				return true;
			}
			if(PlayerInfo[playerid][pMaskuse] == 1)
			{
			    format(string, sizeof(string), "* Mascara %s", result);
			}
			else
			{
				format(string, sizeof(string), "* %s %s", sendername, result);
			}
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			printf("%s", string);
			if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Não Divulgue Ip Aqui Podera Levar BAN PERMANENTE");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
		}
		return true;
	}
//----------------------------------[Local]-----------------------------------------------
	if(strcmp(cmd, "/sussurro", true) == 0 || strcmp(cmd, "/s", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_YELLOW," Você não pode sussurrar da cadeia!");
		   return true;
	    }
	    if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não logou ainda !");
	            return true;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /(s)ussurro [Para falar pra quem está perto]");
				return true;
			}
			if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Não Divulgue Ip Aqui Podera Levar BAN PERMANENTE");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
			format(string, sizeof(string), "%s Sussurra: %s", sendername, result);
			ProxDetector(3.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			printf("%s", string);
		}
		return true;
	}
//----------------------------------[Short]-----------------------------------------------
 	if(strcmp(cmd,"/Gritar",true) == 0 || strcmp(cmd,"/g",true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_YELLOW," Você não pode gritar na cadeia!");
		   return true;
	    }
	    if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid,CINZA,"Você não está logado/registrado!");
	            return true;
	        }
	        if(Rouco[playerid] > 5)
	        {
		        SendClientMessage(playerid,CINZA,"Você está Rouco, aguarde 5 segundos para gritar novamente!");
		        SetTimerEx("NRouco", 5000, 0, "d", playerid);
		        return true;
	        }
			GetPlayerName(playerid,sendername,sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid,CINZA2,"Use: (/G)ritar [Texto]");
				return true;
			}
			if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Não Divulgue Ip Aqui Podera Levar BAN PERMANENTE");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
			format(string,sizeof(string),"%s Grita: %s!!!",sendername,result);
			ProxDetector(30.0,playerid,string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE);
			ApplyAnimation(playerid,"RIOT", "RIOT_shout",4.0,0,1,0,0,0);
			Rouco[playerid]++;
			printf("%s",string);
		}
		return true;
	}
//----------------------------------[Short]-----------------------------------------------
	if(strcmp(cmd, "/megafone", true) == 0 || strcmp(cmd, "/m", true) == 0)
	{
    	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
	    	if(!IsADetran(playerid) && (!IsACop(playerid) && (!IsAGOV(playerid))))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial ou detran!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/m)egafone [megaphone chat]");
				return true;
			}
            new org = GetPlayerOrg(playerid);
            if(gTeam[playerid] == 2  || IsACop(playerid) || IsADetran(playerid) || org == 24)
			{
				if(PlayerInfo[playerid][pMembro] == 1||PlayerInfo[playerid][pLider] == 1)
				{
					format(string, sizeof(string), "Policial Militar %s:o< %s", sendername, result);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 2||PlayerInfo[playerid][pLider] == 2)
				{
					format(string, sizeof(string), "B.O.P.E %s:o< %s", sendername, result);
					ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 3||PlayerInfo[playerid][pLider] == 3)
				{
				    format(string, sizeof(string), "Exército %s:o< %s", sendername, result);
				    ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(IsAGOV(playerid))
				{
				    format(string, sizeof(string), "Governo %s:o< %s", sendername, result);
				    ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 16||PlayerInfo[playerid][pLider] == 16)
				{
				    format(string, sizeof(string), "Policia Civil %s:o< %s", sendername, result);
				    ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 11||PlayerInfo[playerid][pLider] == 11)
				{
				    format(string, sizeof(string), "Policia Federal %s:o< %s", sendername, result);
				    ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				else if(PlayerInfo[playerid][pMembro] == 24||PlayerInfo[playerid][pLider] == 24)
				{
				    format(string, sizeof(string), "Detran %s:o< %s", sendername, result);
				    ProxDetector(60.0, playerid, string,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW,COLOR_YELLOW);
				}
				printf("%s", string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "   Você não faz parte de nenhuma equipe !");
				return true;
			}
			if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Não Divulgue Ip Aqui Podera Levar BAN PERMANENTE");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
		}
		return true;
	}
//----------------------------------[Team]-----------------------------------------------
	if(strcmp(cmd, "/radio", true) == 0 || strcmp(cmd, "/r", true) == 0)
	{
		if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_R, "USE: (/r)adio [radio chat]");
				return true;
			}
			if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
			if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
			{
				if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Comandante %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Capitão %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Tenente %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Sargento %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Cabo %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Cadete %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Guarda %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(1,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7)
			{
				if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Prefeito %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Vice-Prefeito %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Acessor %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Vereador %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Segurança %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Motorista %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Motorista %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(7,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Capitão %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Tenente %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Sargento %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Cabo %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Soldado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Recruta %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Recruta %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(2,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** General %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Tenente Coronel %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Major %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Capitão %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Sargento %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Soldado %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Soldado %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(3,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Diretor Hospitalar %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Diretor %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Médico Profissional %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Médico %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Enfermeiro %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Auxiliar de Enfermeiro %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Auxiliar de Enfermeiro %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(4,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro]== 16 || PlayerInfo[playerid][pLider]== 16)
			{
				if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Perito Criminal %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Atirador de Elite %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Agente Do G.E.R %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Agente Do G.O.E %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novato %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Novato %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(16,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
   			else if(PlayerInfo[playerid][pMembro]== 11 || PlayerInfo[playerid][pLider]== 11)
			{
				if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Capitão %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Atirador %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Espião %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Agente %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Agente %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(11,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			   			else if(PlayerInfo[playerid][pMembro]== 24 || PlayerInfo[playerid][pLider]== 24)
			{
				if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefe %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Funcionario %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Funcionario %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Funcionario %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Funcionario %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Funcionario %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(24,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro]== 25 || PlayerInfo[playerid][pLider]== 25)
			{
				if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Lider %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result);
				}
				SendFamilyMessage(25,COLOR_R,string);
				printf("%s", string);
				format(string, sizeof(string), "* %s falou algo no rádio.", sendername);
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não é de nenhuma equipe !");
				return true;
			}
		}
		return true;
	}
	if(!strcmp(cmd,"/escudo",true))
	{
 	if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1 ||
	PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2 ||
	PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11 ||
	PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16 ||
    PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3) // << ORg escolhida a minha e isacop
    {
        if(Equipamentos[playerid] == 1)
        {
            RemovePlayerAttachedObject(playerid,3);
            Equipamentos[playerid] = 0;
            return true;
        }
        if(Equipamentos[playerid] == 0)
        {
            SetPlayerAttachedObject(playerid,7,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
            SendClientMessage(playerid,COR_PM,"Você pegou o escudo !"); //Troque a COR por alguma cor do teu serve
            Equipamentos[playerid] = 1;
            return true;
        }
    }
    else
    {
        SendClientMessage(playerid,COLOR_WHITE,"Você não é um COP.");
    }
    return true;
}
//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/batercartao", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode batercartao na cadeia!");
			return true;
	    }
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(IsACop(playerid))
			{
            if(PlayerToPoint(1,playerid,1530.3060,-1702.4915,6.2252) || PlayerToPoint(1,playerid,326.6374,307.1123,999.1484) || PlayerToPoint(1,playerid,1263.5537,-1655.0265,6.3116) || PlayerToPoint(1,playerid,240.6516,112.8062,1003.2188) || PlayerToPoint(1,playerid,255.1123,77.4241,1003.6406) || PlayerToPoint(1,playerid,229.8059,164.7830,1003.0234)
			 || PlayerToPoint(1,playerid,-1345.8823,492.5301,11.2027) || PlayerToPoint(1,playerid,712.7550,-554.5677,-3.5950))
				{
					if(OnDuty[playerid]==0)
			        {
						format(string, sizeof(string), "Oficial %s bateu o cartão e está em serviço,digite /servico policia.", sendername);
						OOCNews(COLOR_DBLUE,string);
						//SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						OnDuty[playerid] = 1;
						EmpregoDuty[playerid] = 2;
						Copsronda += 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "Oficial %s está de folga e não vai mais receber seus chamados.", sendername);
						OOCNews(COLOR_DBLUE,string);
						//RemovePlayerAttachedObject(playerid,3);
						OnDuty[playerid] = 0;
						EmpregoDuty[playerid] = 0;
						Copsronda -= 1;
					}
				}
			//	else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "");
					return true;
				}
			}
			}
		return true;
	}
	if(strcmp(cmd, "/bcsamu", true) == 0)
	{
		if(PlayerInfo[playerid][pMembro] == 4||PlayerInfo[playerid][pLider] == 4)
			{
            if(PlayerToPoint(2,playerid,1172.4320,-1319.2578,15.3940))
              {
			    if(EmpregoDuty[playerid]==0)
			        {
						//SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						format(string, sizeof(string), "[Anuncio] O Médico %s está em servico, /servico medico.", PlayerName(playerid));
	    			    OOCNews(0x2993EDAA,string);
						EmpregoDuty[playerid] = 1;
						Medics += 1;
					}
					else if(EmpregoDuty[playerid]==1)
					{
						format(string, sizeof(string), "[Anuncio] O Médico %s está de folga e não receberá chamados!", PlayerName(playerid));
	    			    OOCNews(0x2993EDAA,string);
						//RemovePlayerAttachedObject(playerid,3);
						EmpregoDuty[playerid] = 0;
						Medics -= 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não está em frente ao Hospital !");
					return true;
				}
			}
   			}


	if(strcmp(cmd, "/bcmec", true) == 0)
	{
		if(IsAMec(playerid))
		{
            if(PlayerToPoint(3,playerid,1791.7347,-1689.3971,13.4656))
              {
			    if(EmpregoDuty[playerid]==0)
			        {
						//SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						format(string, sizeof(string), "[Anuncio] O Mecânico %s está em servico, /servico mecanico.", PlayerName(playerid));
	    			    OOCNews(0x2993EDAA,string);
						EmpregoDuty[playerid] = 1;
						SetPlayerSkin(playerid,50);
						Mechanics += 1;
					}
					else if(EmpregoDuty[playerid]==1)
					{
						format(string, sizeof(string), "[Anuncio] O Mecânico %s está de folga e não receberá chamados!", PlayerName(playerid));
	    			    OOCNews(0x2993EDAA,string);
						//RemovePlayerAttachedObject(playerid,3);
						EmpregoDuty[playerid] = 0;
						Mechanics -= 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não está perto da garagem !");
					return true;
				}
			}
   }
   
   	if(strcmp(cmd, "/bcadv", true) == 0)
	{
		if(IsAAdv(playerid))
		{
            if(PlayerToPoint(3,playerid,1289.7114,-798.4102,1089.9375))
              {
			    if(OnDuty[playerid]==0)
			        {
						//SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						format(string, sizeof(string), "[Anuncio] O Advogado %s está em trabalho Cel: %d ID[%d].", PlayerName(playerid), PlayerInfo[playerid][pPnumber], playerid);
	    			    OOCNews(COR_ADV,string);
	    			    GivePlayerWeapon(playerid, 24, 1000);
						OnDuty[playerid] = 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "[Anuncio] O Advogado %s está de folga e não receberá chamados!", PlayerName(playerid));
	    			    OOCNews(COR_ADV,string);
						//RemovePlayerAttachedObject(playerid,3);
						OnDuty[playerid] = 0;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não está perto da garagem !");
					return true;
				}
			}
   }


//KITS ADMINS
	if(strcmp(cmd, "/kitadm", true) == 0 || strcmp(cmd, "/kitadmin", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_GREY," Você não pode usar seu kit preso!");
		   return true;
	    }
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
			if(admtrampando[playerid] < 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo jogo! (/trabalhar)");
				return true;
			}
			ResetPlayerWeaponsEx(playerid);
			GivePlayerWeapon(playerid, 1, 1);
			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, 29, 3000);
			GivePlayerWeapon(playerid, 46, 1);
            GivePlayerWeapon(playerid, 24, 1000);
            GivePlayerWeapon(playerid, 25, 500);
            GivePlayerWeapon(playerid, 31, 3000);
            GivePlayerWeapon(playerid, 34, 500);
            GivePlayerWeapon(playerid, 43, 99999);
			SetPlayerArmour(playerid, 100);
			SetPlayerHealth(playerid, 100);
			SendClientMessage(playerid,COLOR_GREEN,"Você pegou o seu KitAdmin!");
            new name[MAX_PLAYER_NAME];
            GetPlayerName(playerid, name, sizeof(name));
            format(string, 128, "Admin: %s Pegou Seu KitAdmin.",name);
            ProxDetector(30.0, playerid, string, COLOR_DBLUE,COLOR_DBLUE,COLOR_DBLUE,COLOR_DBLUE,COLOR_DBLUE);
		}
		return true;
	}
	if(strcmp(cmd, "/kitadmdono", true) == 0)
	{
		if(admtrampando[playerid] < 0)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo jogo! (/trabalhar)");
			return true;
		}
		if (PlayerInfo[playerid][pAdmin] >= SUB_GERENTE)
		{
			if(PlayerInfo[playerid][pJailed] != 0)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você não pode usar seu kit preso!");
	   			return true;
    		}
			GivePlayerWeapon(playerid, 35, 9999);
			GivePlayerWeapon(playerid, 24, 9999);
			GivePlayerWeapon(playerid, 31, 9999);
			GivePlayerWeapon(playerid, 32, 9999);
			GivePlayerWeapon(playerid, 27, 9999);
			GivePlayerWeapon(playerid, 8, 1);
			GivePlayerWeapon(playerid, 34, 9999);
			GivePlayerWeapon(playerid, 43, 9999);
			GivePlayerWeapon(playerid, 16, 9999);
			SetPlayerArmour(playerid, 150);
			SetPlayerHealth(playerid, 100);
			SendClientMessage(playerid,COLOR_GREEN,"Você pegou o seu KitAdmin Dono!");
		}
		return true;
	}
	if(strcmp(cmd,"/suicidio",true) == 0)
	{
		SetPlayerHealth(playerid, 0);
		GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s se suicidou. ", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    return true;
	}
	if(strcmp(cmd,"/mudarcelular",true) == 0)
	{
	if (PlayerInfo[playerid][pVIP] >= 1)
		{
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "USE: /mudarcelular [numero] (Máx. 4 digitos)");
				return 1;
			}
			if (!PlayerToPoint(100, playerid,-29.2522,-89.0717,1003.5469) && !PlayerToPoint(100, playerid,-24.2589,-54.7865,1003.5469) && !PlayerToPoint(100, playerid,-30.8149,-28.0234,1003.5573))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está em uma 24-7!");
					return true;
				}
			new celular;
			celular = strval(tmp);
			if(strval(tmp) < 0 || strval(tmp) > 9999)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Tem que ser no máximo 4 dígitos!!!");
				return true;
			}
			PlayerInfo[playerid][pPnumber] = celular;
			format(string, sizeof(string), "Parabéns, você mudou o número do seu celular para %d", celular);
			SendClientMessage(playerid, COLOR_WHITE, string);
	}
	else
  	{
  	SendClientMessage(playerid, COLOR_LIGHTRED,"Você não é Vip Premium!");
  	}
}
	if(strcmp(cmd, "/kitpremium2", true) == 0)
	{ 
	         
            if(equiparammu[playerid] == 1)
			{
			SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para equipar novamente.");
			return 1;
			}
	        GetPlayerName(playerid, sendername, sizeof(sendername));
    	    //new location = PlayerInfo[playerid][pLocal];
	    	//if(location == 99 || location == 100 || location == 102) 
			if(PlayerToPoint(3.2, playerid, 295.6848,-80.6542,1001.5156) || PlayerToPoint(2.9, playerid, 312.1629,-166.1395,999.6010))
			{
			if(PlayerInfo[playerid][pVIP] == 1)
			{
			if(PlayerInfo[playerid][pJailed] != 0)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você não pode usar seu kit preso!");
	   			return true;
    		}
			format(string, sizeof(string), " %s Pegou Seu Kit PREMIUM Nº2.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   			ResetPlayerWeaponsEx(playerid); 
			GivePlayerWeapon(playerid, 1, 1); 
			GivePlayerWeapon(playerid, 4, 1);
			GivePlayerWeapon(playerid, 25, 2500);
			GivePlayerWeapon(playerid, 34, 2500); 
			GivePlayerWeapon(playerid, 35, 3);
            GivePlayerWeapon(playerid, 24, 2500);
    		GivePlayerWeapon(playerid, 29, 2500);
    		GivePlayerWeapon(playerid, 31, 2500);
    		GivePlayerWeapon(playerid, 16, 5);
			SetPlayerArmour(playerid, 100);
			SetPlayerHealth(playerid, 100);
			SendClientMessage(playerid,0x33FF00FF,"Você pegou o seu kit PREMIUM Nº2!");
	        equiparammu[playerid] = 1;
			timerequiparammu[playerid] = SetTimerEx("EquiparAmmuNation", 60000, 0, "i", playerid);
			return true;
		}
  		else
  		{
  		SendClientMessage(playerid, COLOR_WHITE,"Você não é PREMIUM.");
  		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		}
	}
	//=========== CMDS SOCIOS =====================================

	if(strcmp(cmd, "/kitpremium", true) == 0)
	{ 
	        if(equiparammu[playerid] == 1)
			{
			SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para equipar novamente.");
			return 1;
			}  
	        GetPlayerName(playerid, sendername, sizeof(sendername));
    	    //new location = PlayerInfo[playerid][pLocal];
	    	//if(location == 99 || location == 100 || location == 102) 
			if(PlayerToPoint(3.2, playerid, 295.6848,-80.6542,1001.5156) || PlayerToPoint(2.9, playerid, 312.1629,-166.1395,999.6010))
			{
			if(PlayerInfo[playerid][pVIP] == 1)
			{
			if(PlayerInfo[playerid][pJailed] != 0)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você não pode usar seu kit preso!");
	   			return true;
    		}
			format(string, sizeof(string), "* %s Pegou Seu Kit VIP Premium.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   			ResetPlayerWeaponsEx(playerid);
    		GivePlayerWeapon(playerid, 24, 2500);
	    	GivePlayerWeapon(playerid, 31, 2500);
		   	GivePlayerWeapon(playerid, 32, 2500);
		   	GivePlayerWeapon(playerid, 27, 2500);
		   	GivePlayerWeapon(playerid, 35, 3);
		   	GivePlayerWeapon(playerid, 4, 1);
		   	GivePlayerWeapon(playerid, 1, 1);
		   	GivePlayerWeapon(playerid, 34, 2500);
			SetPlayerArmour(playerid, 100);
			SetPlayerHealth(playerid, 100);
			SendClientMessage(playerid,COLOR_GREEN,"Você pegou o seu Kit VIP Premium!"); 
            equiparammu[playerid] = 1;
			timerequiparammu[playerid] = SetTimerEx("EquiparAmmuNation", 60000, 0, "i", playerid);
			return true;
		}
  		else
  		{
  		SendClientMessage(playerid, COLOR_WHITE,"Você não é Vip Premium.");
  		}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		}
	}

	if(strcmp(cmd, "/jetpack", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            if(PlayerInfo[playerid][pJailed] != 0)
    	    {
	   			SendClientMessage(playerid,COLOR_GREY,"Você não pode pegar seu jetpack na cadeia");
	   			return true;
    	    } 
            if(PlayerInfo[playerid][pVIP] == 1)
            {
                    if(IsPlayerInAnyVehicle(playerid)) return  SendClientMessage(playerid, COLOR_WHITE, "Você Não Pode Usar /jetpack em Um Veiculo !");
                    SetPlayerSpecialAction(playerid, 2);  
					// Funçao para remover arma da mao SetPlayerArmedWeapon
                    GetPlayerName(playerid, sendername, sizeof(sendername));
                    format(string, sizeof(string), "Vip Premium %s Pegou seu JetPack", sendername);	 
                    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    return true;
            }

        return true;
    } 
}
	if(strcmp(cmd, "/orgpm", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 1;
                SetPlayerColor(playerid, COR_PM);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,280);
				PlayerInfo[playerid][pSkin] = 280;
				ConviteInfoOrg(PlayerName(playerid), 1, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/orgbope", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
		    	if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 2;
                SetPlayerColor(playerid, COR_BOPE);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,285);
				PlayerInfo[playerid][pSkin] = 285;
				ConviteInfoOrg(PlayerName(playerid), 2, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orggn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 3;
                SetPlayerColor(playerid, COR_EXE);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,287);
				PlayerInfo[playerid][pSkin] = 287;
				ConviteInfoOrg(PlayerName(playerid), 3, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgaztecas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 5;
                SetPlayerColor(playerid, COR_AZTECAS);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,115);
				PlayerInfo[playerid][pSkin] = 115;
				ConviteInfoOrg(PlayerName(playerid), 5, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgtaliban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
                if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 6;
                SetPlayerColor(playerid, COR_Taliban);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,122);
				PlayerInfo[playerid][pSkin] = 122;
				ConviteInfoOrg(PlayerName(playerid), 6, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orghitman", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 8;
                SetPlayerColor(playerid, COR_HITMAN);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,165);
				PlayerInfo[playerid][pSkin] = 165;
				ConviteInfoOrg(PlayerName(playerid), 8, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgreporter", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 9;
                SetPlayerColor(playerid, COR_REP);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,148);
				PlayerInfo[playerid][pSkin] = 148;
				ConviteInfoOrg(PlayerName(playerid), 9, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgtaxista", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 10;
                SetPlayerColor(playerid, COR_TAXI);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,255);
				PlayerInfo[playerid][pSkin] = 255;
				ConviteInfoOrg(PlayerName(playerid), 10, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgcosa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 12;
                SetPlayerColor(playerid, COR_COSA);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,111);
				PlayerInfo[playerid][pSkin] = 111;
				ConviteInfoOrg(PlayerName(playerid), 12, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
 	}
    if(strcmp(cmd, "/orgyakuza", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 13;
                SetPlayerColor(playerid, COR_YAK);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,203);
				PlayerInfo[playerid][pSkin] = 203;
				ConviteInfoOrg(PlayerName(playerid), 13, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgpf", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 11;
                SetPlayerColor(playerid, COR_PF);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,286);
				PlayerInfo[playerid][pSkin] = 286;
				ConviteInfoOrg(PlayerName(playerid), 11, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orggroove", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 14;
                SetPlayerColor(playerid, COR_GRO);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,105);
				PlayerInfo[playerid][pSkin] = 105;
				ConviteInfoOrg(PlayerName(playerid), 14, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgalqaeda", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 15;
                SetPlayerColor(playerid, COR_AL);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,30);
				PlayerInfo[playerid][pSkin] = 30;
				ConviteInfoOrg(PlayerName(playerid), 15, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgpc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 16;
                SetPlayerColor(playerid, COR_PC);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,186);
				PlayerInfo[playerid][pSkin] = 186;
				ConviteInfoOrg(PlayerName(playerid), 16, 1);
                SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgballas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 17;
                SetPlayerColor(playerid, COR_BALLAS);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,103);
				PlayerInfo[playerid][pSkin] = 103;
				ConviteInfoOrg(PlayerName(playerid), 17, 1);
                SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgvagos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 18;
                SetPlayerColor(playerid, COR_VAGOS);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,109);
				PlayerInfo[playerid][pSkin] = 109;
				ConviteInfoOrg(PlayerName(playerid), 18, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
    if(strcmp(cmd, "/orgcv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 19;
                SetPlayerColor(playerid, 0xF6000000);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,19);
				PlayerInfo[playerid][pSkin] = 19;
				ConviteInfoOrg(PlayerName(playerid), 1, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}

 	if(strcmp(cmd, "/orgsons", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 20;
                SetPlayerColor(playerid, COR_SONS);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,247);
				PlayerInfo[playerid][pSkin] = 247;
				ConviteInfoOrg(PlayerName(playerid), 20, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/orgdrift", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 21;
                SetPlayerColor(playerid, COR_DRIFTERS);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,101);
				PlayerInfo[playerid][pSkin] = 101;
				ConviteInfoOrg(PlayerName(playerid), 21, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/orgtriad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 22;
                SetPlayerColor(playerid, COR_TRIADS);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,277);
				PlayerInfo[playerid][pSkin] = 277;
				ConviteInfoOrg(PlayerName(playerid), 22, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/orgFARC", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 23;
                SetPlayerColor(playerid, COR_FARC);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,112);
				PlayerInfo[playerid][pSkin] = 277;
				ConviteInfoOrg(PlayerName(playerid), 23, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/orgdetran", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Essa organização é de muita responsabilidade caso viole alguma regra");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Poderá levar punições severas caso não tenha lido o manual leia");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "http://brnm.forumeiros.com/t280-manual-oficial-do-detran-apreensoes-e-atividades");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Chefe do D.E.T.R.A.N vai fazer um teste com você mesmo você tenha usado /orgdetran.");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Caso é reprovado será demitido não  insista em ficar dando /orgdetran isso é abuso de comando VIP Premium");
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Poderá levar banimento permanente.");
		   		PlayerInfo[playerid][pMembro] = 24;
                SetPlayerColor(playerid, COR_DETRAN);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,16);
				PlayerInfo[playerid][pSkin] = 16;
				ConviteInfoOrg(PlayerName(playerid), 24, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/orgadv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pVIP] == 1)
			{
			    if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Olá Você Precisa /pedircontas para trocar de organização");
					return true;
				}
		   		PlayerInfo[playerid][pMembro] = 25;
                SetPlayerColor(playerid, COR_ADV);
		   		PlayerInfo[playerid][pCargo] = 1;
		   		SetPlayerSkin(playerid,228);
				PlayerInfo[playerid][pSkin] = 228;
				ConviteInfoOrg(PlayerName(playerid), 25, 1);
				SetPlayerSpawn(playerid);
			}
		}
		return true;
	}
	if (strcmp(cmd, "/vips", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        new DialogThiago[1500];
			//SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Vips Online ]__________________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pVIP] == 0)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "{FFFFFF}%s {98F5FF}[VIP]\n", sendername);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pVIP] == 1)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128, "{FFFFFF}%s {9AFF9A}[VIP Premium]\n",sendername);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8791, DIALOG_STYLE_MSGBOX, "Vips Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}
if (strcmp(cmd, "/premiums", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        new DialogThiago[1500];
			//SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Premiums Online Online ]__________________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pVIP] == 1)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128, "{FFFFFF}%s {9AFF9A}[VIP Premium]\n",sendername);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8791, DIALOG_STYLE_MSGBOX, "Vips Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/darcidadania", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darcidadania [id]");
				return true;
			}
			new para1;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, 256);
 			if (PlayerInfo[playerid][pAdmin] >= DONO)
 			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pCidadania] = 1;
						format(string, sizeof(string), "Você ganhou Cidadania do admin %s", sendername);
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Você deu Cidadania para %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/daradmin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
     {
	    	if(PlayerInfo[playerid][pAdmin] < DONO)
	    	{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando!");
				return 1;
	    	}
	        AdmsVaga();
	    	if(VagaSobrando == 0)
	    	{
				//SendClientMessage(playerid, COLOR_GRAD1, "Não há mais vagas na lista use /limparadm primeiro.");
				//return 1;
	    	}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /daradmin [id] [Nivel(de 1 a 3)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darradmin [id] [Nivel(de 1 a 3)]");
				return 1;
			}
			level = strval(tmp);
			if(level > 1341)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "	Não se pode criar um admin com nivel maior que 1341");
			    return true;
			}
			if(level == 0)
			{

			}
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {

					format(string, sizeof(string), "   Você foi promovido a nivel %d de admin, pelo admin %s", level, sendername);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "   Você promoveu %s Para admin Nivel %d", giveplayer,level);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					getdate(year, month, day);
					gettime(hour,minute,second);
					format(string, sizeof(string), "%s deu admin nivel %d para %s [%d/%d/%d] ás [%d:%d:%d].", sendername, level, giveplayer, day,
					month, year, hour, minute, second);
					PAdminsLog(string);
					for(new i = 0; i < sizeof(AdmInfo); i++)
    				{
						if(PlayerInfo[para1][pAdmin] > 0)
						{
						    PlayerInfo[para1][pAdmin] = level;
						    break;
						}
   						else if(AdmInfo[i][AdminVaga] == 0)
						{
							PlayerInfo[para1][pAdmin] = level;
							AdmInfo[i][gMembro] = giveplayer;
							AdmInfo[i][AdminVaga] = 1;
							SaveAdm();
							break;
						}
					}
				}
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/gmx", true) == 0 || strcmp(cmd, "/restart", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        //new string22[128];
		    if (PlayerInfo[playerid][pAdmin] >=DONO)
			{
			    //if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 2) { return SendClientMessage(playerid, COLOR_GRAD1, " Você não está em modo Admin USE: /jogar"); }
                format(string, sizeof(string), "Isso é um GMX! não saia do jogo, o server está sendo reiniciado e voltará em alguns segundos!!");
							SendClientMessageToAll(COLOR_DBLUE, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
		    		if(IsPlayerConnected(i))
		    		{
					OnPlayerSave(i);

				 	}
				}
				GameModeExitFunc();
				SaveAccounts();
				OnPlayerSave(playerid);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
						PlantouBombaNuclear[i] = 0;
						PlayerInfo[i][pBombL] = 0;
						pBombNuclear[i] = 0;
						pbombanuclear[i] = 0;
						pbombanuclear2[i] = 0;
						pbombanuclear3[i] = 0;
						usarbombasnuclear = 0;
				 }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para dar GMX!");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/setarmat", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
	 	{
			CofreOrg[5][Materiais] = CofreOrg[5][Materiais]+10000; // aztecas
			CofreOrg[14][Materiais] = CofreOrg[14][Materiais]+10000; //groove
			CofreOrg[17][Materiais] = CofreOrg[17][Materiais]+10000; // ballas
			CofreOrg[18][Materiais] = CofreOrg[18][Materiais]+10000; // vagos
			CofreOrg[19][Materiais] = CofreOrg[19][Materiais]+10000; // Comando Vermelho
			CofreOrg[20][Materiais] = CofreOrg[20][Materiais]+10000; // sons
			CofreOrg[21][Materiais] = CofreOrg[21][Materiais]+10000; // drifters
			SendClientMessage(playerid, COLOR_WHITE,"Materiais setados para todas as gang's.");
			return true;
			}
		}

	if(strcmp(cmd, "/abastecerhq", true) == 0)
	{
		new org = GetPlayerOrg(playerid);
    	if(org != 12 && org != 13)
    	{
   			SendClientMessage(playerid,COLOR_GREY," Você não é um mafioso!");
   			return true;
    	}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /abastecerhq [materiais]");
			return true;
		}
		if(PlayerInfo[playerid][pMats] < 1000)
	    {
				SendClientMessage(playerid, COLOR_GRAD1, "Você não tem materiais suficientes para abastecer a HQ.");
				return true;
	    }
    	new ammount = strval(tmp);
    	if(PlayerToPoint(3, playerid, 2811.7102,-1166.1824,1025.5703))
    	{
    	    format(string, 128, " Você abasteceu a HQ Aztecas com %d materiais!", ammount);
    	    CofreOrg[5][Materiais] = CofreOrg[5][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, 2514.1301,-1691.2979,14.0460))
    	{
    	    format(string, 128, " Você abasteceu a HQ Groove com %d materiais!", ammount);
    	    CofreOrg[14][Materiais] = CofreOrg[14][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, 1074.7671,-1204.1219,18.1446))
    	{
    	    format(string, 128, " Você abasteceu a HQ Ballas com %d materiais!", ammount);
    	    CofreOrg[17][Materiais] = CofreOrg[17][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, 296.2728,1489.4459,1080.2578))
    	{
    	    format(string, 128, " Você abasteceu a HQ Vagos com %d materiais!", ammount);
    	    CofreOrg[18][Materiais] = CofreOrg[18][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, 2151.3218,-1789.1669,13.5097))
    	{
    	    format(string, 128, " Você abasteceu a HQ Comando Vermelho com %d materiais!", ammount);
    	    CofreOrg[19][Materiais] = CofreOrg[19][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
            PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, 681.3650,-445.1725,16.3359))
    	{
    	    format(string, 128, " Você abasteceu a HQ Sons of Anarchy com %d materiais!", ammount);
    	    CofreOrg[20][Materiais] = CofreOrg[20][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, 2768.6760,-1626.2833,10.9272))
    	{
    	    format(string, 128, " Você abasteceu a HQ Drifters com %d materiais!", ammount);
    	    CofreOrg[21][Materiais] = CofreOrg[21][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}
    	if(PlayerToPoint(3, playerid, -314.3108,1774.3555,43.6406))
    	{
    	    format(string, 128, " Você abasteceu a HQ F.A.R.C com %d materiais!", ammount);
    	    CofreOrg[23][Materiais] = CofreOrg[23][Materiais]+ammount;
   			SendClientMessage(playerid,COLOR_LIGHTBLUE,string);
   			PlayerInfo[playerid][pMats] -= ammount;
   			return true;
    	}

	    return true;
	}
	if(strcmp(cmd, "/equiparg", true) == 0)
	{
	    new org = GetPlayerOrg(playerid);
    	if(org == 5 || org == 14 || org == 17 || org == 18 || org == 19 || org == 20 || org == 21)
    	{
	    	if(CofreOrg[org][Materiais] < 50)
    		{
	   			SendClientMessage(playerid,COLOR_GREY," O cofre de sua HQ tem menos de 50 materiais, compre mais com a máfia ou deposite!");
	   			return true;
    		}
    		if(org == 5 && !PlayerToPoint(3, playerid, 2811.7102,-1166.1824,1025.5703))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    		if(org == 14 && !PlayerToPoint(3, playerid, 2514.1301,-1691.2979,14.0460))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    		if(org == 17 && !PlayerToPoint(3, playerid, 1074.7671,-1204.1219,18.1446))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    		if(org == 18 && !PlayerToPoint(3, playerid, 296.2728,1489.4459,1080.2578))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    		if(org == 19 && !PlayerToPoint(3, playerid, 2151.3218,-1789.1669,13.5097))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    		if(org == 20 && !PlayerToPoint(3, playerid, 681.3650,-445.1725,16.3359))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    		if(org == 21 && !PlayerToPoint(3, playerid, 2768.6760,-1626.2833,10.9272))
    		{
	   			SendClientMessage(playerid,COLOR_GREY," Você só pode equipar no cofre org de sua HQ!");
	   			return true;
    		}
    	    new dorgas = CofreOrg[org][Materiais];
    		if(PlayerInfo[playerid][pLider] >= 1)
    		{
    		    CofreOrg[org][Materiais] = dorgas-50;
	    	    GivePlayerWeapon(playerid, 4, 1);
          		SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
	    	    GivePlayerWeapon(playerid, 24, 800);
	    	    GivePlayerWeapon(playerid, 25, 400);
	    	    GivePlayerWeapon(playerid, 29, 400);
	    	    GivePlayerWeapon(playerid, 31, 600);
                GivePlayerWeapon(playerid, 34, 600);
	    	    format(string, sizeof(string), "* Gangster %s pega seus equipamentos de líder.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return true;
	    	}
  			else if(PlayerInfo[playerid][pCargo] <= 1)
    		{
    		    CofreOrg[org][Materiais] = dorgas-50;
        		SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
    	    	GivePlayerWeapon(playerid, 24, 120);
    	    	GivePlayerWeapon(playerid, 25, 140);
    	    	GivePlayerWeapon(playerid, 29, 130);
    	    	GivePlayerWeapon(playerid, 31, 250);
    	    	format(string, sizeof(string), "* Gangster %s pega seus equipamentos.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return true;
			}
  			else if(PlayerInfo[playerid][pCargo] == 2)
    		{
    		    CofreOrg[org][Materiais] = dorgas-50;
        		SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
    	    	GivePlayerWeapon(playerid, 24, 120);
    	    	GivePlayerWeapon(playerid, 25, 140);
    	    	GivePlayerWeapon(playerid, 29, 130);
    	    	GivePlayerWeapon(playerid, 31, 250);
    	    	format(string, sizeof(string), "* Gangster %s pega seus equipamentos.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return true;
			}
  			else if(PlayerInfo[playerid][pCargo] == 3)
    		{
    		    CofreOrg[org][Materiais] = dorgas-50;
        		SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
    	    	GivePlayerWeapon(playerid, 24, 170);
    	    	GivePlayerWeapon(playerid, 25, 200);
    	    	GivePlayerWeapon(playerid, 29, 180);
    	    	GivePlayerWeapon(playerid, 31, 320);
    	    	format(string, sizeof(string), "* Gangster %s pega seus equipamentos.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return true;
			}
  			else if(PlayerInfo[playerid][pCargo] == 4)
    		{
    		    CofreOrg[org][Materiais] = dorgas-50;
    		   	SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
    	    	GivePlayerWeapon(playerid, 24, 230);
    	    	GivePlayerWeapon(playerid, 25, 230);
    	    	GivePlayerWeapon(playerid, 29, 210);
    	    	GivePlayerWeapon(playerid, 31, 380);
    	    	format(string, sizeof(string), "* Gangster %s pega seus equipamentos.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return true;
			}
  			else if(PlayerInfo[playerid][pCargo] == 5)
    		{
    		    CofreOrg[org][Materiais] = dorgas-50;
        		SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
    	    	GivePlayerWeapon(playerid, 24, 500);
    	    	GivePlayerWeapon(playerid, 25, 300);
    	    	GivePlayerWeapon(playerid, 29, 300);
    	    	GivePlayerWeapon(playerid, 31, 500);
                GivePlayerWeapon(playerid, 34, 150);
    	    	format(string, sizeof(string), "* Gangster %s pega seus equipamentos.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
    			return true;
			}
    	}
    	return true;
	}
	if(strcmp(cmd, "/equiparreporter", true) == 0)
	{
		if(PlayerToPoint(3, playerid,356.6207,208.9427,1008.3828))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
   			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)//Reporter
			{
				format(string, sizeof(string), "* O Repórter %s Pegou Seus Equipamentos", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
 		        ResetPlayerWeaponsEx(playerid);
                SetPlayerArmour(playerid, 100.0);
			    SetPlayerHealth(playerid, 100.0);
				GivePlayerWeapon(playerid, 24, 150);
				GivePlayerWeapon(playerid, 43, 200);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF0FFFFAA, "Você não é Repórter !");
			}
		}
	}


    if(strcmp(cmd, "/equipara", true) == 0)
	{
        if(PlayerToPoint(2, playerid,246.3115,121.0975,1003.2301) || PlayerToPoint(2, playerid,262.0182,71.0734,1003.2422) || PlayerToPoint(2, playerid,211.2608,185.8552,1003.0313) || PlayerToPoint(2, playerid,-1335.7773,500.0176,11.3047) || PlayerToPoint(2, playerid,616.8616,-592.8971,17.2330))
		{
            if(PlayerInfo[playerid][pLider] == 1 || PlayerInfo[playerid][pLider] == 2 || PlayerInfo[playerid][pLider] == 16 || PlayerInfo[playerid][pLider] == 11 || PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pMembro] == 11)
			{
			    if(PlayerInfo[playerid][pCargo] == 6)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 500);
					GivePlayerWeapon(playerid, 24, 500);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 31, 300);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 10);
					GivePlayerWeapon(playerid, 34, 100);
                }
			    if(PlayerInfo[playerid][pCargo] == 5)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 140);
					GivePlayerWeapon(playerid, 24, 170);
					GivePlayerWeapon(playerid, 29, 510);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 34, 80);
					GivePlayerWeapon(playerid, 17, 50);
					GivePlayerWeapon(playerid, 41, 500);
					GivePlayerWeapon(playerid, 3, 0);
                }
			    if(PlayerInfo[playerid][pCargo] == 4)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 120);
					GivePlayerWeapon(playerid, 24, 360);
					GivePlayerWeapon(playerid, 29, 490);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 31, 400);
					GivePlayerWeapon(playerid, 34, 50);
					GivePlayerWeapon(playerid, 17, 40);
					GivePlayerWeapon(playerid, 41, 400);
                }
			    if(PlayerInfo[playerid][pCargo] == 3)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 34, 30);
					GivePlayerWeapon(playerid, 3, 0);
                }
			    if(PlayerInfo[playerid][pCargo] == 2)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
   					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 80);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 31, 300);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 20);
                }
			    if(PlayerInfo[playerid][pCargo] == 1)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 3, 0);
                }
                }
 				if(PlayerInfo[playerid][pLider] == 3)
    			{
	    			format(string, sizeof(string), "* Exército %s pega seus equipamentos de líder.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
					GivePlayerWeapon(playerid, 25, 500);
					GivePlayerWeapon(playerid, 24, 500);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 31, 600);
					GivePlayerWeapon(playerid, 29, 600);
					GivePlayerWeapon(playerid, 41, 600);
					GivePlayerWeapon(playerid, 17, 10);
					GivePlayerWeapon(playerid, 34, 100);
					return true;
				}
				if(PlayerInfo[playerid][pMembro] == 3)//Exército
	       		{
		            if(PlayerInfo[playerid][pCargo] == 1)
		            {
			    		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 80);
						GivePlayerWeapon(playerid, 24, 80);
						GivePlayerWeapon(playerid, 3, 0);
						GivePlayerWeapon(playerid, 31, 300);
						GivePlayerWeapon(playerid, 29, 300);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 17, 10);
						return true;
					}
	      			if(PlayerInfo[playerid][pCargo] == 2)
				    {
				   		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 80);
						GivePlayerWeapon(playerid, 24, 150);
						GivePlayerWeapon(playerid, 3, 0);
						GivePlayerWeapon(playerid, 29, 300);
						GivePlayerWeapon(playerid, 31, 400);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 17, 20);
						return true;
					}
	      			if(PlayerInfo[playerid][pCargo] == 3)
				    {
				   		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 190);
						GivePlayerWeapon(playerid, 24, 150);
						GivePlayerWeapon(playerid, 29, 450);
						GivePlayerWeapon(playerid, 31, 550);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 17, 30);
						GivePlayerWeapon(playerid, 34, 40);
						GivePlayerWeapon(playerid, 3, 0);
						return true;
					}
					if(PlayerInfo[playerid][pCargo] == 4)
		            {
			    		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 120);
						GivePlayerWeapon(playerid, 24, 360);
						GivePlayerWeapon(playerid, 29, 490);
						GivePlayerWeapon(playerid, 3, 0);
						GivePlayerWeapon(playerid, 31, 400);
						GivePlayerWeapon(playerid, 34, 50);
						GivePlayerWeapon(playerid, 17, 40);
						GivePlayerWeapon(playerid, 41, 300);
						
						return true;
					}
	 				if(PlayerInfo[playerid][pCargo] == 5)
		            {
			    		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 140);
						GivePlayerWeapon(playerid, 24, 170);
						GivePlayerWeapon(playerid, 29, 510);
						GivePlayerWeapon(playerid, 31, 550);
						GivePlayerWeapon(playerid, 34, 80);
						GivePlayerWeapon(playerid, 17, 50);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 3, 0);
						
						return true;
					}
			}
		}
	    return true;
	}

	if(strcmp(cmd, "/equiparterrorista", true) == 0)
	{
 		if(PlayerToPoint(10.0, playerid,414.5280,2531.5229,19.1648) || PlayerToPoint(10.0, playerid,1114.0310,-304.3608,73.9922) || PlayerToPoint(10.0, playerid,-309.3545,1761.2603,43.6406))
		{
		if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15 || PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6 || PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
		{
			    if(PlayerInfo[playerid][pLider] == 15 || PlayerInfo[playerid][pLider] == 6 || PlayerInfo[playerid][pLider] == 23)//AL'QAEDA e Taliban e FARC
				{
					format(string, sizeof(string), "* Terrorista %s Pegou Seu Equipamento Líder de Terrorismo.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
   					GivePlayerWeapon(playerid, 24, 399);
	    			GivePlayerWeapon(playerid, 30, 999);
		    		GivePlayerWeapon(playerid, 29, 999);
		    		GivePlayerWeapon(playerid, 4, 1);
		    		GivePlayerWeapon(playerid, 34, 199);
		    		SetPlayerArmour(playerid, 100);
					SetPlayerHealth(playerid, 100);
				}
				else
				{
					format(string, sizeof(string), "* Terrorista %s Pegou Seu Equipamento de Terrorismo.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
   					GivePlayerWeapon(playerid, 24, 399);
	    			GivePlayerWeapon(playerid, 30, 999);
		    		GivePlayerWeapon(playerid, 29, 999);
		    		GivePlayerWeapon(playerid, 4, 1);
		    		GivePlayerWeapon(playerid, 34, 199);
		    		GivePlayerWeapon(playerid, 17, 2);
		    		SetPlayerArmour(playerid, 100);
					SetPlayerHealth(playerid, 100);
					return true;
				}
			}
		}
		return true;
	}

 	if(strcmp(cmd, "/equipar", true) == 0)
	{
	if(PlayerInfo[playerid][pJailed] != 0)
	{
	SendClientMessage(playerid,COLOR_GREY," Você não pode equipar na cadeia!");
	return true;
	}
	new tmpcar = GetPlayerVehicleID(playerid);
 	GetPlayerName(playerid, sendername, MAX_PLAYER_NAME);
        if(IsAEnforcerCar(tmpcar)|| PlayerToPoint(2, playerid,246.3115,121.0975,1003.2301) || PlayerToPoint(2, playerid,262.0182,71.0734,1003.2422) || PlayerToPoint(2, playerid,616.9113,-593.0135,17.2330) || PlayerToPoint(2, playerid,211.2608,185.8552,1003.0313) || PlayerToPoint(2, playerid,-1335.7773,500.0176,11.3047) || PlayerToPoint(2, playerid,616.8616,-592.8971,17.2330))
		{
            if(PlayerInfo[playerid][pLider] == 1 || PlayerInfo[playerid][pLider] == 2 || PlayerInfo[playerid][pLider] == 16 || PlayerInfo[playerid][pLider] == 11 || PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pMembro] == 11)
			{
			    if(PlayerInfo[playerid][pCargo] == 6)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 500);
					GivePlayerWeapon(playerid, 24, 500);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 31, 300);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 10);
					GivePlayerWeapon(playerid, 34, 100);
                }
			    if(PlayerInfo[playerid][pCargo] == 5)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 140);
					GivePlayerWeapon(playerid, 24, 170);
					GivePlayerWeapon(playerid, 29, 510);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 34, 80);
					GivePlayerWeapon(playerid, 17, 50);
					GivePlayerWeapon(playerid, 41, 500);
					GivePlayerWeapon(playerid, 3, 0);
                }
			    if(PlayerInfo[playerid][pCargo] == 4)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 120);
					GivePlayerWeapon(playerid, 24, 360);
					GivePlayerWeapon(playerid, 29, 490);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 31, 400);
					GivePlayerWeapon(playerid, 34, 50);
					GivePlayerWeapon(playerid, 17, 40);
					GivePlayerWeapon(playerid, 41, 400);
                }
			    if(PlayerInfo[playerid][pCargo] == 3)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 34, 30);
					GivePlayerWeapon(playerid, 3, 0);
                }
			    if(PlayerInfo[playerid][pCargo] == 2)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
   					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 80);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 29, 300);
					GivePlayerWeapon(playerid, 31, 300);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 20);
                }
			    if(PlayerInfo[playerid][pCargo] == 1)
			    {
		   			format(string, sizeof(string), "* Policial %s pega seus equipamentos.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
				    SetPlayerArmour(playerid, 100.0);
				    SetPlayerHealth(playerid, 100.0);
					GivePlayerWeapon(playerid, 25, 190);
					GivePlayerWeapon(playerid, 24, 150);
					GivePlayerWeapon(playerid, 29, 450);
					GivePlayerWeapon(playerid, 31, 550);
					GivePlayerWeapon(playerid, 41, 300);
					GivePlayerWeapon(playerid, 17, 30);
					GivePlayerWeapon(playerid, 3, 0);
                }
                }
 				if(PlayerInfo[playerid][pLider] == 3)
    			{
	    			format(string, sizeof(string), "* Exército %s pega seus equipamentos de líder.", PlayerName(playerid));
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                    ResetPlayerWeaponsEx(playerid);
					GivePlayerWeapon(playerid, 25, 500);
					GivePlayerWeapon(playerid, 24, 500);
					GivePlayerWeapon(playerid, 3, 0);
					GivePlayerWeapon(playerid, 31, 600);
					GivePlayerWeapon(playerid, 29, 600);
					GivePlayerWeapon(playerid, 41, 600);
					GivePlayerWeapon(playerid, 17, 10);
					GivePlayerWeapon(playerid, 34, 100);
					return true;
				}
				if(PlayerInfo[playerid][pMembro] == 3)//Exército
	       		{
		            if(PlayerInfo[playerid][pCargo] == 1)
		            {
			    		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 80);
						GivePlayerWeapon(playerid, 24, 80);
						GivePlayerWeapon(playerid, 3, 0);
						GivePlayerWeapon(playerid, 31, 300);
						GivePlayerWeapon(playerid, 29, 300);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 17, 10);
						return true;
					}
	      			if(PlayerInfo[playerid][pCargo] == 2)
				    {
				   		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 80);
						GivePlayerWeapon(playerid, 24, 150);
						GivePlayerWeapon(playerid, 3, 0);
						GivePlayerWeapon(playerid, 29, 300);
						GivePlayerWeapon(playerid, 31, 400);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 17, 20);
						return true;
					}
	      			if(PlayerInfo[playerid][pCargo] == 3)
				    {
				   		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 190);
						GivePlayerWeapon(playerid, 24, 150);
						GivePlayerWeapon(playerid, 29, 450);
						GivePlayerWeapon(playerid, 31, 550);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 17, 30);
						GivePlayerWeapon(playerid, 34, 40);
						GivePlayerWeapon(playerid, 3, 0);
						return true;
					}
					if(PlayerInfo[playerid][pCargo] == 4)
		            {
			    		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 120);
						GivePlayerWeapon(playerid, 24, 360);
						GivePlayerWeapon(playerid, 29, 490);
						GivePlayerWeapon(playerid, 3, 0);
						GivePlayerWeapon(playerid, 31, 400);
						GivePlayerWeapon(playerid, 34, 50);
						GivePlayerWeapon(playerid, 17, 40);
						GivePlayerWeapon(playerid, 41, 300);
						return true;
					}
	 				if(PlayerInfo[playerid][pCargo] == 5)
		            {
			    		format(string, sizeof(string), "* Exército %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 140);
						GivePlayerWeapon(playerid, 24, 170);
						GivePlayerWeapon(playerid, 29, 510);
						GivePlayerWeapon(playerid, 31, 550);
						GivePlayerWeapon(playerid, 34, 80);
						GivePlayerWeapon(playerid, 17, 50);
						GivePlayerWeapon(playerid, 41, 300);
						GivePlayerWeapon(playerid, 3, 0);
						return true;
					}
			}
		}
	    return true;
	}

//Cartorio
//
	if(strcmp(cmd, "/mudarsexo", true) == 0)
	{
	    if(PlayerToPoint(10, playerid,2233.8225,-1333.2725,23.9816))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
   			new x_sexo[32];
			x_sexo = strtok(cmdtext, idx);
			if(!strlen(x_sexo))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|______________ Cartório ______________|");
				SendClientMessage(playerid, COLOR_WHITE, "|Use: /mudarsexo [Numero]");
				SendClientMessage(playerid, COLOR_GREY, "| 1 - Homem");
				SendClientMessage(playerid, COLOR_GREY, "| 2 - Mulher");
				return true;
			}
            if(strcmp(x_sexo,"1",true) == 0)
			{
				format(string, sizeof(string), "* Jogador %s mudou seu sexo para masculino.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				PlayerInfo[playerid][pSex] = 1;
				SendClientMessage(playerid,COLOR_GREEN,"Você mudou seu sexo para masculino!");
		   	 	return true;
			}
            if(strcmp(x_sexo,"2",true) == 0)
			{
		   		format(string, sizeof(string), "* Jogador %s mudou seu sexo para feminino.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
   				PlayerInfo[playerid][pSex] = 2;
				SendClientMessage(playerid,COLOR_GREEN,"Você trocou seu sexo para feminino!");
		   		return true;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está na igreja de LS.");
		}
	}//Separação
 	if(strcmp(cmd, "/separacao", true) == 0)
	{
		if(PlayerToPoint(10, playerid,1964.3306,-369.0889,1093.7289))
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
   			if(IsPlayerConnected(playerid))
			{
      			new x_separar[32];
				x_separar = strtok(cmdtext, idx);
				if(!strlen(x_separar))
				{
					SendClientMessage(playerid, COLOR_WHITE, "|______________ Cartório ______________|");
					SendClientMessage(playerid, COLOR_WHITE, "|Use: /separacao [Numero]");
					SendClientMessage(playerid, COLOR_GREY, "| 1 - Sim");
					SendClientMessage(playerid, COLOR_GREY, "| 2 - Não");
					return true;
				}
                if(strcmp(x_separar,"1",true) == 0)
				{
				    if(PlayerInfo[playerid][pMarried] > 0)
					{
						format(string, sizeof(string), "* Jogador %s se divorciou!", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SendClientMessage(playerid,COLOR_GREY,"Você assinou o papel e se separou!");
						ClearMarriage(playerid);
			   	 		return true;
			   	 	}
			   	 	SendClientMessage(playerid,COLOR_GREEN,"Você não é casado(a)!");
				}
                if(strcmp(x_separar,"2",true) == 0)
				{
				    if(PlayerInfo[playerid][pMarried] > 0)
					{
						SendClientMessage(playerid,COLOR_GREEN,"Você continuou casado(a)!");
			   	 		return true;
					}
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está na igreja de LS!");
		}
	}

    if(strcmp(cmd, "/kitvip", true) == 0 || strcmp(cmd, "/kitivip", true) == 0)
	{
	    //new location = PlayerInfo[playerid][pLocal];
	   //if(location == 99 || location == 100 || location == 102)
	    if(PlayerToPoint(3.2, playerid, 295.6848,-80.6542,1001.5156) || PlayerToPoint(2.9, playerid, 312.1629,-166.1395,999.6010))
		{ 
		 
		    if(equiparammu[playerid] == 1)
			{
			SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para equipar novamente.");
			return 1;
			} 
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pVIP] == 0)
			{
	   	 		format(string, sizeof(string), "* %s Pegou Seu Kit VIP.", PlayerName(playerid));
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				ResetPlayerWeaponsEx(playerid);
				GivePlayerWeapon(playerid, 46, 1);
				GivePlayerWeapon(playerid, 24, 1000);
   				GivePlayerWeapon(playerid, 31, 1999);
    			GivePlayerWeapon(playerid, 29, 1999);
    			GivePlayerWeapon(playerid, 25, 999);
    			GivePlayerWeapon(playerid, 4, 1);
    			GivePlayerWeapon(playerid, 1, 1);
				SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
				SendClientMessage(playerid,COLOR_GREEN,"Você pegou o seu Kit VIP!"); 
   	            equiparammu[playerid] = 1;
				timerequiparammu[playerid] = SetTimerEx("EquiparAmmuNation", 60000, 0, "i", playerid);
			   	return true;
			}
			else if(PlayerInfo[playerid][pVIP] == 1)
			{
	   		format(string, sizeof(string), "* %s Pegou Seu Kit VIP Premium.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ResetPlayerWeaponsEx(playerid);
            GivePlayerWeapon(playerid, 24, 2500);
	    	GivePlayerWeapon(playerid, 31, 2500);
		   	GivePlayerWeapon(playerid, 32, 2500);
		   	GivePlayerWeapon(playerid, 27, 2500);
		   	GivePlayerWeapon(playerid, 35, 3);
		   	GivePlayerWeapon(playerid, 4, 1);
		   	GivePlayerWeapon(playerid, 1, 1);
		   	GivePlayerWeapon(playerid, 34, 2500);
			SetPlayerArmour(playerid, 100);
			SetPlayerHealth(playerid, 100);
			SendClientMessage(playerid,COLOR_GREEN,"Você pegou o seu Kit VIP Premium!"); 
		    equiparammu[playerid] = 1;
		    timerequiparammu[playerid] = SetTimerEx("EquiparAmmuNation", 60000, 0, "i", playerid);
 			return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é VIP");
			    return true;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma loja de armas.");
		}
		return true;
	}
//SISTEMA DE DROGAS
	if(strcmp(cmd, "/Usedrogas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Use Drogas ]______________|");
		    SendClientMessage(playerid, COLOR_GRAD1,"USE: /usemaconha");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /usecocaina");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /usecrack");
			}
		return true;
	}
	if(strcmp(cmd, "/venderdrogas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Vender ]______________|");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /vendermaconha");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /vendercocaina");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /vendercrack");
			}
		return true;
	}
	if(strcmp(cmd, "/sistemadedrogas", true) == 0 || strcmp(cmd, "/sistemadrogas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|______________[ Sistema de Drogas ]______________|");
		    SendClientMessage(playerid, COLOR_GRAD1,"/usemaconha /usecocaina /usecrack");
		    SendClientMessage(playerid, COLOR_GRAD1,"/vendermaconha /vendercocaina /vendercrack");
		    SendClientMessage(playerid, COLOR_GRAD1,"Para pegar ou esconder drogas vá a um territorio");
            SendClientMessage(playerid, COLOR_LIGHTBLUE,"GPS Territorios: /GPS e selecione territorios");
		}
		return true;
	}
 	if(strcmp(cmd, "/cartorio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Cartorio ]______________|");
		    SendClientMessage(playerid, COLOR_GRAD1,"USE: /mudarsexo");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /separacao");
            SendClientMessage(playerid, COLOR_GRAD1,"USE: /loteria");
			}
		return true;
	}
//----------------------------------[departments]-----------------------------------------------
	if(strcmp(cmd, "/departamento", true) == 0 || strcmp(cmd, "/d", true) == 0)
	{
	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_DEPTH, "USE: (/d)epartamento [Texto]");
				return true;
			}
			if(TentouDivulgar(result))
            {
            	if(cdivulgar[playerid] >= 4)
            	{
            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
            		Kick(playerid);
            	}
            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
            	cdivulgar[playerid] += 1;
            	return true;
            }
            if(dDesativado >= 1)
            {
			 SendClientMessage(playerid, COLOR_GREY, "[BRNM]: O (/d)epartamento foi desativado pelo administrador.");
			 return true;
            }
			if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** PM Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** PM %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** PM %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** PM %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** PM %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Cadete %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Policia Militar %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** B.O.P.E Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** B.O.P.E %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** B.O.P.E %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** B.O.P.E %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** B.O.P.E %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** B.O.P.E %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** B.O.P.E %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Exército Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Exército %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Exército %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Exército %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Exército %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Exército %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Exercito %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
                SendFamilyMessage(4, COLOR_DEPTH, string);
                SendFamilyMessage(24, COLOR_DEPTH, string);
                SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
   			else if(PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Prefeito %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Vice-Prefeito %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Acessor %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Agente do Governo %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Segurança do Governo %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Motorista do Governo %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Governo %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** PC Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** PC %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** PC %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** PC %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** PC %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** PC %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Policia Civil %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
   			else if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** PF Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** PF %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** PF %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** PF %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** PF %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** PF %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** PF %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** SAMU Líder %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** SAMU %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** SAMU %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** SAMU %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** SAMU %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** SAMU %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** SAMU %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefe Do Detran %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe do Detran %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Detran %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Detran %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Detran %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Detran %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** DETRAN %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
		    else if(PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25)
			{
			    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Lider Advogados %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe Advogados %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result); }
				else
				{
					format(string, sizeof(string), "** Advogado %s: %s, câmbio. **", sendername, result);
				}
                SendFamilyMessage(2, COLOR_DEPTH, string);
				SendFamilyMessage(1, COLOR_DEPTH, string);
				SendFamilyMessage(3, COLOR_DEPTH, string);
				SendFamilyMessage(16, COLOR_DEPTH, string);
				SendFamilyMessage(7, COLOR_DEPTH, string);
				SendFamilyMessage(11, COLOR_DEPTH, string);
				SendFamilyMessage(4, COLOR_DEPTH, string);
				SendFamilyMessage(24, COLOR_DEPTH, string);
				SendFamilyMessage(25, COLOR_DEPTH, string);
				printf("%s", string);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não é um Policial/Médico!");
				return true;
			}
		}
		return true;
	}
//----------------------------------[mdc]-----------------------------------------------
	if(strcmp(cmd, "/ficha", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
			new tmpcar = GetPlayerVehicleID(playerid);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ficha [id]");
				return true;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsACopCar(tmpcar)||PlayerToPoint(60.0, playerid,232.8069,164.0555,1003.0234)||PlayerToPoint(60.0, playerid,232.2051,117.3912,1003.2188)||PlayerToPoint(20.0, playerid,322.4880,309.1409,999.1484)||PlayerToPoint(40.0, playerid,246.1936,69.8609,1003.6406))
			{
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						SendClientMessage(playerid, COLOR_WHITE, "|______________ Ficha Na Policia ______________|");
						format(string, sizeof(string), "Nome: %s", PlayerName(playerid));
						SendClientMessage(playerid, COLOR_WHITE,string);
						format(string, sizeof(string), "Crime: %s", PlayerCrime[giveplayerid][pAccusing]);
						SendClientMessage(playerid, COLOR_GRAD2,string);
						format(string, sizeof(string), "Relato: %s", PlayerCrime[giveplayerid][pVictim]);
						SendClientMessage(playerid, COLOR_GRAD3,string);
						format(string, sizeof(string), "Acusado: %s", PlayerCrime[giveplayerid][pBplayer]);
						SendClientMessage(playerid, COLOR_GRAD5,string);
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "  Você tem que estar em um carro da policia ou em alguma HQ da policia!");
				return true;
			}
		}
		return true;
	}
//----------------------------------[SetCrim]-----------------------------------------------
	if(strcmp(cmd, "/suspeito", true) == 0 || strcmp(cmd, "/su", true) == 0)
	{

	    if(IsPlayerConnected(playerid))
	    {
 	        if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/su)speito [id] [Descrição do Crime]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsACop(playerid))
			{
            	if(IsPlayerConnected(giveplayerid))
				{
 					if(IsACop(giveplayerid))
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não pode dar su em Policiais!");
						return true;
					}
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USE: (/su)speito [id] [Descrição do Crime]");
								return true;
							}
							SetPlayerCriminal(giveplayerid,playerid, result);
							return true;
							
					}
				}
				else
				{
						SendClientMessage(playerid, COLOR_GRAD1, "  Esse jogador não está conectado.");
						return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não é um Policial !");
			}
		}
		return true;
 }
//---------------------------------[/su2]----------------------------------------------

//----------------------------------[LOCK]-----------------------------------------------
	if(strcmp(cmd, "/trancar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new carid;
            if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
			{
				if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pPHousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um carro de casa/alugado.");
					return true;
				}
				else if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pPHousekey]+totalveiculos)
				{
					if (HireCar[playerid] != gLastCar[playerid] && HireCar[playerid] > 0)
					{
						gLastDriver[HireCar[playerid]] = 300;
						VTrancado[HireCar[playerid]] = 0;
						UnLockCar(HireCar[playerid]);
					}
					HireCar[playerid] = gLastCar[playerid];
				}
			}
			if (PlayerInfo[playerid][pPHousekey] == 255)
			{
				if(HireCar[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro.");
					return true;
				}
			}
			carid = PlayerInfo[playerid][pPHousekey]+totalveiculosh;
			if(HireCar[playerid] > 0 && !SwitchKey[playerid])
			{
				carid = HireCar[playerid];
			}
			//new driver = gLastDriver[carid];
			new lockstatus = VTrancado[carid];
			new Float:cx,Float:cy,Float:cz;
			GetVehiclePos(carid, cx, cy, cz);
			switch (lockstatus)
			{
				case 0:
				{
					if(HireCar[playerid] == 0 && PlayerInfo[playerid][pPHousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro");
						return true;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Veiculo Alugado~r~ Fechado", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						VTrancado[carid] = 1;
						LockCar(carid);
					}
				}
				case 1:
				{
					if(HireCar[playerid] == 0 && PlayerInfo[playerid][pPHousekey] == 255)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro");
						return true;
					}
					if(HireCar[playerid] == carid && !SwitchKey[playerid])
					{
						GameTextForPlayer(playerid, "~w~Veiculo Alugado~g~ Aberto", 5000, 6);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						VTrancado[carid] = 0;
						UnLockCar(carid);
						SetPlayerVirtualWorld(playerid, 0);
						SetPlayerInterior(playerid, 0);
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Erro");
				}
			}
			if(carid == 256)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce não tem um carro!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/chave", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(PlayerInfo[playerid][pPHousekey] == i)
					{
						if(HouseInfo[i][hLock] == 1)
						{
							HouseInfo[i][hLock] = 0;
							GameTextForPlayer(playerid, "~w~Porta ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(HouseInfo[i][hLock] == 0)
						{
							HouseInfo[i][hLock] = 1;
							GameTextForPlayer(playerid, "~w~Porta ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~ Você não tem essa chave", 5000, 6);
						return true;
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i)
					{
						if(BizzInfo[i][bLocked] == 1)
						{
							BizzInfo[i][bLocked] = 0;
							GameTextForPlayer(playerid, "~w~Empresa ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(BizzInfo[i][bLocked] == 0)
						{
							BizzInfo[i][bLocked] = 1;
							GameTextForPlayer(playerid, "~w~Empresa ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Você não tem essa chave", 5000, 6);
						return true;
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i+100)
					{
						if(SBizzInfo[i][sbLocked] == 1)
						{
       						SBizzInfo[i][sbLocked] = 0;
							GameTextForPlayer(playerid, "~w~Empresa ~g~Aberta", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
						if(SBizzInfo[i][sbLocked] == 0)
						{
							SBizzInfo[i][sbLocked] = 1;
							GameTextForPlayer(playerid, "~w~Empresa ~r~Fechada", 5000, 6);
							PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
							return true;
						}
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Você não tem essa chave", 5000, 6);
						return true;
					}
				}
			}
	    }
	    return true;
	}
	if(strcmp(cmd, "/dado", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new dice = random(6)+1;
			if (gDice[playerid] == 1)
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "* %s jogou um dado e caiu no numero: %d", sendername,dice);
				ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem um dado, compre em uma 24/7, Dica: use /gps");
				return true;
			}
		}
		return true;
	}
	if (strcmp(cmd, "/banco", true) == 0)
	{
	    if(PlayerToPoint(1.5,playerid,2224.1484,-1141.8772,1025.7969) || PlayerToPoint(1.0,playerid,1929.5409,-1785.1664,13.5469) || PlayerToPoint(1.0,playerid,2232.2886,-1162.6107,25.8906) || PlayerToPoint(1.5,playerid,957.4803,-48.7381,1001.1172)
		|| PlayerToPoint(1.5,playerid,321.4753,305.5962,999.1484) || PlayerToPoint(1.5,playerid,-1347.6376,499.9476,11.1953) || PlayerToPoint(1.5, playerid,2308.7908,-13.2499,26.7422) || PlayerToPoint(1.5,playerid,1495.3928,-1749.1208,15.4453)
	 ||  PlayerToPoint(1.5,playerid,1363.0376,-1745.4191,13.5439))
		{
		    Controle(playerid, 0);
			ShowPlayerDialog(playerid, DIALOG_CAIXA_ELETRONICO,DIALOG_STYLE_LIST,"Caixa Eletrônico","Saque\nDeposito\nSaldo\nTransferir","Confirmar", "Cancelar");
		}
		else
		{
            SendClientMessage(playerid, COLOR_GREY, " Você não está em um banco.");
		}
		return true;
	}
	if(strcmp(cmd, "/transferir", true) == 0 || strcmp(cmd, "/trans", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pLevel] < 3)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você precisa ser level 3.");
				return true;
			}
			if(!PlayerToPoint(1.5,playerid,2224.1484,-1141.8772,1025.7969) && !PlayerToPoint(1.0,playerid,1929.5409,-1785.1664,13.5469) && !PlayerToPoint(1.0,playerid,2232.2886,-1162.6107,25.8906) && !PlayerToPoint(1.5,playerid,957.4803,-48.7381,1001.1172)
			&& !PlayerToPoint(1.5,playerid,321.4753,305.5962,999.1484) && !PlayerToPoint(1.5,playerid,-1347.6376,499.9476,11.1953) && !PlayerToPoint(1.5, playerid,2308.7908,-13.2499,26.7422) && !PlayerToPoint(1.5,playerid,1495.3928,-1749.1208,15.4453)
			&& !PlayerToPoint(1.5,playerid,1363.0376,-1745.4191,13.5439))
			{
                  SendClientMessage(playerid, COLOR_GREY, "Você não esta no banco!");
				  return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "/transferir [ id ] [quantidade]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "/transferir [ id ] [quantidade]");
				return true;
			}
			moneys = strval(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playerdinheiro = PlayerInfo[playerid][pConta] ;
					if (moneys > 0 && playerdinheiro >= moneys)
					{
						PlayerInfo[playerid][pConta] -= moneys;
						PlayerInfo[giveplayerid][pConta] += moneys;
						format(string, sizeof(string), "Voce transferiu R$%d para %s's ", moneys, giveplayer,giveplayerid);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "Voce recebeu R$%d pela sua conta de %s", moneys, sendername, playerid);
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "%s Transferido R$%d to %s", sendername, moneys, giveplayer);
		                if(moneys >= 500000)
						{
							ABroadCast(COLOR_YELLOW,string,1);
						}
						printf("%s", string);

						PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Transferencia Invalida!.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "[ID]%d Não está ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/comprar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7, ultimo mercearia.
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não esta em uma 24-7 ou Mercado ! >> Vá até uma /gps <<");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /comprar [Numero do item]");
				SendClientMessage(playerid, COLOR_WHITE, "|______________ 24-7 ______________|");
				SendClientMessage(playerid, COLOR_GRAD1, "| 1: Celular 	   R$100		2: Agenda 	   R$2");
				SendClientMessage(playerid, COLOR_GRAD2, "| 3: Dado 	   R$2		4: Camisinha   R$2");
				SendClientMessage(playerid, COLOR_GRAD4, "| 5: CD-Player   R$2		6: Frango 	   R$10");
				SendClientMessage(playerid, COLOR_GRAD5, "| 7: Hamburger   R$10			8: Pizza 	   R$10");
				SendClientMessage(playerid, COLOR_GRAD5, "| 9: 30 Creditos R$20      10: 50 Creditos R$50");
				SendClientMessage(playerid, COLOR_GRAD5, "| 11: Capacete R$30");
				return true;
			}
			new item = strval(tmp);
			if (item == 1 && GetPlayerMoney(playerid) >= 100)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 100 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 100 - price;
			        format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerMoney(playerid,- payout);
					BizzInfo[3][bTill] += payout;
                    ExtortionBiz(3, payout);
			    }
			    else
			    {
			        format(string, sizeof(string), "~r~-R$%d", 100);
					GameTextForPlayer(playerid, string, 5000, 1);
					GivePlayerMoney(playerid,-100);
					BizzInfo[3][bTill] += 100;
                    ExtortionBiz(3, 100);
			    }
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				new randphone = 1000 + random(8999);//minimo 1000  maximo 14999
				PlayerInfo[playerid][pPnumber] = randphone;
				format(string, sizeof(string), "Seu novo número de celular é %d", randphone);
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Dê uma olhada nos seus documentos /rg");
				SendClientMessage(playerid, COLOR_WHITE, "Dica: Digite /ajudacelular em caso de dúvidas");
				return true;
			}
			else if (item == 2 && GetPlayerMoney(playerid) >= 2)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 2 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 2 - price;
					GivePlayerMoney(playerid,- payout);
					BizzInfo[3][bTill] += payout;
                    ExtortionBiz(3, payout);
					format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid,-2);
					BizzInfo[3][bTill] += 2;
                    ExtortionBiz(3, 5000);
					format(string, sizeof(string), "~r~-R$%d", 2);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pPhoneBook] = 1;
				SendClientMessage(playerid, COLOR_GRAD4, "   Nova agenda telefônica comprada!");
				SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Digite /agenda <id/nome>.");
				return true;
			}
			else if (item == 3 && GetPlayerMoney(playerid) >= 2)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
			    {
					new skill = 2 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 2 - price;
					GivePlayerMoney(playerid,- payout);
					BizzInfo[3][bTill] += payout;
                    ExtortionBiz(3, payout);
					format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid,-2);
					BizzInfo[3][bTill] += 2;
                    ExtortionBiz(3, 2);
					format(string, sizeof(string), "~r~-R$%d", 2);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				gDice[playerid] = 1;
				SendClientMessage(playerid, COLOR_GRAD4, "   Você comprou um dado! Aproveite.");
				SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Digite /dado");
				return true;
			}
			else if (item == 4 && GetPlayerMoney(playerid) >= 2)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 2 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 2 - price;
					GivePlayerMoney(playerid,- payout);
					format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid,-2);
					format(string, sizeof(string), "~r~-R$%d", 2);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				Condom[playerid] ++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD4, "Camisinha comprada.");
				SendClientMessage(playerid, COLOR_WHITE, "Agora você pode fazer sexo com segurança.");
				return true;
			}
			else if (item == 5 && GetPlayerMoneyEx(playerid) >= 2)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 2 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 2 - price;
					GivePlayerMoneyEx(playerid, - payout);
					format(string, sizeof(string), "~r~-$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoneyEx(playerid, - 2);
					format(string, sizeof(string), "~r~-$%d", 2);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD4, "CD-Player comprado.");
				SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /musica");
				PlayerInfo[playerid][pCDPlayer] = 1;
				return true;
			}
			else if (item == 6 && GetPlayerMoney(playerid) >= 10)
			{
			    if(Groceries[playerid][pChickens] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você tem muitos frangos, coma alguns antes de comprar mais !");
			        return true;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					GivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-R$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    GivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD4, "Frango comprado.");
				format(string, sizeof(string), "~r~-R$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pChickens] += 1;
				Groceries[playerid][pChicken] += rand;
				return true;
			}
			else if (item == 7 && GetPlayerMoney(playerid) >= 10)
			{
			    if(Groceries[playerid][pHamburgers] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você tem muitos Hamburgers, coma alguns antes de comprar mais!");
			        return true;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					GivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-R$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
			    GivePlayerMoney(playerid, - 10);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD4, "Hamburger Comprado.");
				format(string, sizeof(string), "~r~-R$%d", 10);
				GameTextForPlayer(playerid, string, 5000, 1);
				new rand = random(15);
				Groceries[playerid][pHamburgers] += 1;
				Groceries[playerid][pHamburger] += rand;
				return true;
			}
			else if (item == 8 && GetPlayerMoney(playerid) >= 10)
			{
			    if(Groceries[playerid][pPizzas] >= 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você tem muitas pizzas, coma algumas antes de comprar mais!");
			        return true;
			    }
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 10 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 10 - price;
					GivePlayerMoney(playerid, - payout);
					format(string, sizeof(string), "~r~-R$%d", payout);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				else
				{
				    GivePlayerMoney(playerid, - 10);
					format(string, sizeof(string), "~r~-R$%d", 10);
					GameTextForPlayer(playerid, string, 5000, 1);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD4, "Pizza Comprado.");
				new rand = random(15);
				Groceries[playerid][pPizzas] += 1;
				Groceries[playerid][pPizza] += rand;
				return true;
			}
   			else if (item == 9 && GetPlayerMoney(playerid) >= 30)
			{
			    if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 30 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 30 - price;
					GivePlayerMoney(playerid,- payout);
				}
				else
				{
				    GivePlayerMoney(playerid,-30);
					BizzInfo[3][bTill] += 30;
                    ExtortionBiz(3, 30);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pCreditos] += 30;
				SendClientMessage(playerid, COLOR_MSG, "Você comprou 30 créditos para seu celular.");
				SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Digite /ajudacelular ");
				return true;
			}
			else if (item == 10 && GetPlayerMoney(playerid) >= 50)
			{
				if(PlayerInfo[playerid][pTraderPerk] > 0)
		    	{
					new skill = 50 / 100;
					new price = (skill)*(PlayerInfo[playerid][pTraderPerk]);
					new payout = 50 - price;
					GivePlayerMoney(playerid,- payout);
				}
				else
				{
				    GivePlayerMoney(playerid,-50);
					BizzInfo[3][bTill] += 50;
                    ExtortionBiz(3, 50);
				}
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                PlayerInfo[playerid][pCreditos] += 50;
				SendClientMessage(playerid, COLOR_MSG, "Você comprou 50 créditos para seu celular.");
				SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Digite /ajudacelular ");
				return true;
			}
			else if (item == 11 && GetPlayerMoney(playerid) >= 30)
             {
				if(PlayerInfo[playerid][pCapacete] == 1)
				{
					SendClientMessage(playerid, COLOR_GREY,"Você ja tem um Capacete!");
					return true;
				}
				GivePlayerMoneyEx(playerid, - 30);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
                SendClientMessage(playerid, COLOR_GRAD4, "Capacete Comprado Use: /capacete.");
                PlayerInfo[playerid][pCapacete] = 1;
             }
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não tem dinheiro o suficiente.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/comprarcasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel] && (PlayerInfo[playerid][pVIP] < 1))
					{
						format(string, sizeof(string), "   Você precisa ter nivel %d Para comprar! !", HouseInfo[h][hLevel]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return true;
					}
					if(PlayerInfo[playerid][pPHousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Você tem uma casa para vender digite /vendercasa, você receberá o mesmo valor que foi pago!");
						return true;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hValue])
					{
						PlayerInfo[playerid][pPHousekey] = h;
						HouseInfo[h][hOwned] = 1;
					    HouseInfo[h][hExitx] = 234.0843;
						HouseInfo[h][hExity] = 1064.6896;
						HouseInfo[h][hExitz] = 1084.2108;
						HouseInfo[h][hInt] = 6;
					    HouseInfo[h][hRentabil] = 1;
					    HouseInfo[h][hRent] = 200;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoney(playerid,-HouseInfo[h][hValue]);
						PlayerPlayMusic(playerid);
						PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid, "~w~Parabens pela compra ~n~~b~Para entrar digite /entrar", 5000, 3);
						SendClientMessage(playerid, COLOR_WHITE, "Parabéns pela sua nova casa!");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajudacasa Em caso de duvidas!");
						PlayerInfo[playerid][pSpawn] = 1;
					    DateProp(playerid);
                        Atualizar3Dtexts();
						OnPropUpdate();
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Você não tem dinheiro o suficiente. !");
						return true;
					}
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/alugarquarto", true) == 0 || strcmp(cmd, "/alugar", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			for(new h = 0; h < sizeof(HouseInfo); h++)
			{
				if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
				{
					if(PlayerInfo[playerid][pPHousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
					{
						SendClientMessage(playerid, COLOR_WHITE, "   Você tem uma casa, para vender digite /vendercasa, você receberá o mesmo valor que foi pago!");
						return true;
					}
					if(GetPlayerMoney(playerid) > HouseInfo[h][hRent])
					{
						PlayerInfo[playerid][pPHousekey] = h;
						GivePlayerMoney(playerid,-HouseInfo[h][hRent]);
						HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
						PlayerPlayMusic(playerid);
						GameTextForPlayer(playerid, "~w~Parabens pela compra ~n~~b~Para entrar digite /entrar", 5000, 3);
						SendClientMessage(playerid, COLOR_WHITE, "Parabéns pela sua nova casa!");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajudaaluguel Em caso de duvidas!");
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_WHITE, "Você não tem dinheiro o suficiente.");
						return true;
					}
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/alugarcarro", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVehicleID(playerid) >= 329 && GetPlayerVehicleID(playerid) <= 340)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[0][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				if(HireCar[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo !");
					RemovePlayerFromVehicleEx(playerid);
					return true;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return true;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[0][sbEntranceCost]);
				SBizzInfo[0][sbTill] += SBizzInfo[0][sbEntranceCost];
				ExtortionSBiz(0, SBizzInfo[0][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugarcarro~n~~g~ou /trancar ~w~ para trancar o carro.",hirefee);
				Controle(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return true;
			}
			else if(GetPlayerVehicleID(playerid) >= 341 && GetPlayerVehicleID(playerid) <= 354)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[1][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				if(HireCar[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo !");
					RemovePlayerFromVehicleEx(playerid);
					return true;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return true;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[1][sbEntranceCost]);
				SBizzInfo[1][sbTill] += SBizzInfo[1][sbEntranceCost];
				ExtortionSBiz(1, SBizzInfo[1][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugarcarro~n~~g~ou /trancar ~w~ para trancar o carro.",hirefee);
				Controle(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return true;
			}
			else if(GetPlayerVehicleID(playerid) >= 323 && GetPlayerVehicleID(playerid) <= 328)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[0][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				if(HireCar[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo !");
					RemovePlayerFromVehicleEx(playerid);
					return true;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return true;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[0][sbEntranceCost]);
				SBizzInfo[0][sbTill] += SBizzInfo[0][sbEntranceCost];
				ExtortionSBiz(0, SBizzInfo[0][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugarcarro~n~~g~ou /trancar ~w~ para trancar o carro.",hirefee);
				Controle(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return true;
			}
			else if(GetPlayerVehicleID(playerid) >= 389 && GetPlayerVehicleID(playerid) <= 394)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[20][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				if(HireCar[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return true;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[20][sbEntranceCost]);
				SBizzInfo[20][sbTill] += SBizzInfo[20][sbEntranceCost];
				ExtortionSBiz(20, SBizzInfo[20][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugarcarro~n~~g~ou /trancar ~w~ para trancar o carro.",hirefee);
				Controle(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return true;
			}
			else if(GetPlayerVehicleID(playerid) >= 395 && GetPlayerVehicleID(playerid) <= 401)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[20][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				if(HireCar[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return true;
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[20][sbEntranceCost]);
				SBizzInfo[20][sbTill] += SBizzInfo[20][sbEntranceCost];
				ExtortionSBiz(20, SBizzInfo[20][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugarcarro~n~~g~ou /trancar ~w~ para trancar o carro.",hirefee);
				Controle(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/alugarheli", true) == 0)
	{
        if(IsPlayerConnected(playerid))
		{
			if(GetPlayerVehicleID(playerid) >= 355 && GetPlayerVehicleID(playerid) <= 360)
			{
				new hirefee = HireCost(GetPlayerVehicleID(playerid));
				if (GetPlayerMoney (playerid) <  SBizzInfo[18][sbEntranceCost])
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não tem esse dinheiro !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				if(HireCar[playerid] > 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você tem que desalugar o outro veiculo !");
					RemovePlayerFromVehicle(playerid);
					return true;
				}
				for(new i=0; i<MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnected(i))
					{
				    if(HireCar[i] == GetPlayerVehicleID(playerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Alguem já alugou esse veiculo !");
				        Controle(playerid, 1);
				        RemovePlayerFromVehicleEx(playerid);
				        return true;
				    }
				    }
				}
				GivePlayerMoney(playerid,-SBizzInfo[18][sbEntranceCost]);
				SBizzInfo[18][sbTill] += SBizzInfo[18][sbEntranceCost];
				ExtortionSBiz(18, SBizzInfo[18][sbEntranceCost]);
				HireCar[playerid] = GetPlayerVehicleID(playerid);
				OnPropUpdate();
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce pode ~r~/desalugarheli~n~~g~ou /trancar ~w~ para trancar o heli.",hirefee);
				Controle(playerid, 1);
				GameTextForPlayer(playerid, string, 5000, 3);
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desalugarcarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    if(idcar == HireCar[playerid])
			    {
			        Controle(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				VTrancado[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Voce desalugou o carro", 5000, 3);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desalugarheli", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
			    if(idcar == HireCar[playerid])
			    {
			        Controle(playerid, 1);
			    }
			    SetVehicleToRespawn(HireCar[playerid]);
				VTrancado[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 0;
				GameTextForPlayer(playerid, "~w~Voce desalugou o heli", 5000, 3);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/darchaves", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			new car;
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /darchaves [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(HireCar[playerid] == 299 && PlayerInfo[playerid][pPHousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "  Você não tem uma chave para dar");
				return true;
			}
			else
			{
				if(HireCar[playerid] != 299 && SwitchKey[playerid] == 0)
				{
					car = HireCar[playerid];
					VTrancado[car] = 0;
					UnLockCar(car);
					HireCar[playerid] = 299;
				}
				else
				{
					car = PlayerInfo[playerid][pPHousekey]+totalveiculos;
				}
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					if(ProxDetectorS(5.0, playerid, giveplayerid))
					{
						if(HireCar[giveplayerid] != 299)
						{
							VTrancado[HireCar[giveplayerid]] = 0;
							UnLockCar(HireCar[giveplayerid]);
						}
						HireCar[giveplayerid] = car;
						HireCar[playerid] = 999;
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "   Você deu a chave do seu veiculo para %s", giveplayer);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "   Você recebeu a chave do veiuclo de %s", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_GRAD1, string);
						format(string, sizeof(string), "* %s da uma chave para %s.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desalugarcarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(HireCar[playerid] != 299)
			{
				VTrancado[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 299;
				GameTextForPlayer(playerid, "~w~Voce nao alugou nenhum carro", 5000, 3);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desalugar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPHousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "   Você desalugou uma casa, e agora está desabrigado!");
				PlayerInfo[playerid][pPHousekey] = 255;
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, " Você não alugou nenhuma casa.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/cofrecasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			new borse = PlayerInfo[playerid][pPHousekey];
			if(PlayerInfo[playerid][pPHousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cofrecasa [quantidade]");
					format(string, sizeof(string), "  Você tem R$%d em seu cofre.", HouseInfo[borse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return true;
				}
				new cashdeposit = strval(tmp);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cofrecasa [quantidade]");
					format(string, sizeof(string), "  Você tem R$%d em seu cofre.", HouseInfo[borse][hTakings]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
					return true;
				}
				if (cashdeposit >  HouseInfo[borse][hTakings] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem tudo isso !");
					return true;
				}
				if (!PlayerToPoint(100, playerid,HouseInfo[borse][hExitx],HouseInfo[borse][hExity],HouseInfo[borse][hExitz]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você está longe de sua casa !");
					return true;
				}
				else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					HouseInfo[borse][hTakings]=HouseInfo[borse][hTakings]-cashdeposit;
					format(string, sizeof(string), "  Você retirou R$%d de seu cofre Total: R$%d ", cashdeposit,HouseInfo[borse][hTakings]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem uma casa.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/admvemp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /admvemp [empresa id]");
				return true;
			}
			new biz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= DONO)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				BizzInfo[biz][bLocked] = 1;
				BizzInfo[biz][bOwned] = 0;
				strmid(BizzInfo[biz][bOwner], "O estado", 0, strlen("O estado"), 255);
				strmid(BizzInfo[biz][bExtortion], "Nenhum", 0, strlen("Nenhum"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce vendeu a empresa ID:%d", biz);
				GameTextForPlayer(playerid, string, 10000, 3);
				Atualizar3Dtexts();
				OnPropUpdate();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/admvsemp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /admvsemp [sempresa id]");
				return true;
			}
			new sbiz = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= DONO)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != SUB_DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				SBizzInfo[sbiz][sbLocked] = 1;
				SBizzInfo[sbiz][sbOwned] = 0;
				strmid(SBizzInfo[sbiz][sbOwner], "O estado", 0, strlen("O estado"), 255);
				strmid(SBizzInfo[sbiz][sbExtortion], "Nenhum", 0, strlen("Nenhum"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce vendeu a empresa ID:%d", sbiz);
				GameTextForPlayer(playerid, string, 10000, 3);
				Atualizar3Dtexts();
				OnPropUpdate();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/admvcasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /admvcasa [Casa id]");
				return true;
			}
			new House = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= DONO)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				HouseInfo[House][hHel] = 0;
				HouseInfo[House][hArm] = 0;
				HouseInfo[House][hHealthx] = 0;
				HouseInfo[House][hHealthy] = 0;
				HouseInfo[House][hHealthz] = 0;
				HouseInfo[House][hArmorrx] = 0;
				HouseInfo[House][hArmorry] = 0;
				HouseInfo[House][hArmorrz] = 0;
				HouseInfo[House][hLock] = 1;
				HouseInfo[House][hOwned] = 0;
				HouseInfo[House][hVec] = 475;
				HouseInfo[House][hVcol1] = -1;
				HouseInfo[House][hVcol2] = -1;
				strmid(HouseInfo[House][hOwner], "O estado", 0, strlen("O estado"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Voce vendeu a propriedade ID:%d", House);
				GameTextForPlayer(playerid, string, 10000, 3);
				Atualizar3Dtexts();
				OnPropUpdate();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/vendercasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPHousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem casa.");
				return true;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Você é casado ( a ) não pode vender a casa !");
		        return true;
		    }
			if(PlayerInfo[playerid][pPHousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				new House = PlayerInfo[playerid][pPHousekey];
				HouseInfo[House][hHel] = 0;
				HouseInfo[House][hArm] = 0;
				HouseInfo[House][hHealthx] = 0;
				HouseInfo[House][hHealthy] = 0;
				HouseInfo[House][hHealthz] = 0;
				HouseInfo[House][hArmorrx] = 0;
				HouseInfo[House][hArmorry] = 0;
				HouseInfo[House][hArmorrz] = 0;
				HouseInfo[House][hLock] = 1;
				HouseInfo[House][hOwned] = 0;
				HouseInfo[House][hVec] = 475;
				HouseInfo[House][hVcol1] = -1;
				HouseInfo[House][hVcol2] = -1;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(HouseInfo[House][hOwner], "O estado", 0, strlen("O estado"), 255);
				ConsumingMoney[playerid] = 1;
				GivePlayerMoney(playerid,HouseInfo[House][hValue]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu a casa por ~n~~g~R$%d", HouseInfo[House][hValue]);
				GameTextForPlayer(playerid, string, 10000, 3);
				PlayerInfo[playerid][pPHousekey] = 255;
				if(PlayerInfo[playerid][pLocal] == House)
				{
					SetPlayerInterior(playerid,0);
					SetPlayerPos(playerid,HouseInfo[House][hEntrancex],HouseInfo[House][hEntrancey],HouseInfo[House][hEntrancez]);
					PlayerInfo[playerid][pInt] = 0;
				}
				Atualizar3Dtexts();
				OnPropUpdate();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem casa.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/moveis", true) == 0 || strcmp(cmd, "/mv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new House = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (House != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /moveis [Numero do iten]");
					SendClientMessage(playerid, COLOR_WHITE, "|______________[ Moveis da casa ]______________|");
					SendClientMessage(playerid, COLOR_GRAD2, "| 1: Vida  R$50000");
					SendClientMessage(playerid, COLOR_GRAD3, "| 2: Colete R$100000");
					return true;
				}
				new item = strval(tmp);
				switch (item)
				{
					case 1:
					{
						if(GetPlayerMoney(playerid) < 100)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Voce não tem R$100!");
							return true;
						}
						HouseInfo[House][hHel] = 1;
						GivePlayerMoney(playerid,-100);
						SBizzInfo[6][sbTill] += 100;//vida buisness
						ExtortionSBiz(6, 100);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Sua casa agora tem upgrade de vida, Digite /vida.");
					}
					case 2:
					{
					    if(!IsACop(playerid))
					    {
							SendClientMessage(playerid, COLOR_GREY, "   Você não pode comprar isso, você não é um policial !");
							return true;
					    }
						if(GetPlayerMoney(playerid) < 300)
						{
							SendClientMessage(playerid, COLOR_GRAD5, "Voce não tem R$300!");
							return true;
						}
						HouseInfo[House][hArm] = 1;
						GivePlayerMoney(playerid,-300);
						SBizzInfo[6][sbTill] += 300;//vida buisness
						ExtortionSBiz(6, 300);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_GRAD5, "Sua casa agora tem upgrade de colete, Digite /vida.");
					}
					default:
					{
						SendClientMessage(playerid, COLOR_GREY, "Número de móvel desconhecido.");
					}
				}
				OnPropUpdate();
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Voce nao tem uma casa");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/aluguel", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (borse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /aluguel [Preço]");
					return true;
				}
				if(strval(tmp) < 1 || strval(tmp) > 500)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Preço Mínimo R$1, Maximo R$500.");
					return true;
				}
				HouseInfo[borse][hRent] = strval(tmp);
				Atualizar3Dtexts();
				OnPropUpdate();
				format(string, sizeof(string), "Aluguel definido para: R$%d", HouseInfo[borse][hRent]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Voce nao tem uma casa");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/despejartodos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPHousekey];
			if (borse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						if(i != playerid)
						{
							if (PlayerInfo[i][pPHousekey] == PlayerInfo[playerid][pPHousekey] )
							{
								SendClientMessage(i, COLOR_WHITE, "Você foi despejado de sua casa.");
								SendClientMessage(playerid, COLOR_WHITE, "Você expulsou todos os inquilinos de sua casa.");
								PlayerInfo[i][pPHousekey] = 255;
								return true;
							}
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não é dono de uma casa !");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/despejar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (borse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /despejar [id]");
				}
				new target;
				//target = strval(tmp);
				target = ReturnUser(tmp);
				if (target == playerid)
				{
					SendClientMessage(target, COLOR_WHITE, "Você não pode despejar a si mesmo.");
					return true;
				}
				if(IsPlayerConnected(target))
				{
				    if(target != INVALID_PLAYER_ID)
				    {
						if(PlayerInfo[target][pPHousekey] == PlayerInfo[playerid][pPHousekey])
						{
							SendClientMessage(target, COLOR_WHITE, "Você foi despejado");
							SendClientMessage(playerid, COLOR_WHITE, "Você despejou o jogador");
							PlayerInfo[target][pPHousekey] = 255;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_WHITE, "O Jogador não alugou sua casa !");
						    return true;
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não é dono de uma casa !");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/alugada", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPHousekey];
			GetPlayerName(playerid, playername, sizeof(playername));
			if (borse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 0)
			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /alugada [0 - Nao / 1 - Sim]");
				}
				HouseInfo[borse][hRentabil] = strval(tmp);
				OnPropUpdate();
				Atualizar3Dtexts();
				format(string, sizeof(string), "Status do aluguel da casa setado para - %d.", HouseInfo[borse][hRentabil]);
				SendClientMessage(playerid, COLOR_WHITE, string);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não é dono de uma casa !");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/ligar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ligar [Telefone]");
				return true;
			}
			if(PlayerInfo[playerid][pConnectTime] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você precisa jogar pelo menos 1 horas para fazer ligações!");
				return true;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um celular");
				return true;
			}
			if(PlayerInfo[playerid][pCreditos] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Voce não tem créditos suficientes, compre mais na 24-7!");
	            return true;
	        }
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s pega o celular.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			if(phonenumb == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você está ligando para ninguém");
				return true;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce não pode ligar para si mesmo");
				return true;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce ja está em uma ligação...");
				return true;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   O celular chamado está fora da área de cobertura ou está desligado !");
						            return true;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Seu celular está tocando (/At) Chamada de: %s", PlayerName(playerid));
									/*PlayerPlaySound(giveplayerid, 1142, 0.0, 0.0, 0.0);
									PlayerPlaySound(playerid, 1142, 0.0, 0.0, 0.0);*/
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "* %s's está fazendo um celular tocar.", PlayerName(playerid));
									PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
									SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Use 'T' para falar, digite /des para desligar.");
									SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Outro /des para guardar seu celular no bolso.");
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									CellTime[playerid] = 1;
									GameTextForPlayer(playerid,"~r~ -2 Creditos", 5000, 1);
									SetPlayerAttachedObject( playerid, 0, 330, 6 );
									SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
									PlayerInfo[playerid][pCreditos] -= 2;
								    SBizzInfo[2][sbTill] += 100;
			                        ExtortionSBiz(2, 50);
									return true;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Você acabou de ligar para um número ocupado...");
		}
		return true;
	}
	if(strcmp(cmd, "/sms", true) == 0 || strcmp(cmd, "/t", true) == 0 || strcmp(cmd, "/sms", true) == 0)
	{
    	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
		{
		    if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Voce não está logado!");
	            return true;
	        }
	        if(PlayerInfo[playerid][pCreditos] < 1)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Voce não tem créditos suficientes compre mais na 24-7!");
	            return true;
	        }
			if(PlayerInfo[playerid][pConnectTime] < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você precisa jogar pelo menos 1 horas para mandar sms!");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sms [telefone] [texto]");
				return true;
			}
			if(PlayerInfo[playerid][pPnumber] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um celular, compre um na 24/7");
				return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s pegou o celular.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sms [telefone] [texto]");
				return true;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   O celular chamado está fora da área de cobertura ou está desligado !");
						            return true;
						        }
								if(TentouDivulgar(result))
            					{
					            	if(cdivulgar[playerid] >= 4)
					            	{
					            		SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
					            		PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
					            		Kick(playerid);
					            	}
					            	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
					            	format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
									ABroadCast(COLOR_YELLOW,string,1);
									DivulgouLog(string);
					            	cdivulgar[playerid] += 1;
					            	return true;
            					}
								format(string, sizeof(string), "SMS: %s, enviou: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
								GetPlayerName(giveplayerid, sendername, sizeof(sendername));
								RingTone[giveplayerid] =20;
								SendClientMessage(playerid, COLOR_WHITE, "SMS Enviado");
								SendClientMessage(giveplayerid, COLOR_YELLOW, string);
								print(string);
								SendClientMessage(playerid,  COLOR_YELLOW, string);
								GameTextForPlayer(playerid,"~r~ -1 Credito", 5000, 1);
								PlayerInfo[playerid][pCreditos] -= 1;
								SBizzInfo[2][sbTill] += 50;
                                ExtortionSBiz(2, 25);
					           	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					           	Mobile[playerid] = 255;
					           	format(string, sizeof(string), "[%d/%d/%d] [%d:%d:%d] SMS: %s, enviou: %s para %s", v[2], v[1], v[0], v[3], v[4], v[5], result,playername,PlayerName(playerid));
					           	SmsLog(string);
								return true;
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, " Falha ao enviar a mensagem!");
		}
		return true;
	}
	if(strcmp(cmd, "/equipargov", true) == 0)
	{
		if(PlayerToPoint(5.0,playerid, 346.1226,161.8205,1025.7964))
		{
		    if(PlayerInfo[playerid][pLider] == 7)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Você pegou seus Equipamentos de proteção");
			    SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
				GivePlayerWeapon(playerid, 24, 150);
				return true;
			}
			else if(PlayerInfo[playerid][pMembro] == 7)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "Você pegou seus Equipamentos");
			    ResetPlayerWeaponsEx(playerid);
			    SetPlayerArmour(playerid, 100);
				SetPlayerHealth(playerid, 100);
				GivePlayerWeapon(playerid, 3, 1);
				GivePlayerWeapon(playerid, 24, 150);
				GivePlayerWeapon(playerid, 29, 650);
				GivePlayerWeapon(playerid, 31, 450);
				return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "Você não é um membro da prefeitura!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD2, "Você não está no lugar de equipar em sua HQ");
        }
        return true;
	}


//----------------------------------[Skin]-----------------------------------------------
	if(strcmp(cmd,"/meuskin",true) == 0)
	if(PlayerToPoint(10.0,playerid,205.1173,-159.3505,1000.5234) || PlayerToPoint(10.0,playerid,207.9093,-104.6899,1005.1328) || PlayerToPoint(3.0,playerid,414.1574,2536.4773,10.00008) || PlayerToPoint(50.0,playerid,162.6288,-86.3102,1001.8047) || PlayerToPoint(12.0,playerid,210.7969,-7.6347,1001.2109))
	{
	   if(PlayerInfo[playerid][pVIP] == 0 && PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pVIP] == 0 && PlayerInfo[playerid][pLider] > 0) { 
	   return SendClientMessage(playerid, COLOR_GREY, " * Você possui uma profissão, só pode usar as skins dela,digite /roupas");
       }
     	new skin;
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)) return SendClientMessage(playerid, COLOR_GRAD2, "Use: /meuskin [id da skin] - Custo R$ 100");
		skin=strval(tmp);
		if(skin==3 || skin==4 || skin==5 || skin==6 || skin==12 || skin==282 || skin==288 || skin==283 || skin==281 || skin==280 || skin==72 || skin==287 || skin==115 || skin==116 || skin==173 || skin==174 || skin==175 || skin==176 || skin==41 || skin==216 || skin==121 || skin==122
	    || skin==169 || skin==179 || skin==127 || skin==165 || skin==186 || skin==93 || skin==141 || skin==105  || skin==219 || skin==269 || skin==195 || skin==271 || skin==106 || skin==107 || skin==30 || skin==47 || skin==48 || skin==285 || skin==191 || skin==73 || skin==103 || skin==104
	    || skin==109 || skin==110 || skin==21 || skin==28 || skin==29 || skin==265 || skin==267 || skin==287 || skin==228 || skin==114 || skin==120 || skin==147 || skin==294 || skin==227 || skin==61 || skin==171 || skin==123 || skin==59 || skin==102 || skin==108 || skin==117
        || skin==217 || skin==203 || skin==247 || skin==248 || skin==249 || skin==254 || skin==204 || skin==118 || skin==186 || skin==13 || skin==15 || skin==19 || skin==43 || skin==16
	    || skin==46 || skin==153 || skin==163 || skin==164 || skin==166 || skin==298 || skin==295 || skin==299 || skin==296 || skin==181 || skin==211 || skin>=300) return SendClientMessage(playerid, COLOR_GREY, "Esta Skin é De Uma Profissão !");
		SetPlayerSkin(playerid,skin);
		PlayerInfo[playerid][pSkin] = skin;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você comprou novo skin por R$100");
		GivePlayerMoney(playerid,-100);
		SBizzInfo[6][sbTill] += 100;
		ExtortionSBiz(6, 100);
		return true; 
		}

//----------------------------------[pickup]-----------------------------------------------
	if(strcmp(cmd, "/atender", true) == 0 || strcmp(cmd, "/at", true) == 0)
	{
    	if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
        if(IsPlayerConnected(playerid))
		{
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você já está em uma ligação.");
				return true;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(Mobile[i] == playerid)
					{
						Mobile[playerid] = i; //caller connecting
						SendClientMessage(i,  COLOR_GRAD2, "Atendeu o celular.");
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* %s atendeu o celular.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerAttachedObject( playerid, 0, 330, 6 );
						SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
						RingTone[playerid] = 0;
					}

				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desligar", true) == 0 || strcmp(cmd, "/des", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "   Desligaram do outro lado da linha.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "   Você desligou seu celular.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return true;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "   Você guardou seu celular no bolso.");
			new pSpecialAction = GetPlayerSpecialAction(playerid);
			if (pSpecialAction == SPECIAL_ACTION_USECELLPHONE)
			{
                RemovePlayerAttachedObject(playerid, 0);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		return true;
	}
//-----------------------[RONDA]--------------------
    if(strcmp(cmd,"/ronda",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1 || PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
			{
			    if(EmpregoDuty[playerid] >= 1)
			    {
			    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você não esta mais em serviço.");
			        EmpregoDuty[playerid] = 0;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
			        format(string, sizeof(string), "O Policial %s não esta mais em serviço.", PlayerName(playerid));
	    			OOCNews(COLOR_LIGHTRED,string);
			        Copsronda -= 1;
			    }
			    else
			    {
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Agora você está de serviço  e poderá receber chamadas de pessoas que precisam.");
			        EmpregoDuty[playerid] = 2;
			        GetPlayerName(playerid,sendername,sizeof(sendername));
			        format(string, sizeof(string), "O Policial %s esta em serviço, para alguma ocorrência digite /servico policia.", PlayerName(playerid));
	    			OOCNews(COLOR_LIGHTRED,string);
			        Copsronda += 1;
				}
			}
		}
		return true;
	}
//----------------------------[ORELHAO]--------------------------------------------------
	if(strcmp(cmd, "/orelhao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerToPoint(1.7, playerid,1535.5697,-1637.5358,13.5469) || PlayerToPoint(1.7, playerid,1710.8175,-1605.0188,13.5469) || PlayerToPoint(1.7, playerid,1808.1926,-1598.6720,13.5469) || PlayerToPoint(1.7, playerid,1611.2460,-1713.0765,13.5469) || PlayerToPoint(1.7, playerid,1362.9312,-1751.3467,13.5244) || PlayerToPoint(1.7, playerid,1804.5630,-1167.7408,23.8281) || PlayerToPoint(1.7, playerid,814.5628,-1355.5433,13.5414) ||
			PlayerToPoint(1.7, playerid,839.7822,-1339.5476,7.1719) || PlayerToPoint(1.7, playerid,522.3236,-1515.9530,14.5936) || PlayerToPoint(1.7, playerid,523.9922,-1525.5927,14.7482) || PlayerToPoint(1.7, playerid,547.3288,-1498.3148,14.4988) || PlayerToPoint(1.7, playerid,637.4054,-1228.4910,17.8721) || PlayerToPoint(1.7, playerid,356.4761,-1365.3461,14.4760) ||
		    PlayerToPoint(1.7, playerid,338.9698,-1397.1982,14.2238) || PlayerToPoint(1.7, playerid,248.2463,-1448.8539,13.5899) || PlayerToPoint(1.7, playerid,2232.8149,-1165.7214,25.8906)  || PlayerToPoint(1.7, playerid,2219.9551,-1154.7574,1025.7969)
	       || PlayerToPoint(1.7, playerid,1723.9048,-1720.7859,13.5437)  || PlayerToPoint(1.7, playerid,1720.4819,-1720.9020,13.5442))
            {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /orelhao [Nº TELEFONE]");
				return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s disca algum numero no telefone.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			new phonenumb = strval(tmp);
			if(phonenumb == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você está ligando para ninguém");
				return true;
			}
			if(phonenumb == PlayerInfo[playerid][pPnumber])
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce não pode ligar para si mesmo");
				return true;
			}
			if(Mobile[playerid] != 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Voce ja está em uma ligação...");
				return true;
			}
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
					{
						giveplayerid = i;
						Mobile[playerid] = giveplayerid; //caller connecting
						if(IsPlayerConnected(giveplayerid))
						{
						    if(giveplayerid != INVALID_PLAYER_ID)
						    {
						        if(PhoneOnline[giveplayerid] > 0)
						        {
						            SendClientMessage(playerid, COLOR_GREY, "   O celular chamado está fora da área de cobertura ou está desligado !");
						            return true;
						        }
								if (Mobile[giveplayerid] == 255)
								{
									format(string, sizeof(string), "Seu celular está tocando (/At) Chamando: %s", PlayerName(playerid));
									SendClientMessage(giveplayerid, COLOR_YELLOW, string);
									GetPlayerName(giveplayerid, sendername, sizeof(sendername));
									RingTone[giveplayerid] = 10;
									format(string, sizeof(string), "* %s's está tocando o celular.", PlayerName(playerid));
									//PlayerPlaySound(giveplayerid, 1142, 0.0, 0.0, 0.0);
									//PlayerPlaySound(playerid, 1142, 0.0, 0.0, 0.0);
									ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
									SendClientMessage(playerid, COLOR_MSG, "[BRNM]: Use 'T' para falar, digite /des para desligar");
									CellTime[playerid] = 1;
									SBizzInfo[2][sbTill] += 50;
                                    ExtortionSBiz(2, 50);
									return true;
								}
							}
						}
					}
				}
			}
			SendClientMessage(playerid, COLOR_GRAD2, "  Você acabou de ligar para 1 número ocupado...");}
		}
		return true;
	}
//DESLIGAR ORELHAO
 	if(strcmp(cmd, "/desligarorelhao", true) == 0 || strcmp(cmd, "/deso", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new caller = Mobile[playerid];
			if(IsPlayerConnected(caller))
			{
			    if(caller != INVALID_PLAYER_ID)
			    {
					if(caller != 255)
					{
						if(caller < 255)
						{
							SendClientMessage(caller,  COLOR_GRAD2, "Desligou.");
							CellTime[caller] = 0;
							CellTime[playerid] = 0;
							SendClientMessage(playerid,  COLOR_GRAD2, "Desligou.");
							Mobile[caller] = 255;
						}
						Mobile[playerid] = 255;
						CellTime[playerid] = 0;
						RingTone[playerid] = 0;
						return true;
					}
				}
			}
			SendClientMessage(playerid,  COLOR_GRAD2, "Colocou o orelhão no gancho.");
			new pSpecialAction = GetPlayerSpecialAction(playerid);
			if (pSpecialAction == SPECIAL_ACTION_USECELLPHONE)
			{
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			}
		}
		return true;
	}
//----------------------------------[TIME]-----------------------------------------------
    if(strcmp(cmd, "/fixr", true) == 0)
    {
        if(IsPlayerConnected(playerid))
		{
			PlayerFixRadio(playerid);
		}
		return true;
	}
	if(strcmp(cmd, "/horas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    new mtext[20];
			getdate(year, month, day);
			if(month == 1) { mtext = "Janeiro"; }
			else if(month == 2) { mtext = "Fevereiro"; }
			else if(month == 3) { mtext = "Marco"; }
			else if(month == 4) { mtext = "Abril"; }
			else if(month == 5) { mtext = "Maio"; }
			else if(month == 6) { mtext = "Junho"; }
			else if(month == 7) { mtext = "Julho"; }
			else if(month == 8) { mtext = "Agosto"; }
			else if(month == 9) { mtext = "Setembro"; }
			else if(month == 10) { mtext = "Outubro"; }
			else if(month == 11) { mtext = "Novembro"; }
			else if(month == 12) { mtext = "Dezembro"; }
			gettime(hour,minute,second);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s olhou as horas.", PlayerName(playerid));
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
			if (minute < 10)
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|~n~~w~Tempo De Prisao: %d seg", day, mtext, hour, minute, PlayerInfo[playerid][pJailTime]-10);
				}
				else
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:0%d~g~|", day, mtext, hour, minute);
				}
			}
			else
			{
				if (PlayerInfo[playerid][pJailTime] > 0)
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|~n~~w~Tempo De Prisao: %d seg", day, mtext, hour, minute, PlayerInfo[playerid][pJailTime]-10);
				}
				else
				{
					format(string, sizeof(string), "~y~%d %s~n~~g~|~w~%d:%d~g~|", day, mtext, hour, minute);
				}
			}
			GameTextForPlayer(playerid, string, 5000, 1);
		}
		return true;
	}
//----------------------{HouseS}-------------------
    if(strcmp(cmd, "/ircasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(PlayerInfo[playerid][pAdmin] < MASTER)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Voce não tem autorização para usar esse comando!");
	            return true;
	        }
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
        	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ircasa [ID]");
				return true;
			}
			new Casa;
			Casa = strval(tmp);
			SetPlayerPos(playerid,HouseInfo[Casa][hEntrancex],HouseInfo[Casa][hEntrancey],HouseInfo[Casa][hEntrancez]);
			return true;
		}
		return true;
	}
 	if(strcmp(cmd, "/iremp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
	        if(PlayerInfo[playerid][pAdmin] < MASTER)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Voce não tem autorização para usar esse comando!");
	            return true;
	        }
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
        	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /iremp [ID]");
				return true;
			}
			new Emp;
			Emp = strval(tmp);
			SetPlayerPos(playerid,BizzInfo[Emp][bEntranceX],BizzInfo[Emp][bEntranceY],BizzInfo[Emp][bEntranceZ]);
			return true;
		}
		return true;
	}
	if(strcmp(cmd, "/irsemp", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
	        if(PlayerInfo[playerid][pAdmin] < MASTER)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Voce não tem autorização para usar esse comando!");
	            return true;
	        }
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
        	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /iremp [ID]");
				return true;
			}
			new Emp;
			Emp = strval(tmp);
			SetPlayerPos(playerid,SBizzInfo[Emp][sbEntranceX],SBizzInfo[Emp][sbEntranceY],SBizzInfo[Emp][sbEntranceZ]);
			return true;
		}
		return true;
	}

	if(strcmp(cmd, "/casa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 6)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /casa [numero da casa]");
					return true;
				}
				new Housenum = strval(tmp);
				SetPlayerInterior(playerid,HouseInfo[Housenum][hInt]);
				SetPlayerVirtualWorld(playerid,HouseInfo[Housenum][hWorld]);
				SetPlayerPos(playerid,HouseInfo[Housenum][hExitx],HouseInfo[Housenum][hExity],HouseInfo[Housenum][hExitz]);
				GameTextForPlayer(playerid, "~w~Teleportado", 5000, 1);
				PlayerInfo[playerid][pInt] = HouseInfo[Housenum][hInt];
				PlayerInfo[playerid][pLocal] = Housenum;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/biz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 6)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /biz [empresa]");
					return true;
				}
				new Housenum = strval(tmp);
				SetPlayerInterior(playerid,BizzInfo[Housenum][bInterior]);
				SetPlayerPos(playerid,BizzInfo[Housenum][bExitX],BizzInfo[Housenum][bExitY],BizzInfo[Housenum][bExitZ]);
				GameTextForPlayer(playerid, "~w~Teleportado", 5000, 1);
				PlayerInfo[playerid][pInt] = BizzInfo[Housenum][bInterior];
				PlayerInfo[playerid][pLocal] = Housenum+99;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/sbiz", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] >= 6)
		    {
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /sbiz [empresa]");
					return true;
				}
				new Housenum = strval(tmp);
				SetPlayerPos(playerid,SBizzInfo[Housenum][sbEntranceX],SBizzInfo[Housenum][sbEntranceY],SBizzInfo[Housenum][sbEntranceZ]);
				GameTextForPlayer(playerid, "~w~Teleportado", 5000, 1);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/seditar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pAdmin] < DONO)
			{
				SendClientMessage(playerid, COLOR_GREY, "Voce não tem autorização para usar esse comando!");
				return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			new x_Emprego[32];
			x_Emprego = strtok(cmdtext, idx);
			if(!strlen(x_Emprego)) {
				SendClientMessage(playerid, COLOR_WHITE, "|______________ Editar ______________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /seditar [nome] [quantidade] (Use para casas e empresas)");
				SendClientMessage(playerid, COLOR_GREY, "Casas: Level, Preco, carro, descricao, chave(0 aberto - 1 fechado)");
				SendClientMessage(playerid, COLOR_GREY, "Empresas: Level, Preco, fundos, descricao, chave(0 aberto - 1 fechado)");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /seditar [nome] [quantidade]");
				return true;
			}
			new proplev = strval(tmp);
	        //if(strcmp(x_Emprego,"car",true) == 0)
	        for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					format(string, sizeof(string), "Casa: %d", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							HouseInfo[i][hLevel] = proplev;
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							HouseInfo[i][hValue] = proplev;
						}
						else if(strcmp(x_Emprego,"carro",true) == 0)
					    {
							HouseInfo[i][hVec] = proplev;
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							HouseInfo[i][hLock] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					format(string, sizeof(string), "Empresa: %d (Empresa com interior)", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							BizzInfo[i][bLevelNeeded] = proplev;
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							BizzInfo[i][bBuyPrice] = proplev;
						}
						else if(strcmp(x_Emprego,"fundos",true) == 0)
					    {
							BizzInfo[i][bTill] = proplev;
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							BizzInfo[i][bLocked] = proplev;
						}
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					format(string, sizeof(string), "SEmpresa: %d (Empresa sem interior)", i);
					SendClientMessage(playerid, COLOR_GRAD2, string);
					if(proplev > 0)
					{
					    if(strcmp(x_Emprego,"level",true) == 0)
					    {
							SBizzInfo[i][sbLevelNeeded] = proplev;
						}
						else if(strcmp(x_Emprego,"preco",true) == 0)
					    {
							SBizzInfo[i][sbBuyPrice] = proplev;
						}
						else if(strcmp(x_Emprego,"fundos",true) == 0)
					    {
							SBizzInfo[i][sbTill] = proplev;
						}
						else if(strcmp(x_Emprego,"chave",true) == 0)
					    {
							SBizzInfo[i][sbLocked] =  proplev;
						}
					}
				}
			}
			format(string, sizeof(string), "Você ajustou: %s", x_Emprego);
			SendClientMessage(playerid, COLOR_WHITE, string);
			Atualizar3Dtexts();
			OnPropUpdate();
		}
		return true;
	}
	if(strcmp(cmd, "/entrar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i < sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(2.5, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
				{
					if(PlayerInfo[playerid][pPHousekey] == i || HouseInfo[i][hLock] == 0)
					{
						SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						GameTextForPlayer(playerid, "~w~Bem vindo em casa", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						TogglePlayerControllable(playerid, 0);
                        TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(2.5, playerid,BizzInfo[i][bEntranceX], BizzInfo[i][bEntranceY], BizzInfo[i][bEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(BizzInfo[i][bLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
								return true;
							}
							GivePlayerMoney(playerid,-BizzInfo[i][bEntranceCost]);
							format(string, sizeof(string), "~r~-R$%d~n~~w~Digite /sair~n~Para poder sair!", BizzInfo[i][bEntranceCost]);
							BizzInfo[i][bTill] += BizzInfo[i][bEntranceCost];
							ExtortionBiz(i, BizzInfo[i][bEntranceCost]);
							OnPropUpdate();
							GameTextForPlayer(playerid, string, 5000, 3);
							TogglePlayerControllable(playerid, 0);
                        	TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
						}
						SetPlayerInterior(playerid,BizzInfo[i][bInterior]);
						SetPlayerPos(playerid,BizzInfo[i][bExitX],BizzInfo[i][bExitY],BizzInfo[i][bExitZ]);
						PlayerInfo[playerid][pInt] = BizzInfo[i][bInterior];
						PlayerInfo[playerid][pLocal] = i+99;
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s pagou R$%d para entrar na empresa %d", dood, BizzInfo[i][bEntranceCost], i);
						printf("%s", string);
						//PayLog(string);
					}
					else
					{
						GameTextForPlayer(playerid, "~r~Voce nao tem dinheiro suficiente", 5000, 1);
					}
				}
			}
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
				if (PlayerToPoint(1, playerid,SBizzInfo[i][sbEntranceX], SBizzInfo[i][sbEntranceY], SBizzInfo[i][sbEntranceZ]))
				{
					if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntranceCost])
					{
						if(PlayerInfo[playerid][pPbiskey] != i)
						{
							if(SBizzInfo[i][sbLocked] == 1)
							{
								GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
								return true;
							}
							GivePlayerMoney(playerid,-SBizzInfo[i][sbEntranceCost]);
							gSpentCash[playerid] = GetPlayerMoney(playerid);
							SBizzInfo[i][sbTill] += SBizzInfo[i][sbEntranceCost];
							ExtortionSBiz(i, SBizzInfo[i][sbEntranceCost]);
							new dood[MAX_PLAYER_NAME];
							GetPlayerName(playerid, dood, sizeof(dood));
							format(string, sizeof(string), "%s payed R$%d to enter sbiz %d", dood, SBizzInfo[i][sbEntranceCost], i);
							printf("%s", string);
							OnPropUpdate();}}else{GameTextForPlayer(playerid, "~r~Voce nao tem dinheiro suficiente", 5000, 1);}}}

   			if (PlayerToPoint(2, playerid,1480.9403,-1770.8481,18.7958)){//Prefeitura
		    SetPlayerInterior(playerid,3);
            //localizarprefeitura[playerid] = 1;
		    SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPos(playerid,387.7978,173.8582,1008.3828);
			GameTextForPlayer(playerid, "~w~Bem vindo a ~n~~b~Prefeitura !", 5000, 1);
			PlayerInfo[playerid][pInt] = 3;
			PlayerInfo[playerid][pLocal] = 241;
			TogglePlayerControllable(playerid, 0);
            TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);}

			if (PlayerToPoint(1, playerid,306.3995,-159.1051,999.5938))
			{
			//COFRE LOJA DE ARMAS 1 ENTRADA
				SetPlayerPos(playerid,305.05056762695,-159.16743469238,999.59375);
				GameTextForPlayer(playerid, "~w~Cofre", 5000, 1);
				PlayerInfo[playerid][pInt] = 6;
				SetPlayerInterior(playerid,6);
			}
			if (PlayerToPoint(1, playerid,301.7848,-76.6545,1001.5156))
			{
			//COFRE Ammu Nation ENTRADA
				SetPlayerPos(playerid,301.71704101563,-75.318428039551,1001.515625);
				GameTextForPlayer(playerid, "~w~Cofre", 5000, 1);
				PlayerInfo[playerid][pInt] = 4;
				SetPlayerInterior(playerid,4);
			}
			else if(PlayerToPoint(2, playerid,1248.1326,-1559.9377,13.5635))
			{
		        SetPlayerInterior(playerid,3);
				SetPlayerPos(playerid,-2027.0635,-104.0651,1035.1719);
				GameTextForPlayer(playerid, "~w~Auto Escola", 5000, 1);
				PlayerInfo[playerid][pInt] = 3;
				PlayerInfo[playerid][pLocal] = 9999;
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
			}

			else if(PlayerToPoint(2, playerid,2315.5200,0.3490,26.7422))
			{
		        SetPlayerInterior(playerid,1);
				SetPlayerPos(playerid,2147.7161,1603.5366,1006.1677);
				GameTextForPlayer(playerid, "~w~Cofre", 5000, 3);
			}

			else if(PlayerToPoint(2, playerid,1434.1337,-968.4908,37.3894))
			{
		        SetPlayerInterior(playerid,1);
				SetPlayerPos(playerid,2155.9976,1597.9829,999.9699);
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
			}

   			else if (PlayerToPoint(2.0, playerid,2147.7161,1603.5366,1006.1677))
			{
			    GameTextForPlayer(playerid, "~w~Banco", 5000, 1);
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2315.5200,0.3490,26.7422);
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
			}
   			else if (PlayerToPoint(2.0, playerid,2155.9976,1597.9829,999.9699))
			{
			    GameTextForPlayer(playerid, "~w~Cofre", 5000, 1);
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1434.1337,-968.4908,37.3894);
			}

			else if (PlayerToPoint(1, playerid,1570.3828,-1333.8882,16.4844))
			{
	    		SetPlayerPos(playerid, 1545.0068,-1366.5094,327.2868);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
			}
	        else if(PlayerToPoint(2, playerid,1554.9537,-1675.6584,16.1953))
	        {//Departamento de Policia Los Santos
		    	GameTextForPlayer(playerid, "~w~Departamento da Policia Militar", 5000, 1);
		    	SetPlayerInterior(playerid, 6);
		    //	localizardppm[playerid] = 1;
		    	SetPlayerPos(playerid,246.5878,62.7877,1003.6406);
		    	PlayerInfo[playerid][pInt] = 6;
		    	TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if(PlayerToPoint(2, playerid,2244.5669,-1664.4495,15.4766))
	        {//Entrada Binco
	    		GameTextForPlayer(playerid, "~w~Binco", 5000, 1);
            	SetPlayerVirtualWorld(playerid, 0);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /meuskin para mudar sua roupa");
	     		SetPlayerInterior(playerid, 15);
	    		SetPlayerPos(playerid,207.7336,-108.6231,1005.1328);
	    		BizzInfo[9][bTill] += 100;
		        ExtortionBiz(9, 100);
	    		PlayerInfo[playerid][pInt] = 15;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if (PlayerToPoint(2, playerid,1456.9010,-1137.6941,23.9617))
	        {//Entrada ZIP
     			SetPlayerPos(playerid, 161.3350,-95.0194,1001.8047);
	    		GameTextForPlayer(playerid, "~w~Zip",5000,1);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /meuskin para mudar sua roupa");
	    		SetPlayerInterior(playerid,18);
	    		SetPlayerFacingAngle(playerid, 0);
	    		BizzInfo[7][bTill] += 100;
		        ExtortionBiz(7, 100);
	    		PlayerInfo[playerid][pInt] = 18;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
	        else if (PlayerToPoint(2, playerid,461.3484,-1500.9084,31.0592))
	        {//Entrada VICTIM
     			SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
	    		GameTextForPlayer(playerid, "~w~VICTIM",5000,1);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SendClientMessage(playerid, COLOR_WHITE, "DICA: Use /meuskin para mudar sua roupa");
	    		SetPlayerInterior(playerid,5);
	    		SetPlayerFacingAngle(playerid, 0);
	    		BizzInfo[8][bTill] += 100;
		        ExtortionBiz(8, 100);
	    		PlayerInfo[playerid][pInt] = 5;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
	        else if(PlayerToPoint(2, playerid,1836.4064,-1682.4403,13.3493))
	        {//Alhambra Entrance
	    		GameTextForPlayer(playerid, "~w~Alhambra", 5000, 1);
	    		SetPlayerInterior(playerid, 17);
	     		SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerPos(playerid,493.3891,-22.7212,1000.6797);
	    		PlayerInfo[playerid][pInt] = 17;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
        	else if(PlayerToPoint(2, playerid,2421.4998,-1219.2438,25.5617))
         	{//Pigpen entrada
	     		GameTextForPlayer(playerid, "~w~The Pig Pen", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 2);
	    		SetPlayerPos(playerid,1205.0803,-9.9519,1000.9219);
	    		PlayerInfo[playerid][pInt] = 2;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if(PlayerToPoint(2, playerid,2229.9011,-1721.2582,13.5613))
	        {//Entrada Ginasio de Lutas
	     		GameTextForPlayer(playerid, "~w~Ginasio de Lutas", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 5);
	    		SetPlayerPos(playerid,771.9399,-2.2574,1000.7292);
	    		PlayerInfo[playerid][pInt] = 5;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
         	else if (PlayerToPoint(2, playerid,1631.8547,-1172.5637,24.0843))
         	{
	    	//Loterica entrada
	    		SetPlayerPos(playerid, 832.6270,7.2666,1004.1797);
	    		GameTextForPlayer(playerid, "~w~Loterica",5000,1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,3);
	    		SetPlayerFacingAngle(playerid, 0);
	    		BizzInfo[6][bTill] += 100;
		        ExtortionBiz(6, 100);
	    		PlayerInfo[playerid][pInt] = 3;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
         	}
        	else if (PlayerToPoint(2, playerid,1200.4497,-918.7695,43.1105))
        	{
	    	//Entrada Burger Shot 1
	     		SetPlayerPos(playerid, 366.0324,-72.6400,1001.5078);
	    		GameTextForPlayer(playerid, "~w~Vinewood Burger Shot",5000,1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,10);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 10;
	    		InAFoodPlace[playerid] = 2;
	    		SetPlayerCheckpoint(playerid, 376.8571,-67.6620,1001.5151, 1.0);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
        	else if (PlayerToPoint(2, playerid,810.4855,-1616.1888,13.5469))
        	{
	    	//Entrada Burger Shot 2
				SetPlayerPos(playerid, 681.5034,-452.0092,-25.6172);
		    	GameTextForPlayer(playerid, "~w~Marina Burger Shot",5000,1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,1);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 1;
	    		InAFoodPlace[playerid] = 5;
	    		SetPlayerCheckpoint(playerid, 683.9015,-456.7076,-25.6099, 1.0);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
    		}
        	else if (PlayerToPoint(2, playerid,927.6217,-1353.0105,13.3438))
        	{
	    	//Entrada Cluckin Bell
	     		SetPlayerPos(playerid, 365.7793,-9.1699,1001.8516);
	    		GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 9);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 9;
	    		InAFoodPlace[playerid] = 1;
	    		SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.0);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
        	else if (PlayerToPoint(2, playerid,2419.8442,-1509.4996,24.0000))
        	{
	    	//Entrada Cluckin Bell Perto da Groove
	     		SetPlayerPos(playerid, 365.7793,-9.1699,1001.8516);
	    		GameTextForPlayer(playerid, "~w~Cluckin Bell", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 9);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 9;
	    		InAFoodPlace[playerid] = 7;
	    		SetPlayerCheckpoint(playerid, 368.9714,-6.2486,1001.8516, 1.0);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
        	else if (PlayerToPoint(2, playerid,2105.4858,-1806.4725,13.5547))
        	{
	    	//Entrada Well Stacked Pizza
	     		SetPlayerPos(playerid, 372.4117,-130.4577,1001.4922);
	    		GameTextForPlayer(playerid, "~w~Well Stacked Pizza", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 5);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 5;
	    		InAFoodPlace[playerid] = 3;
	    		SetPlayerCheckpoint(playerid, 375.6895,-118.9683,1001.4995, 1.5);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
        	else if (PlayerToPoint(2, playerid,975.4691,-1335.9618,13.5319))
        	{
	    	//Entrada BRNM

	     		SetPlayerPos(playerid, 377.5237,-191.6597,1000.6328);
	    		GameTextForPlayer(playerid, "~w~Lachonete", 5000, 1);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 17);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 17;
	    		InAFoodPlace[playerid] = 4;
	    		SetPlayerCheckpoint(playerid, 379.0611,-186.6032,1000.6328, 1.0);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
//=-=-=-=-=-=-=-=-=| HOTEL |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
    		else if (PlayerToPoint(2, playerid,2233.2659,-1159.8256,25.8906))
			{
				//Hotel Entrada
				SetPlayerPos(playerid, 2214.7134,-1150.4315,1025.7969);
				GameTextForPlayer(playerid, "~w~Hotel",5000,1);
				SetPlayerInterior(playerid,15);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 15;
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
			}
			else if (PlayerToPoint(2, playerid,2212.6235,-1150.4385,1025.7969))
			{
				//Hotel Entrada(dentro da porta)
				SetPlayerPos(playerid, 2214.7134,-1150.4315,1025.7969);
				GameTextForPlayer(playerid, "~w~Hotel",5000,1);
				SetPlayerInterior(playerid,15);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 15;
				SetPlayerVirtualWorld(playerid, 0);
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
			}
//=-=-=-=-=-=-=-=-=| 24/7'S|=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
            else if(PlayerToPoint(2, playerid,1833.6124,-1842.4968,13.5781))
            {//24/7 estação entrada
		    	GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 18);
		    	SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		    	PlayerInfo[playerid][pInt] = 18;
		    	storeexit[playerid] = 1;
		    	TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if(PlayerToPoint(2, playerid,1000.5861,-919.8832,42.3281))
	        {//24/7 gas station entrance
		    	GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		    	SetPlayerInterior(playerid, 4);
		    	SetPlayerPos(playerid,-27.2584,-31.6446,1003.5573);
		    	PlayerInfo[playerid][pInt] = 4;
		    	TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if(PlayerToPoint(2, playerid,1928.6006,-1776.4480,13.5469))
	        {//24/7 lado hq pcc
		    	GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		    	SetPlayerInterior(playerid, 16);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerPos(playerid,-25.1326,-139.0670,1003.5469);
		    	PlayerInfo[playerid][pInt] = 16;
	        }
	        else if (PlayerToPoint(2, playerid, 1315.5110,-898.9860,39.5781))
	        {//24/7 perto madd dogg
		   		GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 18);
		    	SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		    	PlayerInfo[playerid][pInt] = 18;
		    	storeexit[playerid] = 2;
		    	TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if (PlayerToPoint(2, playerid, 1352.4357,-1759.0243,13.5078))
	        {//24/7 praça dp
		    	GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 18);
		    	SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		    	PlayerInfo[playerid][pInt] = 18;
		    	storeexit[playerid] = 3;
		    	TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if (PlayerToPoint(2, playerid, 2424.2214,-1742.7878,13.5457))
	        {//groove
		    	GameTextForPlayer(playerid, "~w~24/7", 5000, 1);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerInterior(playerid, 18);
		    	SetPlayerPos(playerid,-30.9467,-89.6096,1003.5469);
		    	PlayerInfo[playerid][pInt] = 18;
		    	storeexit[playerid] = 4;
		    	TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
//=-=-=-=-=-=-=-=-=| HQ'S DAS ORGANIZAÇÕES |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
            else if (PlayerToPoint(2, playerid,691.5710,-1276.1722,13.5607))
			{//Máfia Yakuza Entrada
                SetPlayerPos(playerid, -2171.3071,645.2919,1057.5938);
                GameTextForPlayer(playerid, "~w~HQ Mafia Yakuza",5000,1);
                SetPlayerInterior(playerid,1);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 1;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if (PlayerToPoint(2, playerid,300.2393,-1154.4464,81.3910))
			{//Máfia Cosa Nostra Entrada
                SetPlayerPos(playerid, -2636.6687,1402.7887,906.4609);
                GameTextForPlayer(playerid, "~w~HQ Mafia Cosa Nostra",5000,1);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if (PlayerToPoint(2, playerid,918.9910,-1252.1665,16.2109))
			{//PC Entrada
                SetPlayerPos(playerid, 238.7194,141.7792,1003.0234);
                GameTextForPlayer(playerid, "~w~DP Policia Civil",5000,1);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 0);
                //localizardppc[playerid] = 1;
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if(PlayerToPoint(2, playerid,1280.2565,-1647.0126,13.5291))
			{//Entrada HQ BOPE
                GameTextForPlayer(playerid, "~w~DP BOPE", 5000, 1);
                SetPlayerInterior(playerid, 10);
                //localizardpbope[playerid] = 1;
                SetPlayerPos(playerid,246.4631,110.1669,1003.2257);
                PlayerInfo[playerid][pInt] = 10;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if(PlayerToPoint(2, playerid,1675.9949,-1634.7666,14.2266))
			{//Entrada HQ detran
                GameTextForPlayer(playerid, "~y~D.E.T.R.A.N", 5000, 1);
                SetPlayerInterior(playerid, 3);
                //localizardpbope[playerid] = 1;
                SetPlayerPos(playerid,366.7314,162.5974,1019.9844);
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
           	else if(PlayerToPoint(1, playerid,755.4222,-1361.7944,13.5132))
	        {//Entrada Reporters HQ
				SetPlayerPos(playerid, 367.9629,194.3110,1008.3828);
				GameTextForPlayer(playerid, "~w~Hq Reporters",5000,1);
				SetPlayerInterior(playerid,3);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 3;
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
            else if (PlayerToPoint(2, playerid,627.6543,-571.9244,17.6055))
			{//PF Entrada
                SetPlayerPos(playerid, 322.0765,303.8634,999.1484);
                GameTextForPlayer(playerid, "~w~DP Policia Federal",5000,1);
                SetPlayerInterior(playerid,5);
                //localizardppf[playerid] = 1;
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 5;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if(PlayerToPoint(2, playerid,1154.9366,-1180.8309,32.8187))
			{//ENTRADA HQ BALLAS
                GameTextForPlayer(playerid, "~w~HQ Ballas", 5000, 1);
                SetPlayerInterior(playerid, 10);
                SetPlayerPos(playerid,2268.3950,-1210.5328,1047.7491);
                PlayerInfo[playerid][pInt] = 10;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if (PlayerToPoint(2, playerid,2495.3481,-1691.1355,14.7656))
			{//HQ Groove Street Entrada
                SetPlayerPos(playerid,2496.0061,-1693.5201,1014.7422);
                GameTextForPlayer(playerid, "~g~Groove Street HQ",5000,1);
                SetPlayerInterior(playerid,3);
                SetPlayerFacingAngle(playerid, 181);
                PlayerInfo[playerid][pInt] = 3;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if (PlayerToPoint(2, playerid,681.6038,-473.3587,16.5363))
			{//HQ Sons of Anarchy Entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Sons of Anarchy HQ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 1;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if (PlayerToPoint(2, playerid,2309.9460,-1643.6337,14.8270))
			{//Bar Groove Entrada
                SetPlayerPos(playerid,501.8770,-67.7092,998.7578);
                GameTextForPlayer(playerid, "~r~Bar ",5000,1);
                SetPlayerInterior(playerid,11);
                SetPlayerFacingAngle(playerid, 178.1566);
                barexit[playerid] = 2;
                PlayerInfo[playerid][pInt] = 11;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
           	else if(PlayerToPoint(2, playerid,2140.9382,-1801.9813,16.1475))
        	{//ENTRADA HQ CV
	    		GameTextForPlayer(playerid, "~w~HQ Comando Vermelho", 5000, 1);
	    		SetPlayerInterior(playerid, 6);
	    		SetPlayerPos(playerid,2308.5269,-1211.2737,1049.0234);
	    		PlayerInfo[playerid][pInt] = 6;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
	        else if (PlayerToPoint(2, playerid,2808.1106,-1189.6528,25.3436))
			{//HQ VAGOS
                SetPlayerPos(playerid,295.1389,1474.4699,1080.5198);
                GameTextForPlayer(playerid, "~w~HQ Los Vagos",5000,1);
                SetPlayerInterior(playerid,15);
                SetPlayerFacingAngle(playerid, 0);
                PlayerInfo[playerid][pInt] = 15;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
            else if(PlayerToPoint(2, playerid,957.9416,-1556.2628,13.5802))
			{//ENTRADA HQ HITMANS
                GameTextForPlayer(playerid, "~w~HQ Hitmans", 5000, 1);
                SetPlayerInterior(playerid, 6);
                SetPlayerPos(playerid,343.7183,304.9376,999.1484);
                PlayerInfo[playerid][pInt] = 6;
                SetPlayerVirtualWorld(playerid, 0);
                TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
            }
		}
		return true;
	}
	if(strcmp(cmd, "/sair", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			for(new i = 0; i <  sizeof(HouseInfo); i++)
			{
				if (PlayerToPoint(1, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
				{
					if(HouseEntered[playerid] == i)
    				{
						SetPlayerInterior(playerid,0);
						SetPlayerVirtualWorld(playerid,0);
						SetPlayerPos(playerid,HouseInfo[i][hEntrancex],HouseInfo[i][hEntrancey],HouseInfo[i][hEntrancez]);
						PlayerInfo[playerid][pInt] = 0;
						SetPlayerVirtualWorld(playerid, 0);
						PlayerInfo[playerid][pLocal] = 255;
						HouseEntered[playerid] = 255;
						return true;
					}
				}
			}
			for(new i = 0; i <  sizeof(BizzInfo); i++)
			{
				if (PlayerToPoint(1, playerid,BizzInfo[i][bExitX], BizzInfo[i][bExitY], BizzInfo[i][bExitZ]))
				{
					SetPlayerInterior(playerid,0);
					PlayerInfo[playerid][pInt] = 0;
					SetPlayerVirtualWorld(playerid, 0);
					SetPlayerPos(playerid,BizzInfo[i][bEntranceX],BizzInfo[i][bEntranceY],BizzInfo[i][bEntranceZ]);
					PlayerInfo[playerid][pLocal] = 255;
					return true;
				}
			}
			//if(GetPlayerVehicleID(playerid) >= 1)
			if(GetPlayerVehicleID(playerid) >= 71 && GetPlayerVehicleID(playerid) <= 77)
			{
				Controle(playerid, 1);
				RemovePlayerFromVehicle(playerid);
			}
			else if (PlayerToPoint(3, playerid,1548.8167,-1366.2247,326.2109))
			{
	    		SetPlayerPos(playerid, 1572.1115,-1332.5288,16.4844);
			}
   			else if (PlayerToPoint(2.0, playerid,390.4640,173.8098,1008.3828))
			{//Saida Prefeitura
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1481.2550,-1765.8638,18.7958);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pLocal] = 255;
			}
  	        else if (PlayerToPoint(2.0, playerid,1261.2572,-785.2580,1091.9063))
			{//Saida Igreja
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1382.1494,-1088.8583,28.2129);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pLocal] = 255;
			}
			else if (PlayerToPoint(2.0, playerid,1963.8949,-350.5191,1092.9454))
			{//Saida  HQ Advogados
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2232.9934,-1333.1924,23.9815);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerVirtualWorld(playerid, 0);
				PlayerInfo[playerid][pLocal] = 255;
			}
			else if(PlayerToPoint(1.0, playerid, 1225.2448,-1427.9470,31.1480)) {
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,1206.7363,-1439.0874,13.3828);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pLocal] = 255;
			SalaAdmin = 0;
			}
			else if(PlayerToPoint(1.5, playerid, 98.4724,1320.5668,1131.8562)) { // Saida abrigo nuclear
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,1081.4810, -1697.2114, 13.5469);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerVirtualWorld(playerid, 0);
			PlayerInfo[playerid][pLocal] = 255;
			}
			if (PlayerToPoint(1, playerid,305.05056762695,-159.16743469238,999.59375))
			{
			//COFRE LOJA DE ARMAS 1 SAIDA
				SetPlayerPos(playerid,306.3995,-159.1051,999.5938);
				PlayerInfo[playerid][pInt] = 6;
				SetPlayerInterior(playerid,6);
			}
			if (PlayerToPoint(1, playerid,301.71704101563,-75.318428039551,1001.515625))
			{
			//COFRE Ammu Nation SAIDA
				SetPlayerPos(playerid,301.7848,-76.6545,1001.5156);
				PlayerInfo[playerid][pInt] = 4;
				SetPlayerInterior(playerid,4);
			}

			else if(PlayerToPoint(1.0, playerid,-2027.0715,-103.6059,1035.1818))
			{//SAIDA D.E.T.R.AN
                SetPlayerPos(playerid,1248.1326,-1559.9377,13.5635);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerInterior(playerid, 0);
			}

	        if(PlayerToPoint(2.0, playerid,246.5878,62.7877,1003.6406))
	        {//Saida Departamento de Policia Los Santos
		    	SetPlayerInterior(playerid, 0);
		    	SetPlayerPos(playerid,1554.9537,-1675.6584,16.1953);
		    	PlayerInfo[playerid][pInt] = 0;
		    	PlayerInfo[playerid][pLocal] = 255;
		    	SetPlayerVirtualWorld(playerid, 0);
	        }
	         else if (PlayerToPoint(3.0, playerid,2147.7161,1603.5366,1006.1677))
			{
			    GameTextForPlayer(playerid, "~w~Banco", 5000, 1);
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,2315.5200,0.3490,26.7422);
			}
   			else if (PlayerToPoint(3.0, playerid,2155.9976,1597.9829,999.9699))
			{
			    GameTextForPlayer(playerid, "~w~Cofre", 5000, 1);
			    SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,1434.1337,-968.4908,37.3894);
			}
	        else if(PlayerToPoint(3.0, playerid,207.7336,-108.6231,1005.1328))
	        {//Saida Binco
            	SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2244.5669,-1664.4495,15.4766);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    	}
	    	else if (PlayerToPoint(3.0, playerid,161.3350,-95.0194,1001.8047))
	        {//Saida ZIP
     			SetPlayerPos(playerid, 1456.9010,-1137.6941,23.9617);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
   			else if (PlayerToPoint(3.0, playerid,226.293991,-7.431529,1002.210937))
	        {//Saida VICTIM
     			SetPlayerPos(playerid, 459.1313,-1501.1628,31.0392);
     			SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}

	        else if(PlayerToPoint(1.0, playerid,501.8770,-67.7092,998.7578))
            {
            	if (barexit[playerid] == 1)
				{//HQ Sons of Anarchy
		    		SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 177.9001);
		    		SetPlayerPos(playerid,681.5621,-473.8558,16.5363);
		    		PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
				else if(barexit[playerid] == 2)
				{//BAR PERTO DA GROOVE
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerFacingAngle(playerid, 130.5600);
				    SetPlayerPos(playerid,2309.7676,-1643.7872,14.8270);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		barexit[playerid] = 0;
				}
			}
	    	else if(PlayerToPoint(3.0, playerid,493.3891,-22.7212,1000.6797))
	        {//Saida Alhambra
	    		SetPlayerInterior(playerid, 0);
	     		SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerPos(playerid,1836.4064,-1682.4403,13.3493);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
        	else if(PlayerToPoint(2.0, playerid,1205.0803,-9.9519,1000.9219))
         	{//saida pigpen
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2421.4998,-1219.2438,25.5617);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	        }
	        else if(PlayerToPoint(2.0, playerid,771.9399,-2.2574,1000.7292))
	        {//Saida Ginasio de Lutas
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2229.9011,-1721.2582,13.5613);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
         	else if(PlayerToPoint(1, playerid,367.9629,194.3110,1008.3828))
	    	{//Reporter Hq
				SetPlayerPos(playerid, 755.4222,-1361.7944,13.5132);
				GameTextForPlayer(playerid, "~w~Los Santos",5000,1);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    	}
         	else if (PlayerToPoint(2.0, playerid,832.6270,7.2666,1004.1797))
         	{
	    	//Loterica saida
	    		SetPlayerPos(playerid, 1631.8547,-1172.5637,24.084);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
         	}
        	else if (PlayerToPoint(2.0, playerid,366.0324,-72.6400,1001.5078))
        	{
	    	//Entrada Burger Shot 1
	     		SetPlayerPos(playerid, 1200.4497,-918.7695,43.1105);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
        	}
        	else if (PlayerToPoint(2.0, playerid,681.5034,-452.0092,-25.6172))
        	{
	    	//Saida Burger Shot 2
	     		SetPlayerPos(playerid, 810.4855,-1616.1888,13.5469);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}

	        else if(PlayerToPoint(2.0, playerid,365.7793,-9.1699,1001.8516))
            {
            	if (InAFoodPlace[playerid] == 1)
				{//clukin
	     		SetPlayerPos(playerid, 927.6217,-1353.0105,13.3438);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
				}
				else if(InAFoodPlace[playerid] == 7)
				{//perto da groove
	     		SetPlayerPos(playerid, 2419.8442,-1509.4996,24.0000);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
				}
			}
        	else if (PlayerToPoint(2.0, playerid,372.4117,-130.4577,1001.4922))
        	{
	    	//Saida Well Stacked Pizza
	     		SetPlayerPos(playerid, 2105.4858,-1806.4725,13.5547);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
        	else if (PlayerToPoint(2.0, playerid,377.5237,-191.6597,1000.6328))
        	{
	    	//SaidaLanchonete

	     		SetPlayerPos(playerid, 975.4691,-1335.9618,13.5319);
	    		SetPlayerVirtualWorld(playerid, 0);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		InAFoodPlace[playerid] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
//=-=-=-=-=-=-=-=-=| SAÍDAS 24/7'S |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
	        else if(PlayerToPoint(3.0, playerid,-30.9891,-91.5607,1003.5469))
            {
            	if (storeexit[playerid] == 1)
				{//24/7 estação saida
		    		SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
		    		SetPlayerPos(playerid,1833.6124,-1842.4968,13.5781);
		    		PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
				else if(storeexit[playerid] == 2)
				{//perto madd dogg
					SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid,1315.5110,-898.9860,39.5781);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
				else if(storeexit[playerid] == 3)
				{//praça dp
				    SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid,1352.4357,-1759.0243,13.5078);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
				else if(storeexit[playerid] == 4)
				{//groove
				    SetPlayerVirtualWorld(playerid, 0);
		    		SetPlayerInterior(playerid, 0);
				    SetPlayerPos(playerid,2422.1165,-1740.3470,13.5469);
				    PlayerInfo[playerid][pInt] = 0;
		    		PlayerInfo[playerid][pLocal] = 255;
		    		storeexit[playerid] = 0;
				}
	        }
	        else if(PlayerToPoint(1.0, playerid,-27.2584,-31.6446,1003.5573))
	        {//24/7 gas station saida
		    	SetPlayerInterior(playerid, 0);
		    	SetPlayerPos(playerid,1000.5861,-919.8832,42.3281);
		    	PlayerInfo[playerid][pInt] = 0;
		    	PlayerInfo[playerid][pLocal] = 255;
		    	SetPlayerVirtualWorld(playerid, 0);
            }
            else if(PlayerToPoint(3.0, playerid,-25.1326,-139.0670,1003.5469))
	        {//24/7 lado hq pcc saida
		    	SetPlayerInterior(playerid, 0);
		    	SetPlayerVirtualWorld(playerid, 0);
		    	SetPlayerPos(playerid,1928.6006,-1776.4480,13.5469);
		    	PlayerInfo[playerid][pInt] = 0;
		    	PlayerInfo[playerid][pLocal] = 255;
	        }

//=-=-=-=-=-=-=-=-=| HOTEL SAÍDA |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
    		else if (PlayerToPoint(3.0, playerid,2228.4087,-1150.5686,1025.7969))
			{
				//Hotel Saida
				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if (PlayerToPoint(3.0, playerid,2190.1182,-1179.7944,1033.7896))
			{
				//Hotel Saida 2
				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if (PlayerToPoint(3.0, playerid,2238.9316,-1192.4878,1033.7969))
			{
				//Hotel Saida 3
				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
			else if (PlayerToPoint(3.0, playerid,2193.3254,-1138.6238,1029.7969))
			{
				//Hotel Saida 4
				SetPlayerPos(playerid, 2231.7896,-1159.8646,25.8906);
				SetPlayerInterior(playerid,0);
				SetPlayerFacingAngle(playerid, 0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				SetPlayerVirtualWorld(playerid, 0);
			}
//=-=-=-=-=-=-=--=-= | Cabeleireiro |=-=-=-=-=-=-=-=- 
           else if(PlayerToPoint(2.0, playerid,1769.1190,-1397.4380,15.7578))
	        {//Cabelereiro LS Entrada
		    	SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerInterior(playerid, 12);
	    		SetPlayerPos(playerid,412.1064,-54.1277,1001.8984);
				SetPlayerFacingAngle(playerid, 180.0);
	    		PlayerInfo[playerid][pInt] = 12;
	    		PlayerInfo[playerid][pLocal] = 255;
				SetPlayerInterior(playerid, 12);
				TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
		    	
	    	}
			 else if(PlayerToPoint(1.2, playerid,412.1064,-54.1277,1001.8984))
	        {//Cabelereiro LS Saida
		    	SetPlayerVirtualWorld(playerid, 0);
	     		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,1769.1223,-1397.3682,15.7578);
	    		PlayerInfo[playerid][pInt] = 0;
	    		PlayerInfo[playerid][pLocal] = 255;
	    	}
//=-=-=-=-=-=-=-=-=| SAÍDA HQ'S DAS ORGANIZAÇÕES |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=<|
	        else if (PlayerToPoint(1.0, playerid,-2171.3071,645.2919,1057.5938))
	        {//SAIDA HQ Máfia Yakuza
			    SetPlayerPos(playerid, 691.5710,-1276.1722,13.5607);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid, 0);
			    PlayerInfo[playerid][pInt] = 0;
			    PlayerInfo[playerid][pLocal] = 255;
	            SetPlayerVirtualWorld(playerid, 0);
	        }
	        else if (PlayerToPoint(1.0, playerid,-2636.6687,1402.7887,906.4609))
	        {//SAIDA Máfia Cosa Nostra
		        SetPlayerPos(playerid, 300.2393,-1154.4464,81.3910);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid, 0);
		        PlayerInfo[playerid][pInt] = 0;
		        PlayerInfo[playerid][pLocal] = 255;
		        SetPlayerVirtualWorld(playerid, 0);
            }
            else if (PlayerToPoint(2.0, playerid,238.6815,138.6710,1003.0234))
	        {
	    	//Saida PC
		    	SetPlayerPos(playerid, 918.9910,-1252.1665,16.2109);
		    	SetPlayerInterior(playerid,0);
		    	SetPlayerFacingAngle(playerid, 0);
		    	PlayerInfo[playerid][pInt] = 0;
		    	PlayerInfo[playerid][pLocal] = 255;
		    	SetPlayerVirtualWorld(playerid, 0);
	        }
	        if(PlayerToPoint(2.0, playerid,246.3772,107.4653,1003.2188))
	        {//Saida HQ BOPE
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid,1280.2565,-1647.0126,13.5291);
			    PlayerInfo[playerid][pInt] = 0;
			    SetPlayerVirtualWorld(playerid, 0);
			    PlayerInfo[playerid][pLocal] = 255;
			    TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        if(PlayerToPoint(2.0, playerid,366.7790,162.5548,1019.9844))
	        {//Saida HQ detran
			    SetPlayerInterior(playerid, 0);
			    SetPlayerPos(playerid,1675.9949,-1634.7666,14.2266);
			    PlayerInfo[playerid][pInt] = 0;
			    SetPlayerVirtualWorld(playerid, 0);
			    PlayerInfo[playerid][pLocal] = 255;
	        }
	        else if (PlayerToPoint(2.0, playerid,322.0765,303.8634,999.1484))
	        {
	    	//Saida PF
	    		SetPlayerPos(playerid, 627.6543,-571.9244,17.6055);
	    		SetPlayerInterior(playerid,0);
	    		SetPlayerFacingAngle(playerid, 0);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	        }
        	else if(PlayerToPoint(2.0, playerid,2270.1592,-1210.4899,1047.5625))
        	{//SAIDA HQ BALLAS
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,1154.5570,-1180.6460,32.8187);
	    		SetPlayerFacingAngle(playerid, 82.4074);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
        	else if(PlayerToPoint(2.0, playerid,1674.1207,-2121.9700,14.1460))
        	{//ENTRADA HQ AZTECAS
	    		GameTextForPlayer(playerid, "~w~HQ Los Aztecas", 5000, 1);
	    		SetPlayerInterior(playerid, 8);
	    		SetPlayerPos(playerid,2807.8213,-1173.5691,1025.5703);
	    		PlayerInfo[playerid][pInt] = 8;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if(PlayerToPoint(2.0, playerid,1382.1494,-1088.8583,28.2129))
        	{//ENTRADA HQ AZTECAS
	    		GameTextForPlayer(playerid, "~w~HQ Advogados", 5000, 1);
	    		SetPlayerInterior(playerid, 5);
	    		SetPlayerPos(playerid,1261.2572,-785.2580,1091.9063);
	    		PlayerInfo[playerid][pInt] = 5;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
        	else if(PlayerToPoint(2.0, playerid,2232.9934,-1333.1924,23.9815))
        	{//ENTRADA Igreja
	    		GameTextForPlayer(playerid, "~w~Igreja", 5000, 1);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,1963.8949,-350.5191,1092.9454);
				SetPlayerFacingAngle(playerid, 178.89);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerInterior(playerid, 1);
	    		PlayerInfo[playerid][pLocal] = 255;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if(PlayerToPoint(1.0, playerid,1081.3767,-1696.7836,13.5469))
        	{// Abrigo Nuclear
				if(BOMBAON <= 0)
				{
				  SendClientMessage(playerid, COLOR_LIGHTRED, "Não tem nem uma bomba nuclear plantada você perdeu R$100.");
				  return true;
				}
	    		GameTextForPlayer(playerid, "~w~Abrigo Nuclear", 5000, 1);
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,98.4724,1320.5668,1131.8562);
				SetPlayerFacingAngle(playerid, 359.23);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerInterior(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Abrigo Nuclear]: Aqui você estará protegido de explosões nuclear suas armas foram retiradas.");
				ResetPlayerWeaponsEx(playerid);
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	      	else if(PlayerToPoint(2.0, playerid,1207.2396,-1439.1406,13.3828))
			{

				 if(SalaAdmin <= 0) {
				 SendClientMessage(playerid, COLOR_BLUE, "A porta está trancada, toque o interfone.");
				 return true;
			}
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,1225.2448,-1427.9470,31.1480);
				SetPlayerFacingAngle(playerid, 0.77);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerInterior(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	    		TogglePlayerControllable(playerid, 0);
                TravarEntrada[playerid] = SetTimerEx("PausarEntrada", 600, 0, "i", playerid);
	        }
	        else if(PlayerToPoint(1.0, playerid,2807.5945,-1174.6881,1025.5703))
        	{//SAIDA HQ AZTECAS
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,1674.1207,-2121.9700,14.1460);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	        }
	        else if (PlayerToPoint(1.0, playerid,2496.0398,-1692.0844,1014.7422))
        	{
	    	//HQ Groove Street Saida
	     		SetPlayerPos(playerid,2495.2939,-1690.3051,14.7656);
	     		SetPlayerInterior(playerid,0);
	     		SetPlayerFacingAngle(playerid, 4.0967);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
	        }
	        if(PlayerToPoint(1.0, playerid,343.7183,304.9376,999.1484))
        	{//SAIDA HQ HITMANS
	     		SetPlayerInterior(playerid, 0);
	     		SetPlayerPos(playerid,957.9416,-1556.2628,13.5802);
	     		PlayerInfo[playerid][pInt] = 0;
	     		SetPlayerVirtualWorld(playerid, 0);
	     		PlayerInfo[playerid][pLocal] = 255;
     		}
        	else if(PlayerToPoint(1.0, playerid,2308.5269,-1211.2737,1049.0234))
        	{//SAIDA HQ CV
	    		SetPlayerInterior(playerid, 0);
	    		SetPlayerPos(playerid,2140.9382,-1801.9813,16.1475);
	    		PlayerInfo[playerid][pInt] = 0;
	    		SetPlayerVirtualWorld(playerid, 0);
	    		PlayerInfo[playerid][pLocal] = 255;
        	}
	        else if (PlayerToPoint(1.0, playerid,295.1739,1472.2755,1080.2578))
	        {//SAIDA HQ VAGOS
			    SetPlayerPos(playerid, 2808.1106,-1189.6528,25.3436);
			    SetPlayerInterior(playerid,0);
			    SetPlayerFacingAngle(playerid, 0);
			    PlayerInfo[playerid][pInt] = 0;
	            PlayerInfo[playerid][pLocal] = 255;
	            SetPlayerVirtualWorld(playerid, 0);
	        }
        	//=========================[FIM SAIDAS HQ ORGANIZAÇÕES]=========================//
		}
		return true;
	}
	if(strcmp(cmd, "/home", true) == 0 || strcmp(cmd, "/mapacasa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playerid][pPHousekey] != 255)
			{
				SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPHousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPHousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPHousekey]][hEntrancez], 4.0);
				GameTextForPlayer(playerid, "~r~Mapa da Casa Marcado!", 5000, 1);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Voce nao tem casa", 5000, 1);
			}
		}
		return true;
	}
//----------------------------------[BIZZ]-----------------------------------------------
	if(strcmp(cmd, "/compraremp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new Float:oldposx, Float:oldposy, Float:oldposz;
			GetPlayerName(playerid, playername, sizeof(playername));
			GetPlayerPos(playerid, oldposx, oldposy, oldposz);
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você ja tem uma empresa, Digite /venderemp para comprar outra.");
				return true;
			}
			for(new b = 0; b < sizeof(SBizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, SBizzInfo[b][sbEntranceX], SBizzInfo[b][sbEntranceY], SBizzInfo[b][sbEntranceZ]) && SBizzInfo[b][sbOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < SBizzInfo[b][sbLevelNeeded])
					{
						format(string, sizeof(string), "Você precisa ser nível %d para comprar essa empresa",SBizzInfo[b][sbLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return true;
					}
					if(GetPlayerMoney(playerid) > SBizzInfo[b][sbBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b+100;
						SBizzInfo[b][sbOwned] = 1;
						SBizzInfo[b][sbLocked] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoney(playerid,-SBizzInfo[b][sbBuyPrice]);
						PlayerPlayMusic(playerid);
						SendClientMessage(playerid, COLOR_WHITE, "Parabens, Você comprou uma empresa.");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajudaemp para ver os comandos de sua empresa.");
						Atualizar3Dtexts();
						OnPropUpdate();
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Você não tem grana suficiente");
						return true;
					}
				}
			}
			for(new b = 0; b < sizeof(BizzInfo); b++)
			{
				if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntranceX], BizzInfo[b][bEntranceY], BizzInfo[b][bEntranceZ]) && BizzInfo[b][bOwned] == 0)
				{
					if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevelNeeded])
					{
						format(string, sizeof(string), "Você precisa ser nível %d para comprar essa empresa",BizzInfo[b][bLevelNeeded]);
						SendClientMessage(playerid, COLOR_GRAD5, string);
						return true;
					}
					if(GetPlayerMoney(playerid) > BizzInfo[b][bBuyPrice])
					{
						PlayerInfo[playerid][pPbiskey] = b;
						BizzInfo[b][bOwned] = 1;
						BizzInfo[b][bLocked] = 0;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
						GivePlayerMoney(playerid,-BizzInfo[b][bBuyPrice]);
						PlayerPlayMusic(playerid);
						SetPlayerInterior(playerid,BizzInfo[b][bInterior]);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						SetPlayerPos(playerid,BizzInfo[b][bExitX],BizzInfo[b][bExitY],BizzInfo[b][bExitZ]);
						GameTextForPlayer(playerid, "~w~Bem Vindo~n~Voce pode sair da sua empresa digitando /sair", 5000, 3);
						PlayerInfo[playerid][pInt] = BizzInfo[b][bInterior];
						PlayerInfo[playerid][pLocal] = b ;
						SendClientMessage(playerid, COLOR_WHITE, "Parabens, Você comprou esta empresa.");
						SendClientMessage(playerid, COLOR_WHITE, "Digite /ajudaemp para ver os comandos de sua empresa.");
						Atualizar3Dtexts();
						OnPropUpdate();
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "Você nao tem grana o suficiente");
						return true;
					}
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/venderemp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, playername, sizeof(playername));
			if(PlayerInfo[playerid][pPbiskey] == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não possui uma empresa.");
				return true;
			}
			if(PlayerInfo[playerid][pMarried] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Você é casado(a), não pode vender a empresa!");
		        return true;
		    }
			if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey]-100;
				GivePlayerMoney(playerid,SBizzInfo[borse][sbTill]);
				SBizzInfo[borse][sbLocked] = 0;
				SBizzInfo[borse][sbOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(SBizzInfo[borse][sbOwner], "The State", 0, strlen("The State"), 255);
				strmid(SBizzInfo[borse][sbExtortion], "Nenhum", 0, strlen("Nenhum"), 255);
				ConsumingMoney[playerid] = 1;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis para ~n~~g~R$%d", SBizzInfo[borse][sbTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				SBizzInfo[borse][sbTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				Atualizar3Dtexts();
				OnPropUpdate();
				return true;
			}
			if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
			{
				new borse = PlayerInfo[playerid][pPbiskey];
				BizzInfo[borse][bLocked] = 0;
				BizzInfo[borse][bOwned] = 0;
				GetPlayerName(playerid, sendername, sizeof(sendername));
				strmid(BizzInfo[borse][bOwner], "The State", 0, strlen("The State"), 255);
				strmid(BizzInfo[borse][bExtortion], "Nenhum", 0, strlen("Nenhum"), 255);
				ConsumingMoney[playerid] = 1;
				GivePlayerMoney(playerid,BizzInfo[borse][bTill]);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis para ~n~~g~R$%d", BizzInfo[borse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				BizzInfo[borse][bTill] = 0;
				PlayerInfo[playerid][pPbiskey] = 255;
				Atualizar3Dtexts();
				OnPropUpdate();
				return true;
			}
			if(PlayerInfo[playerid][pPbiskey] != 255)
			{
			    new borse = PlayerInfo[playerid][pPbiskey];
			    format(string, sizeof(string), "~w~Parabens~n~ Voce vendeu imoveis para ~n~~g~R$%d", BizzInfo[borse][bTill]);
				GameTextForPlayer(playerid, string, 10000, 3);
				ConsumingMoney[playerid] = 1;
                PlayerInfo[playerid][pPbiskey] = 255;
                return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não tem uma Empresa.");
			}
		}
		return true;
	}
	if (strcmp(cmd, "/infoempresa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPbiskey];
			if(borse == 255)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem uma empresa.");
				return true;
			}
			if (borse >= 100)
			{
				PrintSBizInfo(playerid,borse-100);
			}
			else
			{
				PrintBizInfo(playerid,borse);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/entradadaempresa", true) == 0 || strcmp(cmd, "/entradaemp", true) == 0 || strcmp(cmd, "/precoentradaemp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem uma Empresa !");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /entradadaempresa [preço]");
			}
			if(strval(tmp) < 0 || strval(tmp) > 100)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Preço da entrda mínmo R$0, máximo R$100.");
				return true;
			}
			if (borse >= 100)
			{
				SBizzInfo[borse-100][sbEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Entrada Definida Para: R$%d.", SBizzInfo[borse-100][sbEntranceCost]);
			}
			else
			{
				BizzInfo[borse][bEntranceCost] = strval(tmp);
				format(string, sizeof(string), "Entrada Definida Para: R$%d.", BizzInfo[borse][bEntranceCost]);
			}
			Atualizar3Dtexts();
			OnPropUpdate();
			SendClientMessage(playerid, COLOR_WHITE, string);
		}
		return true;
	}
	if(strcmp(cmd, "/extorcao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "  Você não tem uma Empresa");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /extorcao [id] (ou 555 para Nenhum)");
			    return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        GetPlayerName(playerid, sendername, sizeof(sendername));
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			        format(string, sizeof(string), "* %s esta na extorcao de sua empresa.",giveplayer);
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			        format(string, sizeof(string), "* Agora você está na extorção da empresa de %s.",PlayerName(playerid));
			        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
			        if (borse >= 100)
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(SBizzInfo[borse-100][sbExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Novo dono da Extorçao: %s",SBizzInfo[borse-100][sbExtortion]);
					}
					else
					{
					    format(string, sizeof(string), "%s",giveplayer);
						strmid(BizzInfo[borse][bExtortion], string, 0, sizeof(string), 255);
						format(string, sizeof(string), "Novo dono da Extorçao: %s",BizzInfo[borse][bExtortion]);
					}
					OnPropUpdate();
					Atualizar3Dtexts();
					SendClientMessage(playerid, COLOR_WHITE, string);
			    }
			}
			else if(giveplayerid == 555)
			{
			    if (borse >= 100)
				{
				    format(string, sizeof(string), "Nenhum");
					strmid(SBizzInfo[borse-100][sbExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Novo dono da Extorçao: %s",SBizzInfo[borse-100][sbExtortion]);
				}
				else
				{
				    format(string, sizeof(string), "Nenhum");
					strmid(BizzInfo[borse][bExtortion], string, 0, sizeof(string), 255);
					format(string, sizeof(string), "Novo dono da Extorçao: %s",BizzInfo[borse][bExtortion]);
				}
				OnPropUpdate();
				Atualizar3Dtexts();
				SendClientMessage(playerid, COLOR_WHITE, string);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline !");
			    return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/sacarempresa", true) == 0 || strcmp(cmd, "/sacaremp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem uma Empresa");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (borse >= 100)
				{
					format(string, sizeof(string), "  Você tem R$%d no cofre da empresa.", SBizzInfo[borse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Você tem R$%d no cofre da empresa.", BizzInfo[borse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sacarempresa [quantidade]");
				return true;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sacarempresa [quantidade]");
				return true;
			}
			if (borse >= 100)
			{
				if(cashdeposit > SBizzInfo[borse-100][sbTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você nao tem essa quantia.");
					return true;
				}
			}
			else
			{
				if (cashdeposit > BizzInfo[borse][bTill] || cashdeposit < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você nao tem essa quantia.");
					return true;
				}
			}
			if (borse >= 100)
			{
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					SBizzInfo[borse-100][sbTill] -= cashdeposit;
					format(string, sizeof(string), "  Você retirou R$%d de sua empresa - restante: R$%d ", cashdeposit,SBizzInfo[borse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return true;
				}
			}
			else
				{
				    ConsumingMoney[playerid] = 1;
					GivePlayerMoney(playerid,cashdeposit);
					BizzInfo[borse][bTill] -= cashdeposit;
					format(string, sizeof(string), "   Você retirou R$%d de sua empresa - restante: R$%d ", cashdeposit,BizzInfo[borse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return true;
				}
		}
		return true;
	}
	if(strcmp(cmd, "/depositarempresa", true) == 0 || strcmp(cmd, "/depositaremp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			new borse = PlayerInfo[playerid][pPbiskey];
			if (borse == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem uma empresa.");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				if (borse >= 100)
				{
					format(string, sizeof(string), "  Você tem R$%d de saldo em sua empresa.", SBizzInfo[borse-100][sbTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				else
				{
					format(string, sizeof(string), "  Você tem R$%d de saldo em sua empresa.", BizzInfo[borse][bTill]);
					SendClientMessage(playerid, COLOR_GRAD3, string);
				}
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /depositarempresa [quantidade]");
				return true;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /depositarempresa [quantidade]");
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return true;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Você não tem tudo isso!");
				return true;
			}
			if (borse >= 100)
			{
				if(!PlayerToPoint(100, playerid,SBizzInfo[borse][sbEntranceX],SBizzInfo[borse][sbEntranceY],SBizzInfo[borse][sbEntranceZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você está longe de sua empresa");
					return true;
				}
				else
				{
					GivePlayerMoney(playerid,-cashdeposit);
					SBizzInfo[borse-100][sbTill] += cashdeposit;
					ExtortionSBiz(borse-100, cashdeposit);
					format(string, sizeof(string), "  Você guardou R$%d no cofre de sua empresa. O saldo de sua empresa: R$%d", cashdeposit,SBizzInfo[borse-100][sbTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return true;
				}
			}
			else
			{
				if (!PlayerToPoint(100, playerid,BizzInfo[borse][bExitX],BizzInfo[borse][bExitY],BizzInfo[borse][bExitZ]))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você precisa está dentro da empresa!");
					return true;
				}
				else
				{
					GivePlayerMoney(playerid,-cashdeposit);
					BizzInfo[borse][bTill] += cashdeposit;
					ExtortionBiz(borse, cashdeposit);
					format(string, sizeof(string), "  Voce depositou R$%d no cofre de sua empresa Total: R$%d", cashdeposit,BizzInfo[borse][bTill]);
					OnPropUpdate();
					SendClientMessage(playerid, COLOR_YELLOW, string);
					return true;
				}
			}
		}
		return true;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/vida", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new location = PlayerInfo[playerid][pLocal];
			if(!strlen(tmp))
			{
				if(location != 255)
				{
					if(location < 99)
					{
						if(HouseInfo[location][hArm] == 1 && IsACop(playerid))
						{
							format(string, sizeof(string), "* %s pega seu colete.", PlayerName(playerid));
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							Controle(playerid, 0);
							GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
							Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
							Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
							SetPlayerPos(playerid,1527.5,-12.1,1002.0);
							PlayerInfo[playerid][pLocal] = 255;
							SetPlayerInterior(playerid,99);
							Spectate[playerid] = 257;
						}
						else if(HouseInfo[location][hHel] == 1)
						{
							SetPlayerHealth(playerid,100.0);
							PlayerInfo[playerid][pDoenca] = 0;
							SetPlayerDrunkLevel (playerid, 0);
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você foi curado.");
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY,"Este lugar nao tem lugar de se curar.");
						}
						return true;
					}
					else if(location == 101)//Restaurant
					{
					    SetPlayerHealth(playerid,100.0);
						SetPlayerArmour(playerid,100.0);
						PlayerInfo[playerid][pDoenca] = 0;
						SetPlayerDrunkLevel (playerid, 0);
						PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
						SendClientMessage(playerid, COLOR_LIGHTBLUE,"Você foi curado.");
					}
					else if(location == 102 && IsACop(playerid))//Police Armorry
					{
					    SetPlayerHealth(playerid,100.0);
					    format(string, sizeof(string), "* %s Foi Curado.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						Controle(playerid, 0);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /vida [id] [preço]");
					return true;
				}
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_GRAD2, "USE: /vida [id] [price]");
				return true;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 5000) { SendClientMessage(playerid, COLOR_GREY, "   O Preço não pode passar de 5000 !"); return true; }
			if (giveplayerid == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não pode se curar!");
				return true;
			}
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
if (ProxDetectorS(5.0, playerid, giveplayerid)) {
				 	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					if(gTeam[playerid] == TEAM_CYAN||PlayerInfo[playerid][pMembro]==4||PlayerInfo[playerid][pLider]==4)//model
					{
                        new Float:health;
                        GetPlayerHealth(giveplayerid,health);
						if(health >= 100.0) {
						format(string,sizeof(string),"O Jogador %s está com a vida cheia e não precisa ser curado.",giveplayer);
						SendClientMessage(playerid, COLOR_RED, string);
						return true;
						}
		                if(GetPlayerMoneyEx(giveplayerid) < moneys) {
                        format(string,sizeof(string),"O Jogador %s não tem dinheiro suficiente.",giveplayer);
                        SendClientMessage(playerid, COLOR_RED, string);
                        return true;}
                         if(TempoEnviarPagamento[playerid] == 1)
						{
						SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para enviar novamente.");
						return 1;
						}
						new Veh = GetPlayerVehicleID(playerid);
						if(IsAnAmbulanceCar(Veh))
						{
							format(string, sizeof(string), "~y~Voce foi curado ~n~~w~%s~n~~g~R$%d", giveplayer,moneys);
							GameTextForPlayer(giveplayerid, string, 5000, 1);
							GivePlayerMoney(playerid,moneys);
							GivePlayerMoney(giveplayerid,-moneys);
							TempoEnviarPagamento[playerid] = 1;
							TimerEnviarPagamento[playerid] = SetTimerEx("ETempoPagamento", 60000, 0, "i", playerid);
							new hp = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        hp = 20 * PlayerInfo[playerid][pPainPerk]; hp += 100;
								SetPlayerHealth(giveplayerid, hp);
						    }
						    else
						    {
						        hp = 100;
						        SetPlayerHealth(giveplayerid, 100);
						        PlayerInfo[giveplayerid][pDoenca] = 0;
						    }
						    new colete = 0;
						    if(PlayerInfo[playerid][pPainPerk] > 0)
						    {
						        colete = 0 * PlayerInfo[playerid][pPainPerk]; colete += 100;
								SetPlayerArmour(giveplayerid, colete);
						    }
						    else
						    {
						        colete = 100;
						        SetPlayerArmour(giveplayerid, 100);
						        PlayerInfo[giveplayerid][pDoenca] = 0;
						    }
							PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
							PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
							format(string, sizeof(string), "Você foi curado, %d de saude e %d de colete por -R$%d",hp,colete,moneys);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,string);
							if(PlayerInfo[giveplayerid][pDoenca] > 0)
				            {
								PlayerInfo[giveplayerid][pDoenca] = 0;
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "* Você não está infectado com nenhuma doença, por causa de cuidados medicos!");
							}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD1, "  Vocês dois precisam estar no veículo!");
							return true;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
						return true;
					}
				}else {
				SendClientMessage(playerid, COLOR_GRAD1, "O Jogador está longe de você.");
				return true;
				}
              }
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, " Esse jogador está offline");
			}
		}
		return true;
	}
//----------------------------------[ADMINADMIN]-----------------------------------------------
	if(strcmp(cmd, "/id", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /id [ nick ]");
				return true;
			}
			new target;
			target = ReturnUser(tmp);
			if(IsPlayerConnected(target))
			{
			    if(target != INVALID_PLAYER_ID)
			    {
					GetPlayerName(target, giveplayer, sizeof(giveplayer));
					format(gstring, sizeof(gstring), "ID: (%d) %s",target,giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, gstring);
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/tv", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	        SendClientMessage(playerid, COLOR_GREEN, "Você não está autorizado a usar este comando");
	        return true;
	        }
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
	        if(PlayerInfo[playerid][pAdmin] >= 1)
	        {
	            if(WatchingTV[playerid] < 1)
			    {
		        	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
		        }
	        }
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] >= 1)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
				gTeam[playerid] = 0;
			}
			tmp = strtok(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~g~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetPlayerSkin(playerid,217);
					MedicBill[playerid] = 0;
					return true;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está de TV em Ninguem !");
				    return true;
				}
			}
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
				giveplayerid = ReturnUser(tmp);
				new world;
	    		world = GetPlayerVirtualWorld(giveplayerid);
				if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
                    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= 1339 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ficar de TV em um Admin Dono !");
							return true;
						}
				        Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
						    SetPlayerToTeamColor(playerid);
						    SetPlayerVirtualWorld(playerid,world);
							format(string, sizeof(string), "Info: (%d) %s R$%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Jogador não está disponivel.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "   Você não tem permissão para usar esse comando!");
				return true;
			}
		}
		return true;
	}

	if(strcmp(cmd, "/tvh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pHelper] < 1)
	        {
	        SendClientMessage(playerid, COLOR_GREEN, "Você não está autorizado a usar este comando");
	        return true;
	        }
         if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 300)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de serviço! (/shelper)");
				return true;
				}
	        if(PlayerInfo[playerid][pHelper] >= 61)
	        {
	            if(WatchingTV[playerid] < 1)
			    {
		        	GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
		        }
	        }
			if(Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] >= 1)
			{
				GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
				Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
				Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
				PlayerInfo[playerid][pLocal] = 255;
				gTeam[playerid] = 0;
			}
			tmp = strtok(cmdtext, idx);
			if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~g~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetPlayerSkin(playerid,217);
					MedicBill[playerid] = 0;
					return true;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está de TV em Ninguem !");
				    return true;
				}
			}
			if(PlayerInfo[playerid][pHelper] >= 1)
			{
				giveplayerid = ReturnUser(tmp);
				new world;
	    		world = GetPlayerVirtualWorld(giveplayerid);
				if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
                    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= 1339 && PlayerInfo[playerid][pAdmin] < DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ficar de TV em um Admin Dono !");
							return true;
						}
				        Spectate[playerid] = giveplayerid;
						new Float:health;
						GetPlayerHealth(Spectate[playerid], health);
						GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(Spectate[playerid]);
						if (PlayerInfo[playerid][pAdmin] >= 1)
						{
						    SetPlayerToTeamColor(playerid);
						    SetPlayerVirtualWorld(playerid,world);
							format(string, sizeof(string), "Info: (%d) %s R$%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
						}
						SendClientMessage(playerid, COLOR_GREEN, string);
						WatchingTV[playerid] = 1;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Jogador não está disponivel.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREEN, "   Você não tem permissão para usar esse comando!");
				return true;
			}
		}
		return true;
	}
//----------------------------------[AdminChat]-----------------------------------------------
	if(strcmp(cmd, "/admin", true) == 0 || strcmp(cmd, "/a", true) == 0)
	{
		if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/a)dmin [admin chat]");
				return true;
			}
			if(TentouDivulgar(result))
			{
  				if(cdivulgar[playerid] >= 4)
  				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
    				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    				Kick(playerid);
  				}
  				GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
  				format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
        		cdivulgar[playerid] += 1;
        		return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
				format(string, sizeof(string), "*%d Admin %s: %s", PlayerInfo[playerid][pAdmin], PlayerName(playerid), result);
				ABroadCast(0xFBB8FFAA, string, 1);
			}
			format(string, sizeof(string), "[%d/%d/%d] [%d:%d:%d] *%d Admin %s: %s", v[2], v[1], v[0], v[3], v[4], v[5] , PlayerInfo[playerid][pAdmin], sendername, result);
			AChatLog(string);
		}
		return true;
	}
	if(strcmp(cmd, "/h", true) == 0 || strcmp(cmd, "/hc", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/h ou /hc)helper [helper chat]");
				return true;
			}
			format(string, sizeof(string), "*%d Helper %s: %s", PlayerInfo[playerid][pHelper], sendername, result);
			if (PlayerInfo[playerid][pHelper] >= 1)
			{
				SendHelperMessage(0x63C3F6AA, string);
			}
			printf("Helper %s: %s", sendername, result);
			format(string, sizeof(string), "[%d/%d/%d] [%d:%d:%d] *%d Helper %s: %s", v[2], v[1], v[0], v[3], v[4], v[5] , PlayerInfo[playerid][pHelper], sendername, result);
			HChatLog(string);
		}
		return true;
	}

//--------------------------------------------------------------------------------------
//----------------------------------[cnn]-----------------------------------------------
	if(strcmp(cmd, "/cnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cnn [cnn formato ~n~=NovaLinha ~r~=Vermelho ~g~=Verde ~b~=Azul ~w~=Branco ~y~=Amarelo ~l~=Preto]");
					return true;
				}
				if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				{
					format(string, sizeof(string), "~b~BRNM: ~w~%s",result);
				}
				else
				{
					format(string, sizeof(string), "~b~%s: ~w~%s",sendername,result);
				}
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
						GameTextForPlayer(i, string, 5000, 3);
					}
				}
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
				return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/cnnn", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= SUB_DONO)
			{
				tmp = strtok(cmdtext, idx);
				new txtid;
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cnnn <Digite> ");
					return true;
				}
				txtid = strval(tmp);
				if(txtid == 2)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Não existe 2! só 0,1,3,4!");
					return true;
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /cnnn <Digite> [cnnc formato ~n~=NovaLinha ~r~=Vermelho ~g~=Verde ~b~=Azul ~w~=Branco ~y~=Amarelo ~l~=Preto]");
					return true;
				}
				format(string, sizeof(string), "~w~%s",result);
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1)
					{
						GameTextForPlayer(i, string, 5000, txtid);
					}
				}
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
				return true;
			}
		}
		return true;
	}
//[ADMIN]________________________________________________
//-----------------------------------[JAIL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/carandiru",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new tempo[20];
	        new tempo2;
	        if(PlayerInfo[playerid][pAdmin] < MASTER)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não esta autorizado para usar este comando!");
	            return true;
	        }
	        tmp = strtok(cmdtext, idx);
	        tempo = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /carandiru [id] [ Tempo ]");
				return true;
			}
			if(!strlen(tempo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /carandiru [id] [ Tempo ]");
				return true;
			}
			if(PlayerInfo[giveplayerid][pAdmin] >= 1339 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode dar carandiru para um Admin Dono !");
				return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			tempo2 = strval(tempo);
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid != INVALID_PLAYER_ID)
		        {
		            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* Você Colocou o(a) %s No Carandiru.", giveplayer);
					SendClientMessage(playerid, COLOR_LIGHTRED, string);
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
					{
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, "* Você foi colocado no Carandiru Pelo Admin Homem_Aranha.");
					}
					else
					{
						format(string, sizeof(string), "* Você foi colocado no Carandiru Pelo Admin %s.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Você foi colocado no presidio por um administrador por violar uma ou mais regras do servidor."); 
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Você pode ter sido preso por ter pego em flagrante por um administrador ou por uma denúncia feita com provas no forum."); 
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Caso tenha screenshoots ou videos de violações de regras ou alguma dûvida sobre a sua punição poste no forum na área de denúncias.");
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Digite /ajuda regras e tenha certeza de não mais violá-las sob nenhuma circunstância ou poderá acabar sendo banido.");
					}
					GameTextForPlayer(giveplayerid, "~b~Bem Vindo ao ~n~~r~Carandiru", 5000, 3);
					ResetPlayerWeaponsEx(giveplayerid);
					WantedPoints[giveplayerid] = 0;
      				SetPlayerWantedLevel(giveplayerid, 0);
					PlayerInfo[giveplayerid][pJailed] = 2;
					PlayerInfo[giveplayerid][pJailTime] = tempo2 * 60;
		            SetPlayerPos(giveplayerid, 107.2300,1920.6311,18.5208);
					SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O jogador está offline !");
			    return true;
			}
	    }
	    return true;
	}

	if(strcmp(cmd, "/admprender",true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new tempo[20];
	        new tempo2;
	        if(PlayerInfo[playerid][pAdmin] < 2)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não esta autorizado para usar este comando!");
	            return true;
	        }
	        tmp = strtok(cmdtext, idx);
	        tempo = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /admprender [id] [Tempo] [Motivo]");
				return true;
			}
			if(!strlen(tempo))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /admprender [id] [Tempo] [Motivo]");
				return true;
			}
			if(PlayerInfo[giveplayerid][pAdmin] >= 1339 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode prender um Admin Dono !");
				return true;
			}
            if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			tempo2 = strval(tempo);
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
			idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
			result[idx - offset] = cmdtext[idx];
			idx++;
			}
			result[idx - offset] = EOS;
		    if(IsPlayerConnected(giveplayerid))
		    {
		        if(giveplayerid != INVALID_PLAYER_ID)
		        {
		            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					//PlayerInfo[giveplayerid][pJailTime] = time * 60;
					//format(string, sizeof(string), "* Você Colocou o(a) %s Na Cadeia Admin", giveplayer);
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
					{
					format(string, sizeof(string), "Admin Homem_Aranha colocou %s na Cadeia Admin, por %s minutos, Motivo: %s", giveplayer, tempo, (result));
					SendClientMessageToAll(0xF83100AA, string);
					}
					else
					{
					format(string, sizeof(string), "Admin %s colocou %s na Cadeia Admin, por %s minutos, Motivo: %s",PlayerName(playerid), giveplayer, tempo, (result));
					SendClientMessageToAll(0xF83100AA, string);
					}
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
					{
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, "* Você foi colocado na Cadeia dos Admins, Pelo Admin Homem_Aranha.");
					}
					else
					{
						format(string, sizeof(string), "* Você foi colocado na Cadeia dos Admins, Pelo Admin %s.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, string); 
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Você foi colocado no presidio por um administrador por violar uma ou mais regras do servidor."); 
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Você pode ter sido preso por ter pego em flagrante por um administrador ou por uma denúncia feita com provas no forum."); 
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Caso tenha screenshoots ou videos de violações de regras ou alguma dûvida sobre a sua punição poste no forum na área de denúncias."); 
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, "Digite /ajuda regras e tenha certeza de não mais violá-las sob nenhuma circunstância ou poderá acabar sendo banido.");
					}
					GameTextForPlayer(giveplayerid, "~b~Bem Vindo a ~n~~r~Cadeia dos Admins", 5000, 3);
					ResetPlayerWeaponsEx(giveplayerid);
					WantedPoints[giveplayerid] = 0;
      				SetPlayerWantedLevel(giveplayerid, 0);
					PlayerInfo[giveplayerid][pJailed] = 9;
					PlayerInfo[giveplayerid][pJailTime] = tempo2 * 60;
		            SetPlayerPos(giveplayerid, 1175.6014,-1179.9524,87.0427);
					//SetPlayerWorldBounds(giveplayerid, 337.5694,101.5826,1940.9759,1798.7453); //285.3481,96.9720,1940.9755,1799.0811
		        }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O jogador está offline !");
			    return true;
			}
	    }
	    return true;
	}
	if(strcmp(cmd, "/ultimologin", true) == 0)
	{
	new arquivo[128];
	new arquivobanido[128];
	new stringemp[128];
	new stringvip[128];
	new stringcasa[128];
	new stringbanido[128];
	if(PlayerInfo[playerid][pAdmin] >= SUB_DONO) {
    tmp = strtok(cmdtext, idx);
    if(!strlen(tmp))
    {
           SendClientMessage(playerid, COLOR_GRAD2, "USE: /ultimologin [NOME_JOGADOR]");
           return true;
     }
    format(arquivo, sizeof(arquivo), "Contas/%s.ini",tmp);
    if(!dini_Exists(arquivo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[ERROR] Esse nome não está regristrado em nosso servidor");
	    return true;
	}
	if(dini_Int(arquivo, "Bizz") == 255)
	{
	      format(stringemp, sizeof(stringemp), "Empresa: {CC0000}Não");
	}
	else
	{
          format(stringemp, sizeof(stringemp), "Empresa: {00FF00}Sim");
	}
	if(dini_Int(arquivo, "House") == 255)
	{
	      format(stringcasa, sizeof(stringcasa), "Casa: {CC0000}Não");
	}
	else
	{
	      format(stringcasa, sizeof(stringcasa), "Casa: {00FF00}Sim");
	}
	if(dini_Int(arquivo, "ContaVIP") == 0)
	{
          format(stringvip, sizeof(stringvip), "VIP Premium: {CC0000}Não");
	}
	else
	{
	     format(stringvip, sizeof(stringvip), "VIP Premium: {00FF00}Sim");
	}
	format(arquivobanido, sizeof(arquivobanido), "Banidos/%s.ini",tmp);
	if(!dini_Exists(arquivobanido))
	{
        format(stringbanido, sizeof(stringbanido), "Banido: {CC0000}Não");
	}
	else
	{
        format(stringbanido, sizeof(stringbanido), "Banido: {00FF00}Sim");
	}
	format(string, sizeof(string), "Último Login do %s: %02d/%02d/%02d-%02d:%02d", tmp, dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
	format(stringemp, sizeof(stringemp),  "%s ID:[%d]", stringemp, dini_Int(arquivo, "Bizz"));
	format(stringcasa, sizeof(stringcasa),  "%s ID:[%d]", stringcasa, dini_Int(arquivo, "House"));
	format(stringvip, sizeof(stringvip),  "%s {FFFFFF}- Tempo VIP: %02d/%02d/%d ás %d Hora(s).", stringvip, dini_Int(arquivo, "DiasVIP"),dini_Int(arquivo, "MesVIP"),dini_Int(arquivo, "AnoVIP"),dini_Int(arquivo, "HoraVIP"));
	SendClientMessage(playerid, COLOR_WHITE, string);
	SendClientMessage(playerid, COLOR_WHITE, stringemp);
	SendClientMessage(playerid, COLOR_WHITE, stringcasa);
	SendClientMessage(playerid, COLOR_WHITE, stringvip);
	SendClientMessage(playerid, COLOR_WHITE, stringbanido);
	return true;
	}else {
    SendClientMessage(playerid, COLOR_GREY, "   Você não esta autorizado para usar este comando!");
	return true;
	}
}
	if(strcmp(cmd, "/agendarcadeia",true) == 0 || strcmp(cmd, "/agendar",true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            new tmpo[20];
            new arquivo[128];
            if(PlayerInfo[playerid][pAdmin] >= 3)
            {
               
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "USE: /agendarcadeia [NOME_CORRETO] [Tempo] [Motivo]");
                return true;
            }
            tmpo = strtok(cmdtext, idx);
            if(!strlen(tmpo))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "USE: /agendarcadeia [NOME_CORRETO] [Tempo] [Motivo]");
                return true;
            }
            new tempo2 = strval(tmpo);
            
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /agendarcadeia [NOME_CORRETO] [Tempo] [Motivo]");
				return true;
			}
			format(arquivo, sizeof(arquivo), "Contas/%s.ini",tmp);
			if(!dini_Exists(arquivo))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "[ERROR] Esse nome não está regristrado em nosso servidor");
			    return true;
			}
            GetPlayerName(playerid, sendername, sizeof(sendername));
   			format(string, sizeof(string), "O Admin %s agendou uma cadeia de %d min para %s, Motivo: %s",PlayerName(playerid), tempo2, tmp, (result));
            SendClientMessageToAll(COLOR_LIGHTRED, string);
			dini_IntSet(arquivo,"Jailed",9);
			dini_IntSet(arquivo,"JailTime",tempo2 * 60);
		    strmid(AgendouInfo[playerid][cAdminAgendou], sendername, 0, strlen(sendername), MAX_PLAYER_NAME);
			dini_Set(arquivo,"AdminAgendou",sendername);
 		    strmid(AgendouInfo[playerid][cMotivoAgendou], result, 0, strlen(result), MAX_PLAYER_NAME);
			dini_Set(arquivo,"MotivoAgendou",result);
			dini_IntSet(arquivo,"Agendado",1);
			dini_IntSet(arquivo,"TempoAgendado",tempo2); 
        }else{ 
		   SendClientMessage(playerid, COLOR_GREY, "   Você não esta autorizado para usar este comando!");
		   return true;
		}
 
    }
	return true;
}
	if(strcmp(cmd, "/admmultar", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 1341) { return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar esse comando!"); }
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /admmultar [ID] [Grana] [Motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /admmultar [ID] [Grana] [Motivo]");
				return true;
			}
			moneys = strval(tmp);
			if(moneys < 10 || moneys > 1000000000) { SendClientMessage(playerid, COLOR_GREY, "Custo entre 1000 e 1000000000 !"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					    GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /admmultar [ID] [Grana] [Motivo]");
							return true;
						}
						format(string, sizeof(string), "AdmCmd: Admin %s multou o player %s em R$%d , Motivo: %s",PlayerName(playerid),giveplayer,moneys,(result));
						ABroadCast(COLOR_LIGHTRED, string,1);
						GivePlayerMoney(giveplayerid,-moneys);
						return true;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "O jogador está Offline !");
			    return true;
		}
		return true;
    }
//----------------------------------[TOD]-----------------------------------------------

	if(strcmp(cmd, "/sethora", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /sethora [hora do dia] (0-23)");
				return true;
			}
			new hour2;
			hour2 = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
	            SetWorldTime(hour2);
				format(string, sizeof(string), "   Tempo Definido Para %d Horas.", hour2);
				BroadCast(COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/iniciarloteria", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= DONO)
	        {
             if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
	            format(string, sizeof(string), "Loteria: Ja comecou a loteria.");
	            OOCNews(COLOR_WHITE, string);
	            new rand = random(999);
				if(rand < 996) { rand += 3; }
	            Lotto(rand);
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não tem permissão para usar esse comando!");
	            return true;
	        }
	    }
		return true;
	}

	if(strcmp(cmd, "/editar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new editarnome[MAX_PLAYER_NAME];
			new editarnome2[MAX_PLAYER_NAME];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COR_HELPER, "USE: /editar [id] [Status] [quantidade]");
				SendClientMessage(playerid, COLOR_GRAD4, "1. Level                       |7. Respeito             |13. Repórter   |19. Materiais");
				SendClientMessage(playerid, COLOR_GRAD4, "2. Morreu                   |8. ChaveCasa          |14. V.Drogas");
				SendClientMessage(playerid, COLOR_GRAD4, "3. Melhorar                |9. ChaveEmpresa   |15. P.Sexo");
				SendClientMessage(playerid, COLOR_GRAD4, "4. HorasJogadas       |10. Detetive             |16. Box");
				SendClientMessage(playerid, COLOR_GRAD4, "5. Conta do Banco     |11. Advogado          |17. Matou");
				SendClientMessage(playerid, COLOR_GRAD4, "6. NumeroTelefone  |12. Mecânico           |18. Skill De Pesca");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
	    	{
	    	    GetPlayerName(playerid,editarnome,sizeof(editarnome));
	    	    GetPlayerName(giveplayerid,editarnome2,sizeof(editarnome2));
	    	    if(giveplayerid != INVALID_PLAYER_ID)
	    	    {
					tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COR_HELPER, "USE: /editar [id] [Status] [quantidade]");
						SendClientMessage(playerid, COLOR_GRAD4, "1. Level                       |7. Respeito             |13. Repórter   |19. Materiais");
						SendClientMessage(playerid, COLOR_GRAD4, "2. Morreu                   |8. ChaveCasa          |14. V.Drogas");
						SendClientMessage(playerid, COLOR_GRAD4, "3. Melhorar                |9. ChaveEmpresa   |15. P.Sexo");
						SendClientMessage(playerid, COLOR_GRAD4, "4. HorasJogadas       |10. Detetive             |16. Box");
						SendClientMessage(playerid, COLOR_GRAD4, "5. Conta do Banco     |11. Advogado          |17. Matou");
						SendClientMessage(playerid, COLOR_GRAD4, "6. NumeroTelefone  |12. Mecânico           |18. Skill De Pesca");
						return true;
					}
					new stat;
					stat = strval(tmp);
                  	tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COR_HELPER, "USE: /editar [id] [Status] [quantidade]");
						SendClientMessage(playerid, COLOR_GRAD4, "1. Level                       |7. Respeito             |13. Repórter   |19. Materiais");
						SendClientMessage(playerid, COLOR_GRAD4, "2. Morreu                   |8. ChaveCasa          |14. V.Drogas");
						SendClientMessage(playerid, COLOR_GRAD4, "3. Melhorar                |9. ChaveEmpresa   |15. P.Sexo");
						SendClientMessage(playerid, COLOR_GRAD4, "4. HorasJogadas       |10. Detetive             |16. Box");
						SendClientMessage(playerid, COLOR_GRAD4, "5. Conta do Banco     |11. Advogado          |17. Matou");
						SendClientMessage(playerid, COLOR_GRAD4, "6. NumeroTelefone  |12. Mecânico           |18. Skill De Pesca");
						return true;
					}
					new quantidade;
					quantidade = strval(tmp);
					if (PlayerInfo[playerid][pAdmin] >= DONO)
					{
					    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
							return true;
						}
						switch (stat)
						{
							case 1:
							{
								PlayerInfo[giveplayerid][pLevel] = quantidade;
								format(string, sizeof(string), "   Você setou level %d para o jogador", quantidade);
								ScoreLevel(giveplayerid);
							}
							case 2:
							{
								PlayerInfo[giveplayerid][pDeaths] = quantidade;
								format(string, sizeof(string), "   Você setou %d vezes que ele morreu", quantidade);
							}
							case 3:
							{
								PlayerInfo[giveplayerid][gPupgrade] = quantidade;
								format(string, sizeof(string), "   Você setou %d de pontos de melhoria", quantidade);
							}
							case 4:
							{
								PlayerInfo[giveplayerid][pConnectTime] = quantidade;
								format(string, sizeof(string), "   Você setou %d horas jogadas para o jogador", quantidade);
								format(string, sizeof(string), "   Você setou horas jogadas do player");
							}
							case 5:
							{
								PlayerInfo[giveplayerid][pConta] = quantidade;
								format(string, sizeof(string), "   Você setou R$%d no banco do jogador", quantidade);
								format(gstring, 128, "[%d/%d/%d - %d:%d] - %s usou /editar banco em %s e setou %d", day, month, year, hour, minute, PlayerName(playerid), PlayerName(giveplayerid), quantidade);
								PayLog(gstring);
							}
							case 6:
							{
								PlayerInfo[giveplayerid][pPnumber] = quantidade;
								format(string, sizeof(string), "   Você setou o celular do jogador para %d", quantidade);
							}
							case 7:
							{
								PlayerInfo[giveplayerid][pExp] = quantidade;
								format(string, sizeof(string), "   Você setou o respeito do jogador para %d", quantidade);
							}
							case 8:
							{
								PlayerInfo[giveplayerid][pPHousekey] = quantidade;
								format(string, sizeof(string), "   Você setou a chave de casa pra %d", quantidade);
							}
							case 9:
							{
								PlayerInfo[giveplayerid][pPbiskey] = quantidade;
								format(string, sizeof(string), "   Você setou a chave da empresa %d", quantidade);
							}
							case 10:
							{
								PlayerInfo[giveplayerid][pDetSkill] = quantidade;
								format(string, sizeof(string), "   Você setou nivel de detetive para: %d", quantidade);
							}
							case 11:
							{
								PlayerInfo[giveplayerid][pLawSkill] = quantidade;
								format(string, sizeof(string), "   Você setou nivel de advogado para: %d", quantidade);
							}
							case 12:
							{
								PlayerInfo[giveplayerid][pMechSkill] = quantidade;
								format(string, sizeof(string), "   Você setou nivel de mecanico para: %d", quantidade);
							}
							case 13:
							{
								PlayerInfo[giveplayerid][pNewsSkill] = quantidade;
								format(string, sizeof(string), "   Você setou skill %d de Repórter", quantidade);
							}
							case 14:
							{
								PlayerInfo[giveplayerid][pDrogasSkill] = quantidade;
								format(string, sizeof(string), "   Você setou a Skill de Drogas para: %d", quantidade);
							}
							case 15:
							{
								PlayerInfo[giveplayerid][pSexSkill] = quantidade;
								format(string, sizeof(string), "  Você setou a Skill de P.Sexo para: %d", quantidade);
							}
							case 16:
							{
								PlayerInfo[giveplayerid][pBoxSkill] = quantidade;
								format(string, sizeof(string), "   Você setou skill %d de Box", quantidade);
							}
							case 17:
							{
								PlayerInfo[giveplayerid][pKills] = quantidade;
								format(string, sizeof(string), "   Você setou %d vezes que ele matou alguém", quantidade);
							}
							case 18:
							{
								PlayerInfo[giveplayerid][pFishSkill] = quantidade;
								format(string, sizeof(string), "   Você setou a Skill de Pescar para: %d", quantidade);
							}
							case 19:
							{
								PlayerInfo[giveplayerid][pMats] = quantidade;
								format(string, sizeof(string), "   Você setou Materiais para: %d", quantidade);
							}
							case 20:
							{
								PlayerInfo[giveplayerid][pPcarkey] = quantidade;
								format(string, sizeof(string), "   Você setou o [ID] Carro Vip para: %d", quantidade);
							}
							case 21:
							{
								PlayerInfo[giveplayerid][pPcarkey2] = quantidade;
								format(string, sizeof(string), "   Você setou o [ID] Carro Vip Premium para: %d", quantidade);
							}
							default:
							{
								format(string, sizeof(string), "   Codigo Invalido", quantidade);
							}

						}
						SendClientMessage(playerid, COLOR_GRAD1, string);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
					}
				}//not valid id
			}//not connected
		}
		return true;
	}

	if(strcmp(cmd, "/admsoltar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		if (PlayerInfo[playerid][pAdmin] >= SUB_MASTER)
		    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Use: /admsoltar [id]");
				return true;
			}
			if(PlayerInfo[playerid][pJailed] != 0)
	        {
		      SendClientMessage(playerid,COLOR_GREY," Você está preso não pode-se soltar.");
		      return true;
	        }
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                { 
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					if(PlayerInfo[giveplayerid][pJailed] != 2)
					{
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						        {
						        SendClientMessage(giveplayerid, COLOR_LIGHTRED, "* Você Foi libertado da cadeia Pelo Admin Homem_Aranha.");
						        }
						        else
						        {
				                new stringsoltou[128];
						        format(string, sizeof(string), "* Admin %s libertou você da cadeia admin.", PlayerName(playerid));
						        SendClientMessage(giveplayerid, COLOR_LIGHTRED, string); 
								format(stringsoltou, sizeof(stringsoltou), "Admin %s soltou %s da Cadeia.", PlayerName(playerid), giveplayer);
								SendClientMessageToAll(0xF83100AA, stringsoltou);
                        }
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
					}
                }
			}
		}
		}//not connected
		return true;
	}

	if(strcmp(cmd, "/admlimparficha", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		if (PlayerInfo[playerid][pAdmin] >= SUB_GERENTE)
			{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/admlimparficha) [id] 0)");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
            	if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
							GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
                            //new playerid;
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USE: (/admlimparficha [id] 0");
								return true;
							}
       						WantedPoints[giveplayerid] = 0;
      						SetPlayerWantedLevel(giveplayerid, 0);
							return true;
					}
				}
				else
				{
						SendClientMessage(playerid, COLOR_GRAD1, "  Esse jogador não está conectado.");
						return true;
			}
   			}
			}
		return true;
 }
 
	if (strcmp(cmd, "/playMP3", true) == 0)
	{
	   if(PlayerInfo[playerid][pAdmin] >= SUB_DONO) {
	   
		ShowPlayerDialog(playerid, DIALOG_MPTHREE, DIALOG_STYLE_INPUT, "Sistema de DJ", "Coloque o link da Musica.", "Tocar", "Cancelar");
		
		}else {
		
		SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar esse comando.");
		}
		return 1;
	}

  if (strcmp(cmd,"/menuconce", true) == 0)
	{
	if (PlayerToPoint(2.0, playerid, 1672.6251,-1108.5673,24.2059)) {
        ShowPlayerDialog(playerid, DialogMenuConce, DIALOG_STYLE_LIST, "Tabela de Veículos",
		"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		//SendClientMessage(playerid, COLOR_GRAD1, "Já foram criados muitos veículos, esperar todos os veículos serem vendidos.");
		}
		return true;
	}
    if (strcmp(cmd,"/menuconce2", true) == 0)
	{
	if (PlayerToPoint(2.0, playerid, 549.1534,-1309.9156,27.2406)) {
        ShowPlayerDialog(playerid, DialogMenuConce2, DIALOG_STYLE_LIST, "Tabela de Veículos",
		"{FFFF00}Motocicletas\n{005FFF}Carros Conversíveis\n{33AA33}Carros Clássicos\n{AA3333}Utilitários 4x4\n{FFC801}Sedans\n{33FF00}Carros Esportivos\n{980000}Station Wagons\n{109FFF}Caminhões, Furgões e Picapes\n{FFF8F8}Outros","OK", "Cancelar");
		//SendClientMessage(playerid, COLOR_GRAD1, "Já foram criados muitos veículos, esperar todos os veículos serem vendidos.");
		}
		return true;
	}
	
   if (strcmp(cmd,"/menuconcekart", true) == 0)
	{
	if (PlayerToPoint(2.0, playerid, 1830.4945,-1397.8027,13.4340)) {
        ShowPlayerDialog(playerid, DialogMenuConceKarts, DIALOG_STYLE_LIST, "Bicicletas e Kart's","Bike (R$1900)\nBMX (R$2300)\nMountain Bike (R$5000)\nKart (10000)","OK", "Cancelar");
		//SendClientMessage(playerid, COLOR_GRAD1, "Já foram criados muitos veículos, esperar todos os veículos serem vendidos.");
		}
		return true;
	}

	
  if(strcmp(cmd, "/stopMP3", true) == 0){
  
   if(PlayerInfo[playerid][pAdmin] >= SUB_DONO) {
    new Float:Pos[3];
    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	if(IsPlayerInRangeOfPoint(i, 100.0, Pos[0], Pos[1], Pos[2]))
	{
          StopAudioStreamForPlayer(i);
        }
     }
  }else {
  SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar esse comando.");
  
    }
return 1;
}
 if(strcmp(cmd, "/bandana", true) == 0)
{
    ShowPlayerDialog(playerid,Dialog_Bandana,DIALOG_STYLE_LIST,"Bandanas","Bandana 1\nBandana 2\nBandana 3\nBandana 4\nBandana 5\nBandana 6\nBandana 7\nBandana 8\nBandana 9\nBandana 10\nRemover Bandana","Ok","Fechar");
	return 1;
}

//----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setint", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
		{
			SendClientMessage(playerid,COLOR_GREY," Você não pode trocar o interior agora!");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setint [interiorid]");
				return true;
			}
			new intid;
			intid = strval(tmp);
			SetPlayerInterior(playerid,intid);
			PlayerInfo[playerid][pInt] = intid;
			format(string, sizeof(string), "   Interior Mudado Para %d.", intid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return true;
	}
//----------------------------------[INVITE]------------------------------------------------
	if(strcmp(cmd, "/convidar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /convidar [playerid/Parte-do-Nick]");
				return true;
			}
			new para1;
            para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLider] >= 1 || PlayerInfo[playerid][pCargo] == 5)
			{
			    new lolz = GetPlayerOrg(playerid);
	    		if(TemVaga(lolz) == 0)
	    		{
					SendClientMessage(playerid, COLOR_GRAD1, "Não há mais vagas na lista use /limparvaga primeiro.");
					return true;
	    		}
			    if(IsPlayerConnected(para1))
			    {
			        if(PlayerInfo[para1][pMembro] != 0 || PlayerInfo[para1][pLider] != 0)
					{
						SendClientMessage(playerid, COLOR_GREY, "Este player já participa de Org/Gang/Mafia.");
						return true;
					}
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
                        /*ShowPlayerDialog(para1, 642, DIALOG_STYLE_MSGBOX, "Convite", "{E679F2}Você foi convidado para uma organização: %s \n{63ACFF}Deseja entrar para a organização ?", "Sim", "Nao", NomeORG(playerid));
						format(string, sizeof(string), "* {F2D61F}%s {E3E3E3}te convidou para entrar para: {F2D61F}%s. Sim {E3E3E3}- {3EF02E}Aceita {E3E3E3}| {FF4053}Não {E3E3E3}- Recusa.", PlayerName(playerid), NomeORG(playerid));
						SendClientMessage(para1, COLOR_LIGHTBLUE, string);*/
						format(string, sizeof(string), "* Você convidou %s para sua organização: %s.", giveplayer,NomeORG(playerid));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);

						new convitestring[256];
		        		format(convitestring,sizeof(convitestring), "{E679F2}Você foi convidado para uma organização: %s \n{63ACFF}Deseja entrar para a organização ?",NomeORG(playerid));
		        		ShowPlayerDialog(para1,642,DIALOG_STYLE_MSGBOX,"Convite",convitestring,"Sim","Nao");

						InviteOffer[para1] = playerid;
						InviteJob[para1] = lolz;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Somente líderes podem usar este comando !");
			}
		}
		return true;
	}
//----------------------------------[UNINVITE]------------------------------------------------
	if(strcmp(cmd, "/Demitir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "/Demitir [ID/NICK] [Motivo]");
				return true;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pLider] > 0 || PlayerInfo[playerid][pCargo] == 5)
			{
			    new lolz = GetPlayerOrg(playerid);
			    if(PlayerInfo[para1][pMembro] != lolz)
				{
				    SendClientMessage(playerid, COLOR_GREY, "Você não pode demitir quem não é da sua org.");
				    return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
					    if (PlayerInfo[para1][pMembro] > 0)
					    {
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USE: /Demitir [ID/NICK] [Motivo]");
								return true;
							}
							DemitirInfoOrg(PlayerName(para1));
							format(string, sizeof(string), "* Você foi demitido pelo líder %s Motivo: %s.", sendername, (result));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Agora você é um civil novamente.");
				            gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMembro] = 0;
							PlayerInfo[para1][pCargo] = 0;
							if(PlayerInfo[para1][pSex] == 1) { PlayerInfo[para1][pSkin] = 23; } else { PlayerInfo[para1][pSkin] = 41; }
            				SetSpawnInfo(para1, gTeam[para1], PlayerInfo[para1][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
							MedicBill[para1] = 0;
							SpawnPlayer(para1);
							format(string, sizeof(string), "Você demitiu %s, Motivo: %s.", giveplayer, result);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							return true;
						}
					}
				}
			}//not connected
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder!");
		}
		return true;
	}
		if(strcmp(cmd, "/admdemitir", true) == 0) {
		
        if(PlayerInfo[playerid][pAdmin] < MASTER)
        {
				SendClientMessage(playerid, COLOR_GRAD2, "Você não tem permissão para usar esse comando.");
				return true;
        }
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "/admdemitir [ID/NICK] [Motivo]");
				return true;
			}
			new para1;
			para1 = ReturnUser(tmp);
		   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			if (PlayerInfo[playerid][pAdmin] >= MASTER)
			{
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
			        
			        if(PlayerInfo[para1][pTeam] == 3) {
			        
		        	SendClientMessage(playerid, COLOR_GRAD1, "Esté player não tem org.");
			        
			        return true;
			        }
							GetPlayerName(para1, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							new length = strlen(cmdtext);
							while ((idx < length) && (cmdtext[idx] <= ' '))
							{
								idx++;
							}
							new offset = idx;
							new result[64];
							while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
							{
								result[idx - offset] = cmdtext[idx];
								idx++;
							}
							result[idx - offset] = EOS;
							if(!strlen(result))
							{
								SendClientMessage(playerid, COLOR_GRAD2, "USE: /admdemitir [ID/NICK] [Motivo]");
								return true;
							}
							DemitirInfoOrg(PlayerName(para1));
							format(string, sizeof(string), "* Você foi demitido pelo Administrador %s Motivo: %s.", sendername, (result));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Agora você é um civil novamente.");
				            gTeam[para1] = 3;
							PlayerInfo[para1][pTeam] = 3;
							PlayerInfo[para1][pMembro] = 0;
							PlayerInfo[para1][pCargo] = 0;
							if(PlayerInfo[para1][pSex] == 1) { PlayerInfo[para1][pSkin] = 23; } else { PlayerInfo[para1][pSkin] = 41; }
            				SetSpawnInfo(para1, gTeam[para1], PlayerInfo[para1][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
							MedicBill[para1] = 0;
							SpawnPlayer(para1);
							format(string, sizeof(string), "Você demitiu %s, Motivo: %s.", giveplayer, result);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							return true;
						}
					}
			}//not connected
		}
		return true;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	if(strcmp(cmd, "/retirarcidadania", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
		{
            if(PlayerInfo[playerid][pAdmin] < MASTER)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não esta autorizado para usar este comando!");
	            return true;
	        }
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "USE: /retirarcidadania [id]");
						return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
				                GetPlayerName(playerid, sendername, sizeof(sendername));
				                new fudido[MAX_PLAYER_NAME];
				                GetPlayerName(giveplayerid, fudido, sizeof(fudido));
						        format(string, sizeof(string), "* Você retirou a Cidadania  de %s.", fudido);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						        {
						        SendClientMessage(giveplayerid, COLOR_LIGHTRED, "* Você teve sua Cidadania Retirada Pelo Admin Homem_Aranha.");
						        }
						        else
						        {
						        format(string, sizeof(string), "* Admin %s Retirou sua Cidadania.", PlayerName(playerid));
						        SendClientMessage(giveplayerid, COLOR_LIGHTRED, string);
				                }
						        PlayerInfo[giveplayerid][pCidadania] = 0;
						        }
							}
						
					    }
	}
//----------------------------------{Numero Profissoes}-----------------------------------------------
	if(strcmp(cmd, "/orgs", true) == 0 || strcmp(cmd, "/profs", true) == 0)
	{ 
	    new DialogThiago[1700]; // Sempre que for adicionar mais uma org sempre aumenta 100 o limite.
	    if(IsPlayerConnected(playerid))
	    {  
                //SendClientMessage(playerid, VERDE2, "|__________________________ Orgs __________________________|"); 
				new arquivo[84];
		        format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[1][Lider]);
				format(string, 128, " {7AADFF}1 - Policia Militar: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[1][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[2][Lider]);
				format(string, 128, " {ADC7D9}2 - B.O.P.E: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[2][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[3][Lider]);
				format(string, 128, " {6CD950}3 - Exercito: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[3][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string); 
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[4][Lider]);
				format(string, 128, " {F7819A}4 - S.A.M.U: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[4][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[5][Lider]);
				format(string, 128, " {337EFF}5 - Los Astecas: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[5][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[6][Lider]);
				format(string, 128, " {48A3E0}6 - Taliban: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[6][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[7][Lider]);
				format(string, 128, " {6AB4E6}7 - Prefeito: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[7][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[8][Lider]);
				format(string, 128, " {C2CBD1}8 - Hitmans: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[8][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[9][Lider]);
				format(string, 128, " {EDD893}9 - Rede Globo: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[9][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
    			strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[10][Lider]);
				format(string, 128, " {93EDDE}10 - Taxista: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[10][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[11][Lider]);
				format(string, 128, " {BFA873}11 - Policia Federal: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[11][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[12][Lider]);
				format(string, 128, " {BF9B47}12 - Máfia Cosa Nostra: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[12][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[13][Lider]);
				format(string, 128, " {8136B3}13 - Máfia Yakuza: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[13][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[14][Lider]);
				format(string, 128, " {00DB1D}14 - Groove Street: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[14][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[15][Lider]);
				format(string, 128, " {EDE187}15 - Al'qaeda: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[15][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[16][Lider]);
				format(string, 128, " {BDA34D}16 - Policia Civil: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[16][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[17][Lider]);
				format(string, 128, " {CB42E3}17 - Ballas: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[17][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[18][Lider]);
				format(string, 128, " {E1ED00}18 - Los Vagos: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[18][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[19][Lider]);
				format(string, 128, " {FF0000}19 - Comando Vermelho: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[19][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
    			strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[20][Lider]);
				format(string, 128, " {C90000}20 - Sons of Anarchy: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[20][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[21][Lider]);
				format(string, 128, " {46F274}21 - Drifters: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[21][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[22][Lider]);
				format(string, 128, " {A87A31}22 - Triads: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[22][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
				strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[23][Lider]);
                format(string, 128, " {FF0066}23 - F.A.R.C: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[23][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
                strcat(DialogThiago,string);
				format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[24][Lider]);
                format(string, 128, " {FFB90F}24 - Detran: {FFFFFF}%s (%d/%d/%d-%d:%d)\n", InfoOrg[24][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
                strcat(DialogThiago,string);
                format(arquivo, sizeof(arquivo),  "Contas/%s.ini", InfoOrg[25][Lider]);
                format(string, 128, " {696969}25 - Advogados: {FFFFFF}%s (%d/%d/%d-%d:%d)\n\n", InfoOrg[25][Lider], dini_Int(arquivo,"DiaLogin"),dini_Int(arquivo,"MesLogin"),dini_Int(arquivo,"AnoLogin"),dini_Int(arquivo,"HoraLogin"),dini_Int(arquivo,"MinutoLogin"));
                strcat(DialogThiago,string);
				ShowPlayerDialog(playerid, 8723, DIALOG_STYLE_MSGBOX, "Lista de Líderes das Organizações", DialogThiago, "Ok", "Ok");
			}
		return true;
	}
//----------------------------------{Numero Emprego}-----------------------------------------------
	if(strcmp(cmd, "/empregos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Detetive - 1");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Profissional de Sexo - 2");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Vendedor de Drogas - 3");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Mecânico - 4");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Segurança - 5");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Vendedor de Armas - 6");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Boxer - 7");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Motorista de Onibus - 8");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Mendigo - 9");
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"Caminhoneiro - 10");
			}
		}
		return true;
	}
//-----------------------------------{ IP }-----------------------------------------------------
	if(strcmp(cmd, "/ip", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 2)
		{
      if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "Use: /ip [ID]");
				SendClientMessage(playerid, COLOR_YELLOW, "Comando Para Ver o Ip Do Jogador.");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				new ip[128];
				GetPlayerIp(giveplayerid,ip,128);
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				format(gstring, sizeof(gstring), "-| %s's IP: %s |-", giveplayer,ip);
				SendClientMessage(playerid,COLOR_LIGHTBLUE, gstring);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Esse não é um jogador Ativo.");
			}
		}
		else
 		{
 			SendClientMessage(playerid, COLOR_GREY, "Você não tem permissão para usar esse comando.");
	    	return true;
  		}
	    return true;
	}
//----------------------/unbanip--------------
	if(strcmp(cmd,"/desbanip",true)==0 || strcmp(cmd,"/unbanip",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= MASTER)
		{
      if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /desbanip [IP DO JOGADOR]");
		        return true;
   			}
			format(gstring, 128, "IPsBanidos/%s.ini", tmp);
			if(!dini_Exists(gstring))
			{
		        SendClientMessage(playerid,COLOR_GRAD1,"IP não encontrado na base de dados");
		        return true;
			}
			else
			{
			    fremove(gstring);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 128, "ADM: %s desbaniu o IP %s", sendername,tmp);
				ABroadCast(COLOR_YELLOW,string,1);
		        return true;
			}
		}
		return true;
	} 
	
		if(strcmp(cmd,"/desbaniptemp",true)==0 || strcmp(cmd,"/unbaniptemp",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
      if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /desbaniptemp [IP DO JOGADOR]");
		        return true;
   			}
			format(gstring, 128, "IPsBanidosTemp/%s.ini", tmp);
			if(!dini_Exists(gstring))
			{
		        SendClientMessage(playerid,COLOR_GRAD1,"IP não encontrado na base de dados");
		        return true;
			} 
			else
			{
			    fremove(gstring);
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, 128, "ADM: %s desbaniu o IP (temporariamente banido) %s", sendername,tmp);
				ABroadCast(COLOR_YELLOW,string,1);
		        return true;
			}
		}
		return true;
	}
	if(strcmp(cmd,"/nomedesban",true)==0 || strcmp(cmd,"/unbannome",true)==0 || strcmp(cmd,"/desbannome",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= MASTER)
		{
      if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /nomedesban [NOME DO JOGADOR]");
		        return true;
   			}
   			new arquivo[64];
			format(arquivo, sizeof(arquivo), "Banidos/%s.ini",tmp);
			if(!dini_Exists(arquivo))
			{
		        SendClientMessage(playerid,COLOR_GRAD1,"Nick não encontrado na base de dados");
		        return true;
			}
			else
			{
   				dini_Remove(arquivo);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
			{
				format(string, 128, "ADM: Homem_Aranha desbaniu o Nick %s",tmp);
				ABroadCast(COLOR_YELLOW,string,1);
			}
			else
			{
				format(string, 128, "ADM: %s desbaniu o Nick %s", sendername,tmp);
				ABroadCast(COLOR_YELLOW,string,1);
			}
			format(string, sizeof(string), "Admin %s desbaniu o Nick %s [%02d/%02d/%02d-%02d:%02d:%02d]", sendername, tmp, day, month, year, hour, minute, second);
            desbanlog(string);
		}
		return true;
	}
    if(strcmp(cmd,"/desbantemp",true)==0)
	{
		if(PlayerInfo[playerid][pAdmin] >= 4)
		{
      		if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
		    tmp = strtok(cmdtext,idx);
		    if(!strlen(tmp))
		    {
		        SendClientMessage(playerid,COLOR_GRAD1,"USE: /desbantemp [NOME DO JOGADOR]");
		        return true;
   			}
   			new arquivo[64];
			format(arquivo, sizeof(arquivo), "BanidosTemp/%s.ini",tmp);
			if(!dini_Exists(arquivo))
			{
		        SendClientMessage(playerid,COLOR_GRAD1,"Nick não encontrado na base de dados");
		        return true;
			}
			else
			{
   				dini_Remove(arquivo);
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
			{
				format(string, 128, "ADM: %s desbaniu o Nick %s", sendername,tmp);
				ABroadCast(COLOR_YELLOW,string,1);
			}
			else
			{
				format(string, 128, "ADM: %s desbaniu o Nick %s", sendername,tmp);
				ABroadCast(COLOR_YELLOW,string,1);
			}
		}
		return true;
	}
//----------------------------------[MAKELider]------------------------------------------------
    if(strcmp(cmd, "/liderex", true) == 0 && PlayerInfo[playerid][pAdmin] >= DONO)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /liderex [id] [Numero(1-23)]");
				return true;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 24 || level < 0) { SendClientMessage(playerid, COLOR_GREY, "Empregos de 0 a 23"); return true; }
			if(PlayerInfo[para1][pLider] != 0 && PlayerInfo[para1][pMembro] != 0)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Este player já participa de uma organização!");
			    return true;
			}
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {
					if(level == 1) { PlayerInfo[para1][pSkin] = 283; }//Policia Militar
					else if(level == 2)	{ PlayerInfo[para1][pSkin] = 285; }//B.O.P.E
					else if(level == 3) { PlayerInfo[para1][pSkin] = 287; }//Exército
					else if(level == 4) { PlayerInfo[para1][pSkin] = 70; }//Fire/Ambulance
					else if(level == 5) { PlayerInfo[para1][pSkin] = 115; }//Varrios Los Aztecas
					else if(level == 6) { PlayerInfo[para1][pSkin] = 249; }//Taliban
					else if(level == 7) { PlayerInfo[para1][pSkin] = 147; }//Prefeito
					else if(level == 8) { PlayerInfo[para1][pSkin] = 294; }//Hitmans
					else if(level == 9) { PlayerInfo[para1][pSkin] = 227; }//Repórters
					else if(level == 10) { PlayerInfo[para1][pSkin] = 61; }//Taxistas
					else if(level == 11) { PlayerInfo[para1][pSkin] = 295; }//Policia Federal
					else if(level == 12) { PlayerInfo[para1][pSkin] = 113; }//Máfia Cosa Nostra
					else if(level == 13) { PlayerInfo[para1][pSkin] = 120; }//Máfia Yakuza
					else if(level == 14) { PlayerInfo[para1][pSkin] = 270; }//Groove
                    else if(level == 15) { PlayerInfo[para1][pSkin] = 123; }//ALQaeda
					else if(level == 16) { PlayerInfo[para1][pSkin] = 186; }//Policia Civil
                    else if(level == 17) { PlayerInfo[para1][pSkin] = 104; }//Ballas
                    else if(level == 18) { PlayerInfo[para1][pSkin] = 108; }//Vagos
                    else if(level == 19) { PlayerInfo[para1][pSkin] = 19; }//CV
                    else if(level == 20) { PlayerInfo[para1][pSkin] = 248; }//Sons of Anarchy
                    else if(level == 21) { PlayerInfo[para1][pSkin] = 292; }//Drifters
                    else if(level == 22) { PlayerInfo[para1][pSkin] = 279; }//Triads
                    else if(level == 23) { PlayerInfo[para1][pSkin] = 111; }
					else if(level == 24) { PlayerInfo[para1][pSkin] = 16; }//DETRAN
					else if(level == 25) { PlayerInfo[para1][pSkin] = 111; }//Advogados
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pLider] = level;
					format(string, sizeof(string), "   Você foi promovido a lider pelo admin %s", PlayerName(playerid));
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					SendClientMessage(para1, COLOR_LIGHTBLUE,"   Promovido Com sucesso !!");
					format(string, sizeof(string), "   Você promoveu %s a Lider.", giveplayer);
                    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                    MedicBill[para1] = 0;
					gTeam[para1] = 11;
				    PlayerInfo[para1][pTeam] = 11;
				    PlayerInfo[para1][pCargo] = 6;
				    SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
				    SetPlayerSpawn(para1);
				}
			}//not connected
		}
		return true;
	}
	if(strcmp(cmd, "/darlider", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darlider [id] [Numero(1-25)]");
				return true;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level == 0) { SendClientMessage(playerid, COLOR_GREY, "Para tirar o lider de uma organização você deve usar /limparlider"); return true; }
			if(level > 25 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "Organizações de 1 a 25"); return true; }
			GetPlayerName(playerid, sendername, 256);
				if (PlayerInfo[playerid][pAdmin] >= MASTER)
	    		{
       			if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				if(PlayerInfo[para1][pLider] != 0 || PlayerInfo[para1][pMembro] != 0)
				{
				    SendClientMessage(playerid, COLOR_GRAD1, "   Este player já participa de uma organização!");
				    return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						if(strcmp(InfoOrg[level][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(para1), level, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG, use /limparlider antes de colocar outro lider");
						    return true;
						}
						if(level == 1) { PlayerInfo[para1][pSkin] = 265; }//Policia Militar
						else if(level == 2)	{ PlayerInfo[para1][pSkin] = 285; }//B.O.P.E
						else if(level == 3) { PlayerInfo[para1][pSkin] = 287; }//Exército
						else if(level == 4) { PlayerInfo[para1][pSkin] = 70; }//Fire/Ambulance
						else if(level == 5) { PlayerInfo[para1][pSkin] = 115; }//Varrios Los Aztecas
						else if(level == 6) { PlayerInfo[para1][pSkin] = 249; }//Taliban
						else if(level == 7) { PlayerInfo[para1][pSkin] = 147; }//Prefeito
						else if(level == 8) { PlayerInfo[para1][pSkin] = 294; }//Hitmans
						else if(level == 9) { PlayerInfo[para1][pSkin] = 227; }//Repórters
						else if(level == 10) { PlayerInfo[para1][pSkin] = 61; }//Taxistas
						else if(level == 11) { PlayerInfo[para1][pSkin] = 295; }//Policia Federal
						else if(level == 12) { PlayerInfo[para1][pSkin] = 113; }//Máfia Cosa Nostra
						else if(level == 13) { PlayerInfo[para1][pSkin] = 120; }//Máfia Yakuza
						else if(level == 14) { PlayerInfo[para1][pSkin] = 270; }//Groove
                        else if(level == 15) { PlayerInfo[para1][pSkin] = 123; }//ALQaeda
						else if(level == 16) { PlayerInfo[para1][pSkin] = 186; }//Policia Civil
                        else if(level == 17) { PlayerInfo[para1][pSkin] = 104; }//Ballas
                        else if(level == 18) { PlayerInfo[para1][pSkin] = 108; }//Vagos
                        else if(level == 19) { PlayerInfo[para1][pSkin] = 19; }//CV
                        else if(level == 20) { PlayerInfo[para1][pSkin] = 248; }//Sons of Anarchy
                        else if(level == 21) { PlayerInfo[para1][pSkin] = 292; }//Drifters
                        else if(level == 22) { PlayerInfo[para1][pSkin] = 117; }//Triads
                        else if(level == 23) { PlayerInfo[para1][pSkin] = 111; }//FARC
                        else if(level == 24) { PlayerInfo[para1][pSkin] = 16; }//detran
                        else if(level == 25) { PlayerInfo[para1][pSkin] = 296; }//Advogados
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pLider] = level;
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							SendClientMessage(para1, COLOR_LIGHTBLUE, "   Você foi promovido a lider pelo admin Homem_Aranha");
						}
						else
						{
							format(string, sizeof(string), "   Você foi promovido a lider pelo admin %s", PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						SendClientMessage(para1, COLOR_LIGHTBLUE,"   Promovido Com sucesso !!");
						format(string, sizeof(string), "   Você promoveu %s a Lider.", giveplayer);
                        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "ADMIN: %s deu líder da org:[%s] para %s.", sendername, NomeORG(level), giveplayer);
                        LideresLog(string);
                        MedicBill[para1] = 0;
						gTeam[para1] = 11;
					    PlayerInfo[para1][pTeam] = 11;
					    PlayerInfo[para1][pCargo] = 6;
					    SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
					    SetPlayerSpawn(para1);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/forceskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /forceskin [id]");
				return true;
			}
			new para1;
			para1 = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[para1][pMembro] < 1)
				        {
				            SendClientMessage(playerid, COLOR_GREY, "Este jogador nao esta em um Emprego / Familia");
				            return true;
				        }
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							SendClientMessage(para1, COLOR_LIGHTBLUE, "* Você foi forçado a mudar o skin pelo Admin Homem_Aranha.");
						}
						else
						{
							format(string, sizeof(string), "* Você foi forçado a mudar o skin pelo Admin %s.", PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						format(string, sizeof(string), "* Você forçou o(a) %s Para muda seu skin.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						if(PlayerInfo[para1][pMembro] == 1) { PlayerInfo[para1][pTeam] = 5; ChosenSkin[para1] = 59; }
				        else if(PlayerInfo[para1][pMembro] == 2) { PlayerInfo[para1][pTeam] = 6; ChosenSkin[para1] = 121; }
				        else if(PlayerInfo[para1][pMembro] == 3) { PlayerInfo[para1][pTeam] = 7; ChosenSkin[para1] = 98; }
				        else if(PlayerInfo[para1][pMembro] == 4) { PlayerInfo[para1][pTeam] = 8; ChosenSkin[para1] = 46; }
				        else if(PlayerInfo[para1][pMembro] == 5) { PlayerInfo[para1][pTeam] = 9; ChosenSkin[para1] = 174; }
				        else if(PlayerInfo[para1][pMembro] == 6) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 280; }
				        else if(PlayerInfo[para1][pMembro] == 7) { PlayerInfo[para1][pTeam] = 2; ChosenSkin[para1] = 164; }
				        else if(PlayerInfo[para1][pMembro] == 8) { PlayerInfo[para1][pTeam] = 10; ChosenSkin[para1] = 186; }
				        else if(PlayerInfo[para1][pMembro] == 22) { PlayerInfo[para1][pTeam] = 10; ChosenSkin[para1] = 118; }
				        else { return true; }
                        SetPlayerInterior(para1,0);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(para1, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(para1, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(para1,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(para1,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						Controle(para1, 0);
					    SelectChar[para1] = 255;
					    SelectCharID[para1] = PlayerInfo[para1][pMembro];
					    SelectCharPlace[para1] = 1;
					    PlayerInfo[para1][pSkin] = ChosenSkin[para1];
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Use 'Proximo' para selecionar o skin de sua vontade.");
					    SendClientMessage(para1, COLOR_LIGHTRED, "* Se Quizer utilizar esta skin ->, Digite 'Confirma'.");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
//----------------------------------[Promover]------------------------------------------------
	if(strcmp(cmd, "/promover", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Use:  /Promover [ID/Nick] [Cargos (1-5)]");
				return true;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 5 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "   Cargos de 1 a 5, Cargo 5 é Sub-Líder!"); return true; }
			if (PlayerInfo[playerid][pLider] > 0)
			{
			    if(IsPlayerConnected(para1))
			    {
    				for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(PlayerInfo[para1][pMembro] == PlayerInfo[playerid][pLider])
				  		{
					    	if(para1 != INVALID_PLAYER_ID)
					      	{
								GetPlayerName(para1, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								PlayerInfo[para1][pCargo] = level;
								format(string, sizeof(string), "   Você foi promovido pelo líder a Cargo %d", level);
								SendClientMessage(para1, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "   Você promoveu %s a cargo %d.", giveplayer,level);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								new org = PlayerInfo[playerid][pLider];
								if(level == 5)
								{
						    		if(strcmp(InfoOrg[org][SubLider],"Ninguem",true)==0)
									{
							    		DemitirInfoOrg(giveplayer);
							    		ConviteInfoOrg(giveplayer, org, 5);
									}
									else
									{
							   			strmid(string, InfoOrg[org][SubLider], 0, strlen(InfoOrg[org][SubLider]), 255);
							    		DemitirInfoOrg(giveplayer);
							    		DemitirInfoOrg(InfoOrg[org][SubLider]);
							    		ConviteInfoOrg(string, org, 4);
							    		ConviteInfoOrg(giveplayer, org, 5);
									}
								}
								if(strcmp(InfoOrg[org][SubLider],giveplayer,true)==0)
								{
		    						if(level < 5)
									{
										DemitirInfoOrg(giveplayer);
								    	ConviteInfoOrg(giveplayer, org, level);
									}
								}
								return true;
							}
							if(PlayerInfo[para1][pMembro] != PlayerInfo[playerid][pLider])
					  		{
					  		    SendClientMessage(playerid, COLOR_GREY, "Não pode promover quem não é da sua org.");
					  		    return true;
							}
						}
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não é um líder !");
			}
		}
		return true;
	}
//----------------------------------[setteam]------------------------------------------------
	if(strcmp(cmd, "/settime", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /settime [id] [team 1(civ) - 2(cop)]");
				return true;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pTeam] = level;
						gTeam[para1] = level;
						SetPlayerWeapons(para1);
						SetPlayerSpawn(para1);
						ClearCrime(para1);
						printf("AdmCmd: %s foi trocado %s pro time %d.", sendername, giveplayer, level);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "   Você foi setado a equipe %d por Homem_Aranha", level);
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						else
						{
							format(string, sizeof(string), "   Você foi setado a equipe %d por %s", level, PlayerName(playerid));
							SendClientMessage(para1, COLOR_LIGHTBLUE, string);
						}
						format(string, sizeof(string), "   Você ligou %s a sua equipe %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
//Pedir Contas
	if (strcmp(cmd, "/pedircontas", true) == 0)
	{
		if(PlayerInfo[playerid][pMembro] == 0)
    	{
	   		SendClientMessage(playerid,COLOR_GREY," Você não faz parte de nemhuma organização!");
	   		return true;
    	}
    	DemitirInfoOrg(PlayerName(playerid));
		gTeam[playerid] = 3;
		PlayerInfo[playerid][pTeam] = 3;
		PlayerInfo[playerid][pMembro] = 0;
		PlayerInfo[playerid][pLider] = 0;
		PlayerInfo[playerid][pCargo] = 0;
		SetPlayerSpawn(playerid);
		if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
        SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
		MedicBill[playerid] = 0;
		SpawnPlayer(playerid);
		MedicBill[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pediu as contas, agora você é um Civil novamente!");
		return true;
	}
	if (strcmp(cmd, "/contaslider", true) == 0)
	{
		if(PlayerInfo[playerid][pLider] == 0)
    	{
	   		SendClientMessage(playerid,COLOR_GREY," Você não é líder de nenhuma organização!");
	   		return true;
    	}
        new Vaga2 = strval(tmp);
		format(string, sizeof(string), "PLAYER: %s pediu contas de lider da org:[%s]",PlayerName(playerid), NomeORG(GetPlayerOrg(playerid)));
		LideresLog(string);
        format(gstring, sizeof(gstring), "%s esta pedindo Contas da org %s e saira em Segundos, digite /lideranca para assumir.", PlayerName(playerid), NomeORG(playerid));
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	SetTimerEx("contasdolider", 8000, false, "i", playerid);
        if(IsPlayerOnline(InfoOrg[Vaga2][Lider]))
		strmid(InfoOrg[Vaga2][Lider], "Ninguem", 0, strlen("Ninguem"), 255);
		format(gstring, 128, "ORG Arquivos/Org%d.cfg", Vaga2);
       	dini_Set(gstring,"Lider","Ninguem");
	}
//Membros
 	if(strcmp(cmd,"/Membros",true)==0)
	{
     if(IsPlayerConnected(playerid))
	    {
			new teamnumber;
			if (PlayerInfo[playerid][pLider] != 0) teamnumber = PlayerInfo[playerid][pLider];
			else if (PlayerInfo[playerid][pMembro] != 0) teamnumber = PlayerInfo[playerid][pMembro];
			else
			{
				SendClientMessage(playerid,COLOR_GRAD1,"Voce não é Membro de uma Equipe!");
				return true;
			}
	    	SendClientMessage(playerid,COLOR_YELLOW,"|____________[ Membros Online ]____________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i))
				{
					GetPlayerName(i,sendername,sizeof(sendername));
					format(string,sizeof(string),"");
					if (PlayerInfo[i][pLider] == teamnumber) format(string,sizeof(string),"%s: Lider",sendername);
					else if (PlayerInfo[i][pMembro] == teamnumber) format(string,sizeof(string),"%s: Cargo %d.",sendername,PlayerInfo[i][pCargo]);
					if (strlen(string) > 1) SendClientMessage(playerid,0xF8FAFFAA,string);
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/lideranca", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    if(PlayerInfo[playerid][pLevel] < 3)
				{
				SendClientMessage(playerid, COLOR_GREY, "Você Precisa Ser Nível 3 Para assumir a liderança de uma org !");
				return true;
				}
				if (PlayerInfo[playerid][pCidadania] < 1)
				{
				SendClientMessage(playerid, COLOR_GREY, "Você precisa fazer teste de Cidadania.");
				return true;
				}
				{
	            new x_nr[32];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Liderança de Organização ]__________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USE: /lideranca [ID da Org  1-25][Se a org já tiver lider não use o comando] ");
					return true;
				}
				if(strcmp(x_nr,"1",true) == 0)//pm
				{
				if(playerid != INVALID_PLAYER_ID)
			        {
				if(strcmp(InfoOrg[1][Lider],"Ninguem",true)==0)
				{
						ConviteInfoOrg(PlayerName(playerid), 1, 6);
				}
				else
				{
						SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
					    return true;
				}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
	            PlayerInfo[playerid][pLider] = 1;
                SetPlayerColor(playerid, COR_PM);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,283);
				PlayerInfo[playerid][pSkin] = 283;
				ConviteInfoOrg(PlayerName(playerid), 1, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				}
				if(strcmp(x_nr,"2",true) == 0)//bope
				{
				if(strcmp(InfoOrg[2][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 2, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 2;
                SetPlayerColor(playerid, COR_BOPE);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,285);
				PlayerInfo[playerid][pSkin] = 285;
				ConviteInfoOrg(PlayerName(playerid), 2, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"3",true) == 0)//exercito
				{
				if(strcmp(InfoOrg[3][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 3, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 3;
                SetPlayerColor(playerid, COR_EXE);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,287);
				PlayerInfo[playerid][pSkin] = 287;
				ConviteInfoOrg(PlayerName(playerid), 3, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"4",true) == 0)//samu
				{
				if(strcmp(InfoOrg[4][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 4, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 4;
                SetPlayerColor(playerid, COR_SAMU);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,70);
				PlayerInfo[playerid][pSkin] = 70;
				ConviteInfoOrg(PlayerName(playerid), 4, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"5",true) == 0)//Aztecas
				{
				if(strcmp(InfoOrg[5][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 5, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 5;
                SetPlayerColor(playerid, COR_AZTECAS);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,115);
				PlayerInfo[playerid][pSkin] = 115;
				ConviteInfoOrg(PlayerName(playerid), 5, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"6",true) == 0)//Taliban
				{
				if(strcmp(InfoOrg[6][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 6, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 6;
                SetPlayerColor(playerid, COR_Taliban);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,249);
				PlayerInfo[playerid][pSkin] = 249;
				ConviteInfoOrg(PlayerName(playerid), 6, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"7",true) == 0)//prefeito
				{
				if(strcmp(InfoOrg[7][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 7, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 7;
                SetPlayerColor(playerid, COR_PRE);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,147);
				PlayerInfo[playerid][pSkin] = 147;
				ConviteInfoOrg(PlayerName(playerid), 7, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"8",true) == 0)//Hitmans
				{
				if(strcmp(InfoOrg[8][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 8, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 8;
                SetPlayerColor(playerid, COR_HITMAN);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,294);
				PlayerInfo[playerid][pSkin] = 294;
				ConviteInfoOrg(PlayerName(playerid), 8, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"9",true) == 0)//reportes
				{
				if(strcmp(InfoOrg[9][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 9, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 9;
                SetPlayerColor(playerid, COR_REP);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,227);
				PlayerInfo[playerid][pSkin] = 227;
				ConviteInfoOrg(PlayerName(playerid), 9, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"10",true) == 0)//taxistas
				{
				if(strcmp(InfoOrg[10][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 10, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 10;
                SetPlayerColor(playerid, COR_TAXI);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,61);
				PlayerInfo[playerid][pSkin] = 61;
				ConviteInfoOrg(PlayerName(playerid), 10, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"11",true) == 0)//policia federal
				{
				if(strcmp(InfoOrg[11][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 11, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 11;
                SetPlayerColor(playerid, COR_PF);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,295);
				PlayerInfo[playerid][pSkin] = 295;
				ConviteInfoOrg(PlayerName(playerid), 11, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"12",true) == 0)//mafia cosa nostra
				{
				if(strcmp(InfoOrg[12][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 12, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já pertence a uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 12;
                SetPlayerColor(playerid, COR_COSA);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,113);
				PlayerInfo[playerid][pSkin] = 113;
				ConviteInfoOrg(PlayerName(playerid), 12, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"13",true) == 0)//mafia yakuza
				{
				if(strcmp(InfoOrg[13][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 13, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 13;
                SetPlayerColor(playerid, COR_YAK);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,120);
				PlayerInfo[playerid][pSkin] = 120;
				ConviteInfoOrg(PlayerName(playerid), 13, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"14",true) == 0)//grove stret
				{
				if(strcmp(InfoOrg[14][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 14, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 14;
                SetPlayerColor(playerid, COR_GRO);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,270);
				PlayerInfo[playerid][pSkin] = 270;
				ConviteInfoOrg(PlayerName(playerid), 14, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"15",true) == 0)//al qaeda
				{
				if(strcmp(InfoOrg[15][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 15, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 15;
                SetPlayerColor(playerid, COR_AL);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,123);
				PlayerInfo[playerid][pSkin] = 123;
				ConviteInfoOrg(PlayerName(playerid), 15, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"16",true) == 0)//policia civil
				{
				if(strcmp(InfoOrg[16][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 16, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 16;
                SetPlayerColor(playerid, COR_PC);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,186);
				PlayerInfo[playerid][pSkin] = 186;
				ConviteInfoOrg(PlayerName(playerid), 16, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"17",true) == 0)//Ballas
				{
				if(strcmp(InfoOrg[17][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 17, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 17;
                SetPlayerColor(playerid, COR_BALLAS);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,104);
				PlayerInfo[playerid][pSkin] = 104;
				ConviteInfoOrg(PlayerName(playerid), 17, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"18",true) == 0)//vagos
				{
				if(strcmp(InfoOrg[18][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 18, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 18;
                SetPlayerColor(playerid, COR_VAGOS);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,108);
				PlayerInfo[playerid][pSkin] = 108;
				ConviteInfoOrg(PlayerName(playerid), 18, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"19",true) == 0)//blodz
				{
				if(strcmp(InfoOrg[19][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 19, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 19;
                SetPlayerColor(playerid, 0xF6000000);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,19);
				PlayerInfo[playerid][pSkin] = 19;
				ConviteInfoOrg(PlayerName(playerid), 19, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"20",true) == 0)//sons of anarchy
				{
				if(strcmp(InfoOrg[20][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 20, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 20;
                SetPlayerColor(playerid, COR_SONS);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,248);
				PlayerInfo[playerid][pSkin] = 248;
				ConviteInfoOrg(PlayerName(playerid), 20, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"21",true) == 0)//drifters
				{
				if(strcmp(InfoOrg[21][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 21, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 21;
                SetPlayerColor(playerid, COR_DRIFTERS);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,292);
				PlayerInfo[playerid][pSkin] = 292;
				ConviteInfoOrg(PlayerName(playerid), 21, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"22",true) == 0)//triads
				{
				if(strcmp(InfoOrg[22][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 22, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 22;
                SetPlayerColor(playerid, COR_TRIADS);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,117);
				PlayerInfo[playerid][pSkin] = 117;
				ConviteInfoOrg(PlayerName(playerid), 22, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"23",true) == 0)//farc
				{
				if(strcmp(InfoOrg[23][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 23, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 23;
                SetPlayerColor(playerid, COR_FARC);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,111);
				PlayerInfo[playerid][pSkin] = 111;
				ConviteInfoOrg(PlayerName(playerid), 23, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				if(strcmp(x_nr,"24",true) == 0)//detran
				{
				if(strcmp(InfoOrg[24][Lider],"Ninguem",true)==0)
						{
							ConviteInfoOrg(PlayerName(playerid), 24, 6);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
						}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 24;
                SetPlayerColor(playerid, COR_DETRAN);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,16);
				PlayerInfo[playerid][pSkin] = 16;
				ConviteInfoOrg(PlayerName(playerid), 24, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
               if(strcmp(x_nr,"25",true) == 0)//Advogados
				{
				if(strcmp(InfoOrg[25][Lider],"Ninguem",true)==0)
				{
							ConviteInfoOrg(PlayerName(playerid), 25, 6);
				}
				else
				{
						    SendClientMessage(playerid, COLOR_GRAD2, "Já tem líder nessa ORG");
						    return true;
				}
				if(PlayerInfo[playerid][pMembro] != 0 || PlayerInfo[playerid][pLider] != 0)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já faz parte de uma Org!");
					return true;
				}
				{
				   PlayerInfo[playerid][pLider] = 25;
                SetPlayerColor(playerid, COR_DETRAN);
		   		PlayerInfo[playerid][pCargo] = 6;
		   		SetPlayerSkin(playerid,296);
				PlayerInfo[playerid][pSkin] = 296;
				ConviteInfoOrg(PlayerName(playerid), 25, 6);
				PlayerInfo[playerid][pTeam] = 0;
				gTeam[playerid] = 0;
				SetPlayerSpawn(playerid);
				return true;
				}
				}
				}// fim das chaves
				}
			}
	if(strcmp(cmd, "/avh", true) == 0 || strcmp(cmd, "/avisarh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pHelper] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Helper !");
			    return true;
			}
   			if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 300)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está em modo de serviço ! (/shelper)");
				return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/avh) [texto]");
				return true;
			}
   			if(TentouDivulgar(result))
			{
  				if(cdivulgar[playerid] >= 4)
  				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
    				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    				Kick(playerid);
  				}
  				GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
  				format(string, 128, "HelperAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
        		cdivulgar[playerid] += 1;
        		return true;
			}
			SendClientMessageToAll(COLOR_WHITE, "|__________________[ Aviso dos Helpers ]__________________|");
			if(helpertrampando[playerid] == 1 && helperhide[playerid] == 1)
			{
				format(string, sizeof(string), "BRNM: %s",result);
				SendClientMessageToAll(0x33FF00FF, string);
			}
			else
			{
				format(string, sizeof(string), "{52CBFF}Helper %s: %s", sendername, result);
				SendClientMessageToAll(0xFF98F4AA, string);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/avisar", true) == 0 || strcmp(cmd, "/av", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Admin!");
			    return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/av)isar [texto]");
				return true;
			}
   			if(TentouDivulgar(result))
			{
  				if(cdivulgar[playerid] >= 4)
  				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
    				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    				Kick(playerid);
  				}
  				GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
  				format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
        		cdivulgar[playerid] += 1;
        		return true;
			}
			SendClientMessageToAll(0xFFFBF8AA, "|__________________[ Aviso dos Admins ]__________________|");
			if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
			{
				format(string, sizeof(string), "BRNM: %s",result);
				SendClientMessageToAll(COR_GRO, string);
			}
			else
			{
				format(string, sizeof(string), "Admin %s: %s", sendername, result);
				SendClientMessageToAll(COR_GRO, string);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/lc", true) == 0 || strcmp(cmd, "/limparchat", true) == 0)
	{
    	if(IsPlayerConnected(playerid))
		{
		    if(PlayerInfo[playerid][pAdmin] < 1)
			{
		        SendClientMessage(playerid, COLOR_GREY, "Você não é um admin!");
		    	return true;
		    }
      if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i)) ClearChatbox(i, 100);
			}
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
			{ format(string, sizeof(string), "~b~BRNM ~n~~w~Resetou o Chat!"); }
			else
			{ format(string, sizeof(string), "~b~%s ~n~~w~Resetou o Chat!",playername); }
			GameTextForAll(string, 5000, 1);
		    return true;
		}
		return true;
	}
	/*if(strcmp(cmd, "/beijar", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE:  /beijar [ID]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
        new
                Float:x,
                Float:y,
                Float:z
        ;
        GetPlayerPos(giveplayerid, x, y, z);
        if(ArePlayersFacing(playerid, giveplayerid) && IsPlayerInRangeOfPoint(playerid, 2.0, x, y, z)) {
            new
                        aName[MAX_PLAYER_NAME],
                        pName[MAX_PLAYER_NAME]
                ;
            GetPlayerName(playerid, aName, sizeof aName);
            GetPlayerName(giveplayerid, pName, sizeof pName);
            ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 10.0, 0, 0, 0, 0, 5000, 1);
            ApplyAnimation(giveplayerid, "KISSING", "Playa_Kiss_02", 10.0, 0, 0, 0, 0, 5000, 1);
            format(string, sizeof string, "Você acabou de ser beijado(a) por %s!", aName);
            SendClientMessage(giveplayerid, -1, string);
            format(string, sizeof string, "Você beijou %s!", pName);
            SendClientMessage(playerid, -1, string);
            format(string, sizeof(string), "%s e %s se beijaram.", aName, pName);
            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
        }
        else SendClientMessage(playerid, 0xFF0000, "Você está longe do jogador(a).");
        return 1;
		 }
	  }
	}
}*/
if(strcmp(cmd, "/beijar", true) == 0)
{
SendClientMessage(playerid, -1, "/beijar foi desativado em breve voltara.");
return true;
}
//----------------------------------[Wisper]-----------------------------------------------
	if(strcmp(cmd, "/particular", true) == 0 || strcmp(cmd, "/par", true) == 0)
	{
		if(PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
			return true;
		}
		if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/par)ticular [id] [texto]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(PlayerInfo[playerid][pAdmin] < 1 && PlayerInfo[giveplayerid][pAdmin] < 1)
			{
	            SendClientMessage(playerid, COLOR_GREY, "Este Player não é um admin ou o Admin que você digitou Bloqueou Pars!");
	            return true;
	        }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
       				if(HidePM[giveplayerid] > 0)
					{
				       SendClientMessage(playerid, COLOR_GREY, "Este Player não é um admin ou o Admin que você digitou Bloqueou Pars");
				       return true;
       				}
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USE: (/par)ticular [id] [texto]");
						return true;
					}
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
					{
						format(string, sizeof(string), "BRNM particular: %s", (result));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					}
					else
					{
						format(string, sizeof(string), "%s(ID: %d) particular: %s", sendername, playerid, (result));
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					}
					print(string);
					format(string, sizeof(string), "PM enviada para %s(ID: %d).", giveplayer, giveplayerid);
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					format(string, sizeof(string), "[%d/%d/%d] [%d:%d:%d] PM: %s para %s: %s.", v[2], v[1], v[0], v[3], v[4], v[5] , PlayerName(playerid), PlayerName(giveplayerid), (result));
					AChatLog(string);
					return true;
				}
			}
			else
			{
					SendClientMessage(playerid, COLOR_GRAD1, "   Esse jogador está off-line.");
			}
		}
	 	return true;
	}

	if(strcmp(cmd, "/esconderijo", true) == 0 || strcmp(cmd, "/irin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				else
				{
					SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "   Você Foi Teleportado!");
				SetPlayerInterior(playerid,1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!!");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/onibus", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1759.2711,-1849.1093,13.5781); LinkVehicleToInterior(tmpcar, 0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, 1759.2711,-1849.1093,13.5781);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado pelo Admin!");
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está autorizado a usar o comando!");
			}
		}
		return true;
	}
    	if(strcmp(cmd, "/freio", true) == 0)
	{
	    vehid = GetPlayerVehicleID(playerid);
        new Float: X, Float: Y, Float: Z, Float: Angle;
		GetVehiclePos(vehid, X, Y, Z);
		GetVehicleZAngle(vehid, Angle);
		if(InBike(vehid))
		{
		  return true;
		}
	    if(IsPlayerInAnyVehicle(playerid))
	    {
			if(PlayerInfo[playerid][pPcarkey] == vehid || PlayerInfo[playerid][pPcarkey2] == vehid || PlayerInfo[playerid][pPcarkey3] == vehid || PlayerInfo[playerid][pPcarkey4] == vehid || PlayerInfo[playerid][pAdmin] >= 1 && vehid >= carsonserver && !(strcmp(CarInfo[vehid][cOwner], "Dealership", true) == 0) || IsADetran(playerid) && vehid >= carsonserver && !(strcmp(CarInfo[vehid][cOwner], "Dealership", true) == 0))
			{
	        	if(CarInfo[vehid][cFreio] == 1)
	        	{
	                CarInfo[vehid][cPosX] = 0;
	                CarInfo[vehid][cPosY] = 0;
	                CarInfo[vehid][cPosZ] = 0;
	                CarInfo[vehid][cAngulo] = 0;
	                CarInfo[vehid][cFreio] = 0;
	                CarroTimer(vehid);
	                format(string, sizeof(string), "%s tira o freio de mão.", PlayerName(playerid));
                    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	                OnPropUpdate();
	                return true;
	        	}
	        	if(CarInfo[vehid][cFreio] == 0)
	        	{
	                CarInfo[vehid][cPosX] = X;
	                CarInfo[vehid][cPosY] = Y;
	                CarInfo[vehid][cPosZ] = Z;
	                CarInfo[vehid][cAngulo] = Angle;
	                CarInfo[vehid][cFreio] = 1;
	                CarroTimer(vehid);
	                format(string, sizeof(string), "%s puxa o freio de mão.", PlayerName(playerid));
                    ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					OnPropUpdate();
					return true;
	        	}
			}
		}
	}
	if(strcmp(cmd, "/entrarcarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /entrarcarro [carro id]");
				return true;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				PutPlayerInVehicle(playerid, testcar, 1);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado pelo Admin!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/ircarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /ircarro [carro id]");
				return true;
			}
			new testcar = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				new Float:cwx2,Float:cwy2,Float:cwz2;
				GetVehiclePos(testcar, cwx2, cwy2, cwz2);
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, cwx2, cwy2, cwz2); LinkVehicleToInterior(tmpcar, 0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, cwx2, cwy2, cwz2);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado pelo Admin!");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/mark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				SendClientMessage(playerid, COLOR_GRAD1, "   Local Marcado Para o Teleporte");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/irmark", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            new plo, world;
			plo = ReturnUser(tmp);
			world = GetPlayerVirtualWorld(plo);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]); LinkVehicleToInterior(tmpcar, 0);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				}
				SetPlayerVirtualWorld(playerid, world);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado para onde você marcou!");
				SetPlayerInterior(playerid,0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/irstad", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
				}
				SetPlayerInterior(playerid,4);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado pelo Admin!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/aviao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34); LinkVehicleToInterior(tmpcar, 0);
				}
				else
				{
					SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
				}
				SetPlayerInterior(playerid,1);
				SendClientMessage(playerid, COLOR_GRAD1, "Você foi teleportado pelo Admin!");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/ir", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ir [id]");
				return true;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo, world;
			plo = ReturnUser(tmp);
			world = GetPlayerVirtualWorld(plo);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
							return true;
						}
						if(PlayerInfo[plo][pAdmin] >= SUB_DONO && PlayerInfo[playerid][pAdmin] < SUB_DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ir até um Admin Dono !");
							return true;
						}
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						}
						if(PlayerInfo[plo][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz); LinkVehicleToInterior(tmpcar, 0);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						SetPlayerVirtualWorld(playerid, world);
						SendClientMessage(playerid, 0x33FF00FF, "Você foi teleportado pelo Admin !");
						GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
						GetPlayerName(plo, plname, MAX_PLAYER_NAME);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{}
						else { format(string, sizeof(string), "O Admin %s Foi Até %s.",playername,plname); }
						ProxDetector(30.0, playerid, string, 0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA,0xC2A2DAAA);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um player ativo.");
			}
		}
		return true;
	}


//Spawn Carros
	if (strcmp(cmd, "/destruirid", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
        	if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoThiago(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
				    if(result < CAR_AMOUNT)
				    {
				    	SendClientMessage(playerid, COLOR_GREY, "Você só pode destruir veículos criados");
				    	return true;
				    }
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
					DestroyVehicle(result);
				    format(string, sizeof(string), "Você destruiu o veículo ID:[%d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
				    if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				    {
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi destruido Por: BRNM", result);
						ABroadCast(COLOR_YELLOW,string,1);
					}
					else
					{
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi destruido Por: %s", result, name);
						ABroadCast(COLOR_YELLOW,string,1);
					}
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
		}
		return true;
	}
	if (strcmp(cmd, "/respawnconce", true) == 0)
	{
	if(PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
   if(admtrampando[playerid] < 1  && admhide[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			{
            SendClientMessage(playerid, COLOR_LIGHTBLUE, "[BRNM]:Você deu respawn na conce!");
			new bool:unwanted[CAR_AMOUNT];
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerConnected(player) && IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
     		for(new car = 501; car <= 720; car++)
		    {
				if(!unwanted[car]) if(CarInfo[car][cOwned]==0) SetVehicleToRespawn(car);
			}
		}
		return true;
	}
	if (strcmp(cmd, "/respawnid", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
        	if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoThiago(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
				    format(string, sizeof(string), "Você deu respawn no carro ID:[%d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				    {
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi respawnado Por: Homem_Aranha", result);
						ABroadCast(COLOR_YELLOW,string,1);
					}
					else
					{
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi respawnado Por: %s", result, name);
						ABroadCast(COLOR_YELLOW,string,1);
					}
					SetVehicleToRespawn(result);
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
		}
		return true;
	}
	if (strcmp(cmd, "/abastecerid", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
         	if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoThiago(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
			    	format(string, sizeof(string), "Você abasteceu o carro ID:[%d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				    {
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi abastecido Por: Homem_Aranha", result);
						ABroadCast(COLOR_YELLOW,string,1);
					}
					else
					{
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi abastecido Por: %s", result, name);
						ABroadCast(COLOR_YELLOW,string,1);
					}
					Gas[result] = 100;
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
		}
		return true;
	}
	if (strcmp(cmd, "/repararid", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pAdmin] < 3)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			new counter = 0;
			new result;
			new plyName[MAX_PLAYER_NAME];
			GetPlayerName(playerid, plyName, MAX_PLAYER_NAME);
			for(new i; i != MAX_VEHICLES; i++)
			{
				new dist = ChecarveiculoThiago(5, playerid, i);
				if(dist)
				{
					result = i;
					counter++;
				}
			}
			switch(counter)
			{
				case 0:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Não há nenhum carro nesse raio!");
				}
				case 1:
				{
					new name[MAX_PLAYER_NAME];
				    GetPlayerName(playerid, name, sizeof(name));
				    format(string, sizeof(string), "Você reparou o carro ID:[%d]", result);
				    SendClientMessage(playerid, COLOR_GREY, string);
					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				    {
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi reparado Por: Homem_Aranha", result);
						ABroadCast(COLOR_YELLOW,string,1);
					}
					else
					{
						format(string, sizeof(string), "AdmAviso: Carro ID:[%d] foi reparado Por: %s", result, name);
						ABroadCast(COLOR_YELLOW,string,1);
					}
	    			RepairVehicle(result);
				}
				default:
				{
					SendClientMessage(playerid, COLOR_GREY, "   Foram encontrados mais de um carro nesse raio");
				}
			}
		}
		return true;
	}
    if(strcmp(cmd, "/respawncarros", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
         	if (PlayerInfo[playerid][pAdmin] < 4)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando !");
			    return true;
			}
			if(admtrampando[playerid] == 0 || admtrampando[playerid] == 1)
				{
					format(gstring, sizeof(gstring), "~b~BRNM: ~w~Respawn De Carros Em 10 Segundos!!!");
					GameTextForAll(gstring, 5000, 3);
					SetTimerEx("RespawnCarros2", 6000, 0, "i",playerid);
				}
				SetTimerEx("RespawnCarros", 13000, 0, "i",playerid);
			}
			return true;
		}

//--------------------------------[Tirar Bombas]---------------------------------------------------------------------
	if(strcmp(cmd, "/tirarbombas", true) == 0)
	{
	 	if(IsAEx(playerid))
  		{
		    tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp))
			{
	  			SendClientMessage(playerid, COLOR_GRAD2, "USE: /tirarbombas [id]");
			    return true;
			}
			new Nome[MAX_PLAYER_NAME], Nome2[MAX_PLAYER_NAME];
			GetPlayerName(playerid, Nome2, sizeof(Nome2));
			giveplayerid = ReturnUser(tmp);
			GetPlayerName(giveplayerid, Nome, sizeof(Nome));
			format(string, sizeof(string), "Você retirou as bombas do terrorista %s", Nome);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			format(string, sizeof(string), "Oficial %s retirou suas bombas por 10 minutos", Nome2);
			SendClientMessage(giveplayerid, COLOR_YELLOW, string);
			format(string, sizeof(string), "%s retirou as bombas do terrorista %s", Nome2, Nome);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			SemBombas[giveplayerid] = 1;
			SetTimerEx("VoltarBombas", 600000, false, "i", giveplayerid);
			return true;
		}
		return true;
	}
	if(strcmp(cmd, "/HomemBomba", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
		   SendClientMessage(playerid,COLOR_GREY," Você não pode usar homem bomba na cadeia!");
		   return true;
	    }
		if(PlayerInfo[playerid][pMembro] != 6 && PlayerInfo[playerid][pLider] != 6 && PlayerInfo[playerid][pMembro] != 15 && PlayerInfo[playerid][pLider] != 15 && PlayerInfo[playerid][pMembro] != 23 && PlayerInfo[playerid][pLider] != 23)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é Terrorista !");
		    return true;
		}
		if(SemBombas[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "O Exército retirou suas bombas e você não poderá usá-las!");
		    return true;
		}
		if(phbomba == 1)
        {
	        SendClientMessage(playerid,COLOR_GRAD2,"Já usaram homem-bomba, aguarde 20 segundos para usar novamente!");
	        return true;
        }
 		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid))
		{
			SetPlayerHealth(playerid, 0);
			new Float:x, Float:y, Float:z;
			GetPlayerPos(playerid, x, y, z);
			CreateExplosion(x, y, z, 7, 25);
			printf("[Terrorista] Usou Homem Bomba");
			format(string, sizeof(string), "Terrorista %s Usou Homem Bomba ! ID[%d]", sendername, playerid);
			ABroadCast(COLOR_YELLOW,string,1);
			phbomba = 1;
		    Tempohbomba = SetTimer("hbomba", 20000, 0);
		}
		return true;
 	}
	if(strcmp(cmd, "/CarroBomba", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
		   SendClientMessage(playerid,COLOR_GREY," Você não pode usar carro bomba na cadeia!");
		   return true;
    	}
		if(PlayerInfo[playerid][pMembro] != 6 && PlayerInfo[playerid][pLider] != 6 && PlayerInfo[playerid][pMembro] != 15 && PlayerInfo[playerid][pLider] != 15 && PlayerInfo[playerid][pMembro] != 23 && PlayerInfo[playerid][pLider] != 23)
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você não é Terrorista !");
		    return true;
		}
		if(SemBombas[playerid] == 1)
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "O Exército retirou suas bombas e você não poderá usá-las!");
		    return true;
		}
		if(pcbomba == 1)
	    {
	        SendClientMessage(playerid,COLOR_GRAD2,"Já usaram carrobomba, aguarde 20 segundos para usar novamente!");
	        return true;
	    }
		new vehicle;
		vehicle = GetPlayerVehicleID(playerid);
		new Float:x, Float:y, Float:z;
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(IsPlayerConnected(playerid))
		{
			if(vehicle != 0)
			{
				SetPlayerHealth(playerid, 0);
				GetVehiclePos(vehicle, x, y, z);
				CreateExplosion(x, y, z, 7, 50);
				printf("[Terrorista] Usou Carro Bomba");
				format(string, sizeof(string), "Terrorista %s Usou Carro Bomba! ID[%d]", sendername, playerid);
			    ABroadCast(COLOR_YELLOW,string,1);
				pcbomba = 1;
			    Tempocbomba = SetTimer("cbomba", 20000, 0);
			}
			if(vehicle == 0)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você precisa estar em um carro");
			    return true;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar este comando!");
		}
  		return true;
 	}
	if(strcmp(cmd, "/explode", true) == 0 || strcmp(cmd, "/explodir", true) == 0 || strcmp(cmd, "/fogo", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp) && PlayerInfo[playerid][pAdmin] >= 3)
		{
			SendClientMessage(playerid, COLOR_GREY, "/explodir [id]");
			return true;
		} 
		if(PlayerInfo[playerid][pAdmin] >= 1341 && PlayerInfo[playerid][pAdmin] < DONO)
		{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode explodir um Admin Dono!");
				return true;
		}
		giveplayerid = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername)); 
		if(IsPlayerConnected(giveplayerid))
		{
			if(PlayerInfo[playerid][pAdmin] >= 3)
			if(PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
					format(string, sizeof(string), "AdmCmd: %s foi explodido por %s",giveplayer, PlayerName(playerid));
					ABroadCast(COLOR_LIGHTRED,string,1);
					//SendClientMessageToAll(COLOR_DBLUE, string);
					SetPlayerHealth(giveplayerid, 10);
					new Float:boomx, Float:boomy, Float:boomz;
					GetPlayerPos(giveplayerid,boomx, boomy, boomz);
					CreateExplosion(boomx, boomy , boomz, 7, 10);
					new PlayerName2[30];
					GetPlayerName(playerid, PlayerName2, 30);
					printf("[Admins] %s usou /explode em %s", PlayerName2, giveplayer);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Esse jogador não está online.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar este comando!");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GREY, "Você deve estar logado para usar o comando!");
		}
		return true;
	}
//Salvar Contas

	if(strcmp(cmd, "/trazer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazer [id]");
				return true;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo, world;
			plo = ReturnUser(tmp);
			world = GetPlayerVirtualWorld(playerid);
			if(PlayerInfo[plo][pJailed] != 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode trazer um Preso");
				return true;
			}
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pAdmin] >= 1)
					{
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
							return true;
						}
                        if(PlayerInfo[plo][pAdmin] >= DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode trazer um Admin Dono !");
							return true;
						}
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz); LinkVehicleToInterior(tmpcar, 0);
							SetVehicleVirtualWorld(tmpcar,world);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						SetPlayerVirtualWorld(plo,world);
						SendClientMessage(plo, 0x33FF00FF, "Você foi teleportado pelo Admin !");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um jogador ativo.");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/trazercarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazercarro [carro id]");
				return true;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo;
			plo = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(plo,plocx,plocy+4, plocz); LinkVehicleToInterior(plo, 0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/carroantigo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
          if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
		    	format(string, sizeof(string), "ID do último carro: %d",gLastCar[playerid]);
		    	SendClientMessage(playerid, COLOR_GREY, string);
		    	return true;
		    }
		    else
	        {
	            SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
	            return true;
	        }
	    }
	    return true;
	}
	if(strcmp(cmd, "/ac", true) == 0 || strcmp(cmd, "/abastecercarros", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
             if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				GetPlayerName(playerid, sendername, sizeof(sendername));
	            for(new c=0;c<CAR_AMOUNT;c++)
				{
					Gas[c] = GasMax;
				}
				if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				{
					SendClientMessageToAll(COLOR_LIGHTRED, "AdmCmd: BRNM Abasteceu Todos os Carros");
				}
				else
				{
					format(string, sizeof(string), "{FFFFFF}[{37E031}Atenção{FFFFFF}]Admin: {FFEA00}%s {FFFFFF}Abasteceu Todos os Veículos.",PlayerName(playerid));
					SendClientMessageToAll(COLOR_LIGHTRED, string);
				}
	        }
	        else
	        {
	           	SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
	            return true;
	        }
	    }
	    return true;
	}
//----------------------------------[Dar Arma]------------------------------------------------
	if(strcmp(cmd, "/dararma", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /dararma [id] [arma id(ex. 24 = Eagle)] [munição]");
				return true;
			}
			new playa;
			new gun;
			new ammo;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			gun = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /dararma [id] [arma id] [munição]");
				SendClientMessage(playerid, COLOR_GRAD4, "3(Cassetete) 4(Faca) 5(Taco de Baseball) 6(Pá) 7(Espada) 8(Katana) 10-13(Vibrador) 14(Flores) 16(Granadas) 17(Granada Gás) 18(Molotovs) 22(Pistola)");
				SendClientMessage(playerid, COLOR_GRAD3, "23(Pistola com Silenciador) 24(Eagle) 25(Escopeta) 29(MP5) 30(AK47) 31(M4) 33(Rifle) 34(Sniper) 37(Lança Chamas) 41(spray) 42(extintor) 43(Camera) 46(Paraquedas)");
				return true;
			}
			if(gun < 1 || gun > 46 || gun==38 || gun==37 || gun==44 || gun==45 || gun==9  || gun==26 || gun==28 || gun==32 || gun==18 || gun==35 || gun==36 || gun==37 || gun==38 || gun==39 || gun==40	|| gun==41 || gun==42)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   ID Proibido!"); return true; }
			tmp = strtok(cmdtext, idx);
			ammo = strval(tmp);
			if(ammo <1||ammo > 999)
			{ SendClientMessage(playerid, COLOR_GRAD1, "   O minimo de munição é 1 e o máximo é 999!"); return true; }
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						GivePlayerWeapon(playa, gun, ammo);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
//----------------------------------[Dar Vida]------------------------------------------------
	if(strcmp(cmd, "/darvida", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    { 
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darvida [id] [quantia]");
				return true;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						if(PlayerInfo[playa][pAdmin] >= SUB_DONO)
						{
							format(gstring, sizeof(gstring), "[BRNM]: Você tentou modificar a vida do Admin dono %s e morreu.", PlayerName(playa));
							format(gstring1, sizeof(gstring1), "[BRNM]: O Admin %s tentou modificar sua vida.", PlayerName(playerid));
							SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
							format(gstring, sizeof(gstring), "%s diz: Não tente mais fazer isso.", PlayerName(playa));
							SendClientMessage(playerid, -1, gstring);
							SendClientMessage(playa, COLOR_YELLOW, gstring1);
							SetPlayerHealth(playerid, 0.0);
						    return 1;
						}
						SetPlayerHealth(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
	
	if(strcmp(cmd, "/darkitVIP", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darkitvip [id]");
				return true;
			}
			new playa;
			//new Float:shealth;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1341)
			{
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			        if(PlayerInfo[playa][pVIP] == 0)
			        {
			        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ResetPlayerWeaponsEx(playa);
					GivePlayerWeapon(playa, 24, 2500);
	    	        GivePlayerWeapon(playa, 31, 2500);
		   	        GivePlayerWeapon(playa, 32, 2500);
	   	            GivePlayerWeapon(playa, 27, 2500);
		   	        GivePlayerWeapon(playa, 4, 1);
		   	        GivePlayerWeapon(playa, 1, 1);
		   	        GivePlayerWeapon(playa, 35, 3);
		   	        GivePlayerWeapon(playa, 34, 1000);
			        SetPlayerArmour(playa, 100);
			        SetPlayerHealth(playa, 100);
					format(string, sizeof(string), "	Você deu um Kit VIP para %s.",giveplayerid);
                    SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "	Você ganhou um kit VIP de %s",PlayerName(playerid));
                    SendClientMessage(playa, COLOR_GRAD1, string);
					}
					else if(PlayerInfo[playa][pVIP] == 1)
					{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					ResetPlayerWeaponsEx(playa);
					GivePlayerWeapon(playa, 24, 2500);
	    	        GivePlayerWeapon(playa, 31, 2500);
		   	        GivePlayerWeapon(playa, 32, 2500);
		   	        GivePlayerWeapon(playa, 27, 2500);
		   	        GivePlayerWeapon(playa, 4, 1);
		   	        GivePlayerWeapon(playa, 1, 1);
		   	        GivePlayerWeapon(playa, 35, 3);
		   	        GivePlayerWeapon(playa, 34, 1000);
			        SetPlayerArmour(playa, 100);
			        SetPlayerHealth(playa, 100);
					format(string, sizeof(string), "	Você deu um kit VIP PREMIUM para %s.",giveplayerid);
                    SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "	Você ganhou um kit VIP PREMIUM de %s",PlayerName(playerid));
                    SendClientMessage(playa, COLOR_GRAD1, string);
					}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/darcolete", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darcolete [id] [quantia]");
				return true;
			}
			new playa;
			new health;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			health = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
						SetPlayerArmour(playa, health);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
   if(strcmp(cmd, "/veh", true) == 0)
    {
		if(IsPlayerConnected(playerid))
     	{
 		if (PlayerInfo[playerid][pAdmin] >= DONO)
 		{
			if(CreatedCar >= 200)
    		{
    			SendClientMessage(playerid, COLOR_GRAD1, "Já criaram muitos carros, destrua alguns primeiro /destruirid");
    			return true;
    		}
  			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
   			{
    			SendClientMessage(playerid, COLOR_GRAD2, "USE: /veh [IDCARRO] [COR1] [COR2]");
    			return true;
   			}
   			new car;
   			car = strval(tmp);
   			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_GREY, "   Modelo Do Carro Tem Que Ser Entre 411 e 600 !"); return true; }
   			tmp = strtok(cmdtext, idx);
   			if(!strlen(tmp))
   			{
    			SendClientMessage(playerid, COLOR_GRAD2, "USE: /veh [IDCARRO] [COR1] [COR2]");
    			return true;
   			}
   			new COLOR1;
   			COLOR1 = strval(tmp);
   			if(COLOR1 < 0 || COLOR1 > 236) { SendClientMessage(playerid, COLOR_GREY, "   Número Da Cor tem que ser entre 0 e 126 !"); return true; }
   			tmp = strtok(cmdtext, idx);
   			if(!strlen(tmp))
   			{
    			SendClientMessage(playerid, COLOR_GRAD2, "USE: /veh [IDCARRO] [COR1] [COR2]");
    			return true;
   			}
   			new COLOR2;
   			COLOR2 = strval(tmp);
   			if(COLOR2 < 0 || COLOR2 > 236) { SendClientMessage(playerid, COLOR_GREY, "   Número Da Cor tem que ser entre 0 e 126 !"); return true; }
   			new Float:X,Float:Y,Float:Z;
   			GetPlayerPos(playerid, X,Y,Z);
   			new carid = CreateVehicle(car, X,Y,Z, 0.0, COLOR1, COLOR2, 60000);
   			CreatedCars[CreatedCar] = carid;
   			CreatedCar ++;
   			format(string, sizeof(string), "   Veiculo %d Criado.", carid);
   			SendClientMessage(playerid, COLOR_GREY, string);
		}
  		}
  		return true;
 	}

	if(strcmp(cmd, "/tempo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 2)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			    return true;
			}
   if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
			    SendClientMessage(playerid, COLOR_WHITE, "USE: /tempo [tempo id]");
			    return true;
			}
			new name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, name, sizeof(name));
			new weather;
			weather = strval(tmp);
			if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "   Tempo id de 0 ~ 45 !"); return true; }
			SetWeather(weather);
			format(string, 128, "AdmAviso: %s setou o tempo para %d",name,weather);
			ABroadCast(COLOR_YELLOW,string,1);
			SendClientMessage(playerid, COLOR_GREY, "Tempo setado!");
		}
		return true;
	}
//----------------------------------[GiveMoney]------------------------------------------------
	if(strcmp(cmd, "/dargrana", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /dargrana [id] [grana]");
				return true;
			}
			new para1;
			new money;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= DONO)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
                        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			            ConsumingMoney[para1] = 1;
						GivePlayerMoney(para1, money);
						format(string, sizeof(string), "Admin %s deu a grana para %s (R$%d)", PlayerName(playerid), PlayerName(para1), money);
                        SendClientMessage(playerid, COLOR_PURPLE, string);
					    format(string, sizeof(string), "Você recebeu R$%d do Admin %s",money, PlayerName(playerid));
                        SendClientMessage(para1, COLOR_GRAD1, string);
						format(gstring, 128, "%s usou /dargrana em %s e deu %d (%d/%d/%d)", PlayerName(playerid), PlayerName(para1), money, day, month, year);
						PayLog(gstring);
                   }

				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/setskin", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setskin [playerid] [skin id]");
				return true;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			level = strval(tmp);
			if(level > 299 || level < 1) { SendClientMessage(playerid, COLOR_GREY, "id desconhecido!"); return true; }
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 3)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pSkin] = level;
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
						    format(string, sizeof(string), "O admin Homem_Aranha mudou sua Skin para %d",level);
						}
						else
						{
							format(string, sizeof(string), "O admin %s mudou sua Skin para %d", sendername,level);
						}
						SendClientMessage(para1, COLOR_WHITE, string);
						format(string, sizeof(string), "Você mudou a skin do %s para %d.", giveplayer,level);
						SendClientMessage(playerid, COLOR_WHITE, string);
					    SetPlayerSkin(para1, PlayerInfo[para1][pSkin]);
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não tem permissão para usar esse comando!");
			}
		}
		return true;
	}

	//=========================================================================

	if (strcmp(cmd, "/cortarmadeira", true) == 0)
	{
	if (PlayerToPoint(2.0, playerid, 1450.0607,-1965.0198,29.8656))
	{
    if(OnCortado[playerid] == 1)
	{
	SendClientMessage(playerid, COLOR_GRAD1, "[BRNM]: Você já está pegando madeira ou já pegou madeiras, aguarde 5 minutos!");
	return true;
	}
    madeiracortada[playerid] = 1;
    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(string, sizeof(string), "Atenção %s Está cortando madeiras ilegais",playername);
    SendClientMessageToAll(COLOR_YELLOW, string);
    SendClientMessage(playerid, COLOR_GRAD1, "[BRNM]: Fique No local por 1 minuto para conseguir pegar o as madeiras!");
	//WantedLevel[playerid] += 1;
	SetPlayerCriminal(playerid,255,"Trafico de Madeiras ilegais");
	SetPlayerWantedLevel(playerid,1);
    OnCortado[playerid] = 1;
    new granarob = 200 + random(600);
	madeirao[playerid] = granarob;
    SetTimerEx("cortando",30000,0,"i",playerid);
   	}
	return true;
	}
    if (strcmp(cmd, "/vendermadeira", true) == 0)
	{
    if(madeiracortada[playerid] == 0)
	{
	SendClientMessage(playerid,COLOR_LIGHTRED,"Você não tem madeira para vender");
	return true;
    }
	if (PlayerToPoint(2.0, playerid, 2249.8088,-2257.7874,14.7647))
	{
	GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	format(string, sizeof(string), "Atenção %s Vendeu suas madeiras ilegais",playername);
    SendClientMessageToAll(COLOR_YELLOW, string);
	format(string, sizeof(string), "Você conseguiu ganhar R$%d pela venda de Madeiras !", madeirao[playerid]);
    SendClientMessage(playerid, 0xC0C0C0AA, string);
    madeiracortada[playerid] = 0;
    SetTimerEx("cortando2",120000,0,"i",playerid);
    GivePlayerMoneyEx(playerid, madeirao[playerid]);
   	}
	return true;
	}


//-----------------------------------[Slap]-----------------------------------------------
	if(strcmp(cmd, "/tapa", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /tapa [id]");
				return true;
			}
			new playa;
			//new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1)
			{
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
           			if(playa != INVALID_PLAYER_ID)
			        {
			        	if(PlayerInfo[playa][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode dar tapas em um Admin Dono !");
							return true;
						}
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						//GetPlayerHealth(playa, shealth);
						//SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+12);
						PlayerPlaySound(playa, 1130, slx, sly, slz+12);
						printf("AdmCmd: %s slapped %s",sendername,  giveplayer);
                        if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
                        {
							format(string, sizeof(string), "AdmCmd: %s ganhou um tapa de: Homem_Aranha",giveplayer);
						}
                        else
                        {
							format(string, sizeof(string), "AdmCmd: %s ganhou um tapa de: %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/tapao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /tapao [id]");
				return true;
			}
			new playa;
			//new Float:shealth;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1)
			{
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[playa][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode dar tapão em um Admin Dono !");
							return true;
						}
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						//GetPlayerHealth(playa, shealth);
						//SetPlayerHealth(playa, shealth-5);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+130);
						SetPlayerHealth(playerid, 100.0);
						PlayerPlaySound(playa, 1130, slx, sly, slz+130);
						printf("AdmCmd: %s slapped %s",sendername,  giveplayer);
      					if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
                        {
							format(string, sizeof(string), "AdmCmd: %s ganhou um tapao de: Homem_Aranha",giveplayer);
						}
                        else
                        {
							format(string, sizeof(string), "AdmCmd: %s ganhou um tapao de: %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/cascudo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /cascudo [id]");
				return true;
			}
			new playa;
			new Float:slx, Float:sly, Float:slz;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1)
			{
			    if(IsPlayerConnected(playa))
			    {
           			if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						SetPlayerHealth(playa, 200);
						GetPlayerPos(playa, slx, sly, slz);
						SetPlayerPos(playa, slx, sly, slz+15);
						GetPlayerVelocity(playa, slx, sly, slz);
						SetPlayerVelocity(playa, slx=0, sly=0, slz-0.5);
						PlayerPlaySound(playa,1130,0.0,0.0,0.0); 
						printf("AdmCmd: %s deu um cascudo em %s",sendername,  giveplayer);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s ganhou um cascudo dado por: %s",giveplayer ,PlayerName(playerid));
						}
     					else
     					{
							format(string, sizeof(string), "AdmCmd: %s ganhou um cascudo dado por: %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
    if(strcmp(cmd,"/matar",true)==0 || strcmp(cmd,"/kill",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /matar [id]");
				return true;
			}
			new playa;
			//new Float:shealth;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >=1)
			{
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			        	if(PlayerInfo[playa][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode matar um Admin Dono !");
							return true;
						}
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						//GetPlayerHealth(playa, shealth);
						//SetPlayerHealth(playa, shealth-5);
						SetPlayerHealth(playa, 0.0);
						SetPlayerVirtualWorld(playa,0);
						printf("AdmCmd: %s matou %s",sendername,  giveplayer);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
                        {
							format(string, sizeof(string), "AdmCmd: %s ganhou uma morte de: Homem_Aranha",giveplayer);
						}
                        else
                        {
							format(string, sizeof(string), "AdmCmd: %s ganhou uma morte de: %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd,"/retirararmas",true)==0 || strcmp(cmd,"/rarmas",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /retirararmas [id]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						ResetPlayerWeaponsEx(playa);
						printf("AdmCmd: %s retirou as armas de %s",sendername,  giveplayer);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s teve as armas retiradas por: Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "AdmCmd: %s teve as armas retiradas por: %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/calar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /calar [id]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
				        if(PlayerInfo[playa][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode calar um Admin Dono !");
							return true;
						}
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						if(PlayerInfo[playa][pMuted] == 0)
						{
							PlayerInfo[playa][pMuted] = 1;
							printf("AdmCmd: %s silenced %s",sendername,  giveplayer);
							if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
							{
								format(string, sizeof(string), "AdmCmd: %s foi calado por Homem_Aranha",giveplayer);
							}
							else
							{
								format(string, sizeof(string), "AdmCmd: %s foi calado por %s",giveplayer ,PlayerName(playerid));
							}
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
						else
						{
							PlayerInfo[playa][pMuted] = 0;
							printf("AdmCmd: %s unsilenced %s",sendername,  giveplayer);
							if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
							{
								format(string, sizeof(string), "AdmCmd: %s foi descalado por Homem_Aranha",giveplayer);
							}
							else
							{
								format(string, sizeof(string), "AdmCmd: %s foi descalado por %s",giveplayer ,PlayerName(playerid));
							}
							ABroadCast(COLOR_LIGHTRED,string,1);
						}
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}
// infoarmas , infoplayer , infoxiter
	if(strcmp(cmd, "/infoarmas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /infoarmas [id do player]");
				return true;
			}
			if(PlayerInfo[playerid][pAdmin] < 1 )
			{
			  	SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar esse comando!");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    new weapons[13][2];
				    new playerck[MAX_PLAYER_NAME];
				    GetPlayerName(giveplayerid, playerck, sizeof(playerck));
   					format(string, sizeof(string), "EXIBINDO AS INFORMAÇÕES DAS ARMAS DE: %s",playerck);
   					SendClientMessage(playerid, TEAM_BALLAS_COLOR, string);
                    GetPlayerWeaponData(giveplayerid, 2, weapons[2][0], weapons[2][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[2][0]], weapons[2][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
				    GetPlayerWeaponData(giveplayerid, 3, weapons[3][0], weapons[3][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[3][0]], weapons[3][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
				    GetPlayerWeaponData(giveplayerid, 4, weapons[4][0], weapons[4][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[4][0]], weapons[4][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 5, weapons[5][0], weapons[5][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[5][0]], weapons[5][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 6, weapons[6][0], weapons[6][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[6][0]], weapons[6][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 7, weapons[7][0], weapons[7][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[7][0]], weapons[7][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 8, weapons[8][0], weapons[8][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[8][0]], weapons[8][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 9, weapons[9][0], weapons[9][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[9][0]], weapons[9][1]);
   					SendClientMessage(playerid, COLOR_WHITE, string);
   					GetPlayerWeaponData(giveplayerid, 11, weapons[11][0], weapons[11][1]);
				    format(string, sizeof(string), "Arma: %s,                Munição: %d",aNames[weapons[11][0]], weapons[11][1]);
  					SendClientMessage(playerid, COLOR_WHITE, string);
		    	}
			}
        	else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Este jogador está off-line !");
	            return true;
	        }
		}
	    return true;
	}
//---------------------------------------------------------------------------------------
	if(strcmp(cmd, "/infoplayer", true) == 0)
	{
	 	new armatext[30];
	    new municao;
	    new arma;
	    new Float:plrtempheal;
	    new Float:plrarmour;
	    new plrping;
	    new iplayer[MAX_PLAYER_NAME];
	    new plrIP[16];
	    new smunicao;
		if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /infoplayer [id do player]");
				return true;
			}
			if(PlayerInfo[playerid][pAdmin] < 1)
			{
			  	SendClientMessage(playerid, COLOR_GREY, "Você não está autorizado a usar esse comando!");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    GetPlayerIp(giveplayerid, plrIP, sizeof(plrIP));
   					GetPlayerName(giveplayerid, iplayer, sizeof(iplayer));
					plrping = GetPlayerPing(giveplayerid);
			    	GetPlayerArmour(giveplayerid, plrarmour);
					GetPlayerHealth(playerid,plrtempheal);
					arma = GetPlayerWeapon(giveplayerid);
					municao = GetPlayerAmmo(giveplayerid);
					SendClientMessage(playerid, COLOR_GREEN, "|__________________[ EXIBINDO INFORMAÇÕES ]__________________|");
					format(string, sizeof(string), "Nome: %s", iplayer);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "IP: %s", plrIP);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "Ping: %d", plrping);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "Colete: %1f", plrarmour);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "Saúde: %1f", plrtempheal);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					if(arma == 38) { armatext = "Minigun"; }
					else if(arma == 40) { armatext = "Detonador"; }
					else if(arma == 36) { armatext = "Lança missil RPG"; }
					else if(arma == 35) { armatext = "Lança missil"; }
					else if(arma == 16) { armatext = "Granada"; }
					else if(arma == 18) { armatext = "Coctel Molotov"; }
					else if(arma == 22) { armatext = "Pistola de Duas mãos 9mm"; }
					else if(arma == 26) { armatext = "Escopeta de Cano Serrado"; }
					else if(arma == 27) { armatext = "Escopeta de Combate"; }
					else if(arma == 28) { armatext = "Micro Uzi"; }
					else if(arma == 32) { armatext = "Tec9"; }
					else if(arma == 37) { armatext = "Lança Chamas"; }
					else if(arma == 0) { armatext = "Desarmado"; }
                    else if(arma == 4) { armatext = "Faca"; }
                    else if(arma == 5) { armatext = "Bastão de Base Ball"; }
                    else if(arma == 9) { armatext = "Motoserra"; }
                    else if(arma == 14) { armatext = "Flores"; }
                    else if(arma == 17) { armatext = "Granada de Gas"; }
                    else if(arma == 23) { armatext = "Pistola com silênciador"; }
                    else if(arma == 16) { armatext = "Granada"; }
                    else if(arma == 24) { armatext = "Desert Eagle"; }
                    else if(arma == 25) { armatext = "ShotGun"; }
                    else if(arma == 29) { armatext = "MP5"; }
                    else if(arma == 30) { armatext = "AK-47"; }
                    else if(arma == 31) { armatext = "M4"; }
                    else if(arma == 33) { armatext = "Rifle"; }
                    else if(arma == 34) { armatext = "Rifle Sniper"; }
                    else if(arma == 41) { armatext = "Spray"; }
                    else if(arma == 42) { armatext = "Extintor"; }
                    else if(arma == 46) { armatext = "Paraquedas"; }
                    else { armatext = "Desconhecido"; }
                    format(string, sizeof(string), "Arma: %s", armatext);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					if(arma == 40 || arma == 36 || arma == 16 || arma == 18 || arma == 26 || arma == 28 || arma == 37)
					{
					    SendClientMessage(playerid, COLOR_LIGHTRED, "/tv nele, pois ele pode estar usando xiter de armas");
					}
					if(municao == 65535) { smunicao = 0; } else { smunicao = municao; }
					format(string, sizeof(string), "Munição: %d", smunicao);
					SendClientMessage(playerid, COLOR_GRAD1, string);
 				 }
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Este jogador está off-line !");
	            return true;
	        }
		}
	    return true;
	}
//---------------Guinchar----------------------------------
	if(strcmp(cmd,"/guinchar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
		{
		    if(IsAMec(playerid) || IsACop(playerid) || IsADetran(playerid))
		    {
		        if(IsPlayerInAnyVehicle(playerid))
		        {
			    	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == 525)
		     	   	{
		     	   	    if(GetPlayerState(playerid)==2)
		     	   	    {
							new Float:pX,Float:pY,Float:pZ;
							GetPlayerPos(playerid,pX,pY,pZ);
							new Float:vX,Float:vY,Float:vZ;
							new Found=0;
							new vid=0;
							while((vid<MAX_VEHICLES)&&(!Found))
							{
			   					vid++;
			   					GetVehiclePos(vid,vX,vY,vZ);
			   					if ((floatabs(pX-vX)<7.0)&&(floatabs(pY-vY)<7.0)&&(floatabs(pZ-vZ)<7.0)&&(vid!=GetPlayerVehicleID(playerid)))
								{
			   				    	if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			           				{
			   				        	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
						           	}
						           	else
						           	{
					                   AttachTrailerToVehicle(vid,GetPlayerVehicleID(playerid));
									}
			 					}
			     			}
							if(!Found)
				 			{
			   					SendClientMessage(playerid,COLOR_GREY,"Não tem nenhum carro perto.");
			   				}
						}
						else
						{
							SendClientMessage(playerid, COLOR_GRAD2, "Você precisa estar dirigindo !");
							return true;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD2, "Você não tem um Guincho !");
						return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "Você não está em um guincho !");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid,COLOR_GRAD2,"Você não é mecanico ou um Policial !");
				return true;
			}
		}
		return true;
	}
    //---------------- Sincronizar ----------------------------
	if(strcmp(cmd, "/sinc", true) == 0 || strcmp(cmd, "/sincronizar", true) == 0)
	{
		if(GetPlayerState(playerid) == 9|| GetPlayerState(playerid) == 5 || GetPlayerState(playerid) == 6 ||GetPlayerState(playerid) == 4|| GetPlayerState(playerid) == 0 || sincronizando[playerid] == 1 || PlayerInfo[playerid][pJailed] != 0 || PlayerInfo[playerid][pMuted] == 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW," Você não pode sincronizar agora!");
			return true;
		}
		if(PlayerToPoint(3.0,playerid,2144.3711,1641.4792,993.5761) || PlayerToPoint(3.0,playerid,303.9886,-169.0725,999.5938) || PlayerToPoint(3.0,playerid,294.8029,-57.8727,1001.5156) || PlayerToPoint(3.0,playerid,162.1254,-79.7925,1001.8047) ||
		PlayerToPoint(3.0,playerid,211.3817,-96.1272,1005.2578) || PlayerToPoint(3.0,playerid,820.8934,8.5365,1004.1958) || PlayerToPoint(3.0,playerid,205.4959,-11.5585,1005.2109) || PlayerToPoint(1.0,playerid,1172.9993,-1323.3311,15.3978))
		{
			SendClientMessage(playerid,COLOR_YELLOW," Você não pode sincronizar agora!");
			return true;
		}
		if(psinc == 1)
  		{
	        SendClientMessage(playerid,COLOR_GRAD2,"Já sincronizaram,tente daqui a pouco!");
	        return true;
	    }
	 	sincronizando[playerid] = 1;
	 	virt[playerid] = GetPlayerVirtualWorld(playerid);
		interior[playerid] = GetPlayerInterior(playerid);
		skinneg[playerid] = GetPlayerSkin(playerid);
		GetPlayerArmour(playerid,APP[playerid]);
		GetPlayerHealth(playerid,PlayerHPP[playerid]);
		GetPlayerFacingAngle(playerid,FaceAngle[playerid]);
		GetPlayerPos(playerid,xx[playerid],yy[playerid],zz[playerid]);
		GetPlayerWeaponData(playerid,1,gunsinc[1][playerid],ammoo[1][playerid]);
		GetPlayerWeaponData(playerid,2,gunsinc[2][playerid],ammoo[2][playerid]);
		GetPlayerWeaponData(playerid,3,gunsinc[3][playerid],ammoo[3][playerid]);
		GetPlayerWeaponData(playerid,4,gunsinc[4][playerid],ammoo[4][playerid]);
		GetPlayerWeaponData(playerid,5,gunsinc[5][playerid],ammoo[5][playerid]);
		GetPlayerWeaponData(playerid,6,gunsinc[6][playerid],ammoo[6][playerid]);
		GetPlayerWeaponData(playerid,7,gunsinc[7][playerid],ammoo[7][playerid]);
		GetPlayerWeaponData(playerid,8,gunsinc[8][playerid],ammoo[8][playerid]);
		GetPlayerWeaponData(playerid,9,gunsinc[9][playerid],ammoo[9][playerid]);
		GetPlayerWeaponData(playerid,10,gunsinc[10][playerid],ammoo[10][playerid]);
		GetPlayerWeaponData(playerid,11,gunsinc[11][playerid],ammoo[11][playerid]);
		GetPlayerWeaponData(playerid,12,gunsinc[12][playerid],ammoo[12][playerid]);
		psinc = 1;
		TempoSincronizar = SetTimer("Sinc", 8000, 0);
		if(IsPlayerInAnyVehicle(playerid))
		{
			vehicledd[playerid] = 1;
			VehicleIDD[playerid] = GetPlayerVehicleID(playerid);
		}
//	SyncPlayer(playerid);
		MedicBill[playerid] = 0;
		SpawnPlayer(playerid);
		TempoSinc = SetTimerEx("Sincronizar", 500, 0, "i", playerid);
		return true;
	}
	/*if (strcmp(cmd, "/territorios", true) == 0)
	{
	    Controle(playerid, 0);
	    ShowPlayerDialog(playerid,2570,DIALOG_STYLE_LIST,"Territorios","Favela(Gang)\nPista de Skate(Gang)\nEstacao Unity(Mafia)\nCasarao(Mafia)","Ok","Cancelar");
	    EmDialog[playerid] = 1;
		return true;
	}*/
if(strcmp(cmd, "/aestacionar", true) == 0)
	{
	if(PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != 1341)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return 1;
				}
		if(IsPlayerConnected(playerid))
 		{
			new Float:x,Float:y,Float:z;
			new Float:a;
			new carid;
			carid = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, playername, sizeof(playername));
			GetVehiclePos(carid, x, y, z);
			GetVehicleZAngle(carid, a);
			if(IsPlayerInAnyVehicle(playerid))
            {
				CarInfo[carid][cLocationx] = x;
				CarInfo[carid][cLocationy] = y;
				CarInfo[carid][cLocationz] = z;
				CarInfo[carid][cAngle] = a;
				format(string, sizeof(string), "~n~ Voce estacionou o carro neste local. ~n~");
				GameTextForPlayer(playerid, "Voce estacionou o carro nessa posicao. Ele vai reaparecer aqui.", 10000, 3);
                OnPropUpdate2(); SavePlayerData(playerid);
	    		DestroyVehicle(carid);
	    		new thiscar = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],60000);
	    		LoadComponents(thiscar);
                return 1;
			}
			else SendClientMessage(playerid, COLOR_GREY, "   Você não está autorizado a usar esse comando. !");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não está em um veículo!");
			    return true;
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/acriarcarro", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1341)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return 1;
				}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /acriarcarro [carid] [cor1] [cor2] [preço]");
				return 1;
			}
			new car;
			car = strval(tmp);
			if(car < 400 || car > 611) { SendClientMessage(playerid, COLOR_WHITE, " Número do veículo não pode ser inferior a 400 ou superior a 611 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /acriarcarro [carid] [cor1] [cor2] [preço]");
				return 1;
			}
			new color1;
			color1 = strval(tmp);
			if(color1 < 0 || color1 > 126) { SendClientMessage(playerid, COLOR_WHITE, " Número de cores não pode ser inferior a 0 ou acima de 126 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /acriarcarro [carid] [cor1] [cor2] [preço]");
				return 1;
			}
			new color2;
			color2 = strval(tmp);
			if(color2 < 0 || color2 > 126) { SendClientMessage(playerid, COLOR_WHITE, " Número de cores não pode ser inferior a 0 ou acima de 126 !"); return 1; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /acriarcarro [carid] [cor1] [cor2] [preço]");
				return 1;
			}
			new value;
			value = strval(tmp);
			new Float:X,Float:Y,Float:Z; GetPlayerPos(playerid, X,Y,Z);
            new thiscar = CreateVehicle(car,X,Y,Z,1,color1,color2,99999999);
            format(CarInfo[thiscar][cLicense], 32 ,"ÁVenda");
	        SetVehicleNumberPlate(vehid,CarInfo[thiscar][cLicense]);
			CarInfo[thiscar][cOwned] = 0; CarInfo[thiscar][cModel] = car; CarInfo[thiscar][cColorOne] = color1; CarInfo[thiscar][cColorTwo] = color2;
			CarInfo[thiscar][cLocationx] = X; CarInfo[thiscar][cLocationy] = Y; CarInfo[thiscar][cLocationz] = Z; CarInfo[thiscar][cAngle] = 1;
			CarInfo[thiscar][cValue] = value; CarInfo[thiscar][cLock] = 0; CarInfo[thiscar][paintjob] = -1; LoadComponents(thiscar);
			PutPlayerInVehicle(playerid,thiscar,0);
			strmid(CarInfo[thiscar][cOwner], "Dealership", 0, strlen("Dealership"), 999);
			format(CarInfo[thiscar][cDescription], 32, "%s",vehName[GetVehicleModel(GetPlayerVehicleID(playerid))-400]);
			format(string, sizeof(string), " Carro %d foi criado com sucesso!.", thiscar);
			SendClientMessage(playerid, COLOR_BLUE, string);
			OnPropUpdate2();
            LoadComponents(thiscar);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, " Você não está autorizado a usar esse comando!");
			return 1;
		}
	}
	if(strcmp(cmd, "/adestruircarro", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1341)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return 1;
				}
            CarInfo[idcar][cOwned] = 0; CarInfo[idcar][cModel] = 0; CarInfo[idcar][cColorOne] = 0; CarInfo[idcar][cColorTwo] = 0;
			CarInfo[idcar][cLocationx] = 0; CarInfo[idcar][cLocationy] = 0; CarInfo[idcar][cLocationz] = 0; CarInfo[idcar][cAngle] = 0;
			CarInfo[idcar][cValue] = 0; CarInfo[idcar][cLock] = 0; CarInfo[idcar][paintjob] = -1; LoadComponents(idcar);
			strmid(CarInfo[idcar][cOwner], "Dealership", 0, strlen("Dealership"), 999);
			format(CarInfo[idcar][cDescription], 32, "0");
			DestroyVehicle(idcar);
			OnPropUpdate2(); SavePlayerData(playerid);
	    }
	}
 if(strcmp(cmd, "/v", true) == 0 || strcmp(cmd, "/veiculo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[64];
	        x_nr = strtok(cmdtext, idx);
	        if(!strlen(x_nr))
	        {
	            SendClientMessage(playerid, COLOR_WHITE, "DICA: (/v)eiculo [nome]");
	            SendClientMessage(playerid, COLOR_WHITE, "Nomes disponíveis: estacionar, trancar(1-4), vender, venderpara, cor, setplaca, localizar(1-4) /removertuning /meuscarros");
	            return 1;
	        }
	        if(strcmp(x_nr,"vender",true) == 0)
	        {
	        if(!PlayerToPoint(15.0,playerid,1639.9688,-1085.7878,23.9063) && !PlayerToPoint(15.0, playerid, 1627.9520,-1119.9115,23.9063) && !PlayerToPoint(15.0, playerid, 1646.4259,-1119.1290,23.9063) && !PlayerToPoint(15.0, playerid, 547.2025,-1280.1598,17.2482) && !PlayerToPoint(15.0, playerid, 1816.8383,-1402.4834,13.4256) &&/*Conce Aeroportp -> */ !PlayerToPoint(15.0, playerid, 1922.3459,-2543.4285,13.5469) && !PlayerToPoint(15.0, playerid, 1977.9768,-2543.2781,13.5469) /*Fim Conce aeroporto*/)
			    {
				    SendClientMessage(playerid, COLOR_GREY, "Você não está na Concessionária.");
					return true;
				}
	                if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4])
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                    new ownvehkey;
	                    if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { ownvehkey = PlayerInfo[playerid][pPcarkey]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { ownvehkey = PlayerInfo[playerid][pPcarkey2]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { ownvehkey = PlayerInfo[playerid][pPcarkey3]; }
	                    else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { ownvehkey = PlayerInfo[playerid][pPcarkey4]; }
	                    else { return 1; }
	                    if(strcmp(sendername, CarInfo[ownvehkey][cOwner], true) == 0)
	                    {
	                        new carsellprice = CarInfo[ownvehkey][cValue] / 4 * 3;
	                        new Float:x,Float:y,Float:z;
	                        new Float:a;
	                        new vehicle;
		                    vehicle = GetPlayerVehicleID(playerid);
	                        CarInfo[ownvehkey][cOwned] = 0;
	                        strmid(CarInfo[ownvehkey][cOwner], "Dealership", 0, strlen("Dealership"), 999);
	                        GivePlayerMoney(playerid,carsellprice);
	                        PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	                        format(string, sizeof(string), "~w~Voce vendeu seu carro para~n~concessionaria por:~n~~g~$%d", carsellprice);
	                        GameTextForPlayer(playerid, string, 10000, 3);
	                        GetVehiclePos(ownvehkey, x, y, z);
	                        GetVehicleZAngle(ownvehkey, a);
	                        CarInfo[ownvehkey][cLocationx] = x; CarInfo[ownvehkey][cLocationy] = y; CarInfo[ownvehkey][cLocationz] = z; CarInfo[ownvehkey][cAngle] = a;
	                        CarInfo[ownvehkey][mod1] = 0; CarInfo[ownvehkey][mod2] = 0; CarInfo[ownvehkey][mod3] = 0; CarInfo[ownvehkey][mod4] = 0;
	                        CarInfo[ownvehkey][mod5] = 0; CarInfo[ownvehkey][mod6] = 0; CarInfo[ownvehkey][mod7] = 0; CarInfo[ownvehkey][mod8] = 0;
	                        CarInfo[ownvehkey][mod9] = 0; CarInfo[ownvehkey][mod10] = 0; CarInfo[ownvehkey][mod11] = 0; CarInfo[ownvehkey][mod12] = 0;
							CarInfo[ownvehkey][mod13] = 0; CarInfo[ownvehkey][mod14] = 0; CarInfo[ownvehkey][mod15] = 0; CarInfo[ownvehkey][mod16] = 0;
	                        CarInfo[ownvehkey][mod17] = 0; CarInfo[ownvehkey][paintjob] = -1;
	                        CarInfo[ownvehkey][VeiculoAprendido] = 0;
	                        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { PlayerInfo[playerid][pPcarkey] = -1; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { PlayerInfo[playerid][pPcarkey2] = -1; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { PlayerInfo[playerid][pPcarkey3] = -1; }
	                        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { PlayerInfo[playerid][pPcarkey4] = -1; }
	                        RemovePlayerFromVehicle(playerid); 
							TaCongelado[playerid] = false;
	                        TogglePlayerControllable(playerid, 1);
	                        format(CarInfo[vehid][cLicense], 32 ,"ÀVenda");
	                        SetVehicleNumberPlate(vehid,CarInfo[vehid][cLicense]);
	                        OnPropUpdate2(); SavePlayerData(playerid);
	                        DestroyVehicle(ownvehkey);
							new thiscar = CreateVehicle(CarInfo[ownvehkey][cModel],CarInfo[ownvehkey][cLocationx],CarInfo[ownvehkey][cLocationy],CarInfo[ownvehkey][cLocationz]+1.0,CarInfo[ownvehkey][cAngle],CarInfo[ownvehkey][cColorOne],CarInfo[ownvehkey][cColorTwo],60000);
							LoadComponents(thiscar);
	                        if(SomInstalado[GetPlayerVehicleID(playerid)] == true)
						    {
						        if(SomVeiculoTipo[GetPlayerVehicleID(playerid)] == 1)
						        {
					    			DestroyObject(SomVeiculoObjeto[0][GetPlayerVehicleID(playerid)]);
				    				SomPos[0][GetPlayerVehicleID(playerid)][0] = 0;
									SomPos[0][GetPlayerVehicleID(playerid)][1] = 0;
									SomPos[0][GetPlayerVehicleID(playerid)][2] = 0;
									SomPos[0][GetPlayerVehicleID(playerid)][3] = 0;
									SomPos[0][GetPlayerVehicleID(playerid)][4] = 0;
									SomPos[0][GetPlayerVehicleID(playerid)][5] = 0;
			   					}
			            		else
								{
						    		for(new i; i < 3;i++)
									{
						        		DestroyObject(SomVeiculoObjeto[i][GetPlayerVehicleID(playerid)]);
					    				SomPos[i][GetPlayerVehicleID(playerid)][0] = 0;
										SomPos[i][GetPlayerVehicleID(playerid)][1] = 0;
										SomPos[i][GetPlayerVehicleID(playerid)][2] = 0;
										SomPos[i][GetPlayerVehicleID(playerid)][3] = 0;
										SomPos[i][GetPlayerVehicleID(playerid)][4] = 0;
										SomPos[i][GetPlayerVehicleID(playerid)][5] = 0;
									}
								}
	   				      	}
                            SomInstalado[GetPlayerVehicleID(playerid)] = false;
							format(string, sizeof(string), "%s vendeu um carro de ID [%d] Modelo (%s) na conce por R$%d (%d/%d/%d - %d:%d)",sendername,vehicle,CarInfo[vehicle][cDescription],carsellprice,day, month, year,hour, minute);
					        ConceLog(string);
	                        return 1;
	                    }
	                }
	                else
	                {
	                    SendClientMessage(playerid, COLOR_GREY, "  Você tem que estar em seu próprio carro para vendê-lo! ");
	                    return 1;
	                }
	            }
	        else if(strcmp(x_nr,"comprar",true) == 0)
	        {
	        if(PlayerInfo[playerid][pLevel] < 3)
				{
				SendClientMessage(playerid, COLOR_GREY, "Você Precisa Ser Nível 3 Para Adquirir um Veiculo !");
				RemovePlayerFromVehicleEx(playerid);
				return true;
				}
				if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pVIP] == 0)
						{
							SendClientMessage(playerid, COLOR_GREY, "Apenas Jogadores Vip Premium Podem Adquirir 4 Carros !");
							RemovePlayerFromVehicleEx(playerid);
							return true;
						}
						if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pPcarkey2] != -1 && PlayerInfo[playerid][pPcarkey3] != -1 && PlayerInfo[playerid][pPcarkey4] != -1 && PlayerInfo[playerid][pVIP] == 1)
						{
							SendClientMessage(playerid, COLOR_GREY, "Seu Vip Premium permite que você tenha no máximo 4 carros !");
							RemovePlayerFromVehicleEx(playerid);
							return true;
						}
	            if(IsAnOwnableCar(idcar))
	            {
			    	if(PlayerInfo[playerid][pPcarkey] == -1) { }
			    	else if(PlayerInfo[playerid][pPcarkey2] == -1) { }
			    	else if(PlayerInfo[playerid][pPcarkey3] == -1) { }
			    	else if(PlayerInfo[playerid][pPcarkey4] == -1) { }
			    	else { SendClientMessage(playerid, COLOR_GREY, "   Você já possui 4 carros!!!"); return 1; }
					if(CarInfo[idcar][cOwned]==1)
					{
				    	SendClientMessage(playerid, COLOR_GREY, "Alguém já possui esse carro");
				    	return 1;
					}
					if(GetPlayerMoney(playerid) >= CarInfo[idcar][cValue])
					{
					    if(PlayerInfo[playerid][pPcarkey] == -1) { PlayerInfo[playerid][pPcarkey] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey2] == -1) { PlayerInfo[playerid][pPcarkey2] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey3] == -1) { PlayerInfo[playerid][pPcarkey3] = idcar; }
					    else if(PlayerInfo[playerid][pPcarkey4] == -1) { PlayerInfo[playerid][pPcarkey4] = idcar; }
					    else { return 1; }
                        new mot, lu, alar, por, cap, porma, ob;
                        new carro = GetPlayerVehicleID(playerid);
                        new vehicle;
		                vehicle = GetPlayerVehicleID(playerid);
						CarInfo[idcar][cOwned] = 1;
						GetPlayerName(playerid, sendername, sizeof(sendername));
						strmid(CarInfo[idcar][cOwner], sendername, 0, strlen(sendername), 999);
						GivePlayerMoney(playerid,-CarInfo[idcar][cValue]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						GameTextForPlayer(playerid, "~w~Parabens~n~Nao se esqueca do /v estacionar!", 5000, 3);
				        //SendClientMessage(playerid, COLOR_GRAD2, "Parabéns você comprou um carro novo!");
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "[Concessionária] Parabéns você comprou um veiculo novo, não se esqueça de estaciona-lo /v estacionar");
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Caso você deixe seu veículo na concessionária ele será levado para o deposito admin.");
						TaCongelado[playerid] = false;
				        TogglePlayerControllable(playerid, 1);
				        format(CarInfo[vehid][cLicense], 32 ,"VENDIDO");
	                    SetVehicleNumberPlate(vehid,CarInfo[vehid][cLicense]);
						OnPropUpdate2(); SavePlayerData(playerid);
						GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
                        SetVehicleParamsEx(carro, VEHICLE_PARAMS_ON, lu, alar, por, cap, porma, ob);
                        motor[playerid] = 1;
						SBizzInfo[24][sbTill] += 20000;
		                ExtortionSBiz(24, 20000);
		                format(string, sizeof(string), "%s comprou um carro de ID [%d] Modelo: (%s) na conce (%d/%d/%d - %d:%d)",sendername,vehicle,CarInfo[vehicle][cDescription],day, month, year,hour, minute);
	                    ConceLog(string);
						return 1;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "  Você não tem dinheiro suficiente ! ");
					    return 1;
					}
	            }
	        }
	        else if(strcmp(x_nr,"venderpara",true) == 0)
	        {
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3] || GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4])
				{
				    GetPlayerName(playerid, sendername, sizeof(sendername));
				    new ownvehkey;
	                if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { ownvehkey = PlayerInfo[playerid][pPcarkey]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { ownvehkey = PlayerInfo[playerid][pPcarkey2]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { ownvehkey = PlayerInfo[playerid][pPcarkey3]; }
	                else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { ownvehkey = PlayerInfo[playerid][pPcarkey4]; }
        			else { return 1; }
				    if(strcmp(sendername, CarInfo[ownvehkey][cOwner], true) == 0)
				    {
						tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
						    SendClientMessage(playerid, COLOR_WHITE, "DICA: /v venderpara [playerid/ParteDoNome] [preço]");
						    return 1;
						}
						giveplayerid = ReturnUser(tmp);
						if(IsPlayerConnected(giveplayerid))
						{
							if(giveplayerid != INVALID_PLAYER_ID)
							{
							    if(ProxDetectorS(8.0, playerid, giveplayerid))
                                {
							    	if(PlayerInfo[giveplayerid][pPcarkey] == -1)
							    	{
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "DICA: /v venderpara [ID/Nick] [preço]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  Preço não inferior à 1 e superior à 1500000. ");
							                return 1;
							            }
							            new vehicle;
		                                vehicle = GetPlayerVehicleID(playerid);
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Você Ofereceu a %s para comprar o seu carro por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* O dono do carro %s ofereceu para comprar o seu carro por $%d (use /aceitarcarro oferecido) para comprar.", PlayerName(playerid), price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			format(string, sizeof(string), "%s vendeu um carro de ID [%d] Modelo: (%s) para %s por R$%d (%d/%d/%d - %d:%d)",sendername,vehicle,CarInfo[vehicle][cDescription],giveplayer,price,day, month, year,hour, minute);
					                    ConceLog(string);
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey2] == -1)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "DICA: /v venderpara [ID/Nick] [preco]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  Preço não inferior à 1 e superior à 1500000. ");
							                return 1;
							            }
							            new vehicle;
		                                vehicle = GetPlayerVehicleID(playerid);
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Você Ofereceu a %s para comprar o seu carro por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* O dono do carro %s ofereceu para comprar o seu carro por $%d (use /aceitarcarro oferecido) para comprar.", PlayerName(playerid), price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			format(string, sizeof(string), "%s vendeu um carro de ID [%d] Modelo: (%s) para %s por R$%d (%d/%d/%d - %d:%d)",sendername,vehicle,CarInfo[vehicle][cDescription],giveplayer,price,day, month, year,hour, minute);
					                    ConceLog(string);
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey3] == -1)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "DICA: /v venderpara [ID/Nick] [preco]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  Preço não inferior à 1 e superior à 1500000. ");
							                return 1;
							            }
							            new vehicle;
		                                vehicle = GetPlayerVehicleID(playerid);
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Você Ofereceu a %s para comprar o seu carro por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* O dono do carro %s ofereceu para comprar o seu carro por $%d (use /aceitarcarro oferecido) para comprar.", PlayerName(playerid), price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			format(string, sizeof(string), "%s vendeu um carro de ID [%d] Modelo: (%s) para %s por R$%d (%d/%d/%d - %d:%d)",sendername,vehicle,CarInfo[vehicle][cDescription],giveplayer,price,day, month, year,hour, minute);
					                    ConceLog(string);
					        			return 1;
							        }
							        else if(PlayerInfo[giveplayerid][pPcarkey4] == -1)
							        {
							            tmp = strtok(cmdtext, idx);
							            if(!strlen(tmp))
							            {
							                SendClientMessage(playerid, COLOR_WHITE, "DICA: /v venderpara [ID/Nick] [preco]");
							                return 1;
							            }
							            new price;
							            price = strval(tmp);
							            if(price < 1 || price > 1500000)
							            {
							                SendClientMessage(playerid, COLOR_GREY, "  Preço não inferior à 1 e superior à 1500000. ");
							                return 1;
							            }
							            new vehicle;
		                                vehicle = GetPlayerVehicleID(playerid);
							            GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							       		format(string, sizeof(string), "* Você Ofereceu a %s para comprar o seu carro por $%d .", giveplayer, price);
					        			SendClientMessage(playerid, COLOR_WHITE, string);
					        			format(string, sizeof(string), "* O dono do carro %s ofereceu para comprar o seu carro por $%d (use /aceitarcarro oferecido) para comprar.", PlayerName(playerid), price);
					        			SendClientMessage(giveplayerid, COLOR_WHITE, string);
					        			OwnableCarOffer[giveplayerid] = playerid;
					        			OwnableCarID[giveplayerid] = ownvehkey;
					        			OwnableCarPrice[giveplayerid] = price;
					        			format(string, sizeof(string), "%s vendeu um carro de ID [%d] Modelo: (%s) para %s por R$%d (%d/%d/%d - %d:%d)",sendername,vehicle,CarInfo[vehicle][cDescription],giveplayer,price,day, month, year,hour, minute);
					                    ConceLog(string);
					        			return 1;
							        }
							        else
							        {
							            SendClientMessage(playerid, COLOR_GREY, "   O jogador já tem 4 carros ! ");
							            return 1;
							        }
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Jogador não está perto de você ! ");
							        return 1;
							    }
							}
						}
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "  Este não é o seu carro.");
				        return 1;
				    }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "  Você tem que estar em seu próprio carro para vendê-lo");
				    return 1;
				}
	        }
	        else if(strcmp(x_nr,"estacionar",true) == 0)
	        {
	            new Float:x,Float:y,Float:z;
				new Float:a;
				new carid;
				new getcarid;
				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { carid = PlayerInfo[playerid][pPcarkey]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { carid = PlayerInfo[playerid][pPcarkey2]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { carid = PlayerInfo[playerid][pPcarkey3]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { carid = PlayerInfo[playerid][pPcarkey4]; }
				else { return 1; }
				getcarid = GetPlayerVehicleID(playerid);
				GetPlayerName(playerid, playername, sizeof(playername));
				GetVehiclePos(carid, x, y, z);
				GetVehicleZAngle(carid, a);
				if(IsPlayerInVehicle(playerid,carid) && CarInfo[carid][cOwned] == 1)
				{
			   		if(PlayerInfo[playerid][pPcarkey] == -1 && PlayerInfo[playerid][pPcarkey2] == -1 && PlayerInfo[playerid][pPcarkey3] == -1 && PlayerInfo[playerid][pPcarkey4] == -1)
					{
						SendClientMessage(playerid, COLOR_GREY, "Você não possui um carro.");
						return 1;
					}
   					if(getcarid == carid)
					{
                        new Float:CarHP, Float:OldCarHP; new panels,doors,lights,tires;
						CarInfo[carid][cLocationx] = x;
						CarInfo[carid][cLocationy] = y;
						CarInfo[carid][cLocationz] = z;
						CarInfo[carid][cAngle] = a;
						GetVehicleDamageStatus(carid,panels,doors,lights,tires);
						GetVehicleHealth(carid, CarHP); OldCarHP = CarHP;
						format(string, sizeof(string), "~n~ Voce estacionou seu veiculo aqui. ~n~");
						GameTextForPlayer(playerid, "Voce estacionou seu veiculo aqui.\nAgora ele ira nascer aqui.", 10000, 3);
						OnPropUpdate2(); SavePlayerData(playerid);  DestroyVehicle(carid);
						CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],60000);
						LoadComponents(carid);
						PutPlayerInVehicle(playerid,carid,0); SetVehicleHealth(carid, OldCarHP);
						UpdateVehicleDamageStatus(carid,panels,doors,lights,tires); 
						TaCongelado[playerid] = false;
						TogglePlayerControllable(playerid, 1);
						return 1;
   					}
				}
	        }
	        else if(strcmp(x_nr,"setplaca",true) == 0)
	        {
	        
        	new carid;
	        if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { carid = PlayerInfo[playerid][pPcarkey]; }
	        else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { carid = PlayerInfo[playerid][pPcarkey2]; }
			else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { carid = PlayerInfo[playerid][pPcarkey3]; }
			else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { carid = PlayerInfo[playerid][pPcarkey4]; }
			else { return 1; }
	        if(IsPlayerInVehicle(playerid,carid) && CarInfo[carid][cOwned] == 1) {
				if(IsPlayerInVehicle(playerid, vehid) || PlayerInfo[vehid][pPcarkey] != -1 && PlayerInfo[vehid][pPcarkey2] != -1 && PlayerInfo[vehid][pPcarkey3] != -1 && PlayerInfo[vehid][pPcarkey4] != -1)
				{
			        if(cmdtext[idx++] != 32 || cmdtext[idx] == EOS)
                    {
                        SendClientMessage(playerid,0xFFFFFFAA,"USE: /v setplaca [placa]");
                        return 1;
				    }
				    new Float:XX,Float:YY,Float:ZZ,Float:AA;
                    new Float:CarHP, Float:OldCarHP;
                    new panels,doors,lights,tires;
	                GetVehicleHealth(vehid, CarHP);
	                GetVehicleDamageStatus(vehid,panels,doors,lights,tires);
			        OldCarHP = CarHP;
	                format(CarInfo[vehid][cLicense], 32 ,"%s",cmdtext[idx]);
                    SetVehicleNumberPlate(vehid,CarInfo[vehid][cLicense]);
	                GetVehiclePos(vehid,XX,YY,ZZ);
	                GetVehicleZAngle(vehid, AA);
	                SetVehicleToRespawn(vehid);
	                SetVehiclePos(vehid,XX,YY,ZZ);
	                SetVehicleZAngle(vehid, AA);
	                PutPlayerInVehicle(playerid,vehid,0);
	                SetVehicleHealth(vehid, OldCarHP);
	                UpdateVehicleDamageStatus(vehid,panels,doors,lights,tires);
	                format(string, sizeof(string), "{FFFF00}Você setou a placa do seu veiculo para:{FFFFFF} %s", CarInfo[vehid][cLicense]);
	                SendClientMessage(playerid, 0xFFFFFFFF, string);
	                OnPropUpdate2(); SavePlayerData(playerid);
	            }
	            else
	            {
                    SendClientMessage(playerid, 0xFFFFFFAA, "Você não esta no seu carro.");
				    return 1;
			    }
			}
			return 1;
         }

	        else if(strcmp(x_nr,"trancar1",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey];
                if(keycar != -1)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~g~Destrancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~r~Trancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  Você não tem um veículo no slot 1");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"trancar2",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey2];
                if(keycar != -1)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~g~Destrancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~r~Trancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  Você não tem um veículo no slot 2");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"trancar3",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey3];
                if(keycar != -1)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~g~Destrancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~r~Trancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  Você não tem um veículo no slot 3");
                    return 1;
                }
	 }
	 else if(strcmp(x_nr,"trancar4",true) == 0)
	        {
                new keycar = PlayerInfo[playerid][pPcarkey4];
                if(keycar != -1)
                {
                    new locked[256];
                    locked = strtok(cmdtext, idx);
                    if(CarInfo[keycar][cLock] == 1)
                    {
                    	for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,0);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~g~Destrancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 0;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
					else if(CarInfo[keycar][cLock] == 0)
					{
					    for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if (IsPlayerConnected(i))
							{
								SetVehicleParamsForPlayer(keycar,i,0,1);
							}
						}
						format(string, sizeof(string), "~w~Veiculo~n~~r~Trancado");
						GameTextForPlayer(playerid, string, 4000, 3);
						CarInfo[keycar][cLock] = 1;
						OnPropUpdate2(); SavePlayerData(playerid);
						return 1;
					}
                }
                else
                {
                    SendClientMessage(playerid, COLOR_GREY, "  Você não tem um veículo no slot 4");
                    return 1;
                }
	        }
	        else if(strcmp(x_nr,"cor",true) == 0)
	        {
	            if(PlayerInfo[playerid][pPcarkey] == -1 && PlayerInfo[playerid][pPcarkey2] == -1 && PlayerInfo[playerid][pPcarkey3] == -1 && PlayerInfo[playerid][pPcarkey4] == -1)
	        	{
	            	SendClientMessage(playerid, COLOR_GREY,"   Você não tem um veículo para pintar.");
	            	return 1;
	        	}
	        	if(GetPlayerMoney(playerid) < 1000)
	        	{
	            	SendClientMessage(playerid, COLOR_GREY,"   Você não tem dinheiro para pintar.");
	            	return 1;
	        	}
	        	tmp = strtok(cmdtext, idx);
	        	if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /v cor [Cor1] [Cor2]");
					return 1;
				}
				new color1;
				color1 = strval(tmp);
				if(color1 < 0 && color1 > 126)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Id das cores são entre 0 e 126");
			    	return 1;
				}
				tmp = strtok(cmdtext, idx);
	        	if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /v cor [Cor1] [Cor2]");
					return 1;
				}
				new color2;
				color2 = strval(tmp);
				if(color2 < 0 && color2 > 126)
				{
			    	SendClientMessage(playerid, COLOR_GREY, " Id das cores são entre 0 e 126");
			    	return 1;
				}

				if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey]) { vehid = PlayerInfo[playerid][pPcarkey]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey2]) { vehid = PlayerInfo[playerid][pPcarkey2]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey3]) { vehid = PlayerInfo[playerid][pPcarkey3]; }
				else if(GetPlayerVehicleID(playerid) == PlayerInfo[playerid][pPcarkey4]) { vehid = PlayerInfo[playerid][pPcarkey4]; }
				else { return 1; }

	        	if(IsPlayerInVehicle(playerid, vehid))
	        	{
         			CarInfo[vehid][cColorOne] = color1;
	                CarInfo[vehid][cColorTwo] = color2;
	                GivePlayerMoney(playerid, -1000);
	                GameTextForPlayer(playerid, "~w~Voce pintou seu veiculo~n~~r~-$1000", 5000, 1);
	                ChangeVehicleColor(vehid, color1, color2);
	                OnPropUpdate2(); SavePlayerData(playerid);
	                SBizzInfo[8][sbTill] += 1000;
		            ExtortionSBiz(8, 100);
					return 1;
    			}
	        	else
	        	{
	            	SendClientMessage(playerid, COLOR_GREY,"   Você não está em seu veículo.");
	            	return 1;
	        	}
	        }
	        else if(strcmp(x_nr,"localizar1",true) == 0)
	        {
	 		    if(!IsPlayerConnected(playerid)) { return 1; }
			    new Float:x,Float:y,Float:z;
			    new car = PlayerInfo[playerid][pPcarkey];
			    if(PlayerInfo[playerid][pPcarkey]==-1) { GameTextForPlayer(playerid, "~w~Voce tem um carro para ser localizado", 2500, 3); return 1; }
				SendClientMessage(playerid,COLOR_WHITE,"A localização carro foi encontrado.");
				GetVehiclePos(car, x, y, z);
			    SetPlayerCheckpoint(playerid, x, y, z, 6);
			    return 1;
	        }
	        else if(strcmp(x_nr,"localizar2",true) == 0)
	        {
	 		    if(!IsPlayerConnected(playerid)) { return 1; }
			    new Float:x,Float:y,Float:z;
			    new car = PlayerInfo[playerid][pPcarkey2];
			    if(PlayerInfo[playerid][pPcarkey]==-1) { GameTextForPlayer(playerid, "~w~Voce tem um carro para ser localizado", 2500, 3); return 1; }
				SendClientMessage(playerid,COLOR_WHITE,"A localização carro foi encontrado.");
				GetVehiclePos(car, x, y, z);
			    SetPlayerCheckpoint(playerid, x, y, z, 6);
			    return 1;
	        }
	        else if(strcmp(x_nr,"localizar3",true) == 0)
	        {
	 		    if(!IsPlayerConnected(playerid)) { return 1; }
			    new Float:x,Float:y,Float:z;
			    new car = PlayerInfo[playerid][pPcarkey3];
			    if(PlayerInfo[playerid][pPcarkey]==-1) { GameTextForPlayer(playerid, "~w~Voce tem um carro para ser localizado", 2500, 3); return 1; }
				SendClientMessage(playerid,COLOR_WHITE,"A localização carro foi encontrado.");
				GetVehiclePos(car, x, y, z);
			    SetPlayerCheckpoint(playerid, x, y, z, 6);
			    return 1;
	        }
	       else if(strcmp(x_nr,"localizar4",true) == 0)
	        {
	 		    if(!IsPlayerConnected(playerid)) { return 1; }
			    new Float:x,Float:y,Float:z;
			    new car = PlayerInfo[playerid][pPcarkey4];
			    if(PlayerInfo[playerid][pPcarkey]==-1) { GameTextForPlayer(playerid, "~w~Voce tem um carro para ser localizado", 2500, 3); return 1; }
				SendClientMessage(playerid,COLOR_WHITE,"A localização carro foi encontrado.");
				GetVehiclePos(car, x, y, z);
			    SetPlayerCheckpoint(playerid, x, y, z, 6);
			    return 1;
	        }
	        return 0;
	       }
	     }
 // fim
//------------------------ Dominar --------------------------
	if(strcmp(cmd, "/dominar", true) == 0 || strcmp(cmd, "/do", true) == 0)
	{
	    new carid = GetPlayerVehicleID(playerid);
	    if(IsAPlane(carid))
		{
	   		SendClientMessage(playerid, COLOR_GRAD5, "Você não pode usar esse comando dentro de um heli ou avião.");
	    	return true;
	    }
	    if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)//Máfia Cosa Nostra
		{
		    if(IsPlayerInEstacao(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranaEstacao == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Máfia Cosa Nostra estão dominando a Estação!",playername);
				SendClientMessageToAll(COR_COSA, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias e a Policia Federal foram avisados!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZEstacao,COLORGZ_LH);
                Dominando[playerid] = 1;
                ProvocoEstacao[playerid] = 1;
                GuerranaEstacao = 1;
        		TempoGuerraEstacao = SetTimerEx("GuerraEstacao", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInCasarao(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranoCasarao == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Máfia Cosa Nostra estão dominando o Casarão!",playername);
				SendClientMessageToAll(COR_COSA, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias e a Policia Federal foram avisados!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZCasarao,COLORGZ_LH);
                Dominando[playerid] = 1;
                ProvocoCasarao[playerid] = 1;
                GuerranoCasarao = 1;
        		TempoGuerraCasarao = SetTimerEx("GuerraCasarao", 60000, 0, "i", playerid);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13) //Máfia Yakuza
		{
		    if(IsPlayerInEstacao(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranaEstacao == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
				GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Máfia Yakuza estão dominando a Estação!",playername);
				SendClientMessageToAll(COR_YAK, string);
				SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias e a Policia Federal foram avisados!");
				SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZEstacao,COLORGZ_YAKUZA);
                Dominando[playerid] = 1;
                ProvocoEstacao[playerid] = 1;
                GuerranaEstacao = 1;
        		TempoGuerraEstacao = SetTimerEx("GuerraEstacao", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInCasarao(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranoCasarao == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Máfia Yakuza estão dominando o Casarão!",playername);
				SendClientMessageToAll(COR_YAK, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias e a Policia Federal foram avisados!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZCasarao,COLORGZ_YAKUZA);
                Dominando[playerid] = 1;
                ProvocoCasarao[playerid] = 1;
                GuerranoCasarao = 1;
        		TempoGuerraCasarao = SetTimerEx("GuerraCasarao", 60000, 0, "i", playerid);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11) //Policia Federal
		{
		    if(IsPlayerInEstacao(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranaEstacao == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Federal estão dominando a Estação!",playername);
				SendClientMessageToAll(COR_PF, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZEstacao,COLORGZ_PF);
                Dominando[playerid] = 1;
                ProvocoEstacao[playerid] = 1;
                GuerranaEstacao = 1;
       			TempoGuerraEstacao = SetTimerEx("GuerraEstacao", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Federal estão dominando o Complexo",playername);
				SendClientMessageToAll(COR_PF, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,COLORGZ_PF);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInCasarao(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
   					SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranoCasarao == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Federal estão dominando o Casarão!",playername);
				SendClientMessageToAll(COR_PF, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZCasarao,COLORGZ_PF);
                Dominando[playerid] = 1;
                ProvocoCasarao[playerid] = 1;
                GuerranoCasarao = 1;
        		TempoGuerraCasarao = SetTimerEx("GuerraCasarao", 60000, 0, "i", playerid);
 				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		//=============================== MORRO =============================================================================

		if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)// PM
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranaFavela == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar estão dominando a Favela!",playername);
				SendClientMessageToAll(COR_PM, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,GCOP_COLOR);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
			
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar estão dominando o Complexo",playername);
				SendClientMessageToAll(COR_PM, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,GCOP_COLOR);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
   			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar estão dominando a Praça do Aeroporto!",playername);
				SendClientMessageToAll(COR_PM, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,GCOP_COLOR);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
       			TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
	   			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	            format(string, sizeof(string), "%s e a Policia Militar estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(COR_PM, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,GCOP_COLOR);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar estão dominando o Park Glen !",playername);
				SendClientMessageToAll(COR_PM, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,GCOP_COLOR);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
       			TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)// PC
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
	   			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
		   			return true;
    			}
    			if(GuerranaFavela == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil estão dominando a Favela!",playername);
				SendClientMessageToAll(COR_PC, string);
			    SendClientMessage(playerid, COR_PC, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_PC, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,COR_PC);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil estão dominando o Complexo",playername);
				SendClientMessageToAll(COR_PC, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,COR_PC);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	            format(string, sizeof(string), "%s e a Policia Civil estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(COR_PC, string);
			    SendClientMessage(playerid, COR_PC, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_PC, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,COR_PC);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}

			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	            format(string, sizeof(string), "%s e a Policia Civil estão dominando a Praça do Aeroporto!",playername);
				SendClientMessageToAll(COR_PC, string);
			    SendClientMessage(playerid, COR_PC, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_PC, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,COR_PC);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	            format(string, sizeof(string), "%s e a Policia Civil estão dominando o Park Glen !",playername);
				SendClientMessageToAll(COR_PC, string);
			    SendClientMessage(playerid, COR_PC, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_PC, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,COR_PC);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}

		if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)// B.O.P.E
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
	   			{
	   				SendClientMessage(playerid, COR_BOPE, "Você ja está dominando um territorio.");
	    			return true;
	   			}
	   			if(GuerranaFavela == 1)
	   			{
	  				SendClientMessage(playerid, COR_BOPE, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	   			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E estão dominando a Favela!",playername);
				SendClientMessageToAll(COR_BOPE, string);
			    SendClientMessage(playerid, COR_BOPE, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_BOPE, "Espere 1 minuto para dominar está area .");
    		    GangZoneFlashForAll(GZFavela,COR_BOPE);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a B.O.P.E estão dominando o Complexo",playername);
				SendClientMessageToAll(COR_BOPE, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,COR_BOPE);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
	   			{
	  				SendClientMessage(playerid, COR_BOPE, "Você ja está dominando um territorio.");
	   				return true;
	   			}
	   			if(GuerranoSkate == 1)
	   			{
	   				SendClientMessage(playerid, COR_BOPE, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	   			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(COR_BOPE, string);
			    SendClientMessage(playerid, COR_BOPE, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_BOPE, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,COR_BOPE);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
    			TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
	   			{
	  				SendClientMessage(playerid, COR_BOPE, "Você ja está dominando um territorio.");
	   				return true;
	   			}
	   			if(GuerranoPark == 1)
	   			{
	   				SendClientMessage(playerid, COR_BOPE, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	   			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E estão dominando o Park Glen !",playername);
				SendClientMessageToAll(COR_BOPE, string);
			    SendClientMessage(playerid, COR_BOPE, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_BOPE, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,COR_BOPE);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
    			TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
	   			{
	  				SendClientMessage(playerid, COR_BOPE, "Você ja está dominando um territorio.");
	   				return true;
	   			}
	   			if(GuerranoAero == 1)
	   			{
	   				SendClientMessage(playerid, COR_BOPE, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	   			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_BOPE, string);
			    SendClientMessage(playerid, COR_BOPE, "Fique esperto, todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COR_BOPE, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,COR_BOPE);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
    			TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}

			else
			{
				SendClientMessage(playerid, COR_BOPE, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)// Los Aztecas
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranaFavela == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas estão dominando a Favela!",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,TEAM_AZTECAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas estão dominando o Complexo",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,TEAM_AZTECAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Los Aztecas estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
    	        GangZoneFlashForAll(GZSkate,TEAM_AZTECAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Los Aztecas estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
    	        GangZoneFlashForAll(GZAero,TEAM_AZTECAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Los Aztecas estão dominando o Park Glen !",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
    	        GangZoneFlashForAll(GZPark,TEAM_AZTECAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}

			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}

		if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)// drifters
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranaFavela == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters estão dominando a Favela!",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,COR_DRIFTERS);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters estão dominando o Complexo",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,COR_DRIFTERS);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Drifters estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
    	        GangZoneFlashForAll(GZAero,COR_DRIFTERS);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Drifters estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
    	        GangZoneFlashForAll(GZSkate,COR_DRIFTERS);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Drifters estão dominando o Park Glen !",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
    	        GangZoneFlashForAll(GZPark,COR_DRIFTERS);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}


			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}


		if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)// CV
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranaFavela == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Comando Vermelho estão dominando a Favela!",playername);
				SendClientMessageToAll(0xF6000000, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,0xF60000AA);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
        		TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho estão dominando o Complexo",playername);
				SendClientMessageToAll(0xF6000000, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,0xF60000AA);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(0xF6000000, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,0xF60000AA);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(0xF6000000, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,0xF60000AA);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho estão dominando o Park Glen !",playername);
				SendClientMessageToAll(0xF6000000, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,0xF60000AA);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}

			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)// Sons of Anarchy
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranaFavela == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
        	    format(string, sizeof(string), "%s e os Sons of Anarchy estão dominando a Favela!",playername);
				SendClientMessageToAll(COR_SONS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,COR_SONS);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
        		TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy estão dominando o Complexo",playername);
				SendClientMessageToAll(COR_SONS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,COR_SONS);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(COR_SONS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,COR_SONS);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_SONS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,COR_SONS);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy estão dominando o Park Glen !",playername);
				SendClientMessageToAll(COR_SONS, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,COR_SONS);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}

			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)// Groove Street
		{
		    if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	   			}
	   			if(GuerranaFavela == 1)
	   			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	   			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street estão dominando a Favela!",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,TEAM_GROVE_COLOR);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street estão dominando o Complexo",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,TEAM_GROVE_COLOR);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,TEAM_GROVE_COLOR);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}

			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street estão dominando a Praça do Aerporto !",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,TEAM_GROVE_COLOR);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}

			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street estão dominando o Park Glen!",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,TEAM_GROVE_COLOR);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}


			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)// Ballas
		{
			if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
	    		}
	    		if(GuerranaFavela == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
	    		}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas estão dominando a Favela!",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,TEAM_BALLAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
        		TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas estão dominando o Complexo",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,TEAM_BALLAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,TEAM_BALLAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}

			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,TEAM_BALLAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas estão dominando o Park Glen !",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,TEAM_BALLAS_COLOR);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}

			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)// Los Vagos
		{
            if(IsPlayerInFavela(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranaFavela == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos estão dominando a Favela!",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZFavela,TEAM_VAGOS_COLOR);
                Dominando[playerid] = 1;
                ProvocoFavela[playerid] = 1;
                GuerranaFavela = 1;
       			TempoGuerraFavela = SetTimerEx("GuerraFavela", 60000, 0, "i", playerid);
				return true;
			}
		    if(IsPlayerInComplexo(playerid))
			{
			    if(Dominando[playerid] == 1)
	    		{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoComplexo == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Vagos estão dominando o Complexo",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, todas as mafias foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZComplexo,TEAM_VAGOS_COLOR);
                Dominando[playerid] = 1;
                ProvocoComplexo[playerid] = 1;
                GuerranoComplexo = 1;
       			TempoGuerraComplexo = SetTimerEx("GuerraComplexo", 60000, 0, "i", playerid);
				return true;
			}
			if(IsPlayerInSkate(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoSkate == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos estão dominando a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZSkate,TEAM_VAGOS_COLOR);
                Dominando[playerid] = 1;
                ProvocoSkate[playerid] = 1;
                GuerranoSkate = 1;
   				TempoGuerraSkate = SetTimerEx("GuerraSkate", 60000, 0, "i", playerid);
				return true;
			}

			if(IsPlayerInPark(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoPark == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos estão dominando o Park Glen!",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZPark,TEAM_VAGOS_COLOR);
                Dominando[playerid] = 1;
                ProvocoPark[playerid] = 1;
                GuerranoPark = 1;
   				TempoGuerraPark = SetTimerEx("GuerraPark", 60000, 0, "i", playerid);
				return true;
			}

			if(IsPlayerInAero(playerid))
			{
			    if(Dominando[playerid] == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Você ja está dominando um territorio.");
	    			return true;
    			}
    			if(GuerranoAero == 1)
    			{
	   				SendClientMessage(playerid, COLOR_GRAD5, "Já está tendo uma guerra nesse territorio.");
	    			return true;
    			}
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos estão dominando a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
			    SendClientMessage(playerid, COLOR_GRAD3, "Fique esperto, A Polícia e todas as gangues foram avisadas!");
			    SendClientMessage(playerid, COLOR_GRAD5, "Espere 1 minuto para dominar está area .");
                GangZoneFlashForAll(GZAero,TEAM_VAGOS_COLOR);
                Dominando[playerid] = 1;
                ProvocoAero[playerid] = 1;
                GuerranoAero = 1;
   				TempoGuerraAero = SetTimerEx("GuerraAero", 60000, 0, "i", playerid);
				return true;
			}


			else
			{
				SendClientMessage(playerid, COLOR_GRAD3, "Você não está em nenhum território!");
			}
			return true;
		}
		return true;
	}
	if(strcmp(cmd, "/guerra", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
			SendClientMessage(playerid,CINZA," Você não pode criar guerra na cadeia!");
			return true;
    	}
  	    if(TendoGuerra >= 1)
        {
            SendClientMessage(playerid, CINZA, "   Já está tendo uma guerra!");
            return true;
        }
		new Float:x,Float:y,Float:z;
		if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)// EXE
	  	{
		    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	        format(string, sizeof(string), "%s e o Exército iniciaram uma Guerra!",playername);
	        SendClientMessageToAll(COLOR_EXE, string);
	    	GetPlayerPos(playerid,x,y,z);
	    	Territorio[MinX] = x-120;
			Territorio[MinY] = y-120;
			Territorio[MaxX] = x+120;
			Territorio[MaxY] = y+120;
			Territorio[exemortos] = 0;
			Territorio[talmortos] = 0;
			Territorio[almortos] = 0;
            Territorio[FARCmortos] = 0;
	    	GZGuerra = GangZoneCreate(x-120,y-120,x+120,y+120);
	    	GangZoneShowForAll(GZGuerra,COLORGZ_EXE);
	    	ThiagoInfo[playerid][InicioGuerra] = 1;
	    	TendoGuerra = 1;
	   		TempoGuerra = SetTimerEx("GuerraTerrorista", 180000, 0, "i", playerid);
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)// Taliban
	  	{
		    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	        format(string, sizeof(string), "%s e o Taliban iniciaram uma Guerra!",playername);
	        SendClientMessageToAll(COR_Taliban, string);
	    	GetPlayerPos(playerid,x,y,z);
	    	Territorio[MinX] = x-120;
			Territorio[MinY] = y-120;
			Territorio[MaxX] = x+120;
			Territorio[MaxY] = y+120;
			Territorio[exemortos] = 0;
			Territorio[talmortos] = 0;
			Territorio[almortos] = 0;
            Territorio[FARCmortos] = 0;
	    	GZGuerra = GangZoneCreate(x-120,y-120,x+120,y+120);
	    	GangZoneShowForAll(GZGuerra,COLORGZ_Taliban);
	    	ThiagoInfo[playerid][InicioGuerra] = 1;
	    	TendoGuerra = 1;
	   		TempoGuerra = SetTimerEx("GuerraTerrorista", 180000, 0, "i", playerid);
			return true;
		}
		if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)// Al'qaeda
	  	{
		    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	        format(string, sizeof(string), "%s e a Al'qaeda iniciaram uma Guerra!",playername);
	        SendClientMessageToAll(COR_AL, string);
	    	GetPlayerPos(playerid,x,y,z);
	    	Territorio[MinX] = x-120;
			Territorio[MinY] = y-120;
			Territorio[MaxX] = x+120;
			Territorio[MaxY] = y+120;
			Territorio[exemortos] = 0;
			Territorio[talmortos] = 0;
			Territorio[almortos] = 0;
            Territorio[FARCmortos] = 0;
	    	GZGuerra = GangZoneCreate(x-120,y-120,x+120,y+120);
	    	GangZoneShowForAll(GZGuerra,COLORGZ_ALCAIDA);
	    	ThiagoInfo[playerid][InicioGuerra] = 1;
	    	TendoGuerra = 1;
	   		TempoGuerra = SetTimerEx("GuerraTerrorista", 180000, 0, "i", playerid);
			return true;
		}
  		if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)// F    ARC
	  	{
		    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
	        format(string, sizeof(string), "%s e a F.A.R.C iniciaram uma Guerra!",playername);
	        SendClientMessageToAll(COR_FARC, string);
	    	GetPlayerPos(playerid,x,y,z);
	    	Territorio[MinX] = x-120;
			Territorio[MinY] = y-120;
			Territorio[MaxX] = x+120;
			Territorio[MaxY] = y+120;
			Territorio[exemortos] = 0;
			Territorio[talmortos] = 0;
			Territorio[almortos] = 0;
            Territorio[FARCmortos] = 0;
	    	GZGuerra = GangZoneCreate(x-120,y-120,x+120,y+120);
	    	GangZoneShowForAll(GZGuerra,COLORGZ_FARC);
	    	ThiagoInfo[playerid][InicioGuerra] = 1;
	    	TendoGuerra = 1;
	   		TempoGuerra = SetTimerEx("GuerraTerrorista", 180000, 0, "i", playerid);
			return true;
		}
		return true;
	}
//----------------------------------[Kick]------------------------------------------------
	if(strcmp(cmd, "/kick", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /kick [Id Do Jogador] [motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode kickar um Admin Dono !");
							return true;
						}
         				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /kick [Id Do Jogador] [motivo]");
							return true;
						}
						getdate(year, month, day);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s foi kickado por Homem_Aranha(Modo Cia), Motivo: %s (%d-%d-%d)", giveplayer, (result),day,month,year);
							KickLog(string);
							format(string, sizeof(string), "AdmCmd: %s foi kickado por Homem_Aranha, Motivo: %s", giveplayer, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						else
						{
							format(string, sizeof(string), "AdmCmd: %s foi kickado por %s, Motivo: %s (%d-%d-%d)", giveplayer, sendername, (result),day,month,year);
							KickLog(string);
							format(string, sizeof(string), "AdmCmd: %s foi kickado por %s, Motivo: %s", giveplayer, sendername, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						SetTimerEx("KickPublic", 800, 0, "d", giveplayerid);
						return true;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um jogador ativo.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/deslogartodos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    if (PlayerInfo[playerid][pAdmin] >= 1341)
			{
	    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
				for(new k=0; k<MAX_PLAYERS; k++)
				{
				if(IsPlayerConnected(k))
				Kick(k);
				}
			}
			return true;
		}
	}
//============ HELPERS ====================================================


    if(strcmp(cmd, "/kickh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /kickh [ID/Nome] [Motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pHelper] >= 151)
			{
			    if(helpertrampando[playerid] < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/shelper)");
					return true;
				}
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
       	               if(PlayerInfo[giveplayerid][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode kickar um Admin Dono !");
							return true;
						}
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[256];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /kickh [ID/Nome] [Motivo]");
							return true;
						}

						getdate(year, month, day);
						format(string, sizeof(string), "Helper: %s Foi Kickado pelo Helper %s, Motivo: %s (%d-%d-%d)", giveplayer, sendername, (result),month,day,year);
						format(string, sizeof(string), "Helper: %s Foi Kickado pelo Helper %s, Motivo: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						KickLog(string);
						SetTimerEx("KickPublic2", 800, 0, "d", giveplayerid);
						return true;
					}
				}
			}
			else
			{
			SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um jogador ativo ou você não pode usar este comando.");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/irh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /irh [id]");
				return true;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo, world;
			plo = ReturnUser(tmp);
			world = GetPlayerVirtualWorld(plo);
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pHelper] >= 1)
					{
					    if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 1)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando ! (/shelper)");
							return true;
						}
						if(PlayerInfo[plo][pAdmin] >= 1341 && PlayerInfo[playerid][pAdmin] < DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode ir até um Admin Dono !");
							return true;
						}
						if(Spectate[playerid] != 255)
						{
							Spectate[playerid] = 256;
						}
						GetPlayerPos(plo, plocx, plocy, plocz);
						if(PlayerInfo[plo][pInt] > 0)
						{
							SetPlayerInterior(playerid,PlayerInfo[plo][pInt]);
							PlayerInfo[playerid][pInt] = PlayerInfo[plo][pInt];
							PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];
						}
						if(PlayerInfo[plo][pInt] == 0)
						{
							SetPlayerInterior(playerid,0);
						}
						if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(playerid,1);
							PlayerInfo[playerid][pInt] = 1;
						}
						if (GetPlayerState(playerid) == 2)
						{
							new tmpcar = GetPlayerVehicleID(playerid);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz); LinkVehicleToInterior(tmpcar, 0);
							TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
						}
						else
						{
							SetPlayerPos(playerid,plocx,plocy+2, plocz);
						}
						SetPlayerVirtualWorld(playerid, world);
						SendClientMessage(playerid, 0x33FF00FF, "Você foi teleportado pelo Admin !");
						GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
						GetPlayerName(plo, plname, MAX_PLAYER_NAME);
						if(helpertrampando[playerid] == 1 && helperhide[playerid] == 1)
						{}
						else { format(string, sizeof(string), "O Helper %s Foi Até %s.",playername,plname); }
						ProxDetector(30.0, playerid, string, 0x33FF00FF,0x33FF00FF,0x33FF00FF,0x33FF00FF,0x33FF00FF);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um player ativo.");
			}
		}
		return true;
	}


	if(strcmp(cmd, "/trazerh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /trazerh [id]");
				return true;
			}
			new Float:plocx,Float:plocy,Float:plocz;
			new plo, world;
			plo = ReturnUser(tmp);
			world = GetPlayerVirtualWorld(playerid);
			if(PlayerInfo[plo][pJailed] != 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode trazer um Preso");
				return true;
			}
			if (IsPlayerConnected(plo))
			{
			    if(plo != INVALID_PLAYER_ID)
			    {
					if (PlayerInfo[playerid][pHelper] >= 1)
					{
					    if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 1)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando ! (/shelper)");
							return true;
						}
	                    if(PlayerInfo[plo][pAdmin] >= DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode trazer um Admin Dono !");
							return true;
						}
						GetPlayerPos(playerid, plocx, plocy, plocz);
						if(PlayerInfo[playerid][pInt] > 0)
						{
							SetPlayerInterior(plo,PlayerInfo[playerid][pInt]);
							PlayerInfo[plo][pInt] = PlayerInfo[playerid][pInt];
							PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
						}
						if(PlayerInfo[playerid][pInt] == 0)
						{
							SetPlayerInterior(plo,0);
						}
						if(plocz > 930.0 && PlayerInfo[playerid][pInt] == 0) //the highest land point in sa = 526.8
						{
							SetPlayerInterior(plo,1);
							PlayerInfo[plo][pInt] = 1;
						}
						if (GetPlayerState(plo) == 2)
						{
							TelePos[plo][0] = 0.0;
							TelePos[plo][1] = 0.0;
							new tmpcar = GetPlayerVehicleID(plo);
							SetVehiclePos(tmpcar, plocx, plocy+4, plocz); LinkVehicleToInterior(tmpcar, 0);
							SetVehicleVirtualWorld(tmpcar,world);
						}
						else
						{
							SetPlayerPos(plo,plocx,plocy+2, plocz);
						}
						SetPlayerVirtualWorld(plo,world);
						SendClientMessage(plo, 0x33FF00FF, "Você foi teleportado pelo Admin !");
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um jogador ativo.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/aviso", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /aviso [id] [motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
			        {
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /aviso [id] [motivo]");
							return true;
						}
						PlayerInfo[giveplayerid][pWarns] += 1;
						if(PlayerInfo[giveplayerid][pWarns] >= 3)
						{
							getdate(year, month, day);
							if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
							{
								format(string, sizeof(string), "AdmCmd: %s foi banido por Homem_Aranha(Modo Cia), Motivo: %s (%d-%d-%d)", giveplayer, (result),day,month,year);
								BanLog(string);
								format(string, sizeof(string), "AdmCmd: %s foi banido por Homem_Aranha (Tinha 3 Avisos), Motivo: %s", giveplayer,(result));
								SendClientMessageToAll(COLOR_LIGHTRED, string);
							}
							else
							{
								pban[playerid] += 1;
							    if(pban[playerid] >= 3)
						    	{
						    	    SBan(playerid, "Baniu mais de 3", "Automatico");
						    	    return true;
						    	}
								format(string, sizeof(string), "AdmCmd: %s foi banido por %s, Motivo: %s (%d-%d-%d)", giveplayer, sendername, (result),day,month,year);
								BanLog(string);
								format(string, sizeof(string), "AdmCmd: %s foi banido por %s (Tinha 3 Avisos), Motivo: %s", giveplayer, sendername, (result));
								SendClientMessageToAll(COLOR_LIGHTRED, string);
							}
							getdate(Ano, Mes, Dia);
							PlayerInfo[giveplayerid][pBan] = 1;
							SBan(giveplayerid, "Terceiro aviso", PlayerName(playerid));
							return true;
						}
						format(string, sizeof(string), "AdmCmd: %s foi avisado por %s, Motivo: %s", giveplayer, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						return true;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um jogador ativo.");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/congelarh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /congelarh [id]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pHelper] >= 61)
			{
			    if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em serviço ! (/shelper)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			        	if(PlayerInfo[playa][pAdmin] >= SUB_DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode Congelar um Admin Dono !");
							return true;
						}
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TaCongelado[playa] = true;
						Controle(playa, 0);
						format(string, sizeof(string), "Helper: %s Congelou %s",sendername,  giveplayer);
						printf("%s",string);
						if(helpertrampando[playerid] == 1 && helperhide[playerid] == 1)
						{
							format(string, sizeof(string), "Helper: %s Foi congelado por Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "Helper: %s Foi congelado por %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}

//----------------------------------[descongelar]------------------------------------------------
	if(strcmp(cmd, "/descongelarh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /descongelarh [id]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pHelper] >= 61)
			{
			    if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 2)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em serviço ! (/shelper)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            PlayerInfo[playa][pMuted] = 0;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername)); 
						TaCongelado[playa] = false; 
						Controle(playa, 1); 
						format(string, sizeof(string), "AdmCmd: %s Descongelou %s",sendername,  giveplayer);
						printf("%s",string);
						if(helpertrampando[playerid] == 1 && helperhide[playerid] == 1)
						{
							format(string, sizeof(string), "Helper: %s Foi descongelado por Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "Helper: %s Foi descongelado por %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}

	if(strcmp(cmd, "/ban", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /ban [id] [motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
                    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= SUB_DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir um Admin Dono !");
							return true;
						}
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /ban [id] [motivo]");
							return true;
						}
						getdate(year, month, day);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s foi banido por Homem_Aranha, Motivo: %s (%d-%d-%d)", giveplayer,(result),day,month,year);
							BanLog(string);
							format(string, sizeof(string), "AdmCmd: %s foi banido por Homem_Aranha, Motivo: %s", giveplayer,(result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						else
						{
							pban[playerid] += 1;
						    if(pban[playerid] >= 5)
						    {
					    	    SBan(playerid, "Baniu mais de 6", "Automatico");
					    	    return true;
						    }
							format(string, sizeof(string), "AdmCmd: %s foi banido por %s, Motivo: %s (%d-%d-%d)", giveplayer, sendername, (result),day,month,year);
							BanLog(string);
							format(string, sizeof(string), "AdmCmd: %s foi banido por %s, Motivo: %s", giveplayer, sendername, (result));
							SendClientMessageToAll(COLOR_LIGHTRED, string);
						}
						SendClientMessage(giveplayerid, COLOR_WHITE, "|________________[ Instruções para revisão de Ban ]________________|");
						SendClientMessage(giveplayerid, COLOR_YELLOW2, "Tire uma SS da tela apertando F8 imediatamente após ser banido");
						SendClientMessage(giveplayerid, COLOR_YELLOW2, "E acesse o nosso forum: www.{FFCC00}brnm{FFFFFF}.forumeiros.com");
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Atenção: Você só será desbanido caso for inocente.");
                        SBan(giveplayerid, result, PlayerName(playerid));
                        PlayerInfo[giveplayerid][pBan] = 1;
						SetTimerEx("BanPublic", 1000, 0, "d", giveplayerid);
						return true;
					}
				}//not connected
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Esse não é um jogador ativo.");
			}
		}
		return true;
    }
if (strcmp(cmd,"/rangeban", true) ==0)
 {
  if (PlayerInfo[playerid][pAdmin] >= 1341)
  {
   tmp = strtok(cmdtext, idx);
   new Target = strval(tmp);
   tmp = strtok(cmdtext, idx);
   if(!strlen(tmp)){ return SendClientMessage(playerid,-1,"Use: /rangeban [id] [motivo]");}
   if(Target == INVALID_PLAYER_ID){ return SendClientMessage(playerid,COLOR_GREY,"ERROR: Não é válido esse id.");}
   if(Target == playerid) {return SendClientMessage(playerid,COLOR_GREY,"ERROR: Você não pode usar em você mesmo.");}
   new tname[MAX_PLAYER_NAME];
   GetPlayerName(Target,tname,sizeof(tname));
   new piname[MAX_PLAYER_NAME];
   GetPlayerName(playerid,pname,sizeof(piname));
   new MyString[256];
   new TargetString[256];
   format(MyString,sizeof(MyString),"Você deu range ban no jogador %s(%d)! (Motivo: %s)",tname, Target, tmp);
   format(TargetString,sizeof(TargetString),"Você levou range ban por %s! (Motivo: %s)", piname, playerid, tmp);
   SendClientMessage(playerid,COLOR_LIGHTBLUE,MyString);
   SendClientMessage(Target,COLOR_LIGHTBLUE,TargetString);
   new AllString[256];
   format(AllString,sizeof(AllString),"Administrador: %s deu range ban no jogador %s(%d)! (Motivo: %s)",PlayerName(playerid),tname,Target,tmp);
   SendClientMessageToAll(COLOR_LIGHTRED,AllString);
   new File:Log = fopen("Logs/RangeBan", io_append);
   new logData[128];
   new fTime[6];
   getdate(fTime[0], fTime[1], fTime[2]);
   gettime(fTime[3], fTime[4], fTime[5]);
   format(logData, sizeof logData, "[%02d/%02d/%04d || %02d:%02d:%02d]%s Range Ban %s! (Motivo: %s) \r\n", fTime[2], fTime[1], fTime[0], fTime[3], fTime[4], fTime[5], piname, tname, tmp);
   fwrite(Log, logData);
   fclose(Log);
   new ip[50];
   GetPlayerIp(Target,ip,sizeof(ip));
   strdel(ip,strlen(ip)-4,strlen(ip));
   format(ip,sizeof(ip),"%s**.**",ip);
   format(ip,sizeof(ip),"banip %s",ip);
   SendRconCommand(ip);
   Kick(Target);
  }
  else{

	  return SendClientMessage(playerid, COLOR_GRAD1, "Error: Você não tem permissão para usar este comando.");

     }
 }
	if(strcmp(cmd, "/bantemp", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /bantemp [id] [dias] [motivo]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    if(IsPlayerConnected(giveplayerid))
			    {
			        if(giveplayerid != INVALID_PLAYER_ID)
                    {
			        	if(PlayerInfo[giveplayerid][pAdmin] >= DONO)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode banir este admin!");
							return true;
						}
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
	    				tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /bantemp [id] [dias] [motivo]");
							return true;
						}
						new diasban = strval(tmp);
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /bantemp [id] [dias] [motivo]");
							return true;
						}
						getdate(year, month, day);
						if(diasban > 9999)
						{
						    SendClientMessage(playerid, COLOR_GRAD1, "[ERRO] Você definiu muitos dias!");
						    return 1;
						}
						format(string, sizeof(string), "AdmCmd: %s foi banido temporariamente (%d dias) por %s, Motivo: %s (%d-%d-%d)", giveplayer, diasban, sendername, (result),day,month,year);
						BanLog(string);
						format(string, sizeof(string), "AdmCmd: %s foi banido temporariamente (%d dias) por %s, Motivo: %s", giveplayer, diasban, sendername, (result));
						SendClientMessageToAll(COLOR_LIGHTRED, string);
						PlayerInfo[giveplayerid][pDiaBanTemp] = day+diasban;
						PlayerInfo[giveplayerid][pMesBanTemp] = month;
						PlayerInfo[giveplayerid][pAnoBanTemp] = year;
						for(new dias = 1; dias < diasban; dias++)
						{
							if(PlayerInfo[giveplayerid][pMesBanTemp] == 1 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 2 && PlayerInfo[giveplayerid][pDiaBanTemp] > 28)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 28;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
 							if(PlayerInfo[giveplayerid][pMesBanTemp] == 3 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
 							if(PlayerInfo[giveplayerid][pMesBanTemp] == 4 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 5 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 6 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 7 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 8 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 9 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 10 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 11 && PlayerInfo[giveplayerid][pDiaBanTemp] > 30)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 30;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] == 12 && PlayerInfo[giveplayerid][pDiaBanTemp] > 31)
							{
								PlayerInfo[giveplayerid][pDiaBanTemp] -= 31;
								PlayerInfo[giveplayerid][pMesBanTemp]++;
							}
      						if(PlayerInfo[giveplayerid][pMesBanTemp] > 12)
							{
								PlayerInfo[giveplayerid][pMesBanTemp] -= 12;
								PlayerInfo[giveplayerid][pAnoBanTemp]++;
							}
						}
						OnPlayerSave(giveplayerid);
						TextDrawShowForPlayer(giveplayerid, TextBan[giveplayerid]); 
						SendClientMessage(giveplayerid, COLOR_WHITE, "|________________[ Instruções para revisão de Ban ]________________|");
						SendClientMessage(giveplayerid, COLOR_YELLOW2, "Tire uma SS da tela apertando F8 imediatamente após ser banido");
						SendClientMessage(giveplayerid, COLOR_YELLOW2, "E acesse o nosso forum: www.{FFCC00}brnm{FFFFFF}.forumeiros.com");
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, "Atenção: Você só será desbanido caso for inocente.");
						BanTemp(giveplayerid, result, PlayerName(playerid));
						return true;
					}
				}//not connected
			}
			else
			{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar esse comando !");
							return true;
			}
		}
		return true;
    }

 	if(strcmp(cmd, "/payday", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= DONO)
		{
		    for(new i=0;  i<MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i)) PlayerInfo[i][pPayDay] = 6;
			}
			PayDay();
			format(gstring, 128, "ADM AVISO: %s ID[%d] usou o comando /payday", PlayerName(playerid), playerid);
			SendClientMessage(playerid, COLOR_GRAD1, gstring);
			PayLog(string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não esta autorizado a usar este comando!");
		}
		return true;
	}
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/congelar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /congelar [id]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			        	if(PlayerInfo[playa][pAdmin] >= 1340 && PlayerInfo[playerid][pAdmin] < SUB_GERENTE)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode congelar um Admin Dono !");
							return true;
						}
				        GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername)); 
						TaCongelado[playa] = true; 
						Controle(playa, 0);
						format(string, sizeof(string), "AdmCmd: %s Congelou %s",sendername,  giveplayer);
						printf("%s",string);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s Foi congelado por Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "AdmCmd: %s Foi congelado por %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não esta autorizado a usar este comando!");
			}
		}
		return true;
	}

//----------------------------------[descongelar]------------------------------------------------
	if(strcmp(cmd, "/descongelar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /descongelar [id]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            PlayerInfo[playa][pMuted] = 0;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername)); 
						TaCongelado[playa] = false; 
						Controle(playa, 1);
						format(string, sizeof(string), "AdmCmd: %s Descongelou %s",sendername,  giveplayer);
						printf("%s",string);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s Foi descongelado por Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "AdmCmd: %s Foi descongelado por %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	//================== A Descongelar ================ 
	if(strcmp(cmd, "/adescongelar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
             if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playerid))
			    {
			        if(playerid != INVALID_PLAYER_ID)
			        {
			            PlayerInfo[playerid][pMuted] = 0;
			    	    GetPlayerName(playerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						TaCongelado[playerid] = false;
						Controle(playerid, 1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desbugarh", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /desbugarh [playerid]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pHelper] >= 151)
			{
			    if(helpertrampando[playerid] < 1 && PlayerInfo[playerid][pHelper] != 3)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está em serviço ! (/shelper)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            PlayerInfo[playa][pMuted] = 0;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						Controle(playa, 1);
						MedicBill[playa] = 0;
			            NeedMedicTime[playa] = 0;
			            SetCameraBehindPlayer(playa);
		                sincronizando[playa] = 1;
                        virt[playa] = GetPlayerVirtualWorld(playa);
                    	interior[playa] = GetPlayerInterior(playa);
                    	skinneg[playa] = GetPlayerSkin(playa);
                    	GetPlayerArmour(playa,APP[playa]);
                     	GetPlayerHealth(playa,PlayerHPP[playa]);
                     	GetPlayerFacingAngle(playa,FaceAngle[playa]);
                      	GetPlayerPos(playa,xx[playa],yy[playa],zz[playa]);
                     	GetPlayerWeaponData(playa,1,gunsinc[1][playa],ammoo[1][playa]);
                     	GetPlayerWeaponData(playa,2,gunsinc[2][playa],ammoo[2][playa]);
                    	GetPlayerWeaponData(playa,3,gunsinc[3][playa],ammoo[3][playa]);
                     	GetPlayerWeaponData(playa,4,gunsinc[4][playa],ammoo[4][playa]);
                     	GetPlayerWeaponData(playa,5,gunsinc[5][playa],ammoo[5][playa]);
                    	GetPlayerWeaponData(playa,6,gunsinc[6][playa],ammoo[6][playa]);
                    	GetPlayerWeaponData(playa,7,gunsinc[7][playa],ammoo[7][playa]);
                     	GetPlayerWeaponData(playa,8,gunsinc[8][playa],ammoo[8][playa]);
                    	GetPlayerWeaponData(playa,9,gunsinc[9][playa],ammoo[9][playa]);
                     	GetPlayerWeaponData(playa,10,gunsinc[10][playa],ammoo[10][playa]);
                    	GetPlayerWeaponData(playa,11,gunsinc[11][playa],ammoo[11][playa]);
                      	GetPlayerWeaponData(playa,12,gunsinc[12][playa],ammoo[12][playa]);
                      	SpawnPlayer(playa);
                      	TempoSinc = SetTimerEx("Sincronizar", 500, 0, "i", playa);
	                    if(IsPlayerInAnyVehicle(playa))
                     	{
                    		vehicledd[playa] = 1;
                     		VehicleIDD[playa] = GetPlayerVehicleID(playa);
                     	}
						format(string, sizeof(string), "Helper: %s Desbugou %s",sendername,  giveplayer);
						printf("%s",string);
						if(helpertrampando[playerid] == 1 && helperhide[playerid] == 1)
						{
							format(string, sizeof(string), "Helper: %s Foi desbugado por Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "Helper: %s Foi desbugado por %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}


//----------------------------------[desbugar]------------------------------------------------
	if(strcmp(cmd, "/desbugar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /desbugar [playerid]");
				return true;
			}
			new playa;
			playa = ReturnUser(tmp);
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(playa))
			    {
			        if(playa != INVALID_PLAYER_ID)
			        {
			            PlayerInfo[playa][pMuted] = 0;
			    	    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						Controle(playa, 1);
						MedicBill[playa] = 0;
			            NeedMedicTime[playa] = 0;
			            SetCameraBehindPlayer(playa);
		                sincronizando[playa] = 1;
                        virt[playa] = GetPlayerVirtualWorld(playa);
                    	interior[playa] = GetPlayerInterior(playa);
                    	skinneg[playa] = GetPlayerSkin(playa);
                    	GetPlayerArmour(playa,APP[playa]);
                     	GetPlayerHealth(playa,PlayerHPP[playa]);
                     	GetPlayerFacingAngle(playa,FaceAngle[playa]);
                      	GetPlayerPos(playa,xx[playa],yy[playa],zz[playa]);
                     	GetPlayerWeaponData(playa,1,gunsinc[1][playa],ammoo[1][playa]);
                     	GetPlayerWeaponData(playa,2,gunsinc[2][playa],ammoo[2][playa]);
                    	GetPlayerWeaponData(playa,3,gunsinc[3][playa],ammoo[3][playa]);
                     	GetPlayerWeaponData(playa,4,gunsinc[4][playa],ammoo[4][playa]);
                     	GetPlayerWeaponData(playa,5,gunsinc[5][playa],ammoo[5][playa]);
                    	GetPlayerWeaponData(playa,6,gunsinc[6][playa],ammoo[6][playa]);
                    	GetPlayerWeaponData(playa,7,gunsinc[7][playa],ammoo[7][playa]);
                     	GetPlayerWeaponData(playa,8,gunsinc[8][playa],ammoo[8][playa]);
                    	GetPlayerWeaponData(playa,9,gunsinc[9][playa],ammoo[9][playa]);
                     	GetPlayerWeaponData(playa,10,gunsinc[10][playa],ammoo[10][playa]);
                    	GetPlayerWeaponData(playa,11,gunsinc[11][playa],ammoo[11][playa]);
                      	GetPlayerWeaponData(playa,12,gunsinc[12][playa],ammoo[12][playa]);
                      	SpawnPlayer(playa);
                      	TempoSinc = SetTimerEx("Sincronizar", 500, 0, "i", playa);
	                    if(IsPlayerInAnyVehicle(playa))
                     	{
                    		vehicledd[playa] = 1;
                     		VehicleIDD[playa] = GetPlayerVehicleID(playa);
                     	}
						format(string, sizeof(string), "AdmCmd: %s Desbugou %s",sendername,  giveplayer);
						printf("%s",string);
						if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
						{
							format(string, sizeof(string), "AdmCmd: %s Foi desbugado por Homem_Aranha",giveplayer);
						}
						else
						{
							format(string, sizeof(string), "AdmCmd: %s Foi desbugado por %s",giveplayer ,PlayerName(playerid));
						}
						ABroadCast(COLOR_LIGHTRED,string,1);
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
//----------------------------------[Setar emprego]-----------------------------------------------
	if(strcmp(cmd, "/setemprego", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /setemprego [playerid/ParteDoNome] [empregoid)]");
				return true;
			}
			new para1;
			new jobid;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			jobid = strval(tmp);
			if (PlayerInfo[playerid][pAdmin] >= SUB_DONO)
			{
       if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
			    if(IsPlayerConnected(para1))
			    {
			        if(para1 != INVALID_PLAYER_ID)
			        {
						GetPlayerName(para1, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						PlayerInfo[para1][pEmprego] = jobid;
						/*format(string, 128, "AdmWarning: %s has set %s job to id %d.", sendername,giveplayer,jobid);
						ABroadCast(COLOR_YELLOW,string,1);*/
						SendClientMessage(playerid, COLOR_GRAD1, "   Emprego setado com sucesso !");
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar esse comando!");
			}
		}
		return true;
	}
//----------------------------------[GMX]-----------------------------------------------
	if(strcmp(cmd, "/savefiles", true) == 0)
	{
	    if (PlayerInfo[playerid][pAdmin] >= 1341)
		{
      if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
			}
			OnPropUpdate();
			Atualizar3Dtexts();
			SaveBoxer();
			SaveHelper();
			SaveAdm();
			SendClientMessage(playerid,COLOR_LIGHTRED,"* Você Salvou os Arquivos!");
			return true;
		}
		return true;
	}
	if(strcmp(cmd, "/gmx", true) == 0 || strcmp(cmd, "/restart", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        //new string22[128];
		    if (PlayerInfo[playerid][pAdmin] >=DONO)
			{
			    if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO) { return SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)"); }
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
		    		if(IsPlayerConnected(i))
		    		{ OnPlayerSave(i); }
				}
				GameTextForPlayer(playerid, "~g~P~y~B~b~G~n~~p~Reiniciando, Aguarde... ", 3000, 3);
				GameModeExitFunc();
				SaveAccounts();
				OnPlayerSave(playerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não tem autorização para dar GMX!");
			}
		}
		return true;
	}

	if(strcmp(cmdtext, "/modocia", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] >= SUB_DONO)
		{
			if(admhide[playerid] == 1)
			{
				admtrampando[playerid] = 0;
				admhide[playerid] = 0;
				SendClientMessage(playerid,COLOR_GREEN,"Você desativou modo adm secreto");
			}
			else
			{
				admtrampando[playerid] = 1;
				admhide[playerid] = 1;
				SendClientMessage(playerid,COLOR_GREEN,"Você ativou modo adm secreto");
			}
		}
		return true;
	}

	if (strcmp(cmd, "/admins", true) == 0)
	{
	    new DialogThiago[1500];
		//SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Admins Online ]__________________|");
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] > 0)
			{
				if(admhide[i] == 0)
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					new lolz[20];
				    if(PlayerInfo[i][pAdmin] == 1)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == 2)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == 3)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == 4)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == MASTER)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == SUB_GERENTE)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == GERENTE)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == SUB_DONO)
				    {
						lolz = "Administrador";
					}
					if(PlayerInfo[i][pAdmin] == DONO)
				    {
						lolz = "Administrador";
					}
					if(away[i] == 0)
					{
					    if(admtrampando[i] == 1)
					    {
							format(string, 128, "{98F5FF}%s {FFFFFF}[%s] {98F5FF}(Trabalhando)\n", sendername, lolz);
							strcat(DialogThiago,string);
						}
						else
					    {
							format(string, 128, "{98F5FF}%s {FFFFFF}[%s] {9AFF9A}(Jogando)\n", sendername, lolz);
							strcat(DialogThiago,string);
						}

					}
					else
					{
						format(string, 128, "{98F5FF}%s {FFFFFF}[%s] {FF4040}(Ausente)\n", sendername, lolz);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8789, DIALOG_STYLE_MSGBOX, "Administradores Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}

	if(strcmp(cmd, "/darhelper", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
     {
	    	if(PlayerInfo[playerid][pAdmin] < DONO)
	    	{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar este comando!");
				return 1;
	    	}
	        HelpersVaga();
	    	if(VagaSobrando == 0)
	    	{
				SendClientMessage(playerid, COLOR_GRAD1, "Não há mais vagas na lista use /limparhelper primeiro.");
				return 1;
	    	}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darhelper [id] [Nivel(de 1 a 300)]");
				return 1;
			}
			new para1;
			new level;
			para1 = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /darhelper [id] [Nivel(de 1 a 300)]");
				return 1;
			}
			level = strval(tmp);
			if(level > 300)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "	Não se pode criar um admin com nivel maior que 3001");
			    return true;
			}
			if(level == 0)
			{

			}
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
		    if(IsPlayerConnected(para1))
		    {
		        if(para1 != INVALID_PLAYER_ID)
		        {

					format(string, sizeof(string), "   Você foi promovido a nivel %d de helper, pelo admin %s", level, sendername);
					SendClientMessage(para1, COLOR_LIGHTBLUE, string);
					format(string, sizeof(string), "   Você promoveu %s Para helper Nivel %d", giveplayer,level);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					getdate(year, month, day);
					gettime(hour,minute,second);
					format(string, sizeof(string), "%s deu helper nivel %d para %s [%d/%d/%d] ás [%d:%d:%d].", sendername, level, giveplayer, day,
					month, year, hour, minute, second);
					PAdminsLog(string);
					for(new i = 0; i < sizeof(HelperInfo); i++)
    				{
						if(PlayerInfo[para1][pHelper] > 0)
						{
						    PlayerInfo[para1][pHelper] = level;
						    break;
						}
   						else if(HelperInfo[i][HelperVaga] == 0)
						{
							PlayerInfo[para1][pHelper] = level;
							HelperInfo[i][hMembro] = giveplayer;
							HelperInfo[i][HelperVaga] = 1;
							SaveHelper();
							break;
						}
					}
				}
			}
		}
		return 1;
	}

	if (strcmp(cmd, "/helpers", true) == 0)
	{
	    new DialogThiago[1500];
		//SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Helpers Online ]__________________|");
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pHelper] > 0)
			{
				if(helperhide[i] == 0)
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					new lolhel[20];
				    if(PlayerInfo[i][pHelper] >= 1 && PlayerInfo[i][pHelper] <= 60)
				    {
						lolhel = "Novato";
					}
					if(PlayerInfo[i][pHelper] >= 61 && PlayerInfo[i][pHelper] <= 150)
				    {
						lolhel = "Auxiliar";
					}
					if(PlayerInfo[i][pHelper] >= 151 && PlayerInfo[i][pHelper] <= 300)
				    {
						lolhel = "Master";
					}
					if(away[i] == 0)
					{
					    if(helpertrampando[i] == 1)
					    {
							format(string, 128, "{98F5FF}%s {FFFFFF}[%s] {98F5FF}(Trabalhando)\n", sendername, lolhel);
							strcat(DialogThiago,string);
						}
						else
					    {
							format(string, 128, "{9AFF9A}%s {FFFFFF}[%s] {9AFF9A}(Jogando)\n", sendername, lolhel);
							strcat(DialogThiago,string);
						}

					}
					else
					{
						format(string, 128, "{FF4040}%s {FFFFFF}[%s] {FF4040}(Ausente)\n", sendername, lolhel);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8790, DIALOG_STYLE_MSGBOX, "Helpers Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}



 	if(strcmp(cmd, "/afk", true) == 0)
 	{
    	if(PlayerInfo[playerid][pAdmin] < 1)
		{
		   	SendClientMessage(playerid,COLOR_GREY," Você não é um admin!");
		  	return true;
		}
		if(admtrampando[playerid] < 1)
		{
		   	SendClientMessage(playerid,COLOR_GREY," Você não está trabalhando, USE /trabalhar!");
		  	return true;
		}
	    if(away[playerid] == 1)
	    {
	        SendClientMessage(playerid,COLOR_GREY," Você já está modo AFK, use /sairafk!");
	    }
		else
	    {
		   SendClientMessage(playerid,COLOR_LIGHTRED," Você está AFK agora!");
		   away[playerid] = 1;
	    }
		return true;
	}
	if(strcmp(cmd, "/sairafk", true) == 0)
	{
	    if(away[playerid] == 0)
	    {
	        SendClientMessage(playerid,COLOR_GREY," Você não está modo AFK, use /afk!");
	    }
		else
	    {
		   SendClientMessage(playerid,COLOR_LIGHTRED," Você saiu do modo AFK!");
		   away[playerid] = 0;
	    }
	    return true;
	}
	if(strcmp(cmd, "/afkh", true) == 0)
 	{
    	if(PlayerInfo[playerid][pHelper] < 1)
		{
		   	SendClientMessage(playerid,COLOR_GREY," Você não é um helper!");
		  	return true;
		}
		if(helpertrampando[playerid] < 1)
		{
		   	SendClientMessage(playerid,COLOR_GREY," Você não está em modo serviço, USE: /shelper!");
		  	return true;
		}
	    if(away[playerid] == 1)
	    {
	        SendClientMessage(playerid,COLOR_GREY," Você já está modo AFK, use /sairafkh!");
	    }
		else
	    {
		   SendClientMessage(playerid,COLOR_LIGHTRED," Você está AFK agora!");
		   away[playerid] = 1;
	    }
		return true;
	}
	if(strcmp(cmd, "/sairafkh", true) == 0)
	{
	    if(away[playerid] == 0)
	    {
	        SendClientMessage(playerid,COLOR_GREY," Você não está modo AFK, use /afkh!");
	    }
		else
	    {
		   SendClientMessage(playerid,COLOR_LIGHTRED," Você saiu do modo AFK!");
		   away[playerid] = 0;
	    }
	    return true;
	}
	if(strcmp(cmd, "/trabalhar", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
			SendClientMessage(playerid,COLOR_YELLOW," Você não pode trabalhar na cadeia!");
	      	return true;
	    }
		if(PlayerInfo[playerid][pAdmin] >= 1)
		{
			if(admtrampando[playerid] > 0)
			{
				admtrampando[playerid] = 0;
				GetPlayerName(playerid,sendername,sizeof(sendername));
				SendClientMessageToAll(COLOR_AZULBB, "|_______________ Administração _______________|");
				format(string, 128, "{00BFFF}Admin: %s ID(%d) está Jogando, Veja em {E0EEE0}/admins",sendername, playerid);
				SendClientMessageToAll(0xFFFBF8AA, string);
				KillTimer(TempoAdministrador);
				SetPlayerToTeamColor(playerid);
				ResetPlayerWeaponsEx(playerid);
				SetPlayerHealth(playerid,100);
				SetPlayerSkin(playerid,skinadm[playerid]);
				getdate(year, month, day);
				gettime(hour,minute,second);
				format(gstring, sizeof(gstring), "%s esta jogando [%d/%d/%d - %d:%d:%d]\n", PlayerName(playerid), day, month, year, hour, minute, second);
				AdminLog(gstring);
			}
			else
			{
				admtrampando[playerid] = 1;
				GetPlayerName(playerid,sendername,sizeof(sendername));
				SendClientMessageToAll(COLOR_AZULBB, "|_______________ Administração _______________|");
				format(string, 128, "{00BFFF}Admin: %s ID(%d) está Trabalhando, veja em {E0EEE0}/admins",sendername, playerid);
     			SendClientMessageToAll(0xFFFBF8AA, string);
       			SetPlayerToTeamColor(playerid);
       			TempoAdministrador = SetTimerEx("Administrador", 100, true, "i", playerid);
			    skinadm[playerid] = GetPlayerSkin(playerid);
			    SetPlayerSkin(playerid,217);
				getdate(year, month, day);
				gettime(hour,minute,second);
				format(gstring, sizeof(gstring), "%s esta trabalhando [%d/%d/%d - %d:%d:%d]\n", PlayerName(playerid), day, month, year, hour, minute, second);
				AdminLog(gstring);
           }
		}
		return true;
	}

	if(strcmp(cmd, "/shelper", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
	    {
			SendClientMessage(playerid,COLOR_YELLOW," Você não pode entrar em serviço na cadeia!");
	      	return true;
	    }
		if(PlayerInfo[playerid][pHelper] >= 1)
		{
			if(helpertrampando[playerid] > 0)
			{
				helpertrampando[playerid] = 0;
				GetPlayerName(playerid,sendername,sizeof(sendername));
				SendClientMessageToAll(COLOR_AZULBB, "|_______________ Administração _______________|");
				format(string, 128, "{FFBBFF}Helper: %s ID(%d) está Jogando, Veja em {B3EE3A}/helpers.",sendername, playerid);
				SendClientMessageToAll(0xFFFBF8AA, string);
				KillTimer(TempoHelper);
				SetPlayerToTeamColor(playerid);
				ResetPlayerWeaponsEx(playerid);
				SetPlayerHealth(playerid,100);
				SetPlayerSkin(playerid,skinadm[playerid]);
			}
			else
			{
				helpertrampando[playerid] = 1;
				GetPlayerName(playerid,sendername,sizeof(sendername));
    			SendClientMessageToAll(COLOR_AZULBB, "|_____________ Administração _____________|");
				format(string, 128, "{FFBBFF}Helper: %s ID(%d) está em serviço, veja em {B3EE3A}/helpers.",sendername, playerid);
     			SendClientMessageToAll(0xFFFBF8AA, string);
       			SetPlayerToTeamColor(playerid);
       			TempoHelper = SetTimerEx("Helper", 100, true, "i", playerid);
			    skinadm[playerid] = GetPlayerSkin(playerid);
			    SetPlayerSkin(playerid,101);
           }
		}
		return true;
	}
 	if (strcmp(cmd,"/Lideres",true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
		 	new DialogThiago[1500];
			//SendClientMessage(playerid,COLOR_WHITE, "|________________[ Lideres Online ]________________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    new celular = PlayerInfo[i][pPnumber];
        			if(PlayerInfo[i][pLider] == 1)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {7AADFF}(Polícia Militar){FFFFFF} Cel [%d] {7AADFF}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 2)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {ADC7D9}(B.O.P.E){FFFFFF} Cel [%d] {ADC7D9}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 3)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {6CD950}(Exercito){FFFFFF} Cel [%d] {6CD950}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 4)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {F7819A}(S.A.M.U){FFFFFF} Cel [%d] {F7819A}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {337EFF}(Los Aztecas){FFFFFF} Cel [%d] {337EFF}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 6)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {48A3E0}(Taliban){FFFFFF} Cel [%d] {48A3E0}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 7)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}=> {6AB4E6}Prefeito: %s {FFFFFF}<= Cel [%d] {6AB4E6}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 8)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {C2CBD1}(Hitmans){FFFFFF} Cel [%d] {C2CBD1}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 9)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {EDD893}(Rede Globo){FFFFFF} Cel [%d] {EDD893}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 10)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {93EDDE}(Taxistas){FFFFFF} Cel [%d] {93EDDE}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 11)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {BFA873}(Policia Federal){FFFFFF} Cel [%d] {BFA873}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 12)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {BF9B47}(Máfia Cosa Nostra){FFFFFF} Cel [%d] {BF9B47}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 13)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {8136B3}(Máfia Yakuza){FFFFFF} Cel [%d] {8136B3}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 14)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {00DB1D} (Groove){FFFFFF} Cel [%d] {00DB1D} ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 15)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {EDE187}(Al'qaeda){FFFFFF} Cel [%d] {EDE187}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 16)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {BDA34D}(Polícia Civil){FFFFFF} Cel [%d] {BDA34D}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pLider] == 17)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {CB42E3}(Ballas){FFFFFF} Cel [%d] {CB42E3}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 18)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {E1ED00}(Vagos){FFFFFF} Cel [%d] {E1ED00}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 19)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {FF0000}(Comando Vermelho){FFFFFF} Cel:[%d] {FF0000}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 20)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {C90000}(Sons of Anarchy){FFFFFF} Cel:[%d] {C90000}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 21)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {46F274}(Drifters){FFFFFF} Cel:[%d] ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 22)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {A87A31}(Triads){FFFFFF} Cel:[%d] ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
          			else if(PlayerInfo[i][pLider] == 23)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {FF0066}(F.A.R.C){FFFFFF} Cel [%d] {FF0066}ID[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
  			        else if(PlayerInfo[i][pLider] == 24)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {FFB90F}(D.E.T.R.A.N){FFFFFF} Cel [%d] {FFB90F}ID[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pLider] == 25)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Lider: %s {696969}(Advogados){FFFFFF} Cel:[%d] {696969}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8793, DIALOG_STYLE_MSGBOX, "Lideres Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}

	if (strcmp(cmd,"/sublideres",true) == 0 || strcmp(cmd,"/sub-lideres",true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        new DialogThiago[1500];
			//SendClientMessage(playerid,COLOR_WHITE, "|________________[ Sub-Lideres Online ]________________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    new celular = PlayerInfo[i][pPnumber];
					if(PlayerInfo[i][pMembro] == 1 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {7AADFF}(Polícia Militar){FFFFFF} Cel [%d] {7AADFF}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 2 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {ADC7D9}(B.O.P.E){FFFFFF} Cel [%d] {ADC7D9}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 3 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {6CD950}(Exercito){FFFFFF} Cel [%d] {6CD950}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 4 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {F7819A}(S.A.M.U){FFFFFF} Cel [%d] {F7819A}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 5 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {337EFF}(Los Aztecas){FFFFFF} Cel [%d] {337EFF}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 6 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {48A3E0}(Taliban){FFFFFF} Cel [%d] {48A3E0}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 7 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}=> {6AB4E6}Vice-Prefeito: %s {FFFFFF}<= Cel [%d] {6AB4E6}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 8 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {C2CBD1}(Hitmans){FFFFFF} Cel [%d] {C2CBD1}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 9 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {EDD893}(Rede Globo){FFFFFF} Cel [%d] {EDD893}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 10 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {93EDDE}(Taxistas){FFFFFF} Cel [%d] {93EDDE}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 11 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {BFA873}(Policia Federal){FFFFFF} Cel [%d] {BFA873}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 12 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {BF9B47}(Máfia Cosa Nostra){FFFFFF} Cel [%d] {BF9B47}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 13 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {8136B3}(Máfia Yakuza){FFFFFF} Cel [%d] {8136B3}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 14 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {00DB1D}(Groove){FFFFFF} Cel [%d] {00DB1D}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 15 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {EDE187}(Al'qaeda){FFFFFF} Cel [%d] {EDE187}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 16 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {BDA34D}(Polícia Civil){FFFFFF} Cel [%d] {BDA34D}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 17 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {CB42E3}(Ballas){FFFFFF} Cel [%d] {CB42E3}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 18 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {E1ED00}(Vagos){FFFFFF} Cel [%d] {E1ED00}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 19 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {FF0000}(Comando Vermelho){FFFFFF} Cel:[%d] {FF0000}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 20 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {C90000}(Sons of Anarchy){FFFFFF} Cel:[%d] {C90000}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 21 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {46F274}(Drifters){FFFFFF} Cel:[%d] {46F274}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 22 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {A87A31}(Triads){FFFFFF} Cel:[%d] {A87A31}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
     				else if(PlayerInfo[i][pMembro] == 23 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {FF0066}(F.A.R.C){FFFFFF} Cel [%d] {FF0066}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 24 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {FFB90F}(D.E.T.R.A.N){FFFFFF} Cel [%d] {FFB90F}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pMembro] == 25 && PlayerInfo[i][pCargo] == 5)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128,"{FFFFFF}Sub-Lider: %s {696969}(Advogados){FFFFFF} Cel [%d] {696969}ID:[%d]\n",sendername,celular,i);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8796, DIALOG_STYLE_MSGBOX, "Sub-Lideres Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}

	if (strcmp(cmd, "/vips", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
	        new DialogThiago[1500];
			//SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Vips Online ]__________________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pVIP] == 0)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "{FFFFFF}%s {98F5FF}[VIP]\n", sendername);
						strcat(DialogThiago,string);
					}
					else if(PlayerInfo[i][pVIP] == 1)
				    {
						GetPlayerName(i,sendername,sizeof(sendername));
						format(string,128, "{FFFFFF}%s {9AFF9A}[VIP Premium]\n",sendername);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8791, DIALOG_STYLE_MSGBOX, "Vips Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}

	if (strcmp(cmd, "/advogados", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			new DialogThiago[1500];
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMembro] == 25||PlayerInfo[i][pLider] == 25)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "{FFFFFF}Advogado: %s {FF0022} Cel: %d{FFFFFF}\n", sendername,PlayerInfo[i][pPnumber]);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8799, DIALOG_STYLE_MSGBOX, "Advgados Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}
	if (strcmp(cmd, "/detrans", true) == 0)
	{
        if(IsPlayerConnected(playerid))
	    {
			new DialogThiago[1500];
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pMembro] == 24||PlayerInfo[i][pLider] == 24)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, " {FFFFFF}Detran: %s {d68f11}Cel: %d\n", sendername,PlayerInfo[i][pPnumber]);
						strcat(DialogThiago,string);
					}
					ShowPlayerDialog(playerid, 8799, DIALOG_STYLE_MSGBOX, "Funcionários do Detran Online", DialogThiago, "Fechar", "");
				}
			}
		}
		return true;
	}
//----------------------------------[HELP]-----------------------------------------------
 	if(strcmp(cmd, "/ajuda", true) == 0 || strcmp(cmd, "/help", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        Controle(playerid, 0);
	    	ShowPlayerDialog(playerid, 10, DIALOG_STYLE_LIST, "{D54DF0}Ajuda do {00EE00}B{FFD700}G{00B2EE}O{FFFFFF}", "Regras\nAjuda Player\nAjuda Empresa\nAjuda Casa\nAjuda Aluguel\nAjuda Celular\nAjuda Lider\nAjuda Emprego\nAjuda Pesca\nAjuda Cozinha\nAjuda Casamento\nNosso Forum\nAjuda VIP\nAjuda Carro\nAjuda Nuclear\nConta Premium\nAjuda Vip premium", "Selecionar", "Cancelar");
		}
		return true;
	}
	if(strcmp(cmd, "/regras", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    SendClientMessage(playerid, COLOR_LIGHTRED,"[BRNM]: Vá ao forum,( /forum ) !");
  		}
		return true;
	}
// ---------------------------------{ Interfone Admin} ------------------------------------
 	if(strcmp(cmd, "/interfoneadmin", true) == 0)
	{
		new interfonestring[128];
		if (PlayerToPoint(15.0, playerid, 1207.3396,-1441.3483,13.3828))
		{
        if(InterfonouEnviou[playerid] == 1) {
		SendClientMessage(playerid, COLOR_GREY, "Você já chamou espera 5 min para chamar novamente.");
		return true;
		}
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		  if(IsPlayerConnected(i) && PlayerInfo[i][pAdmin] >= SUB_DONO)
          {
         SendClientMessage(playerid, COLOR_GREEN, "Você tocou o interfone aguarde uma resposta...");
         format(interfonestring, sizeof(interfonestring), "O %s está tocando o interfone do seu escritório.", PlayerName(playerid));
         SendClientMessage(i, COLOR_YELLOW, interfonestring);
         InterfonouEnviou[playerid] = 1;
         InterfonouKill[playerid] = SetTimerEx("InterfoneAdmin", 300000, 0, "i", playerid);
		 return 1;
			  }
			  else {
                   SendClientMessage(playerid, COLOR_WHITE, "Não há ninguém atendendo no escritório no momento.");
			  }
		  }
        }
  		return true;
	}
	if(strcmp(cmd, "/ajudanpc", true) == 0)
	{
       if(PlayerToPoint(1.5, playerid, 2226.3379,-1158.2490,25.7794))
       {
            Controle(playerid, 0);
	    	ShowPlayerDialog(playerid, DialogNPC, DIALOG_STYLE_LIST, "Ajuda [NPC]Reginaldo", "1 - Fórum, Regras e Facebook\n2 - Conta VIP Premium\n3 - Primeiros Comandos\n4 - Tutoriais dos Empregos\n5 - Como obter ajuda\n6 - Como entrar em uma Organização/Gang\n7 - Utilizando o celular\n8 - Entendendo o seu RG\n9 - Ganhando dinheiro", "Selecionar", "Cancelar");
       }
	   return true;
	}
//----------------------------------{Portoes DP}--------------------------------------------
	if(strcmp(cmd, "/pp", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 247.005905 , 72.448440 , 1003.640625) || PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25)
		{ //GateInteriorCela
			MoveObject( PDDOORa, 247.005905 , 72.448440 , 1006.912902,3,0.0,0.0,1260.0);
			GameTextForPlayer(playerid, "~w~Porta das Celas ~n~~b~Aberto", 4000, 3);
			SetTimer("GaragemDpClosed", 4000, false);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você não está perto do portão ou não é um Oficial ");
	  	}
  		return true;
	}
//----------------------------------{Portoes DP2}----------------------------------------
	if(strcmp(cmd, "/pr", true) == 0)
    {
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 250.774871 , 60.822799 , 1003.640625))
		{ //GateGaragem
			MoveObject( PDDOORb, 250.774871 , 60.822799 , 1006.862670,3,0.0,0.0,5130.0);
			GameTextForPlayer(playerid, "~w~Porta da Recepcao ~n~~b~Aberto", 5000, 3);
			SetTimer("GaragemDpClosed2", 5000, false);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você não está perto do portão ou não é um Oficial ");
  		}
  		return true;
	}
//----------------------------------{Portoes DP3}----------------------------------------
	if(strcmp(cmd, "/pv", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 248.142105 , 78.125961 , 1003.640625))
		{ //GateGaragem
			MoveObject( PDDOORc, 248.142105 , 78.125961 , 1007.248718,3,0.0,0.0,12690.0);
			GameTextForPlayer(playerid, "~w~Porta do Vestiario ~n~~b~Aberto", 5000, 3);
			SetTimer("pd1", 5000, false);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "   Você não está perto do portão ou não é um Oficial ");
  		}
  		return true;
	}
//----------------------------------{Portoes LS}----------------------------------------
	if(strcmp(cmd, "/pe", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 1546.8681640625, -1627.3585205078, 15.156204223633))
		{ //GateGaragem
			MoveObject( PDPMLS, 1546.86816, -1627.35852, 7.15620,3.0,0.0,0.0,90.0);
			GameTextForPlayer(playerid, "~w~Garagem Externa ~n~~b~Aberta", 4200, 3);
			SetTimer("pd2", 4200, false);
		}
	  	return true;
	}

//----------------------------------{Portoes LS2}----------------------------------------
	if(strcmp(cmd, "/pg", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 1588.555786, -1637.811157, 15.911808))
		{ //GateGaragem
			MoveObject( PDGARAGE, 1588.195,-1637.969, 20.086790,3,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Garagem Interna ~n~~b~Aberta", 5000, 3);
			SetTimer("pd3", 5000, false);
		}
	  	return true;
	}
//----------------------------------{Portoes DP5}----------------------------------------
	if(strcmp(cmd, "/pcg", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 2334.757568, 2443.675537, 8.250650))
		{ //GateGaragem
			MoveObject( gatepf2, 2334.757568, 2443.675537, 12.200590,3,0.0, 0.0, 236.2500);
			GameTextForPlayer(playerid, "~b~Aberto", 5000, 3);
			SetTimer("PFClosed2", 5000, false);
		}
	  	return true;
	}
 //----------------------------------{Portoes DP6}----------------------------------------
	if(strcmp(cmd, "/pce", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 2293.928467, 2499.322021, 5.825822))
		{ //GateGaragem
			MoveObject( gatepf3, 2293.928467, 2506.294678, 5.825822,3,0.0, 0.0, 90.0);
			GameTextForPlayer(playerid, "~b~Aberto", 5000, 3);
			SetTimer("PFClosed3", 5000, false);
		}
	  	return true;
	}
//----------------------------------{Portoes POLICIA FEDERAL}----------------------------------------
	if(strcmp(cmd, "/pc", true) == 0)
	{
  			if ((IsACop(playerid)) && PlayerToPoint(20.0, playerid, 923.5170, -1209.0148, 18.7499))
		    {
		        MoveObject( portaoPC1, 923.56256103516, -1209.1229248047, 18.749954223633,3,0.0,0.0,270.0);
		        MoveObject( portaoPC2, 923.56256103516, -1209.1229248047, 18.749954223633,3,0.0,0.0,270.0);
				GameTextForPlayer(playerid, "~w~Portao PC ~n~~b~Aberto", 5000, 3);
				SetTimer("PortaoPoliciaC1", 5000, false);
		    }
	  	return true;
	}
	if(strcmp(cmd, "/ptpc",true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 922.45611572266, -1208.7191162109, 17.982734680176) || PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25)
 		{
			MoveObject( PortaooPC, 922.40142822266, -1209.5806884766, 22.020156860352,3);
			GameTextForPlayer(playerid, "~w~Portao~n~~b~Aberto", 5000, 3);
			SetTimer("PortaooPC2", 5000, false);
		}
	  	return true;
	}
//----------------------------------{Portoes B.O.P.E}----------------------------------------
	if(strcmp(cmd, "/pb", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, 1268.7274,-1599.6857,9.1509) || PlayerToPoint(15.0, playerid, 1212.3132,-1645.2601,6.2861))
		{ //GateGaragem
			MoveObject( gt3gate, 1267.0302, -1602.1642, 2.8542,3,0.0, 0.0, 331.0945);
			MoveObject( gt3gate3, 1212.5449, -1643.5854, 13.7056,3,0.0, 0.0, 359.9322);
			GameTextForPlayer(playerid, "~w~Portao Bope ~n~~b~Aberto", 5000, 3);
			SetTimer("gt3gate2", 5000, false);
		}
	  	return true;
	}
//----------------------------------{Exercito}----------------------------------------
	if(strcmp(cmd, "/abrirgn", true) == 0)
	{
		if ((IsACop(playerid)) && PlayerToPoint(15.0, playerid, -1531.3978271484, 482.25979614258, 8.9530792236328))
		{ //GateGaragem
			MoveObject(PDEx, -1531.3978271484, 482.25979614258, 13.9530792236328,3,0.0,0.0,360);
			GameTextForPlayer(playerid, "~w~Portao Exercito ~n~~b~Aberto", 5000, 3);
			SetTimer("PDEx2", 5000, false);
		}
	  	return true;
	}
	if(strcmp(cmd, "/pyakuza", true) == 0)
	{
		if (PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
		{
		    if(PlayerToPoint(15.0, playerid, 664.8344,-1309.7133,13.4609))
		    {
		        MoveObject(pyakuza1, 677.862,-1309.311,15.234,3,0.0,0.0,0.0);
				GameTextForPlayer(playerid, "~w~Portao Yakuza ~n~~b~Aberto", 5000, 3);
				SetTimer("fecharyakuza1", 5000, false);
		    }
		    else if(PlayerToPoint(15.0, playerid, 785.5371,-1157.6627,23.5792))
		    {
                MoveObject( pyakuza3, 785.128,-1162.442,25.430,3,0.0,0.0,88.522);
				GameTextForPlayer(playerid, "~w~Portao Yakuza ~n~~b~Aberto", 5000, 3);
				SetTimer("fecharyakuza3", 5000, false);
		    }
  		}
  		return true;
	}
	if(strcmp(cmd, "/acn", true) == 0)
	{
		if (PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
		{
		    if(PlayerToPoint(15.0, playerid, 321.39999389648, -1188.1999511719, 77.099998474121))
		    {
		        MoveObject(acn, 321.39999389648, -1188.1999511719, 66.099998474121,3,0.0,359, 37.996215);
				GameTextForPlayer(playerid, "~w~Portao Cosa Nostra ~n~~b~Aberto", 5000, 3);
				SetTimer("fecharacn", 5000, false);
			}
  		}
  		return true;
	}

	if(strcmp(cmd, "/ptaxi", true) == 0)
	{
		if ((PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10) && PlayerToPoint(15.0, playerid, 959.8434,-1415.2617,13.3612))
		{
			MoveObject( PortaoTaxi, 970.840,-1415.794,15.151,3,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Portao Taxi ~n~~b~Aberto", 5000, 3);
			SetTimer("PortaoTaxi2", 5000, false);
		}
	  	return true;
	}
//----------------------------------{Portao GOVERNO}----------------------------------------
	if(strcmp(cmd, "/pgov", true) == 0)
	{
		if ((IsAGOV(playerid)) && PlayerToPoint(15.0, playerid, 1539.2235107422, -1838.2176513672, 15.320266723633))
		{ //Portao Governo
			MoveObject( PortaoGov, 1539.6215, -1839.0825, 9.6015,3,0.0000, 0.0000, 269.2843);
			GameTextForPlayer(playerid, "~w~Portao Governo ~n~~b~Aberto", 5000, 3);
			SetTimer("PortaoGov2", 5000, false);
		}
	  	return true;
	}
	if(strcmp(cmd, "/ppre", true) == 0)
	{
		if ((IsAGOV(playerid)) && PlayerToPoint(15.0, playerid, 369.15893554688, 162.35037231445, 1028.6030273438))
		{ //Portao Governo
			MoveObject( PortaoPre, 369.15893554688, 162.35037231445, 1030.9030273438,3, 0.0, 0.0, 270.67565);
			GameTextForPlayer(playerid, "~w~Porta Prefeitura ~n~~b~Aberta", 5000, 3);
			SetTimer("PortaoPre2", 5000, false);
		}
	  	return true;
	}
	//============================detran======================
	if(strcmp(cmd, "/pdeposito", true) == 0)
	{
		if ((IsADetran(playerid)) && PlayerToPoint(15.0, playerid, 1641.8695,-1714.3433,15.3588))
		{ //Portao detran
			MoveObject( PortaoDeposito, 1643.8000488281, -1710.0999755859, 14.60000038147,3,0.0, 0.0, 90.00000);
			GameTextForPlayer(playerid, "~w~Portao deposito ~n~~b~Aberto", 5000, 3);
			SetTimer("PortaoDeposito2", 5000, false);
		}
	  	return true;
	}
	//comando portao da casa
	if(strcmp(cmd, "/p216", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 216 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
			if(Portaogaragem216 == false)
		{
			MoveObject( Portaocasa216, 1302.8000488281, -1862.4000244141,18.60000038147,3,0.0, 0.0, 270.00000);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			Portaogaragem216 = true;
		}
			else
			{
			MoveObject( Portaocasa216, 1302.8000488281,-1862.4000244141,14.60000038147,3,0.0, 0.0, 270.00000);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
			Portaogaragem216 = false;
		}
	  	return true;
	}
	//comando portao hq pf
	if(strcmp(cmd, "/ppfd", true) == 0)
	{
		if (PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
	{
			if(PortaoPF2 == false)
		{
			MoveObject( PortaoPF, 618.40002441406,-596.90002441406,21.799999237061,3,0.0, 0.0, 0.000000);
			SendClientMessage(playerid,COR_PF,"Painel Eletrônico: Portão Aberto");
			PortaoPF2 = true;
		}
			else
			{
			MoveObject( PortaoPF, 618.40002441406,-596.90002441406,18,3,0.0, 0.0, 0.000000);
			SendClientMessage(playerid,COR_PF,"Painel Eletrônico: Portão Fechado");
			PortaoPF2 = false;
		}
	  	return true;
	}
	}
	////////////////////////////////////
	if(strcmp(cmd, "/pp216", true) == 0)
	{
	    new House = PlayerInfo[playerid][pPHousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (House != 216 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner], true) == 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Você não é dono dessa casa.");
				return true;
			}
			if(Portao2garagem216 == false)
		{
			MoveObject( Portao2casa216, 1296.8000488281,-1862.3000488281,18.60000038147,3,0.0, 0.0, 270.00000);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Aberto");
			Portao2garagem216 = true;
		}
			else
			{
			MoveObject( Portao2casa216, 1296.9000244141,-1862.1999511719,14.60000038147,3,0.0, 0.0, 270.00000);
			SendClientMessage(playerid,COLOR_LIGHTGREEN,"Controle Remoto: Portão Fechado");
			Portao2garagem216 = false;
		}
	  	return true;
	}

	//=================================================================================================================================


//PORTAO RALLY
	if(strcmp(cmd, "/portaorally", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 1 && PlayerToPoint(15.0, playerid, -2368.4670410156, -2192.6381835938, 36.037666320801))
		{ //PortaoAdmin
			MoveObject( PortaoRally, -2368.4670410156, -2192.6381835938, 42.037666320801,3, 0, 0, 292.51049);
			GameTextForPlayer(playerid, "~w~Pista de Rally ~n~~b~Aberta", 25000, 3);
			SetTimer("PortaoRally2", 25000, false);
		}
	  	return true;
	}
//----------------------------------{PortaoReporter}----------------------------------------
	if(strcmp(cmd, "/portaoreporter", true) == 0 || strcmp(cmd, "/preporter", true) == 0)
	{
		if ((IsAJornal(playerid)) && PlayerToPoint(15.0, playerid, 777.80017089844, -1330.2664794922, 14.200000762939))
		{ //PortaoAdmin
			MoveObject( PortaoReporter, 777.80017089844, -1330.2664794922, 20.200000762939,3,0.0,0.0,0.0);
			GameTextForPlayer(playerid, "~w~Portao ~y~Rede Globo ~n~~b~Aberto", 5000, 3);
			SetTimer("PortaoReporter2", 5000, false);
		}
	  	return true;
	}

//----------------------------------{Portao Policia Federal}----------------------------------------
	if(strcmp(cmd, "/ajudacozinha", true) == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "USE: /ajuda");
		return true;
	}
	if(strcmp(cmd, "/vhelp", true) == 0 || strcmp(cmd, "/vipajuda", true) == 0 || strcmp(cmd, "/ajudavip", true) == 0
	|| strcmp(cmd, "/shelp", true) == 0 || strcmp(cmd, "/socioajuda", true) == 0 || strcmp(cmd, "/ajudasocio", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if (PlayerInfo[playerid][pVIP] >= 0)
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda VIP e Premium]______________|");
				SendClientMessage(playerid, 0xCDB38BAA, "-> /kitvip /mala /desativar celular ) /relatorio(cor destacada)");
				SendClientMessage(playerid, 0xCDB38BAA, "->  /kitpremium (kit de armas Premium)");
				SendClientMessage(playerid, COLOR_GRAD1, "-> Casas VIPS: /ajudacasa");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/saircarro", true) == 0)
	{
	if(IsPlayerConnected(playerid))
	{
	    TaCongelado[playerid] = false;
		TogglePlayerControllable(playerid, 1);
	    RemovePlayerFromVehicleEx(playerid);
		return 1;
	}
      return 1;
 }
if(strcmp(cmd, "/apreender", true) == 0)
for(new car = 501; car <= 709; car++)
{
    if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)
    {
    if(OnDuty[playerid] != 1)
        {
				    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
				    return true;
        }
        if(GetPlayerOrg(playerid) == 24)
			{
				if(PlayerInfo[playerid][pCargo] < 1)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 1 para usar este comando!");
			    	return true;
				}
        if(IsPlayerInAnyVehicle(playerid))
        {
        if(IsPlayerInPatio(playerid))
		{
			new Float:x,Float:y,Float:z;
			new Float:a;
			new carid;
			carid = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, playername, sizeof(playername));
            GetVehiclePos(carid, x, y, z);
            GetVehicleZAngle(carid, a);
			if(IsPlayerInAnyVehicle(playerid))
            {
				CarInfo[carid][cLocationx] = x;
				CarInfo[carid][cLocationy] = y;
				CarInfo[carid][cLocationz] = z;
				CarInfo[carid][cAngle] = a;
				CarInfo[carid][VeiculoAprendido] = 1;
				format(string, sizeof(string), "~n~ Voce estacionou o carro neste local. ~n~");
				GameTextForPlayer(playerid, "Voce estacionou o carro nessa posicao. Ele vai reaparecer aqui.", 10000, 3);
                OnPropUpdate2(); SavePlayerData(playerid);
	    		DestroyVehicle(carid);
	    		new thiscar = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],60000);
	    		LoadComponents(thiscar);
                SendClientMessage(playerid, COR_DETRAN, "Veículo Apreendido.");
                format(string, sizeof(string), "[D.E.T.R.A.N] O Funcionário %s Apreendeu o Veículo de %s.", PlayerName(playerid), CarInfo[carid][cOwner]);
			    SendClientMessageToAll(COR_DETRAN, string);
                return true;
			}
				else SendClientMessage(playerid, COR_DETRAN, "Você não está no deposito do D.E.T.R.A.N!");
				return true;
        }
	        else SendClientMessage(playerid, COR_DETRAN, "Você não está em um veiculo.");
	        return true;
    }
	    else SendClientMessage(playerid, COR_DETRAN, "Você não é do Detran.");
	    return true;
	}
		return 1;
	}
}

if(strcmp(cmd, "/liberarcarro", true) == 0)
for(new car = 501; car <= 709; car++)
{
    if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24)
    {
    if(OnDuty[playerid] != 1)
        {
				    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
				    return true;
        }
        if(GetPlayerOrg(playerid) == 24)
			{
				if(PlayerInfo[playerid][pCargo] < 1)
				{
			    	SendClientMessage(playerid, COLOR_GREY, "Voce precisa ter pelo menos cargo 1 para usar este comando!");
			    	return true;
				}
        if(IsPlayerInAnyVehicle(playerid))
        {
        if(IsPlayerInPatio(playerid))
		{
			new Float:x,Float:y,Float:z;
			new Float:a;
			new carid;
			carid = GetPlayerVehicleID(playerid);
			GetPlayerName(playerid, playername, sizeof(playername));
            GetVehiclePos(carid, x, y, z);
            GetVehicleZAngle(carid, a);
			if(IsPlayerInAnyVehicle(playerid))
            {
				CarInfo[carid][cLocationx] = x;
				CarInfo[carid][cLocationy] = y;
				CarInfo[carid][cLocationz] = z;
				CarInfo[carid][cAngle] = a;
				CarInfo[carid][VeiculoAprendido] = 0;
                OnPropUpdate2(); SavePlayerData(playerid);
	    		DestroyVehicle(carid);
	    		new thiscar = CreateVehicle(CarInfo[carid][cModel],CarInfo[carid][cLocationx],CarInfo[carid][cLocationy],CarInfo[carid][cLocationz]+1.0,CarInfo[carid][cAngle],CarInfo[carid][cColorOne],CarInfo[carid][cColorTwo],60000);
	    		LoadComponents(thiscar);
                SendClientMessage(playerid, COR_DETRAN, "Veículo Liberado.");
                format(string, sizeof(string), "[D.E.T.R.A.N] O Funcionário %s Liberou o Veículo de %s.", PlayerName(playerid), CarInfo[carid][cOwner]);
			    SendClientMessageToAll(COR_DETRAN, string);
                return true;
			}
				else SendClientMessage(playerid, COR_DETRAN, "Você não está no deposito do D.E.T.R.A.N!");
				return true;
        }
	        else SendClientMessage(playerid, COR_DETRAN, "Você não está em um veiculo.");
	        return true;
    }
	    else SendClientMessage(playerid, COR_DETRAN, "Você não é do Detran.");
	    return true;
	}
		return 1;
	}
}
	if(strcmp(cmd, "/arrastar", true) == 0)
    {
        if(IsPlayerConnected(playerid))
        {
            //if(PlayerInfo[playerid][pTanabolisante] > 0) return SendClientMessage(playerid,COLOR_GREY,"[AV] Você está suspenso!");
            if(!IsACop(playerid))
            {
                SendClientMessage(playerid, COLOR_GRAD1, "Você não é um Oficial!");
                return 0x01;
            }
            tmp = strtok(cmdtext, idx);
            if(!strlen(tmp))
            {
                SendClientMessage(playerid, COLOR_GRAD2, "/arrastar [ID]");
                return 0x01;
            }
            new newcar = GetPlayerVehicleID(playerid);
            new playa;
            playa = ReturnUser(tmp);
            if(IsAPoliciaCivilCar(newcar) || IsABOPEsCar(newcar) || IsAPFCar(newcar) || IsACopCar(newcar) || IsAExCar(newcar))
            {
                if(IsPlayerConnected(playa))
                {
                    if(playa != INVALID_PLAYER_ID)
                    {
                        new Float:x, Float:y, Float:z;
                        GetPlayerPos(playa,x,y,z);
                        if(IsPlayerInRangeOfPoint(playerid, 5, x, y, z))
                        {
                            PutPlayerInVehicle(playa,newcar,2);
                            GetPlayerName(playa, giveplayer, sizeof(giveplayer));
                            format(string, sizeof(string), "* %s colocou %s no camburão.", PlayerName(playerid) ,giveplayer);
                            ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        }
                        else
                        {
                            SendClientMessage(playerid, COLOR_GREY, "Jogador não está próximo a você.");
                        }
                    }
                }
            }
            else
            {
                SendClientMessage(playerid, COLOR_GRAD1, "Você não está em um veículo policial!");
            }
        }
        return 0x01;
    }
if(strcmp(cmd, "/bcd", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode bater cartao na cadeia!");
			return true;
	    }
	    if(IsPlayerConnected(playerid))
	    {
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(IsADetran(playerid))
			{
            if(PlayerToPoint(1,playerid,370.8871,174.5609,1019.9844))
				{
					if(OnDuty[playerid]==0)
			        {
						format(string, sizeof(string), "O Funcionário do D.E.T.R.A.N %s bateu o cartão e está em serviço.", sendername);
						OOCNews(COR_DETRAN,string);
						//SetPlayerAttachedObject(playerid,3,18637,13,0.35,0.0,0.0,0.0,0.0,180.0);
						SetPlayerArmour(playerid, 100);
						SetPlayerHealth(playerid, 100);
						SendClientMessage(playerid, COR_DETRAN, "Você esta em serviço e agora podera aplicar multas e apreender veículos.");
						OnDuty[playerid] = 1;
						EmpregoDuty[playerid] = 2;
						Copsronda += 1;
					}
					else if(OnDuty[playerid]==1)
					{
						format(string, sizeof(string), "O Funcionário do D.E.T.R.A.N %s está de folga", sendername);
						OOCNews(COR_DETRAN,string);
						//RemovePlayerAttachedObject(playerid,3);
						SendClientMessage(playerid, COR_DETRAN, "Você esta de folga");
						OnDuty[playerid] = 0;
						EmpregoDuty[playerid] = 0;
						Copsronda -= 1;
					}
				}
			//	else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "");
					return true;
				}
			}
			}
		return true;
	}
 	if(strcmp(cmd, "/retirardetran", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsADetran(playerid))
			{
			    SendClientMessage(playerid, COR_DETRAN, "   Você não é um DETRAN!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COR_DETRAN, "   Você não Bateu o cartão!");
			    return true;
			}
	        if(IsADetran(playerid))
	        {
	            if(PlayerInfo[playerid][pCargo] < 4)
	            {
	                SendClientMessage(playerid, COR_DETRAN, "   Você precisa de cargo 4 para usar este comando !");
	                return true;
	            }
	            new x_nr[32];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COR_DETRAN, "|__________________[ Retirar Habilitação ]__________________|");
					SendClientMessage(playerid, COR_DETRAN, "USE: /retirar habilitacao [id]");
					return true;
				}
			    if(strcmp(x_nr,"habilitacao",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COR_DETRAN, "USE: /retirar habilitacao [id]");
						return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
						        new cop[MAX_PLAYER_NAME];
				                GetPlayerName(playerid, cop, sizeof(cop));
				                new fudido[MAX_PLAYER_NAME];
				                GetPlayerName(giveplayerid, fudido, sizeof(fudido));
						        format(string, sizeof(string), "* Você retirou a licença de motorista de %s.", fudido);
						        SendClientMessage(playerid, COR_DETRAN, string);
						        format(string, sizeof(string), "* D.E.T.R.A.N %s Retirou sua licença de motorista.", cop);
						        SendClientMessage(giveplayerid, COR_DETRAN, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COR_DETRAN, "   O Jogador está longe de você !");
							    return true;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COR_DETRAN, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COR_DETRAN, "   Nome inválido !");
					return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COR_DETRAN, "   Você não e DETRAN !");
	            return true;
	        }
	    }
	    return true;
	}
if(strcmp(cmd, "/criareventoeagle", true) == 0)
{if(IsPlayerConnected(playerid))
{
if(PlayerInfo[playerid][pAdmin] >= 4)
{if(Evento == 1)
{SendClientMessage(playerid, COLOR_WHITE, "Já está decorrendo um evento use, /pararevento para abrir outro!");
return true;
}
if(Evento == 0)
{
SendClientMessage(playerid, COLOR_WHITE, "Você está criando um evento e chamando todos do BRNM.");
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(IsPlayerConnected(i))
{
Evento = 1;GetPlayerName(playerid, sendername, sizeof(sendername));
format(string,sizeof(string),"Administração: %s está chamando todos para um Evento.\nPara ir ao evento clique em 'SIM'.\nPara não ir clique em 'NÃO'.",sendername);
ShowPlayerDialog(i, EVENTOCC, DIALOG_STYLE_MSGBOX, "EVENTO INICIADO", string, "Sim", "Não");
GetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
}
}
}
}
return true;
}
}
if(strcmp(cmd, "/criareventom4", true) == 0)
{if(IsPlayerConnected(playerid))
{
if(PlayerInfo[playerid][pAdmin] >= 4)
{if(Evento == 1)
{SendClientMessage(playerid, COLOR_WHITE, "Já está decorrendo um evento use, /pararevento para abrir outro!");
return true;
}
if(Evento == 0)
{
SendClientMessage(playerid, COLOR_WHITE, "Você está criando um evento e chamando todos do BRNM.");
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(IsPlayerConnected(i))
{
Evento = 1;GetPlayerName(playerid, sendername, sizeof(sendername));
format(string,sizeof(string),"Administração: %s está chamando todos para um Evento.\nPara ir ao evento clique em 'SIM'.\nPara não ir clique em 'NÃO'.",sendername);
ShowPlayerDialog(i, EVENTOCCM4, DIALOG_STYLE_MSGBOX, "EVENTO INICIADO", string, "Sim", "Não");
GetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
}
}
}
}
return true;
}
}
if(strcmp(cmd, "/criareventocombat", true) == 0)
{if(IsPlayerConnected(playerid))
{
if(PlayerInfo[playerid][pAdmin] >= 4)
{if(Evento == 1)
{SendClientMessage(playerid, COLOR_WHITE, "Já está decorrendo um evento use, /pararevento para abrir outro!");
return true;
}
if(Evento == 0)
{
SendClientMessage(playerid, COLOR_WHITE, "Você está criando um evento e chamando todos do BRNM.");
for(new i = 0; i < MAX_PLAYERS; i++)
{
if(IsPlayerConnected(i))
{
Evento = 1;GetPlayerName(playerid, sendername, sizeof(sendername));
format(string,sizeof(string),"Administração: %s está chamando todos para um Evento.\nPara ir ao evento clique em 'SIM'.\nPara não ir clique em 'NÃO'.",sendername);
ShowPlayerDialog(i, EVENTOCCCOMBAT, DIALOG_STYLE_MSGBOX, "EVENTO INICIADO", string, "Sim", "Não");
GetPlayerPos(playerid,ex,ey,ez);
ResetPlayerWeaponsEx(playerid);
}
}
}
}
return true;
}
}
if(strcmp(cmd, "/infotestecidadania", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(2.0, playerid, 359.2920,163.7621,1008.3828))
			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Olá, o teste de cidadania serve para você se tonar líder usando o comando /lideranca");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "O teste e baseado em perguntas sobre regras do jogo");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você devera marcar a alternativa correta correspondente a pergunta");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você ira pagar uma taxa de 10000 reais para poder faze-lo");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "As resposta estarão no forum: http://brnm.forumeiros.com/t1-regras-do-servidor");
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "Caso Esteje preparado use /fazercidadania Lembrando que seu dinheiro não sera devolvido caso erre");
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "  Você não está na Prefeitura !");
			}
		}
		return true;
	}

if(strcmp(cmd, "/fazercidadania", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerToPoint(2.0, playerid, 359.2920,163.7621,1008.3828))
			{
			    if(GetPlayerMoneyEx(playerid) < 5000) return SendClientMessage(playerid,COLOR_LIGHTBLUE," Você não tem R$10000 para fazer a prova.");
				new listitems[] = "Tirar cidadania      R$10000\n";
		        ShowPlayerDialog(playerid,1500,DIALOG_STYLE_LIST,"BRNM",listitems,"Confirmar","Sair");
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "  Você não está na Prefeitura !");
			}
		}
		return true;
	}
if(strcmp(cmd, "/iniciarteste", true) == 0)
	{
	 if(IsPlayerConnected(playerid))
	 {
	if(PlayerInfo[playerid][pAutorizado] >= 1)
	{
	  Teste[playerid] = 1;
	  SendClientMessage(playerid, COLOR_LIGHTBLUE, "Siga os chekpoints que irão parecer respectivamente um atras do outro no Mapa");
	  SetPlayerCheckpoint(playerid, 1295.1899,-1588.0681,13.3828,8.0);
	  SetPVarInt(playerid,"autoescola",1); 
	  TaCongelado[playerid] = false;
	  TogglePlayerControllable(playerid, 1);
	  return true;
	  }
	  }
	  }
	  if(strcmp(cmd, "/finalizarteste", true) == 0)
	{
	 if(IsPlayerConnected(playerid))
	 {
	 if(IsPlayerInRangeOfPoint(playerid, 1.0, 1274.2369,-1579.9185,13.5264))
	{
	if(PlayerInfo[playerid][pAutorizado2] >= 1)
	{
	new Vehicleid;
    Vehicleid = GetPlayerVehicleID(playerid);
    format(gstring, sizeof(gstring), "[Prova de Motorista] Parabéns %s, você passou no teste!", PlayerName(playerid));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
      PlayerInfo[playerid][pCarLic] = 1;
      PlayerInfo[playerid][pAutorizado] = 0;
      PlayerInfo[playerid][pAutorizado2] = 0;
      SetPVarInt(playerid,"autoescola",0);
	  Teste[playerid] = 0;
	  DisablePlayerCheckpoint(playerid);
	  SetVehicleToRespawn(Vehicleid);
	  return true;
	  }
	  SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você não está estacionado corretamente na baliza!");
	  return true;
	  }
	  }
	  }
        if(!strcmp("/oculos",cmd,true))
        {
            new glasseid, skin, id;
            tmp = strtok(cmdtext, idx);
			skin = GetPlayerSkin(playerid);
			id = strval(tmp);

			if(!id || id > 33) return SendClientMessage(playerid, 0xFFFFFFAA, "Escolha: /oculos [1 - 33]");

	        TextDrawShowForPlayer(playerid, MsgBox);
			SetTimerEx("Hide", 3500, false, "d", playerid);

			if(id > 30) goto PutPoliceGlasses;
			else
			{
			    id--;
			    glasseid =  CommonRed + id;
				SetPlayerHoldingObject(playerid, glasseid, 2, SkinOffSet[skin][0], SkinOffSet[skin][1], SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
				return 1;
			}

			PutPoliceGlasses:

			glasseid = CopGlassesBlack + (id - 31);
			SetPlayerHoldingObject(playerid, glasseid, 2, SkinOffSet[skin][0], floatadd(SkinOffSet[skin][1], 0.004500), SkinOffSet[skin][2], SkinOffSet[skin][3], SkinOffSet[skin][4], SkinOffSet[skin][5]);
			return 1;
        }
        if(strcmp(cmd, "/maleta", true) == 0)
	    {
		if(IsPlayerConnected(playerid))
		{
   				AttachObjectCorrectly(playerid, 1210);
   				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pegou sua maleta");
   				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Caso queira guarda use /guardarmaleta");
   				return true;
			}
			} 
	if(strcmp(cmd, "/guardarmaleta", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
   				RemovePlayerAttachedObject(playerid, 1);
   				SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você guardou sua maleta");
   				return true;
			}
			}
			if(strcmp(cmd, "/paintjob", true) == 0)
	{
		if(IsPlayerConnected(playerid))
		{
		if(PlayerInfo[playerid][pAdmin] >= GERENTE)
    {
    new rand = random(3);
	ChangeVehiclePaintjob(GetPlayerVehicleID(playerid), rand);
    return 1;
    }
    }
    }
    if(strcmp(cmd, "/tvcarro", true) == 0)
	{
	if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < 1)
	        {
	        SendClientMessage(playerid, COLOR_GREEN, "Você não está autorizado a usar este comando");
	        return true;
	        }
         if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
				tmp = strtok(cmdtext, idx);
				if(strcmp("off", tmp, true, strlen(tmp)) == 0)
			{
			    if(WatchingTV[playerid] > 0)
			    {
			        WatchingTV[playerid] = 0;
					Spectate[playerid] = 253;
					GameTextForPlayer(playerid, "~g~                TV~n~~r~                Off", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					SetPlayerSkin(playerid,217);
					MedicBill[playerid] = 0;
					return true;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está de TV em nenhum carro !");
				    return true;
				}
			}
			{
			if(PlayerInfo[playerid][pAdmin] >= 1)
			{
                WatchingTV[playerid] = 1;
                new specvehicleid;
   			    specvehicleid = strval(tmp);
				TogglePlayerSpectating(playerid, 1);
                PlayerSpectateVehicle(playerid, specvehicleid);
                }
				}
		}
		return true;
	}
	if(strcmp(cmd, "/destrancarsala", true) == 0) {
    if(PlayerInfo[playerid][pAdmin] >= SUB_DONO)
	{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	SalaAdmin = 1;
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você destrancou a porta do seu escritório.");
    if(SalaAdmin == 1)
     {
          if(IsPlayerInRangeOfPoint(i, 4.0, 1207.2396,-1439.1406,13.3828))
          {
		      SendClientMessage(playerid, COLOR_WHITE, "Olá, Senhor(a), pode entrar no escritório.");
			  InterfonouEnviou[i] = 0;
            }
        }
	    return 1;
	  }
   }
}
	if(strcmp(cmd, "/trancarsala", true) == 0) {
	    if(PlayerInfo[playerid][pAdmin] >= SUB_DONO)
		{
		SalaAdmin = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você trancou a porta do seu escritório.");
		return 1;
	   }
	}
	if(strcmp(cmd, "/irescritorio", true) == 0) {
	if(PlayerInfo[playerid][pAdmin] >= SUB_DONO) {
	SetPlayerPos(playerid, 1220.1261,-1427.2104,31.3353);
	SetPlayerInterior(playerid, 0);
	SendClientMessage(playerid, COLOR_WHITE, "Teleportado para seu Escritório.");
	return true;
	}
  }
	if(strcmp(cmd, "/aa", true) == 0 || strcmp(cmd, "/admajuda", true) == 0 || strcmp(cmd, "/adminajuda", true) == 0)
	{
  if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
			return true;
		}
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Admin ]______________|");
			if (PlayerInfo[playerid][pAdmin] >= 1)
			{
                SendClientMessage(playerid, TEAM_CYAN_COLOR, "Sub/Moderador: /tv /tapa /tapao /cascudo /par /ver /calar /kick /ir /trazer  /matar /tvcarro /praia /calar");
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Sub/Moderador: (/av)iso /congelar /descongelar /adescongelar (Use caso você for congelado) /infoarmas /infoplayer /afk (ausente) /carid /avisar");
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Sub/Moderador: /cnn (/desativar celular) /paredao /portaorally /teleportes /sairafk (sai do ausente)");
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Sub/Moderador: /dn /up /cnnn /voar /lt /rt /a(dmin chat) /empregos /esconderijo /desligarpar (desativa pars)");
			}
			if (PlayerInfo[playerid][pAdmin] >= 2)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Moderador: /settime /tempo /sethora /ip /desbugar");
			}
			if (PlayerInfo[playerid][pAdmin] >= 3)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Auxiliar: /carandiru /admprender /agendarcadeia(Funciona somente Player Offline) /explode  /1 /2 /3 /go /votacao /encerrarvotacao");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Auxiliar: /rpall /respawnid /abastecerid /repararid /destruirid /entrarcarro");
			}
			if (PlayerInfo[playerid][pAdmin] >= 4)
			{
			    SendClientMessage(playerid, COLOR_YELLOW2,"Sub/Master: /mark /irmark /carroantigo /ircarro /trazercarro /respawncarros /ac(/abastecercarros) /retirararmas /irtunning /ban");
			    SendClientMessage(playerid, COLOR_YELLOW2,"Sub/Master: /darvida /setcampeao /darcolete /dararma /forceskin /irstad /desativard");
				SendClientMessage(playerid, COLOR_YELLOW2,"Sub/Master: /bantemp /desbantemp /desbaniptemp  {FFFF00}'Banimento temporariamente'");
			}
			if(PlayerInfo[playerid][pAdmin] >= 4)
			{
				SendClientMessage(playerid, COLOR_YELLOW2, "|________________________________[ Eventos ]________________________________|");
				SendClientMessage(playerid, COLOR_YELLOW2, "/pararevento /criarevento");
				SendClientMessage(playerid, COLOR_YELLOW2, "Evento com Armas: /criareventoeagle(Com eagle) /criareventom4(Com M4) /criareventocombat(Com Combat Shotgun)");
				SendClientMessage(playerid, COLOR_YELLOW2, "|___________________________________________________________________________|");
			}
            if (PlayerInfo[playerid][pAdmin] >= MASTER)
			{
				SendClientMessage(playerid, 0x00FFFFFF,"Master: /limparlider /respawncarros /rcarro /admsoltar /admlimparficha /admremovertuning /admdemitir");
				SendClientMessage(playerid, 0x00FFFFFF,"Master: /ircasa /iremp /irsemp /restearobj /sbiz /online /darlider /sequestrosBRNM");
				SendClientMessage(playerid, 0x00FFFFFF,"Master: /desbanip /nomedesban ou /unbanip /retirarcidadania");
			} 
			if (PlayerInfo[playerid][pAdmin] >= 4) { 
			    SendClientMessage(playerid, 0xFF34B3F6,"______________________Comandos Admin da Concessionaria__________________________");
			    SendClientMessage(playerid, 0xFF34B3F6,"Quando estiver em modo trabalho você podera dirijir qualquer veículo a venda ou comprado nela!");
			    SendClientMessage(playerid, 0xFF34B3F6,"Quando estiver com tempo livre organize a Concessionária, estacione corretamente!");
			    SendClientMessage(playerid, 0xFF34B3F6,"Comandos Admins: /asetchave {FF0000}'Somente para Master+' {EE1289}| Para setar a chave do carro de um player (caso bugue)");
			    SendClientMessage(playerid, 0xFF34B3F6,"Comandos Admins: /aestacionar | Estaciona um veículo a venda para deixa a concessionaria organizada");
			    SendClientMessage(playerid, 0xFF34B3F6,"Comandos Admins: /respawnconce | Faz veículo á venda voltar para o lugar de inicio");
			}
			if (PlayerInfo[playerid][pAdmin] >= GERENTE)
			{
                SendClientMessage(playerid, 0xFF66CCFF,"Gerente: /darlicencas /paintjob /admlimparficha");
            }
			if (PlayerInfo[playerid][pAdmin] >= SUB_DONO)
			{
                SendClientMessage(playerid, 0xFF66CCFF,"Sub/Dono: /savefiles /loadfiles /kitadmdono");
                SendClientMessage(playerid, 0xFF66CCFF,"Sub/Dono: /favela /teleportes /setskin /setemprego /ultimologin");
                SendClientMessage(playerid, 0xFF66CCFF,"Sub/Dono: /playMP3 /stopMP3 /irescritorio /trancarsala /destrancarsala");
            }
            if (PlayerInfo[playerid][pAdmin] == DONO)
			{
                SendClientMessage(playerid, 0xFF66CCFF,"Dono: /liderex /amudarnick /atualizar3dtext /deletarconta /limparadmin /darvip /retirarvip /trazercasa");
                SendClientMessage(playerid, 0xFF66CCFF,"Dono: /setpos /daradmin /cnnn /blindaradm /irstad /kitadmdono /destruirveiculos /trazersemp");
                SendClientMessage(playerid, 0xFF66CCFF,"Dono: /amudarnick /amudarsenha /gmx  /editar /iniciarloteria /dargrana /acriarcarro /seditar");
				SendClientMessage(playerid, 0xFF66CCFF,"Dono: /deslogartodos /darcidadania /payday /asetchave /aestacionar /admvcasa /admvemp /admvsemp");
				SendClientMessage(playerid, 0xFF66CCFF,"Dono: /admmultar /descricao /avendercarro /vcarrosinativos /payday /adestruircarro /praia /fim /rangeban /panglo{FFFF00} 'Pegar Facing Angle'");
			}
		}
		return true;
	}


	if(strcmp(cmd, "/ah", true) == 0 || strcmp(cmd, "/ajudahelper", true) == 0 || strcmp(cmd, "/helperajuda", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|______________[ Ajuda Helper ]______________|");
			if(PlayerInfo[playerid][pHelper] >= 1 && PlayerInfo[playerid][pHelper] <= 60)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR,"Helper: /shelper /h /trazerh /avh /irh /afkh");
			}
			if(PlayerInfo[playerid][pHelper] >= 61 && PlayerInfo[playerid][pHelper] <= 150)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Helper: /shelper /h /trazerh /avh /irh");
				SendClientMessage(playerid, COLOR_LIGHTRED,"Helper: /congelarh  /descongelarh /afkh");
			}
			if(PlayerInfo[playerid][pHelper] >= 151 && PlayerInfo[playerid][pHelper] <= 300)
			{
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Helper: /shelper /h /trazerh /avh /irh");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Helper: /congelarh  /descongelarh");
				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Helper: /desbugarh  /kickh /tvh /afkh");
			}
			SendClientMessage(playerid, COR_TRIADS, "/meavalie - Oferece à um player que ele te avalie, isto aumenta seu nível de Helper.");
		}
		return true;
	}

	if(strcmp(cmd, "/destruirveiculos", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] < DONO)
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Voce nao tem permissao para usar esse comando!");
			    return true;
			}
			for(new i = CAR_AMOUNT; i < CAR_AMOUNT+97; i++)
			{
				DestroyVehicle(i);
			}
			CreatedCar = 0;
			for(new i = 0; i < sizeof(CreatedCars); i++)
			{
	    		CreatedCars[i] = 0;
			}
			SendClientMessage(playerid, COLOR_GREY, "   Todos os veículos criados foram destruídos!");
		}
		return true;
	}
	if(strcmp(cmd,"/habilidades",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        new x_nr[32];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Skill Info ]__________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /Habilidades [numero]");
             	SendClientMessage(playerid, COLOR_GREY, "| 1: Detetive                            5: Mecanico");
		  		SendClientMessage(playerid, COLOR_GREY, "| 2: Profissional do sexo                6: Boxer");
		  		SendClientMessage(playerid, COLOR_GREY, "| 3: Vendedor De Drogas                  7: Pesca");
		  		SendClientMessage(playerid, COLOR_GREY, "| 4: Reporter");
				return true;
			}
		    if(strcmp(x_nr,"1",true) == 0)//Detetive
			{
			    new level = PlayerInfo[playerid][pDetSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de detetive = 1."); format(string, sizeof(string), "Você precisa procurar mais %d para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de detetive = 2."); format(string, sizeof(string), "Você precisa procurar mais %d para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de detetive = 3."); format(string, sizeof(string), "Você precisa procurar mais %d para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de detetive = 4."); format(string, sizeof(string), "Você precisa procurar mais %d para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de detetive = 5."); }
			}
			else if(strcmp(x_nr,"2",true) == 0)//Profissional do sexo
			{
			    new level = PlayerInfo[playerid][pSexSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de profissional do sexo = 1."); format(string, sizeof(string), "Você precisa fazer mais %d sexos para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de profissional do sexo = 2."); format(string, sizeof(string), "Você precisa fazer mais %d sexos para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de profissional do sexo = 3."); format(string, sizeof(string), "Você precisa fazer mais %d sexos para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de profissional do sexo = 4."); format(string, sizeof(string), "Você precisa fazer mais %d sexos para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de profissional do sexo = 5."); }
			}
			else if(strcmp(x_nr,"3",true) == 0)//Vendedor De Drogas
			{
			    new level = PlayerInfo[playerid][pDrogasSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de vendedor de drogas = 1."); format(string, sizeof(string), "Você precisa vender mais %d drogas para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de vendedor de drogas = 2."); format(string, sizeof(string), "Você precisa vender mais %d drogas para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de vendedor de drogas = 3."); format(string, sizeof(string), "Você precisa vender mais %d drogas para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de vendedor de drogas = 4."); format(string, sizeof(string), "Você precisa vender mais %d drogas para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de vendedor de drogas = 5."); }
			}
			else if(strcmp(x_nr,"4",true) == 0)//noticias Reporter
			{
			    new level = PlayerInfo[playerid][pNewsSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de repórter = 1."); format(string, sizeof(string), "Você precisar mandar mais %d notícias para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de repórter = 2."); format(string, sizeof(string), "Você precisar mandar mais %d notícias para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de repórter = 3."); format(string, sizeof(string), "Você precisar mandar mais %d notícias para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de repórter = 4."); format(string, sizeof(string), "Você precisar mandar mais %d notícias para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de repórter = 5."); }
			}
			else if(strcmp(x_nr,"5",true) == 0)//Mecanico
			{
			    new level = PlayerInfo[playerid][pMechSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de mecânico = 1."); format(string, sizeof(string), "Você precisa concertar/abastecer mais %d carros para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de mecânico = 2."); format(string, sizeof(string), "Você precisa concertar/abastecer mais %d carros para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de mecânico = 3."); format(string, sizeof(string), "Você precisa concertar/abastecer mais %d carros para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de mecânico = 4."); format(string, sizeof(string), "Você precisa concertar/abastecer mais %d carros para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de mecânico = 5."); }
			}
			else if(strcmp(x_nr,"6",true) == 0)//Boxer
			{
			    new level = PlayerInfo[playerid][pBoxSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de boxeador = 1."); format(string, sizeof(string), "Você precisa ganhar mais %d lutas para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 100) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de boxeador = 2."); format(string, sizeof(string), "Você precisar ganhar mais %d lutas para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 101 && level <= 200) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de boxeador = 3."); format(string, sizeof(string), "Você precisar ganhar mais %d lutas para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 201 && level <= 400) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de boxeador = 4."); format(string, sizeof(string), "Você precisar ganhar mais %d lutas para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 401) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de boxeador = 5."); }
			}
			else if(strcmp(x_nr,"7",true) == 0)//Fishing
			{
			    new level = PlayerInfo[playerid][pFishSkill];
				if(level >= 0 && level <= 50) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de pesca = 1."); format(string, sizeof(string), "Você precisa pescar mais %d peixes para passar de nível.", 50 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 51 && level <= 250) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de pesca = 2."); format(string, sizeof(string), "Você precisa pescar mais %d peixes para passar de nível.", 100 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 251 && level <= 500) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de pesca = 3."); format(string, sizeof(string), "Você precisa pescar mais %d peixes para passar de nível.", 200 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 501 && level <= 999) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de pesca = 4."); format(string, sizeof(string), "Você precisa pescar mais %d peixes para passar de nível.", 400 - level); SendClientMessage(playerid, COLOR_YELLOW, string); }
				else if(level >= 1000) { SendClientMessage(playerid, COLOR_YELLOW, "Nível de pesca = 5."); }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Número de habilidade inválido !");
			    return true;
			}
	    }
	    return true;
	}
// ADM VENDERLICENCA
	if(strcmp(cmd, "/darlicencas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >=GERENTE)
	        {
          if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
					return true;
				}
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
				    SendClientMessage(playerid, COLOR_WHITE, "USE: /darlicencas [id]");
				    return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* Você deu todas as licenças para %s.",giveplayer);
				        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				        if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
				        {
				        	format(string, sizeof(string), "* Admin Homem_Aranha lhe deu todas as licenças.");
						}
				        else
				        {
				        	format(string, sizeof(string), "* Admin %s lhe deu todas as licenças.",PlayerName(playerid));
				        }
				        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        PlayerInfo[giveplayerid][pGunLic] = 1;
				        PlayerInfo[giveplayerid][pFishLic] = 1;
				        PlayerInfo[giveplayerid][pBoatLic] = 1;
				        PlayerInfo[giveplayerid][pFlyLic] = 1;
				        PlayerInfo[giveplayerid][pCarLic] = 1;
				        return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está autorizado a usar este comando !");
	            return true;
	        }
	    }
	    return true;
	}
	if(strcmp(cmd, "/arrombar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(gTeam[playerid] == 2  || IsACop(playerid) || IsAHit(playerid) || IsATriad(playerid))
            {
                for(new i = 0; i < sizeof(HouseInfo); i++)
				{
					if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
					{
					    SetPlayerInterior(playerid,HouseInfo[i][hInt]);
						SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
						SetPlayerVirtualWorld(playerid,HouseInfo[i][hWorld]);
						GameTextForPlayer(playerid, "~r~Arrombou a Porta", 5000, 1);
						PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						PlayerInfo[playerid][pLocal] = i;
						HouseEntered[playerid] = i;
					}
				}
            }
            else
            {
                SendClientMessage(playerid, COLOR_GREY, "   Você não é um Oficial ou um Hitman !");
			    return true;
            }
		}
		return true;
	}
	if(strcmp(cmd, "/camera", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(IsACop(playerid))
            {
                if(!PlayerToPoint(8.0,playerid,211.6222,1811.9565,21.8594))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está no painel de segurança do carandiru !");
				    return true;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USE: /camera [numero 1 - 6]  (6 = Desligar)");
					return true;
				}
				new number = strval(tmp);
				if(number < 1 || number > 6) { SendClientMessage(playerid, COLOR_GREY, "   Número da câmera mínimo 1 máximo 6 !"); return true; }
				Controle(playerid, 0);
				GetPlayerPos(playerid, Unspec[playerid][Coords][0],Unspec[playerid][Coords][1],Unspec[playerid][Coords][2]);
				if(number == 1) { SetPlayerCameraPos(playerid, 118.1011,1931.3221,22.5527); SetPlayerCameraLookAt(playerid, 98.9656,1920.9819,18.2180); }
				else if(number == 2) { SetPlayerCameraPos(playerid, 213.5340,1875.3075,17.6406); SetPlayerCameraLookAt(playerid, 213.8679,1884.1714,13.8945); }
				else if(number == 3) { SetPlayerCameraPos(playerid, 266.0640,1894.8856,38.6459); SetPlayerCameraLookAt(playerid, 224.0039,1887.1532,17.6406); }
				else if(number == 4) { SetPlayerCameraPos(playerid, 260.8112,1808.0175,38.6303); SetPlayerCameraLookAt(playerid, 227.5645,1818.4778,17.6406); }
				else if(number == 5) { SetPlayerCameraPos(playerid, 114.5196,1814.3483,38.6029); SetPlayerCameraLookAt(playerid, 123.6176,1846.4792,17.6549); }
				else if(number == 6)
				{
				    MedicBill[playerid] = 0;
					Controle(playerid, 1);
					SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pSkin], Unspec[playerid][Coords][0], Unspec[playerid][Coords][1], Unspec[playerid][Coords][2], 10.0, -1, -1, -1, -1, -1, -1);
					SpawnPlayer(playerid);
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial !");
			    return true;
			}
		}
		return true;
	}
	if(strcmp(cmd,"/divorcio",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!PlayerToPoint(10.0, playerid, 2233.8225,-1333.2725,23.9816))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "   Você não está na igreja de Los Santos !");
			    return true;
			}
			if(PlayerInfo[playerid][pMarried] == 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não está casado !");
				return true;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /divorcio [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se pedir em divórcio!"); return true; }
					    new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "%s", giveplayer);
						strmid(wstring, string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s", PlayerInfo[playerid][pMarriedTo]);
						strmid(dstring, string, 0, strlen(string), 255);
						if(strcmp(dstring ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "* Você enviou papéis de divórcio para %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s pediu papéis de divórcio (Digite /aceitar divorcio) para aceitar.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					        DivorceOffer[giveplayerid] = playerid;
					        return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  Esse jogador não está casado com você !");
						    return true;
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Esta Offline !");
			    return true;
			}
		}
		return true;
	}
	if(strcmp(cmd,"/casar",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(10.0, playerid, 1964.3306,-369.0889,1093.7289))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "   Você não está na igreja de Los Santos !");
			    return true;
			}
	        if(PlayerInfo[playerid][pMarried] > 0)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você já é casado !");
				return true;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /casar [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(PlayerInfo[giveplayerid][pMarried] > 0)
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Este jogador(a) ja é casado(a) !");
			            return true;
			        }
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode propor a si mesmo!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você propôs casamento a %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s Você foi pedida em casamento (Digite /aceitar casamento) para aceitar.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        ProposeOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O jogador esta offline !");
			    return true;
			}
	    }
	    return true;
	}
	if(strcmp(cmd,"/padrinho",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(!PlayerToPoint(10.0, playerid, 1964.3306,-369.0889,1093.7289))
	    	{
				SendClientMessage(playerid, COLOR_GREY, "   Você não está na igreja de Los Santos !");
			    return true;
			}
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /padrinho [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode ser marido e padrinho do casamento!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você chamou %s para ser seu padrinho de casamento.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s Você foi chamado para ser Padrinho do Casamento (Digite /aceitar padrinho) para aceitar.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        MarryWitnessOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline !");
			    return true;
			}
	    }
	    return true;
	}

//--------------------------------------Prefeito Comandos-------------------------------------------
	if(strcmp(cmd,"/setartaxa",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é o Prefeito !");
				return true;
	        }
	        tmp = strtok(cmdtext, idx);
	        if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /setartaxa [quantidade]");
				return true;
			}
			moneys = strval(tmp);
			if(moneys < 1 || moneys > 500) { SendClientMessage(playerid, COLOR_GREY, "   O Dinheiro da Taxa não pode ser menor que 1 ou maior que 500 !"); return true; }
			TaxValue = moneys;
			SaveStuff();
			format(string, sizeof(string), "* Cada Jogador vai pagar uma taxa de R$%d, apartir de agora!", TaxValue);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			format(string, sizeof(string), "Notícias: O Prefeito acaba de mudar a Taxa por Pessoa para: R$%d.", TaxValue);
			SendClientMessageToAll(COLOR_LIGHTBLUE, string);
	    }
	    return true;
	}
if(strcmp(cmd, "/desviarbolsa", true) == 0)
{
   if(IsPlayerConnected(playerid))
    {
          if(PlayerInfo[playerid][pLider] != 7)
            {
		     SendClientMessage(playerid, COLOR_GREY, "   Você não é o Prefeito !");
		     return true;
	         }
	         if(SBizzInfo[25][sbTill] < 600000)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Não há R$600.000 no impostômetro !");
				return true;
			}
	       if(ContarJogadores() < 10)
			{
	         	SendClientMessage(playerid, COLOR_GREY, "Precisa ter no mínimo 10 jogadores para você desviar o bolsa familia.");
			    return true;
		     }
			 new desviardinheiro = 100000;
			 if(PayDayDesviar >= 3)
			 {
				SBizzInfo[25][sbTill] -= desviardinheiro;
				GivePlayerMoneyEx(playerid, desviardinheiro);
				format(string, sizeof(string), "[Prefeitura] O Prefeito %s acaba de desviar 100.000 da prefeitura que vergonha.", PlayerName(playerid));
				SendClientMessageToAll(COR_PRE, string);
				PayDayDesviar = 0;
				SaveStuff();
			   }else {
			   SendClientMessage(playerid, COLOR_GREY, "Você tem que esperar 3 Paydays para desviar o bolsa familia.");
		   }
	  }
	   return true;
  }
	if(strcmp(cmd,"/darbolsa",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pLider] != 7)
	        {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é o Prefeito !");
				return true;
	        }
	        if(SBizzInfo[25][sbTill] < 600000)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Não há R$600.000 no impostômetro !");
				return true;
			}
			if(ContarJogadores() < 30)
			{
	         	SendClientMessage(playerid, COLOR_GREY, "Não hã 30 Jogadores online para poder dar bolsa familia !");
			    return true;
			}
			new Cops = MAX_PLAYERS;
			new rand = random(250000); rand += 200000;
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			if(IsPlayerConnected(i))
			{
			    new price = SBizzInfo[25][sbTill] / Cops;
				{
				    if(IsPlayerConnected(i))
				    {
				            SendClientMessage(playerid, COLOR_GREY, "Você Distribuiu A Bolsa Família!");
				            format(string, sizeof(string), "[Prefeitura] Você recebeu R$%d dos impostos do Bolsa Família pelo Prefeito.",price);
							SendClientMessage(i, COLOR_LIGHTBLUE, string);
							GivePlayerMoney(i, price);
							SBizzInfo[25][sbTill] = rand;
				    }
				}
            SaveStuff();
			}
		}
		return true;
	}
	}
if(strcmp(cmd, "/recompensanuclear", true) == 0)
	{
      if(IsPlayerConnected(playerid))
	   {
	     if(PlayerInfo[playerid][pLider] != 7)
          {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é o Prefeito !");
				return true;
	      }
		  if(BOMBAON == 0)
		  {
				SendClientMessage(playerid, COLOR_GREY, "Não tem nem uma bomba nuclear ativa.");
				return true;
		  }
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USE: /recompensanuclear [Preço de R$1 a R$3000000]");
			return true;
		}
		new recompensa;
		recompensa = strval(tmp);
		if(SBizzInfo[25][sbTill] < recompensa)
		{
		   format(string, sizeof(string), "Impostometro da Prefeitura não tem R$%d tudo isso tem somente R$%d disponivel.",recompensa, SBizzInfo[25][sbTill]);
		   SendClientMessage(playerid, COLOR_YELLOW, string);
		   return true;
		}
		if(recompensa < 1 || recompensa > 3000000)
		{
		   SendClientMessage(playerid, COLOR_GREY, "Recompensa de R$1 a R$3000000.");
		   return true;
        }
        RecompensaNuclear = recompensa;
		format(string, sizeof(string), "[Prefeitura] O Prefeito %s está oferecendo uma recompensa de R$%d para matar o terrorista.", PlayerName(playerid), recompensa);
        SendClientMessageToAll(COR_PRE, string);
        return true;
        }
	}
if(!strcmp("/impostometro", cmdtext, true))
{
    if (PlayerToPoint(2.0, playerid, 1484.0079,-1749.2959,15.4453))
    {
        new xFrt[60];
        new imposto = SBizzInfo[25][sbTill];
        Controle(playerid, 0);
        format(xFrt, sizeof(xFrt), " O valor arrecadado em impostos e multas é de: R$%d", imposto);
        ShowPlayerDialog(playerid, DialogImpost, DIALOG_STYLE_MSGBOX,"Impostometro de Los Santos", xFrt,"Fechar",#);
        Controle(playerid, 1);
        return true;
    }
    return true;
}
//------------------------------------------------/Prefeito Comandos--------------------------------------------------------
	if(strcmp(cmd, "/mudarlocal", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pPHousekey] != 255)
	        {
	            if(Spectate[playerid] != 255 && PlayerInfo[playerid][pAdmin] < 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você está na TV, não pode mudar o spawn !");
	                return true;
	            }
	            if(PlayerInfo[playerid][pSpawn] == 1)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você vai nascer no local normal de nascimento ou em sua HQ !");
	                PlayerInfo[playerid][pSpawn] = 0;
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "  Agora você vai nascer em sua casa !");
	                PlayerInfo[playerid][pSpawn] = 1;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não tem casa, não pode mudar o local !");
		        return true;
	        }
	    }
	    return true;
	}
	if(strcmp(cmd, "/duvida", true) == 0 || strcmp(cmd, "/duvidas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(gPlayerLogged[playerid] == 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não está logado!");
	            return true;
	        }
	        GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /duvida [texto]");
				return true;
			}
			if(TentouDivulgar(result))
			{
  				if(cdivulgar[playerid] >= 4)
  				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
    				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Seu servidor é uma merda, não divulgue-o aqui!");
    				SendClientMessage(playerid, COLOR_LIGHTBLUE,"Seu noob peguei esse IP e vou divulgar nesse server também, uaheuhaeuhaeahe!");
    				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    				Kick(playerid);
  				}
  				GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
  				format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
        		cdivulgar[playerid] += 1;
        		return true;
			}
			if(EnviouHelper[playerid] == 1)
			{
			SendClientMessage(playerid,0x808080C8,"Aguarde 30 segundos para nos enviar outra dúvida.");
			SendClientMessage(playerid,0x808080C8,"Sempre inclua o assunto da sua dúvida para um melhor atendimento.");
			return 1;
			}
            if(PlayerInfo[playerid][pVIP] == 0)
            {
                format(string, sizeof(string), "Dúvida VIP de %s - ID[%d]: %s", sendername, playerid, (result));
				HelperBroadCast(0x33FF00FF,string,1);
				EnviouHelper[playerid] = 1;
				SendClientMessage(playerid, COLOR_YELLOW, "Sua Dúvida VIP foi enviado aos Helpers, aguarde uma resposta...");
				timerhelper[playerid] = SetTimerEx("TempoHelpers", 30000, 0, "i", playerid);
            }
            else if(PlayerInfo[playerid][pVIP] == 1)
            {
                format(string, sizeof(string), "Dúvida S-VIP de %s - ID[%d]: %s", sendername, playerid, (result));
				HelperBroadCast(0x33FF00FF,string,1);
				EnviouHelper[playerid] = 1;
				SendClientMessage(playerid, COLOR_YELLOW, "Sua Dúvida VIP foi enviado aos Helpers, aguarde uma resposta...");
				timerhelper[playerid] = SetTimerEx("TempoHelpers", 30000, 0, "i", playerid);
            }
		}
	    return true;
	}
 	if(strcmp(cmd, "/roupas", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMembro] >= 1 || PlayerInfo[playerid][pLider] >= 1)
	        {
	            if(IsAtClothShop(playerid))
				{
				    if(PlayerInfo[playerid][pMembro] == 1) { ChosenSkin[playerid] = 282; SetPlayerSkin(playerid, 282); }// Policia Militar
					else if(PlayerInfo[playerid][pMembro] == 2) { ChosenSkin[playerid] = 285; SetPlayerSkin(playerid, 285); }//BOPE
					else if(PlayerInfo[playerid][pMembro] == 3) { ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }//Exército
					else if(PlayerInfo[playerid][pMembro] == 4) { ChosenSkin[playerid] = 274; SetPlayerSkin(playerid, 274); }//S.A.M.U
					else if(PlayerInfo[playerid][pMembro] == 5) { ChosenSkin[playerid] = 114; SetPlayerSkin(playerid, 115); }//Aztecas
					else if(PlayerInfo[playerid][pMembro] == 6) { ChosenSkin[playerid] = 121; SetPlayerSkin(playerid, 121); }//Taliban
					else if(PlayerInfo[playerid][pMembro] == 7) { ChosenSkin[playerid] = 163; SetPlayerSkin(playerid, 163); }//Prefeitura
					else if(PlayerInfo[playerid][pMembro] == 8) { ChosenSkin[playerid] = 127; SetPlayerSkin(playerid, 127); }//Hitmans
					else if(PlayerInfo[playerid][pMembro] == 9) { ChosenSkin[playerid] = 148; SetPlayerSkin(playerid, 148); }//Reporters
					else if(PlayerInfo[playerid][pMembro] == 10) { ChosenSkin[playerid] = 253; SetPlayerSkin(playerid, 253); }//Taxistas
					else if(PlayerInfo[playerid][pMembro] == 11) { ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }//Policia Federal
					else if(PlayerInfo[playerid][pMembro] == 12) { ChosenSkin[playerid] = 126; SetPlayerSkin(playerid, 126); }//Máfia Cosa Nostra
					else if(PlayerInfo[playerid][pMembro] == 13) { ChosenSkin[playerid] = 203; SetPlayerSkin(playerid, 203); }//Máfia Yakuza
					else if(PlayerInfo[playerid][pMembro] == 14) { ChosenSkin[playerid] = 107; SetPlayerSkin(playerid, 107); }//Groove Street
					else if(PlayerInfo[playerid][pMembro] == 15) { ChosenSkin[playerid] = 30; SetPlayerSkin(playerid, 30); }//Al'qaeda
					else if(PlayerInfo[playerid][pMembro] == 16) { ChosenSkin[playerid] = 59; SetPlayerSkin(playerid, 59); }//Policia Civil
					else if(PlayerInfo[playerid][pMembro] == 17) { ChosenSkin[playerid] = 103; SetPlayerSkin(playerid, 103); }//Ballas
					else if(PlayerInfo[playerid][pMembro] == 18) { ChosenSkin[playerid] = 109; SetPlayerSkin(playerid, 109); }//Vagos
					else if(PlayerInfo[playerid][pMembro] == 24) { ChosenSkin[playerid] = 16; SetPlayerSkin(playerid, 16); }//DETRAN
					else if(PlayerInfo[playerid][pLider] == 1) { ChosenSkin[playerid] = 283; SetPlayerSkin(playerid, 283); }//Policia Militar
					else if(PlayerInfo[playerid][pLider] == 2)	{ ChosenSkin[playerid] = 285; SetPlayerSkin(playerid, 285); }//B.O.P.E
					else if(PlayerInfo[playerid][pLider] == 3) { ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }//Exército
					else if(PlayerInfo[playerid][pLider] == 4) { ChosenSkin[playerid] = 70; SetPlayerSkin(playerid, 70); }//Fire/Ambulance
					else if(PlayerInfo[playerid][pLider] == 5) { ChosenSkin[playerid] = 115; SetPlayerSkin(playerid, 115); }//Varrios Los Aztecas
					else if(PlayerInfo[playerid][pLider] == 6) { ChosenSkin[playerid] = 249; SetPlayerSkin(playerid, 249); }//Taliban
					else if(PlayerInfo[playerid][pLider] == 7) { ChosenSkin[playerid] = 147; SetPlayerSkin(playerid, 147); }//Prefeito
					else if(PlayerInfo[playerid][pLider] == 8) { ChosenSkin[playerid] = 294; SetPlayerSkin(playerid, 294); }//Hitmans
					else if(PlayerInfo[playerid][pLider] == 9) { ChosenSkin[playerid] = 227; SetPlayerSkin(playerid, 227); }//Repórters
					else if(PlayerInfo[playerid][pLider] == 10) { ChosenSkin[playerid] = 61; SetPlayerSkin(playerid, 61); }//Taxistas
					else if(PlayerInfo[playerid][pLider] == 11) { ChosenSkin[playerid] = 295; SetPlayerSkin(playerid, 295); }//Policia Federal
					else if(PlayerInfo[playerid][pLider] == 12) { ChosenSkin[playerid] = 113; SetPlayerSkin(playerid, 113); }//Máfia Cosa Nostra
					else if(PlayerInfo[playerid][pLider] == 13) { ChosenSkin[playerid] = 120; SetPlayerSkin(playerid, 120); }//Máfia Yakuza
					else if(PlayerInfo[playerid][pLider] == 14) { ChosenSkin[playerid] = 270; SetPlayerSkin(playerid, 270); }//Groove
                    else if(PlayerInfo[playerid][pLider] == 15) { ChosenSkin[playerid] = 123; SetPlayerSkin(playerid, 123); }//ALQaeda
					else if(PlayerInfo[playerid][pLider] == 16) { ChosenSkin[playerid] = 186; SetPlayerSkin(playerid, 186); }//Policia Civil
                    else if(PlayerInfo[playerid][pLider] == 17) { ChosenSkin[playerid] = 104; SetPlayerSkin(playerid, 104); }//Ballas
                    else if(PlayerInfo[playerid][pLider] == 18) { ChosenSkin[playerid] = 108; SetPlayerSkin(playerid, 108); }//Vagos
                    else if(PlayerInfo[playerid][pLider] == 24) { ChosenSkin[playerid] = 16; SetPlayerSkin(playerid, 16); }//DETRAN
	                else { return true; }
	                if(PlayerInfo[playerid][pLider] < 1)
	                {
	                    new Float:x,Float:y,Float:z;
                        GetPlayerPos(playerid, x, y, z);
	                	SetPlayerCameraPos(playerid, x + 3, y, z);
						SetPlayerCameraLookAt(playerid,x, y, z);
						Controle(playerid, 0);
						SelectChar[playerid] = 255;
						SelectCharID[playerid] = PlayerInfo[playerid][pMembro];
						SelectCharPlace[playerid] = 1;
						PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
						SendClientMessage(playerid, COLOR_LIGHTRED, "* Use 'Proximo' para trocar a skin.");
					    SendClientMessage(playerid, COLOR_LIGHTRED, "* Quando Você achar a Skin preferida, Digite 'Confirma'.");
					    return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não está em uma loja de roupas !");
					return true;
				}
            }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Civis não podem usar esse comando !");
				return true;
			}
	    }
	    return true;
	}
    if (strcmp(cmd,"/assinar", true)==0)  //onplayercomand
	{

   		tmp = strtok(cmdtext, idx);
    	if(strlen(tmp) == 0)
		return SendClientMessage(playerid, -1, "DICA: /assinar [código]");
		if(strlen(tmp) <= 3 && (PaydayParaReceber[playerid] == true))
		{
              SendClientMessage(playerid, -1, "Digite o código de 4 digitos.");
              return true;
		}
		else if(strlen(tmp) > 4 && (PaydayParaReceber[playerid] == true))
		{
              SendClientMessage(playerid, -1, "Digite o código de 4 digitos.");
              return true;
		}
	    else if((0 <= minute <= 10)&& (PaydayParaReceber[playerid] == true))
	    {
			if(strcmp(tmp, PaydayCodigo[playerid], true) == 0)
			{

				if(IsPlayerConnected(playerid) && !IsPlayerNPC(playerid))
				{
				    PaydayParaReceber[playerid] = false;
			    	new Conta,interest;
					new rent = 0;
			 		if(PlayerInfo[playerid][pLevel] > 0)
			   		{
						new playername2[MAX_PLAYER_NAME];
						GetPlayerName(playerid, playername2, sizeof(playername2));
						Conta = PlayerInfo[playerid][pConta];
						new tmpintrate;
					    if(PlayerInfo[playerid][pVIP] == 0) { tmpintrate = 2; }
					    else if(PlayerInfo[playerid][pVIP] == 1) { tmpintrate = 4;}
						else { tmpintrate = 1;}
						new key = PlayerInfo[playerid][pPHousekey];
				 		if(key != 255)
						{
							rent = HouseInfo[key][hRent];
							if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
							{
								rent = 0;
							}
							else if(rent > GetPlayerMoneyEx(playerid))
							{
								PlayerInfo[playerid][pPHousekey] = 255;
								SendClientMessage(playerid, COLOR_WHITE, "Você foi expulso(a).");
								rent = 0;
							}
							HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
						}
						SBizzInfo[25][sbTill] += TaxValue;//Shorld work for every player online
						PlayerInfo[playerid][pConta] -= TaxValue;
						new checks = PlayerInfo[playerid][pSalario];
			   			new ebill = (PlayerInfo[playerid][pConta]/30000)*(PlayerInfo[playerid][pLevel]);
					    ConsumingMoney[playerid] = 1;
					    GivePlayerMoneyEx(playerid, checks);
					    if(PlayerInfo[playerid][pConta] > 0)
					    {
							PlayerInfo[playerid][pConta] -= ebill;
						   	SBizzInfo[4][sbTill] += ebill;
						}
						else
						{
						    ebill = 0;
						}
						interest = (PlayerInfo[playerid][pConta]/1000)*(tmpintrate);
						PlayerInfo[playerid][pExp]++;
						PlayerPlayMusic(playerid);
						PlayerInfo[playerid][pConta] = Conta+interest;
						SendClientMessage(playerid, COLOR_WHITE, "|_____ Mensagem do Banco _____|");
						format(gstring, sizeof(gstring), "  Salário: {33AA33}R$%d   {FFFFFF}Imposto: {33AA33}-R$%d", checks, TaxValue);
						SendClientMessage(playerid, COLOR_GRAD5, gstring);
						SendClientMessage(playerid, COLOR_GRAD5, "  Plano Médico: {33AA33}-R$100");
						SBizzInfo[25][sbTill] += TaxValue;
						if(PlayerInfo[playerid][pPHousekey] != 255 || PlayerInfo[playerid][pPbiskey] != 255)
						{
						   	format(gstring, sizeof(gstring), "  Taxa de Iluminação Pública: {33AA33}-R$%d", ebill);
							SendClientMessage(playerid, COLOR_GRAD5, gstring);
						}
						if(PlayerInfo[playerid][pPHousekey] != 255)
						{
							new IPTUU = PlayerInfo[playerid][pPHousekey];
							new IPTU = (HouseInfo[IPTUU][hValue]/299); //350
				    		format(gstring, sizeof(gstring), "  IPTU: {33AA33}-R$%d", IPTU);
							SendClientMessage(playerid, COLOR_GRAD5, gstring);
							SBizzInfo[25][sbTill] += IPTU;
						}
						format(gstring, sizeof(gstring), "  Saldo: {33AA33}R$%d", Conta);
						SendClientMessage(playerid, COLOR_GRAD5, gstring);
						format(gstring, sizeof(gstring), "  Juros: {33AA33}0.%d  por cento",tmpintrate);
						SendClientMessage(playerid, COLOR_GRAD5, gstring);
						if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pLevel] > 3)
						{
							new carkey = PlayerInfo[playerid][pPcarkey];
							new IPVA = (CarInfo[carkey][cValue]/299); //350
							format(gstring, sizeof(gstring), "  IPVA: {33AA33}-R$ %d", IPVA);
							SendClientMessage(playerid, COLOR_GRAD5, gstring);
							GivePlayerMoney(playerid,- IPVA);
							SBizzInfo[25][sbTill] += IPVA;
						}
						if(PlayerInfo[playerid][pPcarkey2] != -1 && PlayerInfo[playerid][pLevel] > 3)
						{
							new carkey2 = PlayerInfo[playerid][pPcarkey2];
							new IPVA = (CarInfo[carkey2][cValue]/299); // 350
							format(gstring, sizeof(gstring), "  IPVA 2: {33AA33}-R$ %d", IPVA);
							SendClientMessage(playerid, COLOR_GRAD5, gstring);
							GivePlayerMoney(playerid,- IPVA);
							SBizzInfo[25][sbTill] += IPVA;
						}
						if(PlayerInfo[playerid][pPcarkey3] != -1 && PlayerInfo[playerid][pLevel] > 3)
						{
							new carkey3 = PlayerInfo[playerid][pPcarkey3];
							new IPVA = (CarInfo[carkey3][cValue]/299); // 350
							format(gstring, sizeof(gstring), "  IPVA 3: {33AA33}-R$ %d", IPVA);
							SendClientMessage(playerid, COLOR_GRAD5, gstring);
							GivePlayerMoney(playerid,- IPVA);
							SBizzInfo[25][sbTill] += IPVA;
						}
						if(PlayerInfo[playerid][pPcarkey4] != -1 && PlayerInfo[playerid][pLevel] > 3)
						{
							new carkey4 = PlayerInfo[playerid][pPcarkey4];
							new IPVA = (CarInfo[carkey4][cValue]/299); // 350
							format(gstring, sizeof(gstring), "  IPVA 4: {33AA33}-R$ %d", IPVA);
							SendClientMessage(playerid, COLOR_GRAD5, gstring);
							GivePlayerMoney(playerid,- IPVA);
							SBizzInfo[25][sbTill] += IPVA;
						}
						SendClientMessage(playerid, COLOR_GRAD4, "|_______________________________________|");
						format(gstring, sizeof(gstring), "  Novo Saldo: {33AA33}R$%d", PlayerInfo[playerid][pConta]);
						SendClientMessage(playerid, COLOR_GRAD5, gstring);
						format(gstring, sizeof(gstring), "  Aluguel: {33AA33}-R$%d", rent);
						SendClientMessage(playerid, COLOR_GRAD5, gstring);
						PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
						format(gstring, sizeof(gstring), "~g~ Salario");
						GameTextForPlayer(playerid, gstring, 5000, 1);

						GivePlayerMoney(playerid,- 100);
						rent = 0;
						PlayerInfo[playerid][pPayDay] = 0;
						PlayerInfo[playerid][pSalario] = 0;
						PlayerInfo[playerid][pConnectTime] += 1;
			  			PlayerInfo[playerid][pCaixinha] = 0;
						pban[playerid] = 0;
						new str2[256];
					    format(string, sizeof(string), "Emprestimo/%s.ini", PlayerName(playerid));
				     	if(dini_Exists(string))
         			    {
						  if(dini_Int(string, "Emprestimo") >= 1)
						  {
                            if(dini_Int(string, "Quantasvs") >= 1)
                            {
                                new divida = dini_Int(string, "Money") / 25;
								new var = dini_Int(string, "Money") + divida;
                                format(str2, sizeof(str2), "{FF0000}[AVISO]: {FFFFFF}Você pagou 25 por cento de juros para o banco de empréstimos e acumulou R$:%d.", divida);
                                BizzInfo[3][bTill] += divida;
                                GivePlayerMoneyEx(playerid, - divida);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, str2);
								dini_IntSet(string, "Money", var);
								totalRecebido(divida);
							}
						}
							/*else if(dini_Int(string, "Quantasvs") == 1)
							{

                                new divida = dini_Int(string, "Money") / 25;
								new var = dini_Int(string, "Money") - divida;
								format(str2, sizeof(str2), "  ultima divida: {FF6347}R$%d", dini_Int(string, "Money"));
								format(str3, sizeof(str3), "  Novos empréstimos e Dívidas: {FF6347}R$%d", var);
								SendClientMessage(playerid, COLOR_GRAD1, str2);
								SendClientMessage(playerid, COLOR_GRAD1, str3);
								GivePlayerMoney(playerid, - divida);
								dini_IntSet(string, "Quantasvs",dini_Int(string, "Quantasvs")-1);
								dini_IntSet(string, "Money", var);
								dini_IntSet(string, "Emprestimo",0);
								dini_IntSet(string, "Quantasvs",dini_Int(string, "Quantasvs")-1);
							}*/

				     	}
						if(PlayerInfo[playerid][pEmprego] > 0)
			 			{
				    	   	if(PlayerInfo[playerid][pContractTime] < 25)
			    	    	{
								PlayerInfo[playerid][pContractTime] ++;
							}
			  			}
					}
			  	}
				if(PlayerInfo[playerid][pExp] >= ((PlayerInfo[playerid][pLevel]+1)*levelexp))
				{
					GameTextForPlayer(playerid, "~g~Respeito Adquirido!~n~~r~Digite /comprarnivel!", 5000, 1);
				}
				new str[125];
				format(str,sizeof(str),"Código %s aceito, pagamento assinado.",tmp);
				return SendClientMessage(playerid,-1,str);
			}
			else
			{
			    new str[125];
				format(str,sizeof(str),"Código %s recusado, insira o código correto.",tmp);
				return SendClientMessage(playerid,-1,str);
			}
		}
		else
		{
		    if(PaydayParaReceber[playerid] == true)
		    {
		        PaydayParaReceber[playerid] = false;
				return SendClientMessage(playerid,-1,"Você excedeu o tempo para assinar o código.");
			}
			else
			{
			    return SendClientMessage(playerid,-1,"Você não tem nenhum pagamento para receber.");
             }
		}
	}
	if(strcmp(cmd, "/loteria", true) == 0)
	{
	    if(PlayerToPoint(1, playerid,822.0201,4.2154,1004.1797) || PlayerToPoint(1, playerid,822.0099,6.3927,1004.1797) || PlayerToPoint(1, playerid,822.0087,-0.1116,1004.1797) || PlayerToPoint(1, playerid,822.0237,1.7826,1004.1797))
	    {
	        if(PlayerInfo[playerid][pLottoNr] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você já tem um bilhete de loteria !");
	            return true;
	        }
	        if(GetPlayerMoney(playerid) < 10)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não tem R$10 para pagar o número de loteria !");
	            return true;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE,"USE: /loteria [número]");
				return true;
			}
			new lottonr = strval(tmp);
			if(lottonr < 1 || lottonr > 999) { SendClientMessage(playerid, COLOR_GREY, "   Número da loteria, de 1 a 999 !"); return true; }
			format(string, sizeof(string), "* Você comprou um bilhete de loteria com número: %d.", lottonr);
			SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			GivePlayerMoney(playerid, - 10);
			PlayerInfo[playerid][pLottoNr] = lottonr;
			BizzInfo[6][bTill] += 100;
		    ExtortionBiz(6, 100);
	     }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está na Lotérica !");
		}
		return true;
	}
	if(strcmp(cmd, "/retirar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
	        if(gTeam[playerid] == 2 || IsACop(playerid) || IsAGOV(playerid))
	        {
	            if(PlayerInfo[playerid][pCargo] < 4)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 4 para usar este comando !");
	                return true;
	            }
	            new x_nr[32];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Take Licenses ]__________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USE: /retirar [nome] [id]");
			  		SendClientMessage(playerid, COLOR_GREY, "Nomes Disponíveis:  Armas, Drogas, Materiais, Motorista");
					return true;
				}
			    if(strcmp(x_nr,"Motorista",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USE: /retirar Motorista [id]");
						return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
						        new cop[MAX_PLAYER_NAME];
				                GetPlayerName(playerid, cop, sizeof(cop));
				                new fudido[MAX_PLAYER_NAME];
				                GetPlayerName(giveplayerid, fudido, sizeof(fudido));
						        format(string, sizeof(string), "* Você retirou a licença de motorista de %s.", fudido);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Oficial %s Retirou sua licença de motorista.", cop);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pCarLic] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de você !");
							    return true;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Armas",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USE: /retirar Armas [id]");
						return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
                                new cop[MAX_PLAYER_NAME];
				                GetPlayerName(playerid, cop, sizeof(cop));
				                new fudido[MAX_PLAYER_NAME];
				                GetPlayerName(giveplayerid, fudido, sizeof(fudido));
						        format(string, sizeof(string), "* Você retirou as Armas de %s.", fudido);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Oficial %s retirou suas Armas.", cop);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        ResetPlayerWeaponsEx(giveplayerid);
					        }
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
							    return true;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Drogas",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USE: /retirar Drogas [id]");
						return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new cop[MAX_PLAYER_NAME];
				                GetPlayerName(playerid, cop, sizeof(cop));
				                new fudido[MAX_PLAYER_NAME];
				                GetPlayerName(giveplayerid, fudido, sizeof(fudido));
						        format(string, sizeof(string), "* Você retirou as Drogas de %s.", fudido);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Oficial %s retirou suas Drogas.", cop);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pDrogas] = 0;
						        PlayerInfo[giveplayerid][pDrogas2] = 0;
						        PlayerInfo[giveplayerid][pDrogas3] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
							    return true;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"Materiais",true) == 0)
				{
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "USE: /retirar Materiais [id]");
						return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					        if (ProxDetectorS(8.0, playerid, giveplayerid))
							{
							    new cop[MAX_PLAYER_NAME];
				                GetPlayerName(playerid, cop, sizeof(cop));
				                new fudido[MAX_PLAYER_NAME];
				                GetPlayerName(giveplayerid, fudido, sizeof(fudido));
						        format(string, sizeof(string), "* Você retirou os Materiais de %s.", fudido);
						        SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						        format(string, sizeof(string), "* Oficial %s Retirou seus Materiais.", cop);
						        SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						        PlayerInfo[giveplayerid][pMats] = 0;
							}
					        else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
							    return true;
							}
					    }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Nome inválido !");
					return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não e COP !");
	            return true;
	        }
	    }
	    return true;
	}
	if(strcmp(cmd, "/beber", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(IsAtBar(playerid))
	        {
	            if(PlayerInfo[playerid][pDorgado2] >= 70)
	            {
	            	PlayerInfo[playerid][pDoenca] = 4;
	            	PlayerInfo[playerid][pDorgado2] = 0;
	            	SendClientMessage(playerid, COLOR_GRAD2, "* Você está infectado com cirrose, vá até um hospital se tratar !");
	            	return true;
				}
	            if(PlayerDrunk[playerid] < 10)
	            {
	            	if(PlayerInfo[playerid][pDoenca] == 4)
  					{
			    		SendClientMessage(playerid, COLOR_GRAD2, "* Você está com cirrose, vá até um hospital se tratar !");
			    		return true;
  	        		}
	                new Float:health;
	                new x_nr[32];
					x_nr = strtok(cmdtext, idx);
					if(!strlen(x_nr)) {
						SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Bar's Drinks ]__________________|");
						SendClientMessage(playerid, COLOR_WHITE, "Use: /beber [Bebida]");
				  		SendClientMessage(playerid, COLOR_GREY, "Nomes Válidos: Cerveja (R$3), Vodka (R$5), Whisky (R$10), Coca-Cola (R$2), Água (R$1)");
						return true;
					}
				    if(strcmp(x_nr,"Cerveja",true) == 0)
					{
						if(PlayerInfo[playerid][pAge] < 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Você Não Tem 18 Anos ou mais Para Poder Beber.");
						    return true;
						}
					    GivePlayerMoney(playerid, - 3);
					    PlayerDrunk[playerid] += 1;
					    PlayerInfo[playerid][pDorgado2] += 2;
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Voce Esta~n~~p~Tonto~n~,~g~beba agua ou coca-cola", 3500, 1); }
						SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
						ApplyAnimation(playerid, "FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 15; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 15.0); }
						}
					}
					else if(strcmp(x_nr,"Vodka",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Você Não Tem 18 Anos ou mais Para Poder Beber.");
						    return true;
						}
					    GivePlayerMoney(playerid, - 5);
					    PlayerDrunk[playerid] += 2;
					    PlayerInfo[playerid][pDorgado2] += 2;
					    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
					    ApplyAnimation(playerid, "FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Voce Esta~n~~p~Tonto~n~,~g~beba agua ou coca-cola", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 25; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 25.0); }
						}
					}
					else if(strcmp(x_nr,"Whisky",true) == 0)
					{
					    if(PlayerInfo[playerid][pAge] < 0)
						{
						    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Você Não Tem 18 Anos ou mais Para Poder Beber");
						    return true;
						}
					    GivePlayerMoney(playerid, - 10);
					    PlayerDrunk[playerid] += 3;
					    PlayerInfo[playerid][pDorgado2] += 2;
					    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
					    ApplyAnimation(playerid, "FOOD","EAT_Vomit_P",3.0,0,0,0,0,0);
						if(PlayerDrunk[playerid] >= 5) { GameTextForPlayer(playerid, "~w~Voce Esta~n~~p~Tonto~n~,~g~beba agua ou coca-cola", 3500, 1); }
						if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { PlayerDrunk[playerid] += 1; new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 27; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 27.0); }
						}
					}
					else if(strcmp(x_nr,"Coca-Cola",true) == 0)
					{
					    GivePlayerMoney(playerid, - 2);
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 5.0); }
							SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) - 2300);
							PlayerDrunk[playerid] = 0;
						    PlayerDrunkTime[playerid] = 0;
						    SetPlayerDrunkLevel (playerid, 0);
						}
					}
					else if(strcmp(x_nr,"agua",true) == 0)
					{
					    GivePlayerMoney(playerid, - 1);
					    if(GetPlayerHealth(playerid, health) < 100)
						{
						    if(PlayerInfo[playerid][pAlcoholPerk] > 0) { new hp = 2 * PlayerInfo[playerid][pAlcoholPerk]; hp += 5; SetPlayerHealth(playerid, health + hp); }
							else { SetPlayerHealth(playerid, health + 5.0); }
							SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) - 2300);
							PlayerDrunk[playerid] = 0;
						    PlayerDrunkTime[playerid] = 0;
						    SetPlayerDrunkLevel (playerid, 0);
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_WHITE, "BarMan - Não não vendemos essa bebida.");
					    return true;
					}
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s bebeu um(a) %s.", sendername ,x_nr);
					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você não pode beber mais, Você vai vomitar...!");
	                SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 3000);
	                return true;
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está em um bar !");
	            return true;
	        }
	    }
	    return true;
	}
	if(strcmp(cmd, "/setcampeao", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pAdmin] >= 4)
	        {
             if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
				{
				SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
				return true;
				}
	            tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /setcampeao [id]");
					return true;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
		        if(IsPlayerConnected(giveplayerid))
		        {
		            if(giveplayerid != INVALID_PLAYER_ID)
		            {
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		                new nstring[MAX_PLAYER_NAME];
						format(nstring, sizeof(nstring), "%s", giveplayer);
						strmid(Titel[TitelName], nstring, 0, strlen(nstring), 255);
						Titel[TitelWins] = PlayerInfo[giveplayerid][pWins];
						Titel[TitelLoses] = PlayerInfo[giveplayerid][pLoses];
						SaveBoxer();
						format(string, sizeof(string), "* Você definiu %s como o novo campeão de boxe.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
		            return true;
		        }
	        }
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Você não está autorizado a usar este comando!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/statusluta", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pEmprego] != 7)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não é um Lutador de Boxe !");
	            return true;
	        }
	        new ttext[20];//Title
	        new clevel = PlayerInfo[playerid][pBoxSkill];
			if(clevel >= 0 && clevel <= 50) { ttext = "Iniciante"; }
			else if(clevel >= 51 && clevel <= 200) { ttext = "Amador"; }
			else if(clevel >= 201 && clevel <= 400) { ttext = "Profissional"; }
	        new ntext[20];//NickName
	        new level = PlayerInfo[playerid][pWins];
	        if(level > 0 && PlayerInfo[playerid][pLoses] == 0)
	        {
	            ntext = "Invicto";
	        }
	        else
	        {
	            if(level >= 0 && level <= 10) { ntext = "Novato"; }
	            else if(level >= 11 && level <= 20) { ntext = "Mão Pesada"; }
	            else if(level >= 21 && level <= 30) { ntext = "Quebra Nozes"; }
	            else if(level >= 31 && level <= 40) { ntext = "Braço de ferro"; }
	            else if(level >= 41 && level <= 50) { ntext = "Quebra crânio"; }
	            else if(level >= 51 && level <= 60) { ntext = "Velocidade da Luz"; }
	            else if(level >= 61 && level <= 70) { ntext = "Guerreiro"; }
	            else if(level >= 71) { ntext = "Cavalo"; }
	        }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Recorde do Boxe __________________|");
	        format(string, sizeof(string), "| Atual Campeão: %s, com %d vitórias e %d derrotas.", Titel[TitelName],Titel[TitelWins],Titel[TitelLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Título atual: %s.", ttext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Nome Atual: %s.", ntext);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total de Vitórias: %d.", PlayerInfo[playerid][pWins]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "| Total de Derrotas: %d.", PlayerInfo[playerid][pLoses]);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
		return true;
	}
	if(strcmp(cmd, "/lutar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pEmprego] != 7)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não é um lutador de boxe !");
	            return true;
	        }
	        if(InRing > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Já está tendo uma luta, espere ela terminar !");
	            return true;
	        }
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você já está em uma luta !");
	            return true;
	        }
	        if(!PlayerToPoint(20.0,playerid,765.9343,0.2761,1000.7173))
	        {
	            SendClientMessage(playerid, COLOR_GREY, "  Você não está no ginásio de lutas de LS !");
	            return true;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /lutar [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
		    if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode lutar contra si mesmo!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você intimou %s para uma luta de boxe.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Lutador %s te intimou para uma luta (USE: /aceitar boxe) para aceitar.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
				        BoxOffer[giveplayerid] = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						return true;
					}
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
			    return true;
			}
	    }
	    return true;
	}
	if(strcmp(cmd, "/musica", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pCDPlayer])
	        {
		        new x_nr[32];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Musica ]__________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USE: /musica [nome]");
			  		SendClientMessage(playerid, COLOR_GREY, "Nomes Disponíveis: On, Off, Proximo");
					return true;
				}
			    if(strcmp(x_nr,"on",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~CD Player On", 5000, 5);
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
	            else if(strcmp(x_nr,"off",true) == 0)
				{
				    GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~CD Player Off", 5000, 5);
				    PlayerFixRadio(playerid);
				}
				else if(strcmp(x_nr,"Proximo",true) == 0)
				{
				    if(Music[playerid] == 0) { Music[playerid] = 1; }
				    else if(Music[playerid] == 1) { Music[playerid] = 2; }
				    else if(Music[playerid] == 2) { Music[playerid] = 3; }
				    else if(Music[playerid] == 3) { Music[playerid] = 4; }
				    else if(Music[playerid] == 4) { Music[playerid] = 5; }
				    else if(Music[playerid] == 5) { Music[playerid] = 6; }
				    else if(Music[playerid] == 6) { Music[playerid] = 0; }
				    new channel = Music[playerid];
				    PlayerPlaySound(playerid, Songs[channel][0], 0.0, 0.0, 0.0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Comando Musical Desconhecido !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não possui um CD-Player !");
			    return true;
			}
	    }
	    return true;
	}
	if(strcmp(cmd, "/servico", true) == 0 || strcmp(cmd, "/serviço", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[32];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Nomes dos Serviços ]__________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /servico [nome]");
		  		SendClientMessage(playerid, COLOR_GREY, "Serviços: Taxi, Onibus,Medico,Mecanico,Policia");
				return true;
			}
		    if(strcmp(x_nr,"taxi",true) == 0)
			{
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Não tem taxista online agora, tente /servico onibus...");
		            return true;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Você não pode ligar para um Taxi agora !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Taxista. (Use /aceitar taxi - Para Aceitar a Chamada)", PlayerName(playerid));
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Taxista,espere a resposta...");
		    	TaxiCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"moto-taxi",true) == 0)
			{
			    if(TaxiDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "  Não tem nenhum Moto-Taxi online agora, espere algum entrar !");
		            return true;
      		  	}
          		if(TransportDuty[playerid] > 0)
 		      	{
		            SendClientMessage(playerid, COLOR_GREY, "  Você não pode ligar para um Moto-Taxi agora !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Taxista. (Use /aceitar moto-taxi - Para Aceitar a Chamada)", PlayerName(playerid));
		    	SendFamilyMessage(10, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Moto-Taxi... Agora espere a resposta.");
		    	TaxiCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"onibus",true) == 0)
			{
			    if(BusDrivers < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Não tem motorista de onibus online neste momento, espere um entrar !");
		            return true;
		        }
		        if(TransportDuty[playerid] > 0)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Você não pode chamar um onibus agora !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Onibus. (Use /aceitar onibus - Para aceitar a chamada)", PlayerName(playerid));
		    	SendEmpregoMessage(8, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Onibus... Agora espere a resposta.");
		    	BusCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"medico",true) == 0)
			{
			    if(Medics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhum medico online neste momento, espere um entrar !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita da SAMU. (Use /aceitar medico - Para aceitar a chamada)", PlayerName(playerid));
		    	SendFamilyMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou a SAMU.... Agora espere por resposta.");
		    	MedicCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"policia",true) == 0)
			{
			    if(Copsronda < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "Nenhum Policial em ronda no momento.");
		            return true;
		        }
		        for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsACop(i) && IsPlayerConnected(i))
				    {
				        if(PolicialInRonda[i] == 1)
				        {
				            SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Estão fazendo uma chamada.");
				            return true;
				        }
					}
				}
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s está precisando de um Policial. (Digite /aceitar chamada para aceitar a chamada)", PlayerName(playerid));
		    	SendFamilyMessage(1, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(2, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(3, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(16, TEAM_AZTECAS_COLOR, string);
		    	SendFamilyMessage(11, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Policial Aguarde a Resposta.");
		    	CopsrondaCall = playerid;
		    	return true;
			}
			else if(strcmp(x_nr,"mecanico",true) == 0)
			{
			    if(Mechanics < 1)
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Nenhum mecanico online neste momento, espere um entrar !");
		            return true;
		        }
		        GetPlayerName(playerid, sendername, sizeof(sendername));
			    format(string, sizeof(string), "** %s Necessita de um Mecanico. (Use /aceitar mecanico - Para aceitar a chamada)", PlayerName(playerid));
		    	SendEmpregoMessage(4, TEAM_AZTECAS_COLOR, string);
		    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você chamou um Mecanico... Agora espere por uma resposta.");
		    	MechanicCall = playerid;
		    	return true;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Serviço Inexistente !");
			    return true;
			}
		}
		return true;
	}
//Amarrar
    if(strcmp(cmd, "/amarrar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
  			if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12 || PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
    		{
			    if(PlayerInfo[playerid][pCargo] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3 ou mais para amarrar as pessoas. !");
			        return true;
			    }
			    if(pamarrar == 1)
                {
                	SendClientMessage(playerid,COLOR_GRAD2,"Sequestraram recentemente, só pode sequestrar a cada 3 minutos!");
                    return true;
                }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /amarrar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				    	if(PlayerInfo[giveplayerid][pLevel] == 2)
						{
							SendClientMessage(playerid, COLOR_GRAD1, "Você não pode sequestrar novatos!");
							return true;
						}
					    if(PlayerTied[giveplayerid] > 0)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   O Jogador já está amarrado !");
					        return true;
					    }
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    new car = GetPlayerVehicleID(playerid);
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se amarrar !"); return true; }
						    if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == 2 && IsPlayerInVehicle(giveplayerid, car))
						    {
						        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        format(string, sizeof(string), "* Você foi sequestrado por %s.", PlayerName(playerid));
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você sequestrou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s sequestra %s, então ele não irá à lugar algum.", sendername ,giveplayer);
								ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
								GameTextForPlayer(giveplayerid, "~r~Sequestrado", 2500, 3);
								Controle(giveplayerid, 0);
								PlayerTied[giveplayerid] = 1;
								PlayerInfo[giveplayerid][pMuted] = 1;
        						pamarrar = 1;
			                    TempoAmarrar = SetTimer("Amarrar",180000, 0);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está no seu carro, ou você não é o motorista !");
						        return true;
						    }
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não é um mafioso !");
			}
		}
		return true;
	}
//Desamarrar Mafia
	if(strcmp(cmd, "/desamarrar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12 || PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
 			{
			    if(PlayerInfo[playerid][pCargo] < 3)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3 ou mais para desamarrar as pessoas !");
			        return true;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /desamarrar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode desamarrar si mesmo!"); return true; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Você foi libertado por %s.", PlayerName(playerid));
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você libertou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Libertado", 2500, 3);
								Controle(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								PlayerInfo[giveplayerid][pMuted] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está sequestrado !");
							    return true;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não é um mafioso !");
			}
		}//not connected
		return true;
	}

	if(strcmp(cmd,"/sequestrosBRNM",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pAdmin] < MASTER)
			{
			    SendClientMessage(playerid,COLOR_GREY," Comando apenas para administradores masters + !");
			    return true;
			}
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid,COLOR_GREY,"USE: /sequestros [limite de sequestros por PayDay]");
				return true;
			}
			SequestroVezes = strval(tmp);
			format(string, sizeof(string), "BRNM: O limite de sequestros por PayDay foi mudado para %d vezes.", strval(tmp));
			SendClientMessageToAll(COLOR_YELLOW, string);
		}
		return true;
	}
    if(strcmp(cmd, "/sequestrar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5 || PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6 || PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14 || PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15 || PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17
			|| PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18 || PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19 || PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20 || PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21
			 || PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
 			{
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /sequestrar [ id ] [resgate]");
					return true;
				}
				new money;
				new orgintegrante;
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) { return true; }
				money = strval(tmp);
				if(money < 1 || money > 3000000) { SendClientMessage(playerid, COLOR_GREY, "   Preço maior que 1, menor que 3000000!"); return true; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Você não pode se sequestrar !");
						        return true;
						    }

						    if(PlayerInfo[playerid][pMembro] >= 1)
					        {
					            orgintegrante = PlayerInfo[playerid][pMembro];
					        }
					        if(PlayerInfo[playerid][pLider] >= 1)
					        {
					            orgintegrante = PlayerInfo[playerid][pLider];
					        }
					        if(GuSequestro[orgintegrante][QuantidadeSequestro] == SequestroVezes)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "Sua organização ultrapassou o limite de sequestros por PayDay !");
						        return true;
							}
						    new Integrante[MAX_INTEGRANTE_NOMES];//Maximo de Org ;)
	        				DefineOrgNameSequestro(orgintegrante, Integrante, MAX_INTEGRANTE_NOMES);
		                    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						    GetPlayerName(playerid, sendername, sizeof(sendername));
	                        format(string, sizeof(string), "* Você foi sequestrado por %s.", sendername);
						    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						    format(string, sizeof(string), "* Você sequestrou %s.", giveplayer);
					     	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					     	format(string, sizeof(string), "[SEQUESTRO] O %s %s, está sequestrando %s, e pede o resgate no valor de R$%d.", Integrante, sendername, giveplayer, money);
					     	SendClientMessageToAll(COLOR_GRAD2, string);
						    format(string, sizeof(string), "* %s sequestra %s, então ele não irá à lugar algum.", sendername ,giveplayer);
						    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						    GameTextForPlayer(giveplayerid, "~r~Sequestrado", 2500, 3);
						    Controle(giveplayerid, 0);
						    PlayerTied[giveplayerid] = 1;
	  						PlayerCuffedTime[giveplayerid] = 99999999999999;
	  						GuSequestro[orgintegrante][QuantidadeSequestro] = 1;
	  						PlayerInfo[giveplayerid][pMuted] = 1;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está Offline!");
				}
			}
			else
			{
   				SendClientMessage(playerid, COLOR_GREY, "   Você não é de uma gangue !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/salvar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1 || PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3 || PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2 || PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11 || PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
            {
			    if(PlayerInfo[playerid][pCargo] < 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 2 ou mais para salvar as pessoas !");
			        return true;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /salvar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode salvar si mesmo!"); return true; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Você foi salvo por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "[SEQUESTRO] Oficial %s salvo o refem %s ! Fim de sequestro.",sendername,giveplayer);
	                            SendClientMessageToAll(0x2641FEAA, string);
								format(string, sizeof(string), "* Você salvou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Libertado", 2500, 3);
								Controle(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								PlayerInfo[giveplayerid][pMuted] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está sequestrado !");
							    return true;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não é um Oficial !");
			}
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/libertar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5 || PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6 || PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14 || PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15 || PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17
			|| PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18 || PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19 || PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20 || PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21 || PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
 			{
			    if(PlayerInfo[playerid][pCargo] < 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 2 ou mais para desamarrar as pessoas !");
			        return true;
			    }
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_WHITE, "USE: /libertar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode desamarrar à sí mesmo!"); return true; }
							if(PlayerTied[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Você foi libertado por %s.", sendername);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você libertou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Libertado", 2500, 3);
								Controle(giveplayerid, 1);
								PlayerTied[giveplayerid] = 0;
								PlayerInfo[giveplayerid][pMuted] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está sequestrado !");
							    return true;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não é um Gangster !");
			}
		}//not connected
		return true;
	}
 	if(strcmp(cmd, "/vender", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			new x_nr[32];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr))
			{
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Vender ] __________________|");
				SendClientMessage(playerid, COLOR_WHITE, "USE: /vender [nome]");
		  		SendClientMessage(playerid, COLOR_GREY, "Nomes: Peixe, Cozido");
				return true;
			}
		    if(strcmp(x_nr,"peixe",true) == 0)
			{
			    if (!PlayerToPoint(100, playerid,-29.2522,-89.0717,1003.5469) && !PlayerToPoint(100, playerid,-24.2589,-54.7865,1003.5469) && !PlayerToPoint(100, playerid,-30.8149,-28.0234,1003.5573))//centerpoint 24-7
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não está em uma 24-7 !");
					return true;
				}
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USE: /vender peixe [peixe]");
					return true;
				}
				new price;
				new fishid = strval(tmp);
				if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Número de Peixes tem que ser maior que 1 e menor que 5 !"); return true; }
				else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(1) !"); return true; }
				else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(2) !"); return true; }
				else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(3) !"); return true; }
				else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(4) !"); return true; }
				else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(5) !"); return true; }
				ConsumingMoney[playerid] = 1;
				switch (fishid)
				{
				    case 1:
				    {
				        if(Fishes[playerid][pWeight1] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Estamos interessados apenas em peixes com 20 ou mais LBS.");
				            return true;
				        }
                        price = FishCost(playerid, Fishes[playerid][pFid1]);
                        price = price * Fishes[playerid][pWeight1];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 2;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Peixe~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Voce vendeu seu %s pesando %d, por R$%d.", Fishes[playerid][pFish1],Fishes[playerid][pWeight1],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 1);
				    }
				    case 2:
				    {
				        if(Fishes[playerid][pWeight2] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Estamos interessados apenas em peixes com 20 ou mais LBS.");
				            return true;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid2]);
                        price = price * Fishes[playerid][pWeight2];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 2;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Peixe~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Voce vendeu seu %s pesando %d, por R$%d.", Fishes[playerid][pFish2],Fishes[playerid][pWeight2],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 2);
				    }
				    case 3:
				    {
				        if(Fishes[playerid][pWeight3] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Estamos interessados apenas em peixes com 20 ou mais LBS.");
				            return true;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid3]);
                        price = price * Fishes[playerid][pWeight3];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 2;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Peixe~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Voce vendeu seu %s pesando %d, por R$%d.", Fishes[playerid][pFish3],Fishes[playerid][pWeight3],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 3);
				    }
				    case 4:
				    {
				        if(Fishes[playerid][pWeight4] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Estamos interessados apenas em peixes com 20 ou mais LBS.");
				            return true;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid4]);
                        price = price * Fishes[playerid][pWeight4];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 2;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Peixe~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Voce vendeu seu %s pesando %d, por R$%d.", Fishes[playerid][pFish4],Fishes[playerid][pWeight4],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 4);
				    }
				    case 5:
				    {
				        if(Fishes[playerid][pWeight5] < 20)
				        {
				            SendClientMessage(playerid, COLOR_WHITE, "Estamos interessados apenas em peixes com 20 ou mais LBS.");
				            return true;
				        }
            			price = FishCost(playerid, Fishes[playerid][pFid5]);
                        price = price * Fishes[playerid][pWeight5];
                        if(PlayerInfo[playerid][pTraderPerk] > 0)
				        {
				            new skill = price / 2;
				            new payout = (skill)*(5);
				            price += payout;
				        }
                        GameTextForPlayer(playerid, "~g~Peixe~n~~r~Vendido", 3000, 1);
                        format(string, sizeof(string), "* Voce vendeu seu %s pesando %d, por R$%d.", Fishes[playerid][pFish5],Fishes[playerid][pWeight5],price);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoney(playerid, price);
						ClearFishID(playerid, 5);
				    }
				}
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				return true;
			}
			else if(strcmp(x_nr,"cozido",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USE: /vender cozido [Nº do cozido] [id/nome]");
					return true;
				}
				new cookid = strval(tmp);
				if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Número do cozido mínimo 1 máximo 5 !"); return true; }
				else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem um cozido no numero(1) !"); return true; }
				else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem um cozido no numero(2) !"); return true; }
				else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem um cozido no numero(3) !"); return true; }
				else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem um cozido no numero(4) !"); return true; }
				else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem um cozido no numero(5) !"); return true; }
				tmp = strtok(cmdtext, idx);
			    if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "USE: /vender cozido [Nº do cozido] [id/nome]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				        switch(cookid)
				        {
							case 1:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook1]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight1];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID1];
								    format(string, sizeof(string), "* %s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Esse jogador não tem espaço na sua lista de cozidos !");
							        return true;
							    }
							}
							case 2:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook2]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight2];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID2];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Esse jogador não tem espaço na sua lista de cozidos !");
							        return true;
							    }
							}
							case 3:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook3]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight3];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID3];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Esse jogador não tem espaço na sua lista de cozidos !");
							        return true;
							    }
							}
							case 4:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook4]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight4];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID4];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Esse jogador não tem espaço na sua lista de cozidos !");
							        return true;
							    }
							}
							case 5:
							{
							    if(Cooking[giveplayerid][pCWeight1] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook1], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight1] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID1] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook1],Cooking[giveplayerid][pCWeight1]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight2] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook2], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight2] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID2] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook2],Cooking[giveplayerid][pCWeight2]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight3] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook3], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight3] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID3] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook3],Cooking[giveplayerid][pCWeight3]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight4] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook4], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight4] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID4] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook4],Cooking[giveplayerid][pCWeight4]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else if(Cooking[giveplayerid][pCWeight5] < 1)
							    {
							        format(string, sizeof(string), "%s", Cooking[playerid][pCook5]);
								    strmid(Cooking[giveplayerid][pCook5], string, 0, strlen(string), 255);
								    Cooking[giveplayerid][pCWeight5] = Cooking[playerid][pCWeight5];
								    Cooking[giveplayerid][pCookID5] = Cooking[playerid][pCookID5];
								    format(string, sizeof(string), "*%s te deu uma %s pesando %d use /cozido para vê-lo.",sendername,Cooking[giveplayerid][pCook5],Cooking[giveplayerid][pCWeight5]);
								    SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								    format(string, sizeof(string), "* Você deu uma %s pesando %d para %s.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5],giveplayer);
								    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							    }
							    else
							    {
							        SendClientMessage(playerid, COLOR_GREY, "   Esse jogador não tem espaço na sua lista de cozidos !");
							        return true;
							    }
							}
				        }//switch
				        ClearCookingID(playerid, cookid);
				    }//invalid giveplayerid
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está offline !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Comando de Venda Desconhecido !");
			    return true;
			}
		}
		return true;
	}
	if(strcmp(cmd,"/corrida",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pMembro] == 10||PlayerInfo[playerid][pLider] == 10|| PlayerInfo[playerid][pEmprego] == 8)
			{
				if(TransportDuty[playerid] > 0)
				{
				    if(TransportDuty[playerid] == 1)
				    {
				        TaxiDrivers -= 1;
				    }
				    else if(TransportDuty[playerid] == 2)
				    {
				        BusDrivers -= 1;
				    }
				    TransportDuty[playerid] = 0;
					format(string, sizeof(string), "* Voce está de folga e recebeu R$%d.", TransportMoney[playerid]);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					GivePlayerMoney(playerid, TransportMoney[playerid]);
					ConsumingMoney[playerid] = 1; TransportValue[playerid] = 0; TransportMoney[playerid] = 0;
					return true;
				}
				new Veh = GetPlayerVehicleID(playerid);
				if(IsATaxiCar(Veh) && (PlayerInfo[playerid][pMembro] == 10||PlayerInfo[playerid][pLider] == 10))
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USE: /corrida [Preço]");
							return true;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "   Preço da corrida mínimo R$1 Máximo R$999!"); return true; }
					    TaxiDrivers += 1; TransportDuty[playerid] = 1; TransportValue[playerid] = moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Taxista %s está em serviço, Corrida: R$%d - Chame um taxi /servico taxi", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
	    				return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Voce não é o motorista!");
					    return true;
					}
				}
				else if(IsAOniCar(Veh) && PlayerInfo[playerid][pEmprego] == 8)
				{
				    if(GetPlayerState(playerid) == 2)
				    {
					    tmp = strtok(cmdtext, idx);
						if(!strlen(tmp))
						{
							SendClientMessage(playerid, COLOR_WHITE, "USE: /corrida [Preco]");
							return true;
						}
						moneys = strval(tmp);
						if(moneys < 1 || moneys > 999) { SendClientMessage(playerid, COLOR_GREY, "   Preço da corrida Mínimo R$1 Máximo R$999!"); return true; }
					    BusDrivers += 1; TransportDuty[playerid] = 2; TransportValue[playerid]= moneys;
					    GetPlayerName(playerid,sendername,sizeof(sendername));
	    				format(string, sizeof(string), "Motorista de onibus %s está em serviço, Corrida: R$%d - Chame um onibus /servico onibus", sendername, TransportValue[playerid]);
	    				OOCNews(TEAM_GROVE_COLOR,string);
	    				return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Voce não é o motorista!");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Voce não está em um taxi/onibus!");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"   Voce não é um taxista/motorista de ônibus!");
			    return true;
			}
	    }
	    return true;
 	}
	if(strcmp(cmd, "/1", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
            GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			format(string, sizeof(string), "~p~| ~r~1 ~p~|");
            GameTextForAll(string, 1000, 5);
		}
		return true;
	}
	if(strcmp(cmd, "/2", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			format(string, sizeof(string), "~p~| ~r~2 ~p~|");
            GameTextForAll(string, 1000, 5);
		}
		return true;
	}
	if(strcmp(cmd, "/3", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			format(string, sizeof(string), "~p~| ~y~3 ~p~|");
            GameTextForAll(string, 1000, 5);
		}
		return true;
	}
	if(strcmp(cmd, "/go", true) == 0 || strcmp(cmd, "/4", true) == 0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			format(string, sizeof(string), "~p~| ~g~Go Go Go ~p~|");
            GameTextForAll(string, 1000, 5);
		}
		return true;
	}
 	if(strcmp(cmd,"/comer",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerBoxing[playerid] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "Você não pode comer enquanto está lutando !");
	            return true;
	        }
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /comer [numero do peixe(1 a 5)]");
				return true;
			}
			new cookid = strval(tmp);
			if(cookid < 1 || cookid > 5) { SendClientMessage(playerid, COLOR_GREY, "   número de cozimento tem que ser entre 1 e 5 !"); return true; }
			else if(cookid == 1 && Cooking[playerid][pCWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma comida na bolsa(1) !"); return true; }
			else if(cookid == 2 && Cooking[playerid][pCWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma comida na bolsa(2) !"); return true; }
			else if(cookid == 3 && Cooking[playerid][pCWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma comida na bolsa(3) !"); return true; }
			else if(cookid == 4 && Cooking[playerid][pCWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma comida na bolsa(4) !"); return true; }
			else if(cookid == 5 && Cooking[playerid][pCWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma comida na bolsa(5) !"); return true; }
            GetPlayerName(playerid, sendername, sizeof(sendername));
			new Float:health;
			if(GetPlayerHealth(playerid, health) < 40)
			{
			    new hp = 0;
			    switch (cookid)
			    {
					case 1:
					{
					    if(Cooking[playerid][pCookID1] == 16 || Cooking[playerid][pCookID1] == 18)
						{//Dolphin ou Turtle
							SetPlayerCriminal(playerid,255, "Consumo de espécies ameaçadas de extinção");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight1] / 3));
					    hp = Cooking[playerid][pCWeight1];
					    format(string, sizeof(string), "* %s come %s.", sendername, Cooking[playerid][pCook1]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* %s peso %d, e foi adicionado em sua vida.",Cooking[playerid][pCook1], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 2:
					{
					    if(Cooking[playerid][pCookID2] == 16 || Cooking[playerid][pCookID2] == 18)
						{//Dolphin ou Turtle
							SetPlayerCriminal(playerid,255, "Consumo de espécies ameaçadas de extinção");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight2] / 3));
					    hp = Cooking[playerid][pCWeight2];
					    format(string, sizeof(string), "* %s come %s.", sendername, Cooking[playerid][pCook2]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* %s peso %d, e foi adicionado em sua vida.",Cooking[playerid][pCook2], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 3:
					{
					    if(Cooking[playerid][pCookID3] == 16 || Cooking[playerid][pCookID3] == 18)
						{//Dolphin ou Turtle
							SetPlayerCriminal(playerid,255, "Consumo de espécies ameaçadas de extinção");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight3] / 3));
					    hp = Cooking[playerid][pCWeight3];
					    format(string, sizeof(string), "* %s come %s.", sendername, Cooking[playerid][pCook3]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* %s peso %d, e foi adicionado em sua vida.",Cooking[playerid][pCook3], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 4:
					{
					    if(Cooking[playerid][pCookID4] == 16 || Cooking[playerid][pCookID4] == 18)
						{//Dolphin ou Turtle
							SetPlayerCriminal(playerid,255, "Consumo de espécies ameaçadas de extinção");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight4] / 3));
					    hp = Cooking[playerid][pCWeight4];
					    format(string, sizeof(string), "* %s come %s.", sendername, Cooking[playerid][pCook4]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* %s peso %d, e foi adicionado em sua vida.",Cooking[playerid][pCook4], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					case 5:
					{
					    if(Cooking[playerid][pCookID5] == 16 || Cooking[playerid][pCookID5] == 18)
						{//Dolphin ou Turtle
							SetPlayerCriminal(playerid,255, "Consumo de espécies ameaçadas de extinção");
						}
					    SetPlayerHealth(playerid, health + (Cooking[playerid][pCWeight5] / 3));
					    hp = Cooking[playerid][pCWeight5];
					    format(string, sizeof(string), "* %s come %s.", sendername, Cooking[playerid][pCook5]);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					    format(string, sizeof(string), "* %s peso %d, e foi adicionado em sua vida.",Cooking[playerid][pCook5], hp);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
			    }
				ClearCookingID(playerid, cookid);
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Sua saúde é alta demais, só pode com a Saúde em 40 !");
			    return true;
			}
	    }
	    return true;
	}
 	if(strcmp(cmd,"/cozinhar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(IsAtCookPlace(playerid))
	        {
	            new x_nr[32];
	            x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "USE: /cozinhar [nome]");
					SendClientMessage(playerid, COLOR_WHITE, "Nomes: ultimopeixe, Peixe, Frango, Hamburger, Pizza.");
					return true;
				}
				if(strcmp(x_nr,"ultimopeixe",true) == 0)
				{
				    if(Fishes[playerid][pLastFish] > 0)
	        		{
					    new fornd = 0;
					    if(Cooking[playerid][pCWeight1] == 0)
					    {
						    format(string, sizeof(string), "Você preparou %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    fornd = 1;
					    }
					    else if(Cooking[playerid][pCWeight2] == 0)
					    {
						    format(string, sizeof(string), "Você preparou %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    fornd = 1;
					    }
					    else if(Cooking[playerid][pCWeight3] == 0)
					    {
						    format(string, sizeof(string), "Você preparou %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight3] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID3] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    fornd = 1;
					    }
					    else if(Cooking[playerid][pCWeight4] == 0)
					    {
						    format(string, sizeof(string), "Você preparou %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight4] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID4] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    fornd = 1;
					    }
					    else if(Cooking[playerid][pCWeight5] == 0)
					    {
						    format(string, sizeof(string), "Você preparou %s", FishNames[Fishes[playerid][pFishID]]);
						    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight5] = Fishes[playerid][pLastWeight];
						    Cooking[playerid][pCookID5] = Fishes[playerid][pFishID];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    fornd = 1;
					    }
					    else
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Você não tem espaço na sua lista de preparo !");
					        return true;
					    }
					    if(fornd)
					    {
					        ClearFishID(playerid, Fishes[playerid][pLastFish]);
				            Fishes[playerid][pLastFish] = 0;
				            Fishes[playerid][pFishID] = 0;
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Você ainda não fisgou um peixe !");
				        return true;
				    }
				}
				else if(strcmp(x_nr,"peixe",true) == 0)
				{
				    new fornd = 0;
				    tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid, COLOR_WHITE, "USE: /cozinhar peixe [peixenumero]");
						return true;
					}
					new fishid = strval(tmp);
					if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   Número de Peixes tem que ser entre 1 e 5 !"); return true; }
					else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(1) !"); return true; }
					else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(2) !"); return true; }
					else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(3) !"); return true; }
					else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(4) !"); return true; }
					else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não pegou um peixe na bolsa número(5) !"); return true; }
					if(Cooking[playerid][pCWeight1] == 0)
					{
					    if(fishid == 1)
					    {
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish1]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight1];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid1];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
					    	SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
					    }
						else if(fishid == 2)
					 	{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight1] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID1] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						fornd = 1;
		    		}
					else if(Cooking[playerid][pCWeight2] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID2] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish2]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight2];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid2];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 3)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish3]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight3];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid3];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 4)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish4]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight4];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid4];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						else if(fishid == 5)
						{
						    format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish5]);
						    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
						    Cooking[playerid][pCWeight2] = Fishes[playerid][pWeight5];
						    Cooking[playerid][pCookID2] = Fishes[playerid][pFid5];
						    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
						    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						}
						fornd = 1;
		    		}
					else if(Cooking[playerid][pCWeight3] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight3] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID3] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						fornd = 1;
   					}
					else if(Cooking[playerid][pCWeight4] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight4] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID4] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
    					}
						fornd = 1;
		    		}
					else if(Cooking[playerid][pCWeight5] == 0)
					{
						if(fishid == 1)
					    {
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish1]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight1];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid1];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 2)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish2]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight2];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid2];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 3)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish3]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight3];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid3];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 4)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish4]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight4];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid4];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						else if(fishid == 5)
						{
							format(string, sizeof(string), "Você preparou %s", Fishes[playerid][pFish5]);
							strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							Cooking[playerid][pCWeight5] = Fishes[playerid][pWeight5];
							Cooking[playerid][pCookID5] = Fishes[playerid][pFid5];
							format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
			    		}
						fornd = 1;
   					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "   Você não tem espaço na sua lista de preparo !");
					    return true;
		    		}
					if(fornd)
					{
					    ClearFishID(playerid, fishid);
						Fishes[playerid][pLastFish] = 0;
			   			Fishes[playerid][pFishID] = 0;
					}
				}
				else if(strcmp(x_nr,"frango",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,369.9786,-4.0798,1001.8589))
				    {//Cluckin Bell
				        if(Groceries[playerid][pChicken] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Preparou Frango");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Preparou Frango");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Preparou Frango");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Preparou Frango");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Preparou Frango");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pChicken];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pChickens] = 0; Groceries[playerid][pChicken] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Você não tem espaço na sua lista de preparo !");
						        return true;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Você não tem nem um frango !");
				            return true;
				        }
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Você precisa ir até uma Cluckin Bell para /cozinhar isso !");
					    return true;
				    }
				}
				else if(strcmp(x_nr,"hamburger",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,376.4466,-60.9574,1001.5078) || PlayerToPoint(3.0,playerid,378.1215,-57.4928,1001.5078))
					{//Burgershot
					    if(Groceries[playerid][pHamburger] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Preparou Hamburgers");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Preparou Hamburgers");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Preparou Hamburgers");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Preparou Hamburgers");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Preparou Hamburgers");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pHamburgers] = 0; Groceries[playerid][pHamburger] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Você não tem espaço na sua lista de preparo !");
						        return true;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Você não tem nem um hamburger !");
				            return true;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você precisa ir a uma Burger Shot para /cozinhar isso !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"pizza",true) == 0)
				{
				    if(PlayerToPoint(3.0,playerid,374.1185,-113.6361,1001.4922) || PlayerToPoint(3.0,playerid,377.7971,-113.7668,1001.4922))
					{//Well Stacked Pizza
					    if(Groceries[playerid][pPizza] != 0)
				        {
				            if(Cooking[playerid][pCWeight1] == 0)
						    {
							    format(string, sizeof(string), "Preparou Pizza");
							    strmid(Cooking[playerid][pCook1], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight1] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID1] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook1],Cooking[playerid][pCWeight1]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight2] == 0)
						    {
							    format(string, sizeof(string), "Preparou Pizza");
							    strmid(Cooking[playerid][pCook2], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight2] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID2] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook2],Cooking[playerid][pCWeight2]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight3] == 0)
						    {
							    format(string, sizeof(string), "Preparou Pizza");
							    strmid(Cooking[playerid][pCook3], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight3] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID3] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook3],Cooking[playerid][pCWeight3]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight4] == 0)
						    {
							    format(string, sizeof(string), "Preparou Pizza");
							    strmid(Cooking[playerid][pCook4], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight4] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID4] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook4],Cooking[playerid][pCWeight4]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else if(Cooking[playerid][pCWeight5] == 0)
						    {
							    format(string, sizeof(string), "Preparou Pizza");
							    strmid(Cooking[playerid][pCook5], string, 0, strlen(string), 255);
							    Cooking[playerid][pCWeight5] = Groceries[playerid][pHamburger];
							    Cooking[playerid][pCookID5] = 30;
							    Groceries[playerid][pPizzas] = 0; Groceries[playerid][pPizza] = 0;
							    format(string, sizeof(string), "* Você fez %s, peso %d LBS.",Cooking[playerid][pCook5],Cooking[playerid][pCWeight5]);
							    SendClientMessage(playerid,COLOR_LIGHTBLUE, string);
						    }
						    else
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   Você não tem espaço na sua lista de preparo !");
						        return true;
						    }
				        }
				        else
				        {
				            SendClientMessage(playerid, COLOR_GREY, "   Você não tem nem uma pizza !");
				            return true;
				        }
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você precisa ir a uma Well Stacked Pizza parar /cozinhar isso !");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Número de preparo inválido !");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está em nem um lugar de cozimento (Cluckin Bell / Burger Shot / Well Stacked Pizza).");
	            return true;
	        }
	    }
	    return true;
	}
 	if(strcmp(cmd,"/cozido",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Cozidos __________________|");
	        format(string, sizeof(string), "** (1) Cozido: %s.   Peso: %d.", Cooking[playerid][pCook1], Cooking[playerid][pCWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Cozido: %s.   Peso: %d.", Cooking[playerid][pCook2], Cooking[playerid][pCWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Cozido: %s.   Peso: %d.", Cooking[playerid][pCook3], Cooking[playerid][pCWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Cozido: %s.   Peso: %d.", Cooking[playerid][pCook4], Cooking[playerid][pCWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Cozido: %s.   Peso: %d.", Cooking[playerid][pCook5], Cooking[playerid][pCWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	    return true;
 	}
	if(strcmp(cmd,"/pescar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pFishes] > 500)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   pescaram muitos peixes, espere até a sua reduzida !");
	            return true;
	        }
	        if(TempoPescou[playerid] == 1)
			{
			SendClientMessage(playerid,0x808080C8,"Aguarde 10 minutos para pescar novamente.");
			return 1;
			}
	        if(Fishes[playerid][pWeight1] > 0 && Fishes[playerid][pWeight2] > 0 && Fishes[playerid][pWeight3] > 0 && Fishes[playerid][pWeight4] > 0 && Fishes[playerid][pWeight5] > 0)
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você já pegou 5 Peixes, /vender(24-7) ou /comer(lojas de comida) ou liberte-os primeiro !");
	            TempoPescou[playerid] = 1;
                tempopescar[playerid] = SetTimerEx("TempoPescar", 600000, 0, "i", playerid);
	            return true;
	        }
	        new Veh = GetPlayerVehicleID(playerid);
	        if((IsAtFishPlace(playerid)) || IsABoat(Veh))
	        {
	            new Caught;
	            new rand;
	            new fstring[MAX_PLAYER_NAME];
	            new Level = PlayerInfo[playerid][pFishSkill];
	            if(Level >= 0 && Level <= 50) { Caught = random(20)-7; }
	            else if(Level >= 51 && Level <= 100) { Caught = random(50)-20; }
	            else if(Level >= 101 && Level <= 200) { Caught = random(100)-50; }
	            else if(Level >= 201 && Level <= 400) { Caught = random(160)-60; }
	            else if(Level >= 401) { Caught = random(180)-70; }
	            rand = random(FishNamesNumber);
	            if(Caught <= 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Os Peixes fugiram de você, Tente de Novo !");
	                return true;
	            }
	            else if(rand == 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você pegou 1 casaco e o jogou fora !");
	                return true;
	            }
	            else if(rand == 4)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você pegou 1 calça e a jogou fora !");
	                return true;
	            }
	            else if(rand == 7)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você pegou 1 latinha e a jogou fora !");
	                return true;
	            }
	            else if(rand == 10)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você pegou 1 par de sapatos e jogou fora !");
	                return true;
	            }
	            else if(rand == 13)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você pegou algum lixo e jogou fora !");
	                return true;
	            }
	            else if(rand == 20)
	            {
	                new mrand = random(200);
	                format(string, sizeof(string), "* Você pegou 1 saco de dinheiro,contendo R$%d.", mrand);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	                GivePlayerMoney(playerid, mrand);
	                return true;
	            }
		        if(PlayerInfo[playerid][pFishLic] < 1)
		        {
					SetPlayerCriminal(playerid,255, "Pesca Ilegal!");
				}
		        if(Fishes[playerid][pWeight1] == 0)
		        {
		        	PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish1], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight1] = Caught;
					format(string, sizeof(string), "* Voce pescou uma %s, pesando %d Lbs.", Fishes[playerid][pFish1], Caught);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 1;
					Fishes[playerid][pFid1] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Seu antigo recorde de %d Lbs foi quebrado, Seu novo recorde agora é de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
     			}
		        else if(Fishes[playerid][pWeight2] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish2], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight2] = Caught;
					format(string, sizeof(string), "* Voce pescou uma %s, pesando %d Lbs.", Fishes[playerid][pFish2], Caught);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 2;
					Fishes[playerid][pFid2] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Seu antigo recorde de %d Lbs foi quebrado, Seu novo recorde agora é de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight3] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish3], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight3] = Caught;
					format(string, sizeof(string), "* Voce pescou uma %s, pesando %d Lbs.", Fishes[playerid][pFish3], Caught);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 3;
					Fishes[playerid][pFid3] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Seu antigo recorde de %d Lbs foi quebrado, Seu novo recorde agora é de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight4] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish4], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight4] = Caught;
					format(string, sizeof(string), "* Voce pescou uma %s, pesando %d Lbs.", Fishes[playerid][pFish4], Caught);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 4;
					Fishes[playerid][pFid4] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Seu antigo recorde de %d Lbs foi quebrado, Seu novo recorde agora é de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else if(Fishes[playerid][pWeight5] == 0)
		        {
		            PlayerInfo[playerid][pFishes] += 1;
		            PlayerInfo[playerid][pFishSkill] += 1;
		            format(fstring, sizeof(fstring), "%s", FishNames[rand]);
					strmid(Fishes[playerid][pFish5], fstring, 0, strlen(fstring), 255);
					Fishes[playerid][pWeight5] = Caught;
					format(string, sizeof(string), "* Voce pescou uma %s, pesando %d Lbs.", Fishes[playerid][pFish5], Caught);
					SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					Fishes[playerid][pLastWeight] = Caught;
					Fishes[playerid][pLastFish] = 5;
					Fishes[playerid][pFid5] = rand;
					Fishes[playerid][pFishID] = rand;
					if(Caught > PlayerInfo[playerid][pBiggestFish])
					{
					    format(string, sizeof(string), "* Seu antigo recorde de %d Lbs foi quebrado, Seu novo recorde agora é de %d Lbs.", PlayerInfo[playerid][pBiggestFish], Caught);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerInfo[playerid][pBiggestFish] = Caught;
					}
		        }
		        else
		        {
		            SendClientMessage(playerid, COLOR_GREY, "   Você não tem nenhum espaço para o seu peixe !");
		            return true;
		        }
	            if(PlayerInfo[playerid][pFishSkill] == 50)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Nível de Pesca Agora é nível 2, Agora você pode capturar peixes mais pesados."); }
				else if(PlayerInfo[playerid][pFishSkill] == 250)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Nível de Pesca Agora é nível 3, Agora você pode capturar peixes mais pesados."); }
				else if(PlayerInfo[playerid][pFishSkill] == 500)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Nível de Pesca Agora é nível 4, Agora você pode capturar peixes mais pesados."); }
				else if(PlayerInfo[playerid][pFishSkill] == 1000)
				{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Nível de Pesca Agora é nível 5, Agora você pode capturar peixes mais pesados."); }
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está em um lugar Pesca (Parque Gleen) ou em um barco de pesca !");
	            return true;
	        }
	    }
	    return true;
 	}
	if(strcmp(cmd,"/peixes",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Fishes __________________|");
	        format(string, sizeof(string), "** (1) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish1], Fishes[playerid][pWeight1]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (2) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish2], Fishes[playerid][pWeight2]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (3) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish3], Fishes[playerid][pWeight3]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (4) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish4], Fishes[playerid][pWeight4]);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** (5) Peixe: %s.   Peso: %d.", Fishes[playerid][pFish5], Fishes[playerid][pWeight5]);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	    return true;
 	}
 	if(strcmp(cmd,"/soltarpeixe",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /soltarpeixe [peixe]");
				return true;
			}
			new fishid = strval(tmp);
			if(fishid < 1 || fishid > 5) { SendClientMessage(playerid, COLOR_GREY, "   O Número de Peixes Deve Ser Maior que 1 ou menor que 5 !"); return true; }
			else if(fishid == 1 && Fishes[playerid][pWeight1] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você nem pegou peixe,número(1) !"); return true; }
			else if(fishid == 2 && Fishes[playerid][pWeight2] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você nem pegou peixe,número(2) !"); return true; }
			else if(fishid == 3 && Fishes[playerid][pWeight3] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você nem pegou peixe,número(3) !"); return true; }
			else if(fishid == 4 && Fishes[playerid][pWeight4] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você nem pegou peixe,número(4) !"); return true; }
			else if(fishid == 5 && Fishes[playerid][pWeight5] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você nem pegou peixe,número(5) !"); return true; }
			ClearFishID(playerid, fishid);
			Fishes[playerid][pLastFish] = 0;
   			Fishes[playerid][pFishID] = 0;
   			SendClientMessage(playerid, COLOR_LIGHTBLUE, "   Você devolveu o peixe !");
		}
		return true;
	}
 	if(strcmp(cmd,"/soltarultimo",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pLastFish] > 0)
	        {
	            ClearFishID(playerid, Fishes[playerid][pLastFish]);
	            Fishes[playerid][pLastFish] = 0;
	            Fishes[playerid][pFishID] = 0;
	            SendClientMessage(playerid, COLOR_LIGHTBLUE, "   Você devolveu o último peixe !");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você nem mesmo apanhou um peixe ainda !");
	            return true;
	        }
	    }
	    return true;
 	}
 	if(strcmp(cmd,"/soltartodos",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        if(Fishes[playerid][pWeight1] > 0 || Fishes[playerid][pWeight2] > 0 || Fishes[playerid][pWeight3] > 0 || Fishes[playerid][pWeight4] > 0 || Fishes[playerid][pWeight5] > 0)
	        {
	            ClearFishes(playerid);
				Fishes[playerid][pLastFish] = 0;
				Fishes[playerid][pFishID] = 0;
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "   Você soltou todos os seus peixes !");
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não pegou nenhum peixe ainda !");
	            return true;
	        }
	    }
	    return true;
 	}
	if(strcmp(cmd,"/minhaslicencas",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        new text1[20];
	        new text2[20];
	        new text3[20];
	        new text4[20];
	        new text5[20];
	        if(PlayerInfo[playerid][pCarLic]) { text1 = "Positivo"; } else { text1 = "Negativo"; }
            if(PlayerInfo[playerid][pFlyLic]) { text4 = "Positivo"; } else { text4 = "Negativo"; }
			if(PlayerInfo[playerid][pBoatLic]) { text2 = "Positivo"; } else { text2 = "Negativo"; }
	        if(PlayerInfo[playerid][pFishLic]) { text3 = "Positivo"; } else { text3 = "Negativo"; }
	        if(PlayerInfo[playerid][pGunLic]) { text5 = "Positivo"; } else { text5 = "Negativo"; }
	        SendClientMessage(playerid, COLOR_WHITE, "|__________________ Licencas __________________|");
	        format(string, sizeof(string), "** Motorista: %s.", text1);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Piloto: %s.", text4);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Marujo: %s.", text2);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Pescador: %s.", text3);
			SendClientMessage(playerid, COLOR_GREY, string);
			format(string, sizeof(string), "** Armas: %s.", text5);
			SendClientMessage(playerid, COLOR_GREY, string);
		}
	    return true;
 	}
 	if(strcmp(cmd,"/mostrarlicencas",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
	        tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Use: /mostrarlicencas [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
				    if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Para ver suas licencas Use: /minhaslicencas!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    new text1[20];
				        new text2[20];
				        new text3[20];
				        new text4[20];
				        new text5[20];
						if(PlayerInfo[playerid][pCarLic]) { text1 = "Positivo"; } else { text1 = "Negativo"; }
                        if(PlayerInfo[playerid][pFlyLic]) { text4 = "Positivo"; } else { text4 = "Negativo"; }

						if(PlayerInfo[playerid][pBoatLic]) { text2 = "Positivo"; } else { text2 = "Negativo"; }
				        if(PlayerInfo[playerid][pFishLic]) { text3 = "Positivo"; } else { text3 = "Negativo"; }
				        if(PlayerInfo[playerid][pGunLic]) { text5 = "Positivo"; } else { text5 = "Negativo"; }
				        format(string, sizeof(string), "|__________ Licencas de %s __________|", PlayerName(playerid));
				        SendClientMessage(giveplayerid, COLOR_WHITE, string);
				        format(string, sizeof(string), "** Motorista: %s.", text1);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Piloto: %s.", text4);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Marujo: %s.", text2);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Pescador: %s.", text3);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "** Armas: %s.", text5);
						SendClientMessage(giveplayerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s mostrou suas licencas para você.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Você mostrou suas licencas para %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta longe de Você !");
					    return true;
					}
				}
			}
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   O Jogador está offline !");
	            return true;
	        }
		}
	    return true;
 	}
	if(strcmp(cmd,"/laptop",true)==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(GetPlayerOrg(playerid) == 8 || GetPlayerOrg(playerid) == 22)
		    {
			    if(ConnectedToPC[playerid] == 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você desligou seu laptop, e se desconectou de sua Agencia.");
			        ConnectedToPC[playerid] = 0;
			        return true;
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você ligou seu laptop, e se conectou a sua Agência.");
			    SendClientMessage(playerid, COLOR_WHITE, "|___ *Agencia dos Assasinos* ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Noticias");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Contratos");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * DarCont");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Pedido");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Membros");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| * Sair");
				SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
				ConnectedToPC[playerid] = 255;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não e um Assasino!");
		        return true;
		    }
		}
	    return true;
	}
	if(strcmp(cmd, "/equiparm", true) == 0)
	{
        new tmpcar = GetPlayerVehicleID(playerid);
        tmp = strtok(cmdtext, idx);
        if(!strlen(tmp))
		if(IsACaminhaozinhoCar(tmpcar)||PlayerToPoint(3, playerid,-2648.0940,1396.4666,906.4609) || PlayerToPoint(3,playerid,675.0715,-1275.7689,13.6334) || HouseEntered[playerid] != 255)
		{
	        GetPlayerName(playerid, sendername, sizeof(sendername));
	        if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12 || PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)//Mafiosos
	        {
				if(OnMafiaEquipado[playerid] == 1)
				{
					ResetPlayerWeaponsEx(playerid);
					OnMafiaEquipado[playerid] = 0;
					return true;
	    		}
                if (PlayerInfo[playerid][pLider] == 12 || PlayerInfo[playerid][pMembro] == 12) // Máfia Cosa Nostra
                {
					if (PlayerInfo[playerid][pCargo] == 0)
					{
	   					format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
                        ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 50);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 1)
					{
		   				format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 50);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 2)
					{
	   					format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 80);
						GivePlayerWeapon(playerid, 29, 150);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 3)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 100);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
                    }
	 				if (PlayerInfo[playerid][pCargo] == 4)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 100);
						GivePlayerWeapon(playerid, 24, 100);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 31, 200);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 5)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 100);
						GivePlayerWeapon(playerid, 24, 100);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 31, 200);
						GivePlayerWeapon(playerid, 34, 100);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
	                    return true;
					}
					if (PlayerInfo[playerid][pCargo] == 6)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 120);
						GivePlayerWeapon(playerid, 24, 120);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 31, 200);
						GivePlayerWeapon(playerid, 34, 120);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
	   		    }
				if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)// Máfia Yakuza
				{
					if (PlayerInfo[playerid][pCargo] == 0)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 50);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 1)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 50);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 2)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 80);
						GivePlayerWeapon(playerid, 29, 150);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 3)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 50);
						GivePlayerWeapon(playerid, 22, 100);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
	 				if (PlayerInfo[playerid][pCargo] == 4)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 100);
						GivePlayerWeapon(playerid, 24, 100);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 31, 200);
						GivePlayerWeapon(playerid, 5, 1);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
					if (PlayerInfo[playerid][pCargo] == 5)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 100);
						GivePlayerWeapon(playerid, 24, 100);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 31, 200);
						GivePlayerWeapon(playerid, 34, 100);
						GivePlayerWeapon(playerid, 5, 1);
						GivePlayerWeapon(playerid, 17, 2);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
                        return true;
					}
					if (PlayerInfo[playerid][pCargo] == 6)
					{
						format(string, sizeof(string), "* Mafioso %s pega seus equipamentos.", PlayerName(playerid));
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                        ResetPlayerWeaponsEx(playerid);
						GivePlayerWeapon(playerid, 25, 120);
						GivePlayerWeapon(playerid, 24, 120);
						GivePlayerWeapon(playerid, 29, 200);
						GivePlayerWeapon(playerid, 31, 200);
						GivePlayerWeapon(playerid, 34, 120);
						GivePlayerWeapon(playerid, 5, 1);
						GivePlayerWeapon(playerid, 17, 4);
						SetPlayerArmour(playerid, 100.0);
						SetPlayerHealth(playerid, 100.0);
						OnMafiaEquipado[playerid] = 1;
						return true;
					}
				}
			}
			if(PlayerInfo[playerid][pMembro] != 12 && PlayerInfo[playerid][pLider] != 12 && PlayerInfo[playerid][pMembro] != 13 && PlayerInfo[playerid][pLider] != 13)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um Mafioso");
				return true;
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está na HQ ou em Um BoxVille.");
		}
	}
 	if(strcmp(cmd, "/pegararmasv",true)==0)
	{
        if(PlayerInfo[playerid][pEmprego] == 6)
	    {
			new x_nr[32];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "Use: /pegararmasv [QUANTIA - MAX = 55]*");
				SendClientMessage(playerid, COLOR_WHITE, "Para pegar seus materiais de Vendedor de Drogas.");
				return true;
			}
				if(PlayerToPoint(3.0,playerid,2177.5793,-982.4036,64.4688))
				{
  	    			if(MatsHolding[playerid] >= 55)
  	   				{
         				SendClientMessage(playerid, COLOR_GREY, " Você já tem Pacotes !");
	        			return true;
        			}
		        	tmp = strtok(cmdtext, idx);
		        	if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Use: /pegararmasv [QUANTIA - MAX = 55]*");
						return true;
					}
      				moneys = strval(tmp);
					if(moneys < 1 || moneys > 55) { SendClientMessage(playerid, COLOR_GREY, "   O Números de Pacotes à ser pegos tem que ser mais que 1 e menos que 55 !"); return true; }
					new price = moneys * 100;
					if(GetPlayerMoney(playerid) > price)
					{
    					format(string, sizeof(string), "* Você recebeu %d Materiais por R$%d.", moneys, price);
    					SendClientMessage(playerid, COLOR_GREY, "Vá até a marca e troque pelos pacotes !");
	    				SetPlayerCheckpoint(playerid, 1828.9386,-1149.9722,23.9766,8.0);//trazeira da loja de armas
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				    	GivePlayerMoney(playerid, - price);
				    	SBizzInfo[16][sbTill] += price;
		                ExtortionSBiz(16, price);
				    	MatsHolding[playerid] = moneys;
					}
					else
					{
    					format(string, sizeof(string), "   Você não tem R$%d !", price);
				    	SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
   				else
		    	{
      				SendClientMessage(playerid, COLOR_GREY, " Você não está nas caixas de Materiais no Morro !");
       	 			return true;
 	  			}
			}
		}
	if(strcmp(cmd, "/jfora", true) == 0)
	{
	    new Veh = GetPlayerVehicleID(playerid);
 		if((IsAtFishPlace(playerid)) || IsABoat(Veh))
 		{
 		    if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12 || PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
 		    {
				new x_nr[32];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "Use: /jfora [name]");
					SendClientMessage(playerid, COLOR_WHITE, "Nomes validos: materiais.");
					return true;
				}
				if(strcmp(x_nr,"materiais",true) == 0)
				{
			    	if((IsAtFishPlace(playerid)) || IsABoat(Veh))
			    	{
			        	if(MatsHolding[playerid] > 0)
			        	{
							format(string,sizeof(string),"* %s jogou um saco na água.",PlayerName(playerid));
							ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							MatsHolding[playerid] = 0;
						}
						else
						{
					    	SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem Materiais para jogá-los na água.");
						}
					}
					else
					{
				    	SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode jogar os itens ilegais aqui.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um Mafioso");
			}
		}
	}
	if(strcmp(cmd, "/ajudamateriais",true)==0)
	{
	    if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13 || PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
		{
			Controle(playerid, 0);
			ShowPlayerDialog(playerid, 5053, DIALOG_STYLE_MSGBOX, "Ajuda Máfias", "Vá até a estação ( /GPS ) e lá tem um ícone de um pacote, digite '/mafia [pegar]' em cima do ícone\n\nAssim que você pegar seus pacotes, vá ao casarão ( /GPS ), e troque os pacotes pelos materiais.\n\nÉ só você encostar no ícone do casarão, que você ja trocará automaticamente os pacotes pelos materiais.\nPara vender use '/abastecerhq' em cima do cofre da Gang.\n\nDúvida ? /relatorio ou /duvida", "Ok", "Sair");
		}
		return true;
		}
	if(strcmp(cmd, "/mafia",true)==0)
	{
	    if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13 || PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
    	{
			new x_nr[32];
			x_nr = strtok(cmdtext, idx);
			if(!strlen(x_nr)) {
				SendClientMessage(playerid, COLOR_WHITE, "Use: /mafia [name]");
				SendClientMessage(playerid, COLOR_WHITE, "Nomes validos: pegar, trocar.");
				return true;
			}
			if(strcmp(x_nr,"pegar",true) == 0)
			{
				if(PlayerToPoint(3.0,playerid,1738.6844,-1944.9553,13.5647))
				{
  	    			if(MatsHolding[playerid] >= 55)
  	   				{
         				SendClientMessage(playerid, COLOR_GREY, " Você já tem Pacotes !");
	        			return true;
        			}
		        	tmp = strtok(cmdtext, idx);
		        	if(!strlen(tmp)) {
						SendClientMessage(playerid, COLOR_WHITE, "Use: /mafia pegar [quantidade]  *Max p/ Vez = 55*");
						return true;
					}
      				moneys = strval(tmp);
					if(moneys < 1 || moneys > 55) { SendClientMessage(playerid, COLOR_GREY, "   O Números de Pacotes à ser pegos tem que ser mais que 1 e menos que 55 !"); return true; }
					new price = moneys * 100;
					if(GetPlayerMoney(playerid) > price)
					{
    					format(string, sizeof(string), "* Você recebeu %d Materiais por R$%d.", moneys, price);
				    	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				    	GivePlayerMoney(playerid, - price);
				    	SBizzInfo[16][sbTill] += price;
		                ExtortionSBiz(16, price);
				    	MatsHolding[playerid] = moneys;
					}
					else
					{
    					format(string, sizeof(string), "   Você não tem R$%d !", price);
				    	SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
   				else
		    	{
      				SendClientMessage(playerid, COLOR_GREY, " Você não está nas caixas de Materiais na Estação Unity !");
       	 			return true;
 	  			}
			}
			else if(strcmp(x_nr,"trocar",true) == 0)
			{
			    if(PlayerToPoint(3.0,playerid,1240.5569,-2036.9919,59.9709))
			    {
			        if(MatsHolding[playerid] > 0)
			        {
			            new payout = (100)*(MatsHolding[playerid]);
			            format(string, sizeof(string), "* Você pagou %d para o Armazén pelos seus %d pacotes.", payout, MatsHolding[playerid]);
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
			            PlayerInfo[playerid][pMats] += payout;
			            MatsHolding[playerid] = 0;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Você não tem nenhum pacote !");
				        return true;
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você não está nas caixas de Materiais no Casarão !");
			        return true;
			    }
			}
		}
	}
	if(strcmp(cmd, "/mafiavkit", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	        if(PlayerInfo[playerid][pJailed] != 0)
    		{
	   			SendClientMessage(playerid,COLOR_YELLOW," Você não pode vender armas na cadeia!");
	   			return true;
    		}
			new carid = GetPlayerVehicleID(playerid);
			if(!IsACaminhaozinhoCar(carid))
			{
				SendClientMessage(playerid,COLOR_GRAD1,"Você precisa estar dentro do BoxVille");
				return true;
			}
	        if (PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13 || PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
			{
	            new x_nr[32];
				x_nr = strtok(cmdtext, idx);
				if(!strlen(x_nr))
				{
					SendClientMessage(playerid,COLOR_WHITE,"|__________________[ Vender Armas - Mafiosos ]__________________|");
					SendClientMessage(playerid,COLOR_GREY,"USE: /mafiavkit [1 a 3] [ID do Player] ");
					SendClientMessage(playerid,COLOR_GREY,"Kit 1: Shotgun,m4,mp5(399 Materiais)");
					SendClientMessage(playerid,COLOR_GREY,"Kit 2: Eagle,Shotgun,m4,mp5(499 Materiais)");
					SendClientMessage(playerid,COLOR_GREY,"Kit 3: Eagle,Shotgun,m4,mp5,sniper,faca(599 Materiais)");
					return true;
				}
				else if(strcmp(x_nr,"1",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid,COLOR_WHITE,"|__________________[ Vender Armas - Mafiosos ]__________________|");
						SendClientMessage(playerid,COLOR_GREY,"USE: /mafiavkit [1 a 3] [ID do Player] ");
						SendClientMessage(playerid,COLOR_GREY,"Kit 1: Shotgun,m4,mp5(399 Materiais)");
						SendClientMessage(playerid,COLOR_GREY,"Kit 2: Eagle,Shotgun,m4,mp5(499 Materiais)");
						SendClientMessage(playerid,COLOR_GREY,"Kit 3: Eagle,Shotgun,m4,mp5,sniper,faca(599 Materiais)");
					    return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se vender armas!"); return true; }
					new carid1 = GetPlayerVehicleID(giveplayerid);
					if(IsACop(giveplayerid))
					{
						SendClientMessage(playerid,COLOR_GRAD1,"Você não pode vender kit para policiais");
						return true;
					}
					if(!IsACaminhaozinhoCar(carid1))
					{
						SendClientMessage(playerid,COLOR_GRAD1,"O player para quem você vai vender precisa estar dentro do BoxVille");
						return true;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					    if(giveplayerid != INVALID_PLAYER_ID)
					    {
					        GetPlayerName(playerid, sendername, sizeof(sendername));
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				            if(PlayerInfo[playerid][pMats] > 399)
							{
      	                        if(GetPlayerMoneyEx(giveplayerid) < 5000) {
      	                        format(string,sizeof(string),"O Jogador %s não tem dinheiro suficiente.",giveplayer);
								SendClientMessage(playerid, COLOR_RED, string);
								return true;
								}
						        if(TempoEnviarPagamento[playerid] == 1)
								{
				  	               SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para enviar novamente.");
									return 1;
								}
					    		GivePlayerMoney(giveplayerid, -5000);
					    		GivePlayerMoney(playerid, 5000);
					    		PlayerInfo[playerid][pMats] -= 399;
				    			GivePlayerWeapon(giveplayerid, 31, 300);
				    			GivePlayerWeapon(giveplayerid, 29, 200);
				    			GivePlayerWeapon(giveplayerid, 25, 100);
				    			format(string,sizeof(string),"Voce vendeu o kit 1,para %s.",giveplayer);
				    			SendClientMessage(playerid,COLOR_GRAD1,string);
				    			format(string,sizeof(string),"* %s vendeu kits para %s.",sendername ,giveplayer);
				    			ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
                                TempoEnviarPagamento[playerid] = 1;
								TimerEnviarPagamento[playerid] = SetTimerEx("ETempoPagamento", 60000, 0, "i", playerid);
				    			return true;
							}
							else
							{
								SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender este kit!");
								return true;
							}
					        //return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"2",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid,COLOR_WHITE,"|__________________[ Vender Armas - Mafiosos ]__________________|");
						SendClientMessage(playerid,COLOR_GREY,"USE: /mafiavkit [1 a 3] [ID do Player] ");
						SendClientMessage(playerid,COLOR_GREY,"Kit 1: Shotgun,m4,mp5(399)");
						SendClientMessage(playerid,COLOR_GREY,"Kit 2: Eagle,Shotgun,m4,mp5(499)");
						SendClientMessage(playerid,COLOR_GREY,"Kit 3: Eagle,Shotgun,m4,mp5,sniper,faca(599)");
					    return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se vender armas!"); return true; }
					new carid2 = GetPlayerVehicleID(giveplayerid);
					if(IsACop(giveplayerid))
					{
						SendClientMessage(playerid,COLOR_GRAD1,"Você não pode vender kit para policiais");
						return true;
					}
					if(!IsACaminhaozinhoCar(carid2))
					{
						SendClientMessage(playerid,COLOR_GRAD1,"O player para quem você vai vender precisa estar dentro do BoxVille");
						return true;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					    GetPlayerName(playerid, sendername, sizeof(sendername));
		       			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					    if(PlayerInfo[playerid][pMats] > 499)
						{
                       if(GetPlayerMoneyEx(giveplayerid) < 6000) {
                            format(string,sizeof(string),"O Jogador %s não tem dinheiro suficiente.",giveplayer);
                            SendClientMessage(playerid, COLOR_RED, string);
                            return true;}
						  if(TempoEnviarPagamento[playerid] == 1)
							{
							SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para enviar novamente.");
							return 1;
							}
					    	GivePlayerMoney(giveplayerid, -6000);
					    	GivePlayerMoney(playerid, 6000);
					    	PlayerInfo[playerid][pMats] -= 499;
                    		GivePlayerWeapon(giveplayerid, 31, 300);
				    		GivePlayerWeapon(giveplayerid, 29, 200);
				    		GivePlayerWeapon(giveplayerid, 25, 100);
				    		GivePlayerWeapon(giveplayerid, 24, 100);
				    		format(string,sizeof(string),"Voce vendeu o kit 2,para %s.",giveplayer);
				    		SendClientMessage(playerid,COLOR_GRAD1,string);
				    		format(string,sizeof(string),"* %s vendeu kits para %s.",sendername ,giveplayer);
				    		ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    		TempoEnviarPagamento[playerid] = 1;
						    TimerEnviarPagamento[playerid] = SetTimerEx("ETempoPagamento", 60000, 0, "i", playerid);
				    		return true;
						}
						else
						{
							SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender este kit!");
							return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
				else if(strcmp(x_nr,"3",true) == 0)
				{
		            tmp = strtok(cmdtext, idx);
					if(!strlen(tmp))
					{
						SendClientMessage(playerid,COLOR_WHITE,"|__________________[ Vender Armas - Mafiosos ]__________________|");
						SendClientMessage(playerid,COLOR_GREY,"USE: /mafiavkit [1 a 3] [ID do Player] ");
						SendClientMessage(playerid,COLOR_GREY,"Kit 1: Shotgun,m4,mp5(399)");
						SendClientMessage(playerid,COLOR_GREY,"Kit 2: Eagle,Shotgun,m4,mp5(499)");
						SendClientMessage(playerid,COLOR_GREY,"Kit 3: Eagle,Shotgun,m4,mp5,sniper,faca(599)");
					    return true;
					}
					giveplayerid = ReturnUser(tmp);
					if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se vender armas!"); return true; }
					new carid3 = GetPlayerVehicleID(giveplayerid);
                    if(IsACop(giveplayerid))
					{
						SendClientMessage(playerid,COLOR_GRAD1,"Você não pode vender kit para policiais");
						return true;
					}
					if(!IsACaminhaozinhoCar(carid3))
					{
						SendClientMessage(playerid,COLOR_GRAD1,"O player para quem você vai vender precisa estar dentro do BoxVille");
						return true;
					}
					if(IsPlayerConnected(giveplayerid))
					{
					    GetPlayerName(playerid, sendername, sizeof(sendername));
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					    if(PlayerInfo[playerid][pMats] > 599)
						{
                            if(GetPlayerMoneyEx(giveplayerid) < 7000) {
                            format(string,sizeof(string),"O Jogador %s não tem dinheiro suficiente.",giveplayer);
                            SendClientMessage(playerid, COLOR_RED, string);
                            return true;}
				            if(TempoEnviarPagamento[playerid] == 1)
						    {
						              SendClientMessage(playerid,0x808080C8,"Aguarde 1 minuto para enviar novamente.");
						              return 1;
							}
					    	GivePlayerMoney(giveplayerid, -7000);
					    	GivePlayerMoney(playerid, 7000);
					    	PlayerInfo[playerid][pMats] -= 599;
                    		GivePlayerWeapon(giveplayerid, 31, 300);
				    		GivePlayerWeapon(giveplayerid, 29, 200);
				    		GivePlayerWeapon(giveplayerid, 24, 100);
				    		GivePlayerWeapon(giveplayerid, 25, 100);
				    		GivePlayerWeapon(giveplayerid, 34, 80);
				    		GivePlayerWeapon(giveplayerid, 4, 1);
				    		format(string,sizeof(string),"Voce vendeu o kit 3,para %s.",giveplayer);
				    		SendClientMessage(playerid,COLOR_GRAD1,string);
				    		format(string,sizeof(string),"* %s vendeu kits para %s.",sendername ,giveplayer);
				    		ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				    		TempoEnviarPagamento[playerid] = 1;
							TimerEnviarPagamento[playerid] = SetTimerEx("ETempoPagamento", 60000, 0, "i", playerid);
				    		return true;
						}
						else
						{
							SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender este kit!");
							return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
					    return true;
					}
				}
	        }
	        else
	        {
	            SendClientMessage(playerid,COLOR_GREY,"Você não é de nenhuma Organização Mafiosa!");
	            return true;
	        }
	    }
	    return true;
	}
	if(strcmp(cmd,"/mafiavarma",true)==0)
    {
	    if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode vender armas na cadeia!");
	   		return true;
   		}
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pMembro] != 13 && PlayerInfo[playerid][pLider] != 13 && PlayerInfo[playerid][pMembro] != 12 && PlayerInfo[playerid][pLider] != 12)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não é de nenhuma Organização Mafiosa!");
			    return true;
			}
			giveplayerid = ReturnUser(tmp);
			//if (giveplayerid == playerid)
			//{
			//    SendClientMessage(playerid,COLOR_GREY,"Você não pode vender armas pra si mesmo!");
			//    return true;
			//}
			new x_weapon[32],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid,COLOR_GRAD1,"USE: /mafiavarma [ID do Player] [weaponname]");
				SendClientMessage(playerid,COLOR_GREY,"Armas: pistola(50) eagle(200) mp5(150) faca(50) sniper(200)");
				SendClientMessage(playerid,COLOR_GREY,"Armas: flores(25) ak47(200) m4(200) rifle(200)");
				SendClientMessage(playerid,COLOR_GREY,"Armas: fumaca(400) granada(500) shotgun(150)");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			    //if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se vender armas!"); return true; }
					x_weapon = strtok(cmdtext,idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid,COLOR_WHITE,"|__________________[ Vender Armas - Mafiosos ]__________________|");
						SendClientMessage(playerid,COLOR_GREY,"USE: /mafiavarma [ID do Player] [weaponname]");
						SendClientMessage(playerid,COLOR_GREY,"Armas: pistola(50) eagle(200) mp5(150) faca(50) sniper(200)");
						SendClientMessage(playerid,COLOR_GREY,"Armas: flores(25) ak47(200) m4(200) rifle(200)");
						SendClientMessage(playerid,COLOR_GREY,"Armas: fumaca(400) shotgun(150)");
						return true;
					}
				}
				if(strcmp(x_weapon,"pistola",true) == 0) { if(PlayerInfo[playerid][pMats] > 49) { weapon[playerid] = 23; price[playerid] = 50; ammo[playerid] = 240; PlayerInfo[giveplayerid][pGun2] = 23; PlayerInfo[giveplayerid][pAmmo2] = 240; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"flores",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 14; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"eagle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 24; price[playerid] = 100; ammo[playerid] = 220; PlayerInfo[giveplayerid][pGun2] = 24; PlayerInfo[giveplayerid][pAmmo2] = 220; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"mp5",true) == 0) {	if(PlayerInfo[playerid][pMats] > 149) { weapon[playerid] = 29; price[playerid] = 100; ammo[playerid] = 360; PlayerInfo[giveplayerid][pGun2] = 29; PlayerInfo[giveplayerid][pAmmo2] = 360; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] > 149) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 190; PlayerInfo[giveplayerid][pGun2] = 25; PlayerInfo[giveplayerid][pAmmo2] = 190; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				//else if(strcmp(x_weapon,"spas12",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 27; price[playerid] = 600; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 27; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Not enough Materials for that Weapon!"); return true; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 30; price[playerid] = 200; ammo[playerid] = 360; PlayerInfo[giveplayerid][pGun2] = 30; PlayerInfo[giveplayerid][pAmmo2] = 360; } else { SendClientMessage(playerid,COLOR_GREY,"   Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 31; price[playerid] = 200; ammo[playerid] = 360; PlayerInfo[giveplayerid][pGun2] = 31; PlayerInfo[giveplayerid][pAmmo2] = 360; } else { SendClientMessage(playerid,COLOR_GREY,"   Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 33; price[playerid] = 200; ammo[playerid] = 230; PlayerInfo[giveplayerid][pGun2] = 33; PlayerInfo[giveplayerid][pAmmo2] = 230; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"faca",true) == 0) { if(PlayerInfo[playerid][pMats] > 49) { weapon[playerid] = 4; price[playerid] = 50; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 4; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"sniper",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 34; price[playerid] = 200; ammo[playerid] = 100; PlayerInfo[giveplayerid][pGun2] = 34; PlayerInfo[giveplayerid][pAmmo2] = 100; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else if(strcmp(x_weapon,"fumaca",true) == 0) { if(PlayerInfo[playerid][pMats] > 399) { weapon[playerid] = 17; price[playerid] = 200; ammo[playerid] = 12; PlayerInfo[giveplayerid][pGun2] = 17; PlayerInfo[giveplayerid][pAmmo2] = 12; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				//else if(strcmp(x_weapon,"granada",true) == 0) { if(PlayerInfo[playerid][pMats] > 499) { weapon[playerid] = 16; price[playerid] = 200; ammo[playerid] = 5; PlayerInfo[giveplayerid][pGun2] = 16; PlayerInfo[giveplayerid][pAmmo2] = 5; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insuficientes para vender esta Arma!"); return true; } }
				else { SendClientMessage(playerid,COLOR_GREY,"Nome da arma inválida!"); return true; }
				if (ProxDetectorS(5.0,playerid,giveplayerid))
				{
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
					GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string,sizeof(string),"Voce vendeu %s,um %s com %d ammo,para %d Materiais .",giveplayer,x_weapon,ammo[playerid],price[playerid]);
					PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
					SendClientMessage(playerid,COLOR_GRAD1,string);
					format(string,sizeof(string),"Você recebeu uma %s com %d a partir de munição %s.",x_weapon,ammo[playerid],PlayerName(playerid));
					SendClientMessage(giveplayerid,COLOR_GRAD1,string);
					PlayerPlaySound(giveplayerid,1052,0.0,0.0,0.0);
					format(string,sizeof(string),"* %s vendeu armas para %s.",sendername ,giveplayer);
					ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
					PlayerInfo[playerid][pMats] -= price[playerid];
					//SaveVendas();
				}
				else
				{
					SendClientMessage(playerid,COLOR_GRAD1,"O cliente não esta proximo de você.");
					return true;
				}
			}
			else
			{
				format(string,sizeof(string),"%d não esta online este player.",giveplayerid);
				SendClientMessage(playerid,COLOR_GRAD1,string);
			}
		}
		return true;
	}
 	if(strcmp(cmd,"/VenderArma",true)==0)
    {
    	if(PlayerInfo[playerid][pJailed] != 0)
    	{
	  	 	SendClientMessage(playerid,COLOR_YELLOW," Você não pode vender armas na cadeia!");
	   		return true;
    	}
        if(IsPlayerConnected(playerid))
	    {
		    if (PlayerInfo[playerid][pEmprego] != 6)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não é um Vendendor de Armas !");
			    return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (giveplayerid == playerid)
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não pode vender armas pra si mesmo!");
			    return true;
			}
			new x_weapon[32],weapon[MAX_PLAYERS],ammo[MAX_PLAYERS],price[MAX_PLAYERS];
			tmp = strtok(cmdtext,idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid,COLOR_GRAD1,"USE: /VenderArma [ID do Player] [Arma]");
				SendClientMessage(playerid,COLOR_GREY,"Armas: flowers(25) spistola(100) pistola(150) mp5(200) shotgun(200)");
				SendClientMessage(playerid,COLOR_GREY,"Armas: rifle (600) ak47(600) m4(600)");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
					x_weapon = strtok(cmdtext,idx);
					if(!strlen(x_weapon))
					{
						SendClientMessage(playerid,COLOR_WHITE,"|__________________[ Vender Armas ]__________________|");
						SendClientMessage(playerid,COLOR_GREY,"USE: /VenderArma [ID do Players] [weaponname]");
						SendClientMessage(playerid,COLOR_GREY,"Armas: spistola(100) eagle(200) mp5(200)");
						SendClientMessage(playerid,COLOR_GREY,"Armas: rifle(600) flores(25) ak47(600) m4(600) rifle(600)");
						return true;
					}
				}
				//if(strcmp(x_weapon,"knife",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 4; price[playerid] = 100; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 4; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Not enough Materials for that Weapon!"); return true; } }
				if(strcmp(x_weapon,"spistola",true) == 0) { if(PlayerInfo[playerid][pMats] > 99) { weapon[playerid] = 23; price[playerid] = 100; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 23; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!"); return true; } }
				else if(strcmp(x_weapon,"flowers",true) == 0) { if(PlayerInfo[playerid][pMats] > 24) { weapon[playerid] = 14; price[playerid] = 25; ammo[playerid] = 1; PlayerInfo[giveplayerid][pGun1] = 14; PlayerInfo[giveplayerid][pAmmo1] = 1; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!"); return true; } }
				else if(strcmp(x_weapon,"pistola",true) == 0) { if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 22; price[playerid] = 150; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 22; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!"); return true; } }
				else if(strcmp(x_weapon,"mp5",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 29; price[playerid] = 200; ammo[playerid] = 200; PlayerInfo[giveplayerid][pGun2] = 29; PlayerInfo[giveplayerid][pAmmo2] = 200; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!"); return true; } }
				else if(strcmp(x_weapon,"shotgun",true) == 0) {	if(PlayerInfo[playerid][pMats] > 199) { weapon[playerid] = 25; price[playerid] = 200; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 25; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!"); return true; } }
				//else if(strcmp(x_weapon,"spas12",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 27; price[playerid] = 600; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 27; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Not enough Materials for that Weapon!"); return true; } }
				else if(strcmp(x_weapon,"ak47",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 30; price[playerid] = 600; ammo[playerid] = 250; PlayerInfo[giveplayerid][pGun2] = 30; PlayerInfo[giveplayerid][pAmmo2] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Você não tem Materiais para essa arma!"); return true; } }
				else if(strcmp(x_weapon,"m4",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 31; price[playerid] = 600; ammo[playerid] = 250; PlayerInfo[giveplayerid][pGun2] = 31; PlayerInfo[giveplayerid][pAmmo2] = 250; } else { SendClientMessage(playerid,COLOR_GREY,"   Você não tem Materiais para essa arma!"); return true; } }
				else if(strcmp(x_weapon,"rifle",true) == 0) { if(PlayerInfo[playerid][pMats] > 599) { weapon[playerid] = 33; price[playerid] = 600; ammo[playerid] = 50; PlayerInfo[giveplayerid][pGun2] = 33; PlayerInfo[giveplayerid][pAmmo2] = 50; } else { SendClientMessage(playerid,COLOR_GREY,"Materiais insulficiente para Arma!"); return true; } }
				else { SendClientMessage(playerid,COLOR_GREY,"Nome da arma inválida!"); return true; }
				if (ProxDetectorS(5.0,playerid,giveplayerid))
				{
				    if(giveplayerid == playerid)
					{
						SendClientMessage(playerid,COLOR_GRAD1,"Você não está numa loja de armas!");
						return true;
					}
					if(PlayerInfo[playerid][pMiserPerk] > 0)
					{
					    new skill = 2 * PlayerInfo[playerid][pMiserPerk];
					    new mats = price[playerid] / 100;
					    price[playerid] -= (mats)*(skill);
					}
					ConsumingMoney[playerid] = 1;
					GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
					GetPlayerName(playerid,sendername,sizeof(sendername));
					format(string,sizeof(string),"Voce vendeu %s,um %s com %d ammo,para %d Materiais .",giveplayer,x_weapon,ammo[playerid],price[playerid]);
					PlayerPlaySound(playerid,1052,0.0,0.0,0.0);
					SendClientMessage(playerid,COLOR_GRAD1,string);
					format(string,sizeof(string),"Você recebeu uma %s com %d a partir de munição %s.",x_weapon,ammo[playerid],PlayerName(playerid));
					SendClientMessage(giveplayerid,COLOR_GRAD1,string);
					PlayerPlaySound(giveplayerid,1052,0.0,0.0,0.0);
					format(string,sizeof(string),"* %s vendeu armas para %s.",sendername ,giveplayer);
					ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					GivePlayerWeapon(giveplayerid,weapon[playerid],ammo[playerid]);
					PlayerInfo[playerid][pMats] -= price[playerid];
				}
				else
				{
					SendClientMessage(playerid,COLOR_GRAD1,"O cliente nao esta proximo de Você.");
					return true;
				}
			}
			else
			{
				format(string,sizeof(string),"%d não está online.",giveplayerid);
				SendClientMessage(playerid,COLOR_GRAD1,string);
			}
		}
		return true;
	}
	if(strcmp(cmd, "/abastecer", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
     	if(!IsPlayerInAnyVehicle(playerid))
	            return SendClientMessage(playerid,COLOR_RED,"   Você não está em um veículo!");

     	new vid = GetPlayerVehicleID(playerid);
      	if(Gas[vid] >= 100)
        		return SendClientMessage(playerid,COLOR_RED,"POSTO: O tanque já está cheio.");

			if(IsAtGasStation(playerid))
			{
			    GameTextForPlayer(playerid,"~g~P~y~O~b~STO~n~~w~Reabastecendo, Aguarde...",3000,3);
				SetTimer("Fillup",RefuelWait,0);
				Controle(playerid, 0);
				Refueling[playerid] = 1;
			}
			else
			{
				SendClientMessage(playerid,COLOR_GREY,"   Você não está em um Posto de Gasolina");
			}
		}
    	return true;
	}
	if(strcmp(cmd, "/algemar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
	    	if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "Use: /algemar [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(gTeam[giveplayerid] == 2 || IsACop(giveplayerid))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Você não pode algemar COPs !");
				        return true;
			        }
				    if(PlayerCuffed[giveplayerid] > 0)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   O Jogador já esta algemado !");
				        return true;
				    }
					if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você nao pode se algemar!"); return true; }
					        GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
					        format(string, sizeof(string), "* Você foi algemado pelo: %s.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Você algemou %s.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s Algemou %s, para nao fugir.", sendername ,giveplayer);
							ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
							GameTextForPlayer(giveplayerid, "~r~Algemado", 2500, 3);
							SetPlayerAttachedObject(giveplayerid, 8, 19418, 6, -0.031999, 0.024000, -0.024000, -7.900000, -32.000011, -72.299987, 1.115998, 1.322000, 1.406000);
				            SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_CUFFED);
							Controle(giveplayerid, 0);
							TaCongelado[giveplayerid] = true;
							PlayerCuffed[giveplayerid] = 2;

					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
			    return true;
			}
		}
		return true;
	}
	if(strcmp(cmd, "/desalgemar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || IsACop(playerid))
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid, COLOR_WHITE, "Use: /desalgemar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
					if(giveplayerid != INVALID_PLAYER_ID)
					{
					    if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se desalgemar!"); return true; }
							if(PlayerCuffed[giveplayerid])
							{
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
							    format(string, sizeof(string), "* Você foi desalgemado pelo: %s.", PlayerName(playerid));
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você desalgemou %s.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								GameTextForPlayer(giveplayerid, "~g~Desalgemado", 2500, 3);
								Controle(giveplayerid, 1);
								TaCongelado[giveplayerid] = false;
								RemovePlayerAttachedObject(giveplayerid, 4);
								SetPlayerSpecialAction(giveplayerid, SPECIAL_ACTION_NONE);
								PlayerCuffed[giveplayerid] = 0;
								PlayerInfo[giveplayerid][pMuted] = 0;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Este jogador não está algemado !");
							    return true;
							}
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de você !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
				    return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não e PM/PR/PC/Exercito !");
			}
		}//not connected
		return true;
	}

    if(strcmp(cmd, "/procurar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pEmprego] != 1)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é Detetive !");
				return true;
		    }
			if(UsedFind[playerid] != 0 && PlayerInfo[playerid][pDetSkill] < 401)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você só pode procurar novamente, daqui a 2 Minutos !");
			    return true;
			}
		    tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /procurar [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se procurar!"); return true; }
		            if(admtrampando[giveplayerid] == 1 || admhide[giveplayerid] == 1){ SendClientMessage(playerid, COLOR_GRAD1, "Você não pode procurar um admin em modo de trabalho !");return true;}
			        if(GetPlayerInterior(giveplayerid) != GetPlayerInterior(playerid))
					{
					   	SendClientMessage(playerid, COLOR_YELLOW, "Este player está em um interior, é impossivel rastrear!");
					   	return true;
	    			}
	    			//GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
       				/*if (localizardppm[giveplayerid] == 1){
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_WHITE,"%s está dentro do Departamento da Polícia Militar.",giveplayer);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					return true;
					}
					if (localizardpbope[giveplayerid] == 1){
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_WHITE,"%s está dentro do Departamento do B.O.P.E.",giveplayer);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					return true;
					}
					if (localizardppc[giveplayerid] == 1){
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_WHITE,"%s está dentro do Departamento da Polícia Civil.",giveplayer);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					return true;
					}
					if (localizardppf[giveplayerid] == 1){
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_WHITE,"%s está dentro do Departamento da Polícia Federal.",giveplayer);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					return true;
					}
					if (localizarprefeitura[giveplayerid] == 1){
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_WHITE,"%s está dentro da Prefeitura de Los Santos.",giveplayer);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					return true;
					}
					if (localizarbanco[giveplayerid] == 1){
					DisablePlayerCheckpoint(playerid);
					SendClientMessage(playerid, COLOR_WHITE,"%s está dentro do Banco de .",giveplayer);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					return true;
					}
					*/
			        /*new points;
			        new level = PlayerInfo[playerid][pDetSkill];
					if(level >= 0 && level <= 50)
					{ points = 9999; }
					else if(level >= 51 && level <= 100)
					{ points = 9999; }
					else if(level >= 101 && level <= 200)
					{ points = 9999; }
					else if(level >= 201 && level <= 400)
					{ points = 9999; }
					else if(level >= 401)
					{ points = 9999; }*/
					DisablePlayerCheckpoint(playerid);
					KillTimer(timer[playerid]);
				    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					new Float:X,Float:Y,Float:Z;
					GetPlayerPos(giveplayerid, X,Y,Z);
					SetPlayerCheckpoint(playerid, X,Y,Z, 6);
					GameTextForPlayer(playerid, "~r~Va ate a marca vermelha!", 2500, 1);
					timer[playerid] = SetTimerEx("FuckYou",500,true,"ii",playerid,giveplayerid);
					//FindTime[playerid] = 1;
					//FindTimePoints[playerid] = points;
					PlayerInfo[playerid][pDetSkill] ++;
					UsedFind[playerid] = 1;
					if(PlayerInfo[playerid][pDetSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 2, Você pode procurar mais rápido e encontrar mais rápido."); }
					else if(PlayerInfo[playerid][pDetSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 3, Você pode procurar mais rápido e encontrar mais rápido."); }
					else if(PlayerInfo[playerid][pDetSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 4, Você pode procurar mais rápido e encontrar mais rápido."); }
					else if(PlayerInfo[playerid][pDetSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de detetive agora é 5, Você pode procurar mais rápido e encontrar mais rápido."); }
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Esse não é um jogador ativo !");
			}
		}
	    return true;
	}
	if(strcmp(cmd, "/proteger", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pEmprego] != 5)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é um segurança!");
				return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /proteger [id] [preço]");
				return true;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Preço mínimo 1, máximo 99999!"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Você não pode se proteger !");
					        return true;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você se ofereceu para proteger %s por R$%d.", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Segurança %s ofereceu segurança por R$%d, (Digite /aceitar segurança) para aceitar.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						GuardOffer[giveplayerid] = playerid;
						GuardPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está Offline!");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/soltar", true) == 0)
	{
        new org = GetPlayerOrg(playerid);
	    if(IsPlayerConnected(playerid))
	    {
    	if(PlayerToPoint(2.0,playerid,268.2108,77.4440,1001.0391) || PlayerToPoint(2.0,playerid,225.9554,114.1761,999.0156)
			|| PlayerToPoint(2.0,playerid,195.4466,158.4840,1003.0234) || PlayerToPoint(2.0,playerid,197.2001,179.2701,1003.0234)
			|| PlayerToPoint(2.0,playerid,321.6279,315.7460,999.1484))
	 		{// PM,PF | PC 1,PC 2 | PF,
	        if(org == 25)
	        {
		    if(PlayerInfo[playerid][pLawSkill] >= 400)
		    {
		        ApprovedAdvogado[playerid] = 1;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Use: /soltar [id]");
				SendClientMessage(playerid, COLOR_GRAD2, "Obs: Você só pode soltar em um Departamento de Policia!");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
            if(IsPlayerConnected(giveplayerid))
            {
                if(giveplayerid != INVALID_PLAYER_ID)
                {
                    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se libertar!"); return true; }
				 	if(PlayerInfo[giveplayerid][pJailed] == 1 || PlayerInfo[giveplayerid][pJailed] == 3
					|| PlayerInfo[giveplayerid][pJailed] == 4 || PlayerInfo[giveplayerid][pJailed] == 5
					|| PlayerInfo[giveplayerid][pJailed] == 6 || PlayerInfo[giveplayerid][pJailed] == 7
				 	|| PlayerInfo[giveplayerid][pJailed] == 8 && ApprovedAdvogado[playerid] == 1)
					{
						GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "Advogado %s (Meu Cliente %s é inocente das acusações!)", PlayerName(playerid), giveplayer);
     					SendClientMessageToAll(COLOR_RED, string);
						format(string, sizeof(string), "* Você libertou %s da cadeia.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "Você foi foi solto pelo Advogado: %s.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						ApprovedAdvogado[playerid] = 0;
						WantAdvogado[giveplayerid] = 0;
						CallAdvogado[giveplayerid] = 0;
						JailPrice[giveplayerid] = 0;
						PlayerInfo[giveplayerid][pJailTime] = 1;
						PlayerInfo[playerid][pLawSkill] ++;
						if(PlayerInfo[playerid][pLawSkill] == 50)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de advogado agora é 2, Você ganhará mais dinheiro e vai soltar mais rápido os presos."); }
						else if(PlayerInfo[playerid][pLawSkill] == 100)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de advogado agora é 3, Você ganhará mais dinheiro e vai soltar mais rápido os presos."); }
						else if(PlayerInfo[playerid][pLawSkill] == 200)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de advogado agora é 4, Você ganhará mais dinheiro e vai soltar mais rápido os presos."); }
						else if(PlayerInfo[playerid][pLawSkill] == 400)
						{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu nível de advogado agora é 5, Você ganhará mais dinheiro e vai soltar mais rápido os presos."); }
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   O jogador não precisa de advogado ou você não tem autorização !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "Você não está em um Departamento de Policia !");
			}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O jogador está offline!");
			}
		  }
		  else
		  {
              SendClientMessage(playerid, COLOR_GREY, "   Você não é um Advogado!");
		      return true;
		  }
		}//not connected
		return true;
	}
	if(strcmp(cmd,"/cancelar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_Emprego[32];
			x_Emprego = strtok(cmdtext, idx);
			if(!strlen(x_Emprego)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Cancelar ]__________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Use: /cancelar [nome]");
				SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Sexo, Drogas, reparo, Advogado, segurança, aovivo, Abastecimento, Carro, Boxe");
				SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Taxi, Onibus, Medico, Mecanico, Policia, mendigo, convite");
				return true;
			}
			if(strcmp(x_Emprego,"sexo",true) == 0) {	SexOffer[playerid] = 999; SexPrice[playerid] = 0; }
			else if(strcmp(x_Emprego,"convite",true) == 0) { InviteOffer[playerid] = 999; InviteJob[playerid] = 0; }
			else if(strcmp(x_Emprego,"mendigo",true) == 0) { MendigoOffer[playerid] = 999; MendigoPrice[playerid] = 0; }
			else if(strcmp(x_Emprego,"drogas",true) == 0) { DrugOffer[playerid] = 999; DrugPrice[playerid] = 0; DrugGram[playerid] = 0; }
			else if(strcmp(x_Emprego,"reparo",true) == 0) {	RepairOffer[playerid] = 999; RepairPrice[playerid] = 0; RepairCar[playerid] = 0; }
			else if(strcmp(x_Emprego,"Advogado",true) == 0) { WantAdvogado[playerid] = 0; CallAdvogado[playerid] = 0; }
			else if(strcmp(x_Emprego,"segurança",true) == 0) { GuardOffer[playerid] = 999; GuardPrice[playerid] = 0; }
			else if(strcmp(x_Emprego,"aovivo",true) == 0) { LiveOffer[playerid] = 999; }
			else if(strcmp(x_Emprego,"assalto",true) == 0) { OfAssalto[playerid] = 999; precoassalto[playerid] = 0; }
			else if(strcmp(x_Emprego,"abastecercarro",true) == 0) { RefillOffer[playerid] = 999; RefillPrice[playerid] = 0; }
			else if(strcmp(x_Emprego,"carro",true) == 0) { CarOffer[playerid] = 999; CarPrice[playerid] = 0; CarID[playerid] = 0; }
			else if(strcmp(x_Emprego,"Boxe",true) == 0) { BoxOffer[playerid] = 999; }
			else if(strcmp(x_Emprego,"padrinho",true) == 0) { MarryWitnessOffer[playerid] = 999; }
			else if(strcmp(x_Emprego,"casamento",true) == 0) { ProposeOffer[playerid] = 999; }
			else if(strcmp(x_Emprego,"divorcio",true) == 0) { DivorceOffer[playerid] = 999; }
			else if(strcmp(x_Emprego,"multa",true) == 0) { TicketOffer[playerid] = 999; TicketMoney[playerid] = 0; }
			else if(strcmp(x_Emprego,"taxi",true) == 0)
			{
			        if(TransportDuty[playerid] == 1 && TaxiCallTime[playerid] > 0)
			        {
			            TaxiAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
						TaxiCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						TaxiCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(TaxiCall)) { if(TaxiCall == playerid) { TaxiCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(TaxiAccepted[i] < 999)
						        {
							        if(TaxiAccepted[i] == playerid)
							        {
							            TaxiAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
							            TaxiCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_Emprego,"bus",true) == 0 || strcmp(x_Emprego,"onibus",true) == 0)
			{
			        if(TransportDuty[playerid] == 2 && BusCallTime[playerid] > 0)
			        {
			            BusAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
						BusCallTime[playerid] = 0;


						BusCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(BusCall)) { if(BusCall == playerid) { BusCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(BusAccepted[i] < 999)
						        {
							        if(BusAccepted[i] == playerid)
							        {
							            BusAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
							            BusCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_Emprego,"mecanico",true) == 0)
			{
			        if(MechanicCallTime[playerid] > 0)
			        {
			            MechanicAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
						MechanicCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						MechanicCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(MechanicCall)) { if(MechanicCall == playerid) { MechanicCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(MechanicAccepted[i] < 999)
						        {
							        if(MechanicAccepted[i] == playerid)
							        {
							            MechanicAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
							            MechanicCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_Emprego,"medico",true) == 0)
			{
			        if(MedicCallTime[playerid] > 0)
			        {
			            MedicAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
						MedicCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						MedicCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(MedicCall)) { if(MedicCall == playerid) { MedicCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(MedicAccepted[i] < 999)
						        {
							        if(MedicAccepted[i] == playerid)
							        {
							            MedicAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Paciente~n~~r~Cancelou a Chamada", 5000, 1);
							            MedicCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
						        }
						    }
						}
					}
				}
			}
			else if(strcmp(x_Emprego,"policia",true) == 0)
			{
			        if(CopsrondaCallTime[playerid] > 0)
			        {
			            CopsrondaAccepted[playerid] = 999;
						GameTextForPlayer(playerid, "~w~Voce~n~~r~Cancelou a Chamada", 5000, 1);
						CopsrondaCallTime[playerid] = 0;
						DisablePlayerCheckpoint(playerid);
						CopsrondaCall = 999;
			        }
			        else
			        {
						if(IsPlayerConnected(CopsrondaCall)) { if(CopsrondaCall == playerid) { CopsrondaCall = 999; } }
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnected(i))
						    {
						        if(CopsrondaAccepted[i] < 999)
						        {
							        if(CopsrondaAccepted[i] == playerid)
							        {
							            CopsrondaAccepted[i] = 999;
							            GameTextForPlayer(i, "~w~Cliente~n~~r~Cancelou a Chamada", 5000, 1);
							            CopsrondaCallTime[i] = 0;
							            DisablePlayerCheckpoint(i);
						        }
						    }
						}
					}
				}
			}
			else { return true; }
			format(string, sizeof(string), "* Você cancelou: %s.", x_Emprego);
			SendClientMessage(playerid, COLOR_YELLOW, string);
		}//not connected
		return true;
	}
//aceitar COMMANDS (Cops)
	if(strcmp(cmd,"/aceitar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
			new x_Emprego[32];
			x_Emprego = strtok(cmdtext, idx);
			if(!strlen(x_Emprego)) {
				SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Aceitar ]__________________|");
				SendClientMessage(playerid, COLOR_WHITE, "Use: aceitar [nome]");
				SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Transa, drogas, Reparo, Advogado, segurança, emprego, aovivo, Refill , Assalto");
				SendClientMessage(playerid, COLOR_GREY, "Nomes Validos: Carro, Taxi, Onibus, Boxe, Medico, Mecanico, Multa ,divorcio, mendigo, convite");
				return true;
			}
            //new para1;
			if(strcmp(x_Emprego,"convite",true) == 0)
			{
				if(InviteOffer[playerid] < 999)
			    {
					if(IsPlayerConnected(InviteOffer[playerid]))
					{
				        if(PlayerInfo[InviteOffer[playerid]][pLider] == 1) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 282; SetPlayerSkin(playerid, 282); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 2) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 285; SetPlayerSkin(playerid, 285); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 3) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 287; SetPlayerSkin(playerid, 287); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 4) { PlayerInfo[playerid][pTeam] = 1; gTeam[playerid] = 1; ChosenSkin[playerid] = 274; SetPlayerSkin(playerid, 274); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 5) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 114; SetPlayerSkin(playerid, 114); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 6) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 121; SetPlayerSkin(playerid, 121); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 7) { PlayerInfo[playerid][pTeam] = 7; gTeam[playerid] = 7; ChosenSkin[playerid] = 163; SetPlayerSkin(playerid, 163); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 8) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ChosenSkin[playerid] = 127; SetPlayerSkin(playerid, 127); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 9) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ChosenSkin[playerid] = 148; SetPlayerSkin(playerid, 148); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 10) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ChosenSkin[playerid] = 253; SetPlayerSkin(playerid, 253); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 11) { PlayerInfo[playerid][pTeam] = 25; gTeam[playerid] = 2; ChosenSkin[playerid] = 286; SetPlayerSkin(playerid, 286); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 12) { PlayerInfo[playerid][pTeam] = 22; gTeam[playerid] = 12; ChosenSkin[playerid] = 126; SetPlayerSkin(playerid, 126); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 13) { PlayerInfo[playerid][pTeam] = 20; gTeam[playerid] = 12; ChosenSkin[playerid] = 203; SetPlayerSkin(playerid, 203); }
						else if(PlayerInfo[InviteOffer[playerid]][pLider] == 14) { PlayerInfo[playerid][pTeam] = 15; gTeam[playerid] = 12; ChosenSkin[playerid] = 107; SetPlayerSkin(playerid, 107); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 15) { PlayerInfo[playerid][pTeam] = 16; gTeam[playerid] = 17; ChosenSkin[playerid] = 30; SetPlayerSkin(playerid, 30); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 16) { PlayerInfo[playerid][pTeam] = 25; gTeam[playerid] = 2; ChosenSkin[playerid] = 186; SetPlayerSkin(playerid, 186); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 17) { PlayerInfo[playerid][pTeam] = 18; gTeam[playerid] = 12; ChosenSkin[playerid] = 103; SetPlayerSkin(playerid, 103); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 18) { PlayerInfo[playerid][pTeam] = 19; gTeam[playerid] = 12; ChosenSkin[playerid] = 109; SetPlayerSkin(playerid, 109); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 19) { PlayerInfo[playerid][pTeam] = 20; gTeam[playerid] = 12; ChosenSkin[playerid] = 40; SetPlayerSkin(playerid, 40); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 20) { PlayerInfo[playerid][pTeam] = 20; gTeam[playerid] = 12; ChosenSkin[playerid] = 247; SetPlayerSkin(playerid, 247); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 21) { PlayerInfo[playerid][pTeam] = 20; gTeam[playerid] = 12; ChosenSkin[playerid] = 292; SetPlayerSkin(playerid, 292); }
				        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 22) { PlayerInfo[playerid][pTeam] = 12; gTeam[playerid] = 12; ChosenSkin[playerid] = 118; SetPlayerSkin(playerid, 118); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 23) { PlayerInfo[playerid][pTeam] = 5; gTeam[playerid] = 5; ChosenSkin[playerid] = 112; SetPlayerSkin(playerid, 112); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 24) { PlayerInfo[playerid][pTeam] = 2; gTeam[playerid] = 2; ChosenSkin[playerid] = 16; SetPlayerSkin(playerid, 16); }
                        else if(PlayerInfo[InviteOffer[playerid]][pLider] == 25) { PlayerInfo[playerid][pTeam] = 24; gTeam[playerid] = 24; ChosenSkin[playerid] = 228; SetPlayerSkin(playerid, 228); }
					    PlayerInfo[playerid][pMembro] = InviteJob[playerid];
						PlayerInfo[playerid][pCargo] = 1;
					    SelectCharID[playerid] = PlayerInfo[playerid][pMembro];
					   	format(gstring, 128, "* %s aceitou seu convite para entrar na sua organização.", PlayerName(playerid));
					   	SendClientMessage(InviteOffer[playerid], COLOR_LIGHTBLUE, gstring);
						new rand = random(sizeof(gInviteSpawns));
						SetPlayerPos(playerid, gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]); // Warp the player
						SetPlayerFacingAngle(playerid, gInviteSpawns[rand][3]);
						SetPlayerCameraPos(playerid,gInviteSpawns[rand][0] + 3, gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						SetPlayerCameraLookAt(playerid,gInviteSpawns[rand][0], gInviteSpawns[rand][1], gInviteSpawns[rand][2]);
						Controle(playerid, 0);
					    SelectChar[playerid] = 255;
					    SelectCharID[playerid] = PlayerInfo[playerid][pMembro];
					    SelectCharPlace[playerid] = 1;
					    PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
					    SetPlayerSkin(playerid, ChosenSkin[playerid]);
					    //SendClientMessage(playerid, COLOR_LIGHTRED, "* Use 'Proximo' para trocar a skin.");
					    //SendClientMessage(playerid, COLOR_LIGHTRED, "* Quandod Você achar a Skin preferida, Digite 'Confirma'.");
                        //ShowPlayerDialog(para1, 643, DIALOG_STYLE_MSGBOX, "Escolha Sua Skin", "Proximo: Para trocar sua skin.\nConfirmar: Para confirmar sua skin.", "Confirmar", "Próximo");
					    format(gstring, sizeof(gstring), "* Você aceitou o convite de %s para entrar para a org: %s, parabéns.", PlayerName(InviteOffer[playerid]), NomeORG(InviteOffer[playerid]));
					   	SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
						ConviteInfoOrg(PlayerName(playerid), InviteJob[playerid], 1);
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "    O jogador que lhe convidou não está conectado.");
						return true;
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "    Você não foi convidado para nenhuma organização.");
					return true;
				}
			}
			else if(strcmp(x_Emprego,"assalto",true) == 0)
			{
			    if(OfAssalto[playerid] < 999)
			    {
			        if(IsPlayerConnected(OfAssalto[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, OfAssalto[playerid]))
						{
							if(GetPlayerMoneyEx(playerid) < precoassalto[playerid]) {
							SendClientMessage(playerid, COLOR_GRAD1, "Você não tem dinheiro suficiente.");
							return true;
							}
				           	GetPlayerName(OfAssalto[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você aceitou um assalto de %s e pagou R$%d", giveplayer, precoassalto[playerid]);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou seu assalto e pagou R$%d.", sendername, precoassalto[playerid]);
			                SendClientMessage(OfAssalto[playerid], COLOR_LIGHTBLUE, string);
							SendClientMessage(TicketOffer[playerid], COLOR_LIGHTBLUE, string);
							GivePlayerMoney(playerid, - precoassalto[playerid]);
							GivePlayerMoney(OfAssalto[playerid], precoassalto[playerid]);
							SetPlayerCriminal(OfAssalto[playerid],255, "Assalto");
							OfAssalto[playerid] = 999;
							precoassalto[playerid] = 0;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O Assaltante está longe de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não foi assaltado!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"divorcio",true) == 0)
			{
			    if(DivorceOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(DivorceOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, DivorceOffer[playerid]))
						{
						    GetPlayerName(DivorceOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Voce aceitou o pedido de %s para ser testemunha de seu divorcio.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou o seu pedido para ser testemunha do seu divorcio.", PlayerName(playerid));
							SendClientMessage(DivorceOffer[playerid], COLOR_LIGHTBLUE, string);
							ClearMarriage(playerid);
							ClearMarriage(DivorceOffer[playerid]);
							PlayerInfo[playerid][pPHousekey] = 255;
							PlayerInfo[playerid][pPbiskey] = 255;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O jogador que te enviou os papéis do divórcio não está perto de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguem te enviou qualquer papel de divórcio!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"padrinho",true) == 0)
			{
			    if(MarryWitnessOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(MarryWitnessOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, MarryWitnessOffer[playerid]))
						{
						    GetPlayerName(MarryWitnessOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você aceitou o pedido de %s para ser padrinho de seu casamento.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou o seu pedido para ser padrinho do seu casamento.", PlayerName(playerid));
							SendClientMessage(MarryWitnessOffer[playerid], COLOR_LIGHTBLUE, string);
							MarryWitness[MarryWitnessOffer[playerid]] = playerid;
							MarryWitnessOffer[playerid] = 999;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   O jogador que pediu para ser padrinho de seu casamento não está perto de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguem pediu para ser padrinho de seu casamento!");
				    return true;
				}
			}
	        else if(strcmp(x_Emprego,"casamento",true) == 0)
			{
			    if(ProposeOffer[playerid] < 999)
			    {
			        if(!PlayerToPoint(10.0, playerid, 1964.3306,-369.0889,1093.7289))
			        {
			            SendClientMessage(playerid, COLOR_GREY, "   Você não está na igreja de Los Santos !");
			            return true;
			        }
			        if(IsPlayerConnected(ProposeOffer[playerid]))
			        {
			            if(ProxDetectorS(10.0, playerid, ProposeOffer[playerid]))
						{
						    if(MarryWitness[ProposeOffer[playerid]] == 999)
						    {
						        SendClientMessage(playerid, COLOR_GREY, "   O jogador não possui um padrinho de casamento!");
						        return true;
						    }
						    if(IsPlayerConnected(MarryWitness[ProposeOffer[playerid]]))
						    {
							    if(ProxDetectorS(12.0, ProposeOffer[playerid], MarryWitness[ProposeOffer[playerid]]))
								{
								    GetPlayerName(ProposeOffer[playerid], giveplayer, sizeof(giveplayer));
									GetPlayerName(playerid, sendername, sizeof(sendername));
									format(string, sizeof(string), "* Voce aceitou o pedido de %s para ser seu marido.", giveplayer);
									SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "* %s aceitou o seu pedido para ser sua esposa.", PlayerName(playerid));
									SendClientMessage(ProposeOffer[playerid], COLOR_LIGHTBLUE, string);
									format(string, sizeof(string), "Padre: %s voce aceita %s como seu legitimo marido? (use 'sim', qualquer outra coisa cancela o casamento)", sendername, giveplayer);
									SendClientMessage(playerid, COLOR_WHITE, string);
									MarriageCeremoney[playerid] = 1;
									ProposedTo[ProposeOffer[playerid]] = playerid;
									GotProposedBy[playerid] = ProposeOffer[playerid];
									MarryWitness[ProposeOffer[playerid]] = 999;
									ProposeOffer[playerid] = 999;
									return true;
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GREY, "   O padrinho de casamento nao esta perto de sua noiva/noivo!");
								    return true;
								}
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "  O jogador não esta perto de você!");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguem te fez uma proposta!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"multa",true) == 0)
			{
			    if(TicketOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(TicketOffer[playerid]))
			        {
			            if (ProxDetectorS(5.0, playerid, TicketOffer[playerid]))
						{
                            if(GetPlayerMoneyEx(playerid) < TicketMoney[playerid]) {
							SendClientMessage(playerid, COLOR_GRAD1, "Você não tem dinheiro suficiente.");
							return true;
							}
				           	GetPlayerName(TicketOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você pagou a multa de R$%d para o Oficial %s.", TicketMoney[playerid], giveplayer);
							SendClientMessage(playerid, COLOR_WHITE, string);
							format(string, sizeof(string), "* %s pagou a multa de R$%d.", sendername, TicketMoney[playerid]);
							SendClientMessage(TicketOffer[playerid], COLOR_WHITE, string);
							GivePlayerMoney(playerid, - TicketMoney[playerid]);
							GivePlayerMoney(TicketOffer[playerid], TicketMoney[playerid]);
							TicketOffer[playerid] = 999;
							TicketMoney[playerid] = 0;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "O policial não está perto de você !");
						    return true;
						}
			        }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ninguem lhe deu uma multa !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"boxe",true) == 0)
			{
			    if(BoxOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(BoxOffer[playerid]))
			        {
			            new points;
			            new mypoints;
			            GetPlayerName(BoxOffer[playerid], giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
			            new level = PlayerInfo[BoxOffer[playerid]][pBoxSkill];
						if(level >= 0 && level <= 50) { points = 40; }
						else if(level >= 51 && level <= 100) { points = 50; }
						else if(level >= 101 && level <= 200) { points = 60; }
						else if(level >= 201 && level <= 400) { points = 70; }
						else if(level >= 401) { points = 80; }
						if(PlayerInfo[playerid][pEmprego] == 7)
						{
							new clevel = PlayerInfo[playerid][pBoxSkill];
							if(clevel >= 0 && clevel <= 50) { mypoints = 40; }
							else if(clevel >= 51 && clevel <= 100) { mypoints = 50; }
							else if(clevel >= 101 && clevel <= 200) { mypoints = 60; }
							else if(clevel >= 201 && clevel <= 400) { mypoints = 70; }
							else if(clevel >= 401) { mypoints = 80; }
						}
						else
						{
						    mypoints = 30;
						}
						format(string, sizeof(string), "* Você aceitou a luta de boxe de %s, e irá lutar com %d de saúde.",giveplayer,mypoints);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* %s aceitou seu pedido para a luta de boxe, você irá lutar com %d de saúde.",sendername,points);
						SendClientMessage(BoxOffer[playerid], COLOR_LIGHTBLUE, string);
						SetPlayerHealth(playerid, mypoints);
						SetPlayerHealth(BoxOffer[playerid], points);
						SetPlayerInterior(playerid, 5); SetPlayerInterior(BoxOffer[playerid], 5);
						SetPlayerPos(playerid, 762.9852,2.4439,1001.5942); SetPlayerFacingAngle(playerid, 131.8632);
						SetPlayerPos(BoxOffer[playerid], 758.7064,-1.8038,1001.5942); SetPlayerFacingAngle(BoxOffer[playerid], 313.1165);
						Controle(playerid, 0); Controle(BoxOffer[playerid], 0);
						GameTextForPlayer(playerid, "~r~Esperando", 3000, 1); GameTextForPlayer(BoxOffer[playerid], "~r~Esperando", 3000, 1);
						new name[MAX_PLAYER_NAME];
						new dstring[MAX_PLAYER_NAME];
						new wstring[MAX_PLAYER_NAME];
						GetPlayerName(playerid, name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Notícias do Boxe: Lutador de Boxe %s lutará contra %s, em 60 segundos no Ginásio da Groove Street.",  sendername, giveplayer);
							OOCNews(COLOR_WHITE,string);
							TBoxer = playerid;
							BoxDelay = 60;
						}
						GetPlayerName(BoxOffer[playerid], name, sizeof(name));
						format(dstring, sizeof(dstring), "%s", name);
						strmid(wstring, dstring, 0, strlen(dstring), 255);
						if(strcmp(Titel[TitelName] ,wstring, true ) == 0 )
						{
						    format(string, sizeof(string), "Notícias do Boxe: Lutador de Boxe %s lutará contra %s, em 60 segundos no Ginásio da Groove Street.",  giveplayer, PlayerName(playerid));
							OOCNews(COLOR_WHITE,string);
							TBoxer = BoxOffer[playerid];
							BoxDelay = 60;
						}
						BoxWaitTime[playerid] = 1; BoxWaitTime[BoxOffer[playerid]] = 1;
						if(BoxDelay < 1) { BoxDelay = 20; }
						InRing = 1;
						Boxer1 = BoxOffer[playerid];
						Boxer2 = playerid;
						PlayerBoxing[playerid] = 1;
						PlayerBoxing[BoxOffer[playerid]] = 1;
						BoxOffer[playerid] = 999;
						return true;
			        }
			        return true;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguem te convidou para uma luta !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"mototaxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você não está em corrida, USE: /corrida !");
				    return true;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você já aceitou uma chamada de Moto-Taxi !");
				    return true;
	            }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Você aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Moto-Taxi : %s aceitou sua chamada, se mantenha neste local e espere chegar.",PlayerName(playerid));
						SendClientMessage(TaxiCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de taxi no momento !");
			    	return true;
	            }
			}
			else if(strcmp(x_Emprego,"taxi",true) == 0)
			{
			    if(TransportDuty[playerid] != 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você não está em corrida, USE: /corrida !");
				    return true;
			    }
	            if(TaxiCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você já aceitou uma chamada de Taáxi !");
				    return true;
	            }
	            if(TaxiCall < 999)
	            {
	                if(IsPlayerConnected(TaxiCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(TaxiCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Taxista : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(TaxiCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar taxi !");
						TaxiCallTime[playerid] = 1;
						TaxiAccepted[playerid] = TaxiCall;
						TaxiCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de taxi no momento !");
			    	return true;
	            }
			}
			else if(strcmp(x_Emprego,"onibus",true) == 0)
			{
			    if(TransportDuty[playerid] != 2)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você não está em corrida, USE: /corrida !");
				    return true;
			    }
	            if(BusCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você já aceitou a chamada de Onibus !");
				    return true;
	            }
	            if(BusCall < 999)
	            {
	                if(IsPlayerConnected(BusCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(BusCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Motorista : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(BusCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar onibus !");
						BusCallTime[playerid] = 1;
						BusAccepted[playerid] = BusCall;
						BusCall = 999;
						return true;
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Não tem nenhuma chamada de onibus no momento !");
			    	return true;
	            }
			}
			else if(strcmp(x_Emprego,"medico",true) == 0)
			{
			    if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
			    {
		            if(MedicCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Você já aceitou um chamado medico!");
					    return true;
		            }
                    if(MedicCall < 999)
	                {
	                if(IsPlayerConnected(MedicCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(MedicCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Medico : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(MedicCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Ir Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar medico !");
						MedicCallTime[playerid] = 1;
						MedicAccepted[playerid] = MedicCall;
						MedicCall = 999;
						return true;
					}
	            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Nenhuma chamada de médico no momento !");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Medico !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"mecanico",true) == 0)
            {
   			 if(PlayerInfo[playerid][pEmprego] == 4)
   			 {
	            if(MechanicCallTime[playerid] > 0)
	            {
	                SendClientMessage(playerid, COLOR_GREY, "   Você já aceitou uma chamada de mecanico!");
				    return true;
	            }
	            if(MechanicCall < 999)
	            {
	                if(IsPlayerConnected(MechanicCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(MechanicCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Mecanico : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(MechanicCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar mecanico !");
						MechanicCallTime[playerid] = 1;
						MechanicAccepted[playerid] = MechanicCall;
						MechanicCall = 999;
						return true;
					}
	            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Nenhuma chamada de mecânico no momento !");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não é um mecânico !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"chamada",true) == 0)
			{
			    if(IsACop(playerid))
			    {
		            if(CopsrondaCallTime[playerid] > 0)
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Você aceitou o chamado!");
					    return true;
		            }
				    if(PolicialInRonda[playerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Você já está em um chamado...");
				        return true;
				    }
                    if(CopsrondaCall < 999)
	                {
	                if(IsPlayerConnected(CopsrondaCall))
	                {
	                    GetPlayerName(playerid, sendername, sizeof(sendername));
	                	GetPlayerName(CopsrondaCall, giveplayer, sizeof(giveplayer));
	                	format(string, sizeof(string), "* Voce aceitou a chamada do(a) %s, A marca estará visível até você chegar.",giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
                        format(string, sizeof(string), "* Policial : %s aceitou sua chamada, mantenha-se neste local e espere-o chegar.",PlayerName(playerid));
						SendClientMessage(CopsrondaCall, COLOR_LIGHTBLUE, string);
						GameTextForPlayer(playerid, "~w~Cliente~n~~r~Va Ate a Marca Vermelha", 5000, 1);
						SendClientMessage(playerid, COLOR_GREY, "   Para Cancelar a chamada,digite /cancelar policia !");
						CopsrondaCallTime[playerid] = 1;
						CopsrondaAccepted[playerid] = CopsrondaCall;
						CopsrondaCall = 999;
						return true;
					}
	            }
		            else
		            {
		                SendClientMessage(playerid, COLOR_GREY, "   Ninguem solicitou um policial ");
				    	return true;
		            }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Policial !");
				    return true;
				}
			}
		    else if(strcmp(x_Emprego,"emprego",true) == 0)
			{
				if(PlayerInfo[playerid][pEmprego] != 0)
				{
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você tem um emprego digite /sairdoemprego para sair do emprego.");
					return true;
				}
			    if(GettingEmprego[playerid] > 0)
			    {
			        //SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você já completou seu tempo de contrato!.");
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Boa sorte com seu novo emprego,digite /ajudaemprego para saber seus comandos!");
			        PlayerInfo[playerid][pEmprego] = GettingEmprego[playerid];
			        GettingEmprego[playerid] = 0;
			        return true;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Você ainda não esta no lugar de um emprego!");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"abastecimento",true) == 0)
			{
			    if(RefillOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(RefillOffer[playerid]))
			        {
			            if(GetPlayerMoney(playerid) > RefillPrice[playerid])
			            {
			                if(IsPlayerInAnyVehicle(playerid))
							{
			                	GetPlayerName(RefillOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
			                	new car = GetPlayerVehicleID(playerid);
			                	new fuel;
			                	PlayerInfo[RefillOffer[playerid]][pMechSkill] ++;
			                	if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 2, agora você pode abastecer com 40 de combustivel"); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 3, agora você pode abastecer com 60 de combustivel."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 4, agora você pode abastecer com 80 de combustivel."); }
								else if(PlayerInfo[RefillOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RefillOffer[playerid], COLOR_YELLOW, "* Sua habilidade de mecânico agora é nível 5, agora você pode abastecer com 100 de combustivel."); }
								new level = PlayerInfo[RefillOffer[playerid]][pMechSkill];
								if(level >= 0 && level <= 50)
								{ fuel = 15; }
								else if(level >= 51 && level <= 100)
								{ fuel = 40; }
								else if(level >= 101 && level <= 200)
								{ fuel = 60; }
								else if(level >= 201 && level <= 400)
								{ fuel = 80; }
								else if(level >= 401)
								{ fuel = 100; }
			                	format(string, sizeof(string), "* Seu veículo foi abastecido com %d% de combustível por R$%d pelo mecânico %s.",fuel,RefillPrice[playerid],giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você abasteceu o carro de %s com %d% de combustível por R$%d, esse dinheiro será adicionado ao seu salário.",sendername,fuel,RefillPrice[playerid]);
								SendClientMessage(RefillOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RefillOffer[playerid]][pSalario] += RefillPrice[playerid];
								GivePlayerMoney(playerid, -RefillPrice[playerid]);
								if(Gas[car] < 100) { Gas[car] += fuel; }
								if(Gas[car] > 100) { Gas[car] = 100; }
					        	RefillOffer[playerid] = 999;
								RefillPrice[playerid] = 0;
								return true;
							}
							else
							{
						    	SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você não está em um carro!");
						    	return true;
							}
			            }
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar pelo abastecimento !");
						    return true;
						}
			        }
			        return true;
			    }
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguem ofereceu abastecimento para seu carro!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"aovivo",true) == 0)
			{
			    if(LiveOffer[playerid] < 999)
			    {
			        if(IsPlayerConnected(LiveOffer[playerid]))
			        {
				        if (ProxDetectorS(5.0, playerid, LiveOffer[playerid]))
						{
						    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está congelado até o final da conversa.");
							SendClientMessage(LiveOffer[playerid], COLOR_LIGHTBLUE, "* Você está congelado até o final da conversa (use /aovivo denovo).");
							Controle(playerid, 0);
							Controle(LiveOffer[playerid], 0);
							TalkingLive[playerid] = LiveOffer[playerid];
							TalkingLive[LiveOffer[playerid]] = playerid;
							LiveOffer[playerid] = 999;
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Você está longe do repórter !");
							return true;
						}
					}
					return true;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Ninguem te ofereceu uma conversa ao vivo!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"Advogado",true) == 0)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /aceitar Advogado [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if (IsACop(playerid))
				{
				    if(IsPlayerConnected(giveplayerid))
				    {
				        if(giveplayerid != INVALID_PLAYER_ID)
				        {
				            if(PlayerInfo[giveplayerid][pMembro] == 25 || PlayerInfo[giveplayerid][pLider] == 25)
				            {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Você autorizou %s para liberar um preso.", giveplayer);
								SendClientMessage(playerid, COLOR_LIGHTBLUE,string);
								format(string, sizeof(string), "* Oficial %s te autorizou a soltar alguem da prisão. (use /soltar)", PlayerName(playerid));
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE,string);
								ApprovedAdvogado[giveplayerid] = 1;
							    return true;
							}
						}
					}
					return true;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "Ação Invalida! (Você não é um policial)");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"seguranca",true) == 0)
			{
			    if(GuardOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > GuardPrice[playerid])
				    {
					    if(IsPlayerConnected(GuardOffer[playerid]))
					    {
					        GetPlayerName(GuardOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você aceitou a proteção por R$%d do Segurança: %s.",GuardPrice[playerid],giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s aceitou sua proteção, e R$%d será adicionado no seu salário.",sendername,GuardPrice[playerid]);
							SendClientMessage(GuardOffer[playerid], COLOR_LIGHTBLUE, string);
							PlayerInfo[GuardOffer[playerid]][pSalario] += GuardPrice[playerid];
							GivePlayerMoney(playerid, -GuardPrice[playerid]);
					        GuardOffer[playerid] = 999;
							GuardPrice[playerid] = 0;
							return true;
						}
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar pela proteção !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguem te ofereceu proteção!");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"maconha",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrogas] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* você comprou %d gramas de maconha do traficante: %s por R$%d.",DrugGram[playerid],giveplayer,DrugPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s comprou suas %d gramas de maconha, e R$%d será adicionado no seu salário.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[DrugOffer[playerid]][pSalario] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogasSkill] ++;
								GivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrogas] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogas] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 2, e você pode comprar mais erva por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 3, e você pode comprar mais erva por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 4, e você pode comprar mais erva por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 5, e você pode comprar mais erva por um preço mais barato."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return true;
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Você está totalmente carregado com maconha, use ou venda primeiro !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar essas maconhas !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguem te ofereceu maconha !");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"cocaina",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrogas2] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* você comprou %d gramas de cocaína do traficante: %s por R$%d.",DrugGram[playerid],giveplayer,DrugPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s comprou suas %d gramas de cocaína, e R$%d será adicionado no seu salário.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[DrugOffer[playerid]][pSalario] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogasSkill] ++;
								GivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrogas2] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogas2] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 2, e você pode comprar mais pó por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 3, e você pode comprar mais pó por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 4, e você pode comprar mais pó por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 5, e você pode comprar mais pó por um preço mais barato."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return true;
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Você está carregado com crack, use ou venda primeiro !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar por essa cocaína !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguem te ofereceu cocaína !");
			        return true;
			    }
			}
   			else if(strcmp(x_Emprego,"crack",true) == 0)
			{
			    if(DrugOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > DrugPrice[playerid])
				    {
				        if(PlayerInfo[playerid][pDrogas3] < 7)
				        {
					        if(IsPlayerConnected(DrugOffer[playerid]))
					        {
					            GetPlayerName(DrugOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* você comprou %d pedras de crack do traficante: %s por R$%d.",DrugGram[playerid],giveplayer,DrugPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s comprou suas %d pedras de crack, e R$%d será adicionado no seu salário.",sendername,DrugGram[playerid],DrugPrice[playerid]);
								SendClientMessage(DrugOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[DrugOffer[playerid]][pSalario] += DrugPrice[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogasSkill] ++;
								GivePlayerMoney(playerid, -DrugPrice[playerid]);
								PlayerInfo[playerid][pDrogas3] += DrugGram[playerid];
								PlayerInfo[DrugOffer[playerid]][pDrogas3] -= DrugGram[playerid];
								if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 50)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 2, e você pode comprar mais pedras por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 100)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 3, e você pode comprar mais pedras por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 200)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 4, e você pode comprar mais pedras por um preço mais barato."); }
								else if(PlayerInfo[DrugOffer[playerid]][pDrogasSkill] == 400)
								{ SendClientMessage(DrugOffer[playerid], COLOR_YELLOW, "* Seu nível de traficante agora é 5, e você pode comprar mais pedras por um preço mais barato."); }
					            DrugOffer[playerid] = 999;
								DrugPrice[playerid] = 0;
								DrugGram[playerid] = 0;
								return true;
							}
							return true;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Você está carregado com crack, use ou venda primeiro !");
						    return true;
						}
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar por esse crack !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Ninguem te ofereceu crack !");
			        return true;
			    }
			}
			else if(strcmp(x_Emprego,"mendigo",true) == 0)
			{
			    if(MendigoOffer[playerid] < 999)
				{
					if(GetPlayerMoney(playerid) > MendigoPrice[playerid])
			  		{
						if (IsPlayerConnected(MendigoOffer[playerid]))
						{
							GetPlayerName(MendigoOffer[playerid], giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você deu um esmola de R$%d, para R$%s.",MendigoPrice[playerid] ,giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s te deu uma esmola de R$%d", sendername, MendigoPrice[playerid]);
							SendClientMessage(MendigoOffer[playerid], COLOR_LIGHTBLUE, string);
							GivePlayerMoney(playerid, -MendigoPrice[playerid]);
							GivePlayerMoney(MendigoOffer[playerid], MendigoPrice[playerid]);
							MendigoPrice[playerid] = 0;
							MendigoOffer[playerid] = 999;
							return true;
						}//Connected ou not
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar a esmola!");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não tem nenhum pedido de esmola!");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"transa",true) == 0)
			{
			    if(SexOffer[playerid] < 999)
				{
					if(GetPlayerMoney(playerid) > SexPrice[playerid])
			  		{
						if (IsPlayerConnected(SexOffer[playerid]))
						{
						    new Car = GetPlayerVehicleID(playerid);
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(SexOffer[playerid], Car))
						    {
								GetPlayerName(SexOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Você fez sexo com a profissional do sexo %s, por R$%d.", giveplayer, SexPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* %s teve relações sexuais com você, R$%d foi adicionado em seu salário.", sendername, SexPrice[playerid]);
								SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[SexOffer[playerid]][pSalario] += SexPrice[playerid];
								GivePlayerMoney(playerid, -SexPrice[playerid]);
								PlayerInfo[SexOffer[playerid]][pSexSkill] ++;
								if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 50)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 2, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 100)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 3, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 200)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 4, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								else if(PlayerInfo[SexOffer[playerid]][pSexSkill] == 400)
								{ SendClientMessage(SexOffer[playerid], COLOR_YELLOW, "* Seu nível de sexo agora é 5, e pode oferecer uma melhor Sexo (saúde) e menos chance de DST."); }
								if(PlayerInfo[playerid][pDoenca] == 0)
								{
								    if(Condom[playerid] < 1)
									{
									    new Float:health;
									    new level = PlayerInfo[SexOffer[playerid]][pSexSkill];
									    if(level >= 0 && level <= 50)
									    {
									        if(GetPlayerHealth(playerid, health) < 80) {
											SetPlayerHealth(playerid, health + 20.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD1));
											PlayerInfo[playerid][pDoenca] = STD1[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD1[rand];
											if(STD1[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde e não pegou nenhuma DST durante o sexo."); }
											else if(STD1[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde + uma Pereba no CU devido ao sexo."); }
											else if(STD1[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde + uma Duenca na Cabeca do Pau devido ao sexo."); }
											else if(STD1[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 20 de Saúde + uma Duenca na Buceta devido ao sexo."); }
										}
										else if(level >= 51 && level <= 100)
									    {
									        if(GetPlayerHealth(playerid, health) < 60) {
											SetPlayerHealth(playerid, health + 40.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD2));
											PlayerInfo[playerid][pDoenca] = STD2[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD2[rand];
											if(STD2[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde e não pegou nenhuma DST durante o sexo."); }
											else if(STD2[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde + um Pereba no CU devido ao Sexo."); }
											else if(STD2[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde + um Duenca na Cabeca do Pau devido ao Sexo."); }
											else if(STD2[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 40 de Saúde + uma Duenca na Buceta devido ao Sexo."); }
										}
										else if(level >= 101 && level <= 200)
									    {
									        if(GetPlayerHealth(playerid, health) < 40) {
											SetPlayerHealth(playerid, health + 60.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD3));
											PlayerInfo[playerid][pDoenca] = STD3[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD3[rand];
											if(STD3[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde e não pegou nenhuma DST durante o sexo."); }
											else if(STD3[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde + um Pereba no CU devido ao Sexo."); }
											else if(STD3[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde + um Duenca na Cabeca do Pau devido ao Sexo."); }
											else if(STD3[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 60 de Saúde + uma Duenca na Buceta devido ao Sexo."); }
										}
										else if(level >= 201 && level <= 400)
									    {
									        if(GetPlayerHealth(playerid, health) < 20) {
											SetPlayerHealth(playerid, health + 80.0); } else { SetPlayerHealth(playerid, 100.0); }
											new rand = random(sizeof(STD4));
											PlayerInfo[playerid][pDoenca] = STD4[rand];
											PlayerInfo[SexOffer[playerid]][pDoenca] = STD4[rand];
											if(STD4[rand] == 0) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + DST enquanto não ter relações sexuais."); }
											else if(STD4[rand] == 1) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + um Pereba no CU devido ao Sexo."); }
											else if(STD4[rand] == 2) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + um Duenca na Cabeca do Pau devido ao Sexo."); }
											else if(STD4[rand] == 3) { SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Ganhou 80 de Saúde + uma Duenca na Buceta devido ao Sexo."); }
										}
										else if(level >= 401)
										{
											SetPlayerHealth(playerid, 100.0);
											SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Seu nível de sexo é tão alto que você ganhou 100% de saúde e nenhuma DST.");
											SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* A Prostitura tem um nível de sexo tão alto que você ganhou 100% de saúde e nenhuma DST.");
										}
				      				}
									else
									{
									    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* O Jogador usou camisinha.");
									    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está usando camisinha.");
									    Condom[playerid] --;
									}
								}
								else
								{
								    SendClientMessage(SexOffer[playerid], COLOR_LIGHTBLUE, "* Este jogador já está infectado com DST, no pode pegar mais uma.");
								    return true;
								}
								SexOffer[playerid] = 999;
								return true;
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GREY, "   Você ou a Profissional do sexo não estão em um carro !");
							    return true;
							}
						}//Connected ou not
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode pagar o sexo!");
					    return true;
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não tem nenhuma oferta de sexo !");
				    return true;
				}
			}
			else if(strcmp(x_Emprego,"reparo",true) == 0)
			{
			    if(RepairOffer[playerid] < 999)
			    {
			        if(GetPlayerMoney(playerid) > RepairPrice[playerid])
				    {
					    if(IsPlayerInAnyVehicle(playerid))
					    {
					        if(IsPlayerConnected(RepairOffer[playerid]))
					        {
						        GetPlayerName(RepairOffer[playerid], giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
						        RepairCar[playerid] = GetPlayerVehicleID(playerid);
						        SetVehicleHealth(RepairCar[playerid], 1000.0);
						        RepairVehicle(RepairCar[playerid]);
								format(string, sizeof(string), "* O mecânico %s reparou seu veículo por R$%d.",giveplayer,RepairPrice[playerid]);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Você reparou o veículo de %s, e R$%d foi adicionado no seu salário.",sendername,RepairPrice[playerid]);
								SendClientMessage(RepairOffer[playerid], COLOR_LIGHTBLUE, string);
								PlayerInfo[RepairOffer[playerid]][pMechSkill] ++;
				                if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 50)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu mecanico e cargo 2, Agora ele pode adicionar combustivel para qualquer carro."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 100)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu mecanico e cargo 3, Agora ele pode adicionar combustivel para qualquer carro."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 200)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu mecanico e cargo 4, Agora ele pode adicionar combustivel para qualquer carro."); }
								else if(PlayerInfo[RepairOffer[playerid]][pMechSkill] == 400)
								{ SendClientMessage(RepairOffer[playerid], COLOR_YELLOW, "* Seu mecanico e cargo 5, Agora ele pode adicionar combustivel para qualquer carro."); }
								PlayerInfo[RepairOffer[playerid]][pSalario] += RepairPrice[playerid];
								GivePlayerMoney(playerid, -RepairPrice[playerid]);
						        RepairOffer[playerid] = 999;
								RepairPrice[playerid] = 0;
								return true;
							}
							return true;
						}
						return true;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Você não pode permitir o reparo !");
					    return true;
					}
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Falta uma oferta para Você reparar o carro !");
			        return true;
			    }
			}
			else { return true; }
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/abastecercarro", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(!IsAMec(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Você não é mecanico!");
		        return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /abastecercarro [id] [preco]");
				return true;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Preco minimo 1, preco maximo 99999!"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "   Nao posso fazer isso!"); return true; }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu ao(a) %s para re-abastecer o carro dele(a) por R$%d .",giveplayer,money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mecanico %s quer re-abastecer seu carro por R$%d, (Digite /aceitar abastecimento) para aceitar.",sendername,money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RefillOffer[playa] = playerid;
						RefillPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Player nao esta perto de Você ou nao esta no carro.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jogador offline.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/reparar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
            if(!IsAMec(playerid))
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Você não é mecanico!");
		        return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /reparar [id] [preco]");
				return true;
			}
			new playa;
			new money;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Preco minimo 1, preco maximo 99999!"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, playa)&& IsPlayerInAnyVehicle(playa))
					{
					    if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "  Não posso fazer isso!"); return true; }
				    	GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu ao(a) %s para concertar seu carro por R$%d .",giveplayer,money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mecanico %s quer reparar seu carro por R$%d, (Digite /aceitar reparo) para aceitar.",sendername,money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						RepairOffer[playa] = playerid;
						RepairPrice[playa] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   Este jogador nao esta perto de Você ou nao esta no carro.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador esta offline.");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/callcar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(CarCalls[playerid] > 0)
		    {
		        new Float:plocx,Float:plocy,Float:plocz;
	            GetPlayerPos(playerid, plocx, plocy, plocz);
				SetVehiclePos(CarID[playerid],plocx,plocy+4, plocz); LinkVehicleToInterior(CarID[playerid], 0);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Borght Car has arrived.");
				CarCalls[playerid] -= 1;
				format(string, sizeof(string), "* You can call Your Borght Car for %d times more.", CarCalls[playerid]);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Invalido Ação !");
		    }
		}
	    return true;
	}
	if(strcmp(cmd, "/gangue", true) == 0 || strcmp(cmd, "/ga", true) == 0 || strcmp(cmd, "/ganguee", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pMuted] == 1)
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, pois foi calado");
				return true;
			}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: (/ga)ngue [ORG CHAT]");
				return true;
			}
			if(TentouDivulgar(result))
			{
  				if(cdivulgar[playerid] >= 4)
  				{
					SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
    				PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
    				Kick(playerid);
  				}
  				GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
  				format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
				ABroadCast(COLOR_YELLOW,string,1);
				DivulgouLog(string);
        		cdivulgar[playerid] += 1;
        		return true;
			}
			if (PlayerInfo[playerid][pLider] > 0 || PlayerInfo[playerid][pMembro] > 0)
			{
				format(string, sizeof(string), "* %s falou algo no rádio da gangue.", PlayerName(playerid));
				ProxDetector(20.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    new leader = PlayerInfo[playerid][pLider];
			    new member = PlayerInfo[playerid][pMembro];
			    if(member==5)
			    {
           			if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Gangster %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Capanga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Fogueteiro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novato %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Novato %s: %s. ))  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_AZTECAS, string);
			    }
			    if(member==6)
			    {
			        if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Bombadeador %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Terrorista %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Membro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Homem-Bomba %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Homem-Bomba %s: %s. ))  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_Taliban, string);
			    }
       			if(member==23)
			    {
			        if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Bombadeador %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Terrorista %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Membro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Homem-Bomba %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Homem-Bomba %s: %s. ))  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_FARC, string);
			    }
			    if(member==8)
			    {
			        if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Diretor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Vice-Diretor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Agente Especial %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Agente %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Assassino %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Aprendiz %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Aprendiz %s: %s. ))  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_HITMAN, string);
			    }
			    if(member==22)
			    {
			        if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Diretor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Vice-Diretor %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Agente Especial %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Agente %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Assassino %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Aprendiz %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Aprendiz %s: %s. ))  **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_TRIADS, string);
			    }
			    if(member==9)
			    {
			        if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Diretor de Produção %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Produção %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Editor Local %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Repórter Nacional %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Repórter Local %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Humorista %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Humorista %s: %s )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_REP, string);
			    }
			    if(member==10)
			    {
           			if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Taxista Profissional %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Taxista Experiente %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Taxista %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Taxista Em Treinamento %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Taxista em Treinamento %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_TAXI, string);
				}
				if(member==14)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Gangster %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Capanga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Fogueteiro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novato %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Novato %s: %s. )) **", sendername, result); }
				    SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_GRO, string);
				}
				if(member==15)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Bombadeador %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Terrorista %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Membro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Homem-Bomba %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Homem-Bomba %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_AL, string);
				}
				if(member==17)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Gangster %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Capanga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Fogueteiro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novato %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Novato %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_BALLAS, string);
				}
				if(member==18)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Gangster %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Capanga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Fogueteiro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novato %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Novato %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_VAGOS, string);
				}
				if(member==19)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Gangster %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Capanga %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Fogueteiro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novato %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Novato %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], 0xF6000000, string);
				}
				if(member==20)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub-Chefe %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Matador Profissional %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Psicótico %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Membro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Olheiro %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Olheiro %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_SONS, string);
				}
				if(member==21)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Drift King %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Sub Drift King %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Drift Experiente %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Drift Intermediário %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Membro %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Drift Novato %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Drift Novato %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_DRIFTERS, string);
				}
				if(member==13)
				{
				    if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Don %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Consiglieri %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Capo %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Soldatto %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Assossiado %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Novizio %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Novizio %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_YAK, string);
				}
				if(member==12)
			    {
			        if(PlayerInfo[playerid][pCargo] == 6) { format(string, sizeof(string), "** Don %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 5) { format(string, sizeof(string), "** Capo Bastone %s: %s. )) **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 4) { format(string, sizeof(string), "** Capo Regime %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 3) { format(string, sizeof(string), "** Sgarrista %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 2) { format(string, sizeof(string), "** Picciotto %s: %s. ))  **", sendername, result); }
					else if(PlayerInfo[playerid][pCargo] == 1) { format(string, sizeof(string), "** Associate %s: %s. ))  **", sendername, result); }
					else { format(string, sizeof(string), "** Associate %s: %s. )) **", sendername, result); }
					SendFamilyMessage(PlayerInfo[playerid][pMembro], COR_COSA, string);
				}
				if(leader==5)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_AZTECAS, string);
				}
				if(leader==6)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_Taliban, string);
				}
    			if(leader==23)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_FARC, string);
				}
				if(leader==8)
				{
				    format(string, sizeof(string), "** Diretor %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_HITMAN, string);
				}
				if(leader==22)
				{
				    format(string, sizeof(string), "** Diretor %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_TRIADS, string);
				}
				if(leader==9)
				{
				    format(string, sizeof(string), "** Diretor de Producao %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_REP, string);
				}
				if(leader==10)
				{
				    format(string, sizeof(string), "** Chefe %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_TAXI, string);
				}
				if(leader==14)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_GRO, string);
				}
				if(leader==15)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_AL, string);
				}
				if(leader==20)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_SONS, string);
				}
				if(leader==21)
				{
				    format(string, sizeof(string), "** Drift King %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_DRIFTERS, string);
				}
				if(leader==17)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_BALLAS, string);
				}
				if(leader==18)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_VAGOS, string);
				}
				if(leader==19)
				{
				    format(string, sizeof(string), "** Chefão %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], 0xF6000000, string);
				}
				if(leader==13)
				{
				    format(string, sizeof(string), "** Don %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_YAK, string);
				}
				if(leader==12)
				{
				    format(string, sizeof(string), "** Don %s: %s. )) **", sendername, result);
					SendFamilyMessage(PlayerInfo[playerid][pLider], COR_COSA, string);
				}
				printf("%s", string);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Você não faz parte de nenhuma família!");
				return true;
			}
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/noticias", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)
			{
			    new tmpcar = GetPlayerVehicleID(playerid);
		        if(PlayerInfo[playerid][pMuted] == 1)
				{
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você nao poder falar, Você foi calado");
					return true;
				}
                if(IsAJornalCar(tmpcar)||PlayerToPoint(5,playerid,361.2997,203.8503,1008.3828))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USE: /noticias [Texto]");
						return true;
					}
					if(TentouDivulgar(result))
					{
  						if(cdivulgar[playerid] >= 4)
  						{
							SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
			    			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
			    			Kick(playerid);
  						}
			  			GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
			  			format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,playername,result);
						ABroadCast(COLOR_YELLOW,string,1);
						DivulgouLog(string);
        				cdivulgar[playerid] += 1;
        				return true;
					}
					format(string, sizeof(string), "Reporter %s: %s", sendername, result);
					OOCNews(COLOR_NEWS,string);
					PlayerInfo[playerid][pNewsSkill] ++;
					if(PlayerInfo[playerid][pNewsSkill] == 50)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Reporter Agora e cargo 2, logo logo ja pode voar no helicoptero e falar AoVivo."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 100)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* Seu Reporter Agora e cargo 3, logo logo ja pode voar no helicoptero e falar AoVivo."); }
					else if(PlayerInfo[playerid][pNewsSkill] == 200)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* O Seu Reporter Agora e cargo 4 e pode fazer coberturas com helicoptero"); }
					else if(PlayerInfo[playerid][pNewsSkill] == 400)
					{ SendClientMessage(playerid, COLOR_YELLOW, "* O Seu Reporter Agora e cargo 5 e pode conversar AoVivo com quem ele quizer."); }
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está no Jornal ou na Van !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Reporter !");
			}
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/aovivo", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)
			{
			    if(TalkingLive[playerid] != 255)
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "* A Conversa AoVivo Terminou.");
			        SendClientMessage(TalkingLive[playerid], COLOR_LIGHTBLUE, "* A Conversa AoVivo Terminou.");
			        Controle(playerid, 1);
			        Controle(TalkingLive[playerid], 1);
		            TalkingLive[TalkingLive[playerid]] = 255;
			        TalkingLive[playerid] = 255;
			        return true;
			    }
			    if(PlayerInfo[playerid][pCargo] < 4)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Seu Cargo é baixo para falar com alguem AoVivo !");
				    return true;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /aovivo [id]");
					return true;
				}
				//giveplayerid = strval(tmp);
		        giveplayerid = ReturnUser(tmp);
				if (IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(5.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode falar AoVivo com você mesmo!"); return true; }
						    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							format(string, sizeof(string), "* Você ofereceu a %s para ter uma conversa AoVivo.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* %s Você tem uma oferta para conversas ao vivo, Digite (/aceitar aovivo) para aceitar.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
							LiveOffer[giveplayerid] = playerid;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Você esta longe deste player !");
						    return true;
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   ID/Nick - Invalido !");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um reporter !");
			}
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/vendermaconha", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode vender drogas na cadeia!");
	   		return true;
    	}
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pEmprego] != 3)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é Vendedor De Drogas!");
				return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /venderdrogas [id] [quantidade] [preco]");
				return true;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Minimo de Pedras 1, e Maximo de Pedras 99!"); return true; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Preco maior que 1, menor que 99999!"); return true; }
			if(needed > PlayerInfo[playerid][pDrogas]) { SendClientMessage(playerid, COLOR_GREY, "   Você nao tem esta quantidade de pedras com Você !"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Você não pode vender maconha pra você mesmo!");
					        return true;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu %s com %d pedras por R$%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* O Traficante %s quer vender %d pedras por R$%d, (Digite /aceitar maconha) para comprar.", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jogador offline.");
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/vendercocaina", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode vender drogas na cadeia!");
	   		return true;
    	}
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pEmprego] != 3)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é Vendedor De Drogas!");
				return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /venderdrogas [id] [quantidade] [preco]");
				return true;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Minimo de Pedras 1, e Maximo de Pedras 99!"); return true; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Preço maior que 1, menor que 99999!"); return true; }
			if(needed > PlayerInfo[playerid][pDrogas2]) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem esta quantidade de cocaina com você !"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Você não pode vender maconha pra você mesmo!");
					        return true;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu %s com %d pedras por R$%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* O Traficante %s quer vender %d pedras por R$%d, (Digite /aceitar cocaina) para comprar.", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jogador offline.");
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/vendercrack", true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode vender drogas na cadeia!");
	   		return true;
    	}
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pEmprego] != 3)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é Vendedor De Drogas!");
				return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /venderdrogas [id] [quantidade] [preco]");
				return true;
			}
			new playa;
			new money;
			new needed;
			playa = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			needed = strval(tmp);
			if(needed < 1 || needed > 99) { SendClientMessage(playerid, COLOR_GREY, "   Minimo de Pedras 1, e Maximo de Pedras 99!"); return true; }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "  Preço maior que 1, menor que 99999!"); return true; }
			if(needed > PlayerInfo[playerid][pDrogas3]) { SendClientMessage(playerid, COLOR_GREY, "   Você nao tem esta quantidade de crack com Você !"); return true; }
			if(IsPlayerConnected(playa))
			{
			    if(playa != INVALID_PLAYER_ID)
			    {
					if (ProxDetectorS(8.0, playerid, playa))
					{
					    if(playa == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Você não pode vender maconha pra você mesmo!");
					        return true;
					    }
					    GetPlayerName(playa, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    format(string, sizeof(string), "* Você ofereceu %s com %d pedras por R$%d .", giveplayer, needed, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* O Traficante %s quer vender %d pedras por R$%d, (Digite /aceitar crack) para comprar.", sendername, needed, money);
						SendClientMessage(playa, COLOR_LIGHTBLUE, string);
						DrugOffer[playa] = playerid;
						DrugPrice[playa] = money;
						DrugGram[playa] = needed;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Jogador offline.");
			}
		}
		return true;
	}
    if(strcmp(cmd,"/usemaconha",true) == 0 || strcmp(cmd,"/usarmaconha",true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	  		SendClientMessage(playerid,COLOR_YELLOW," Você não usar drogas na cadeia!");
			return true;
    	}
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerInfo[playerid][pDorgado] >= 160)
  			{
    			PlayerInfo[playerid][pDoenca] = 5;
    			PlayerInfo[playerid][pDorgado] = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
			    return true;
  	        }
  	        if(PlayerInfo[playerid][pDoenca] == 5)
  			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    return true;
  	        }
	   	    if(PlayerBoxing[playerid] > 0 || PlayerInfo[playerid][pJailed] != 0)
	        {
	            SendClientMessage(playerid,COLOR_GREY,"Você não pode usar Drogas enquanto você está lutando !");
	            return true;
	        }
			if(PlayerInfo[playerid][pDrogas] > 1)
   			{
			    if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid,"~w~Você esta~n~~p~Lezado",4000,1); }
			    new Float:PlayersArmour;
			    GetPlayerArmour(playerid,PlayersArmour);
			    PlayerInfo[playerid][pDrogas] -= 2;
			    PlayerInfo[playerid][pDorgado] += 2;
                new Dmelhoria = 1 * PlayerInfo[playerid][pDrugPerk]; Dmelhoria += 2;
			    if(PlayersArmour >= 100)
    			{
			        SetPlayerArmour(playerid, 100);
			        SendClientMessage(playerid,COLOR_LIGHTRED,"* Você não pode mais usar drogas!");
			        return true;
       	        }
		        else
		        {
			    	SetPlayerArmour(playerid, PlayersArmour + Dmelhoria);
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(string, sizeof(string), "* %s Fumou Maconha.", PlayerName(playerid));
   	  	        ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			  	SetPlayerAttachedObject(playerid, 0, 3044, 2, 0.070999,0.016000,0.024000, 0.000000,0.000000,177.499969,1.000000,1.000000,1.000000);
			  	GameTextForPlayer(playerid, "~y~VOCE ESTA~n~~w~DOIDAO", 7000, 1);
		        SetPlayerWeather(playerid, -22);
			    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    TempoDrogas[playerid] = SetTimerEx("TUsandoDrogas", 15000, 0, "i", playerid);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não tem Gramas de Drogas Suficiente.!");
			}
		}//not connected
		return true;
	}
 	if(strcmp(cmd,"/usecocaina",true) == 0 || strcmp(cmd,"/usarcocaina",true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não usar drogas na cadeia!");
	   		return true;
    	}
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerInfo[playerid][pDorgado] >= 120)
  			{
    			PlayerInfo[playerid][pDoenca] = 5;
    			PlayerInfo[playerid][pDorgado] = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
				return true;
  	        }
  	        if(PlayerInfo[playerid][pDoenca] == 5)
  			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você esta com câncer de pulmão, vá ate um hospital se tratar !");
			    return true;
  	        }
	   	    if(PlayerBoxing[playerid] > 0 || PlayerInfo[playerid][pJailed] != 0)
	        {
	            SendClientMessage(playerid,COLOR_GREY,"Você não pode usar drogas enquanto está lutando !");
	            return true;
	        }
			if(PlayerInfo[playerid][pDrogas2] > 1)
			{
			    PlayerStoned[playerid] += 1;
			    if(PlayerStoned[playerid] >= 3) { GameTextForPlayer(playerid,"~w~Você está~n~~p~Cherado",4000,1); }
			    new Float:PlayersArmour;
			    GetPlayerArmour(playerid,PlayersArmour);
			    PlayerInfo[playerid][pDrogas2] -= 2;
			    PlayerInfo[playerid][pDorgado] += 2;
                new Dmelhoria = 1 * PlayerInfo[playerid][pDrugPerk]; Dmelhoria += 2;
			    if(PlayersArmour >= 100)
    			{
			        SetPlayerArmour(playerid, 100);
			        SendClientMessage(playerid,COLOR_LIGHTRED,"* Você não pode mais usar drogas!");
			        return true;
       	        }
		        else
		        {
			    	SetPlayerArmour(playerid, PlayersArmour + Dmelhoria);
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(string, sizeof(string), "* %s Cherou Cocaina.", PlayerName(playerid));
	            ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			  	SetPlayerAttachedObject(playerid, 0, 3044, 2, 0.070999,0.016000,0.024000, 0.000000,0.000000,177.499969,1.000000,1.000000,1.000000);
			  	GameTextForPlayer(playerid, "~y~VOCE ESTA~n~~w~DOIDAO", 7000, 1);
		        SetPlayerWeather(playerid, -22);
			    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    TempoDrogas[playerid] = SetTimerEx("TUsandoDrogas", 15000, 0, "i", playerid);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não tem Gramas de Drogas Suficiente.!");
			}
		}//not connected
		return true;
	}
 	if(strcmp(cmd,"/usecrack",true) == 0 || strcmp(cmd,"/usarcrack",true) == 0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
		   SendClientMessage(playerid,COLOR_YELLOW," Você não usar drogas na cadeia!");
		   return true;
    	}
	    if(IsPlayerConnected(playerid))
	   	{
	   	    if(PlayerInfo[playerid][pDorgado] >= 80)
  			{
    			PlayerInfo[playerid][pDoenca] = 5;
    			PlayerInfo[playerid][pDorgado] = 0;
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está com câncer de pulmão, vá ate um hospital se tratar !");
			    SetPlayerDrunkLevel(playerid, GetPlayerDrunkLevel(playerid) + 2300);
				return true;
  	        }
  	        if(PlayerInfo[playerid][pDoenca] == 5)
  			{
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está com câncer de pulmão, vá ate um hospital se tratar !");
			    return true;
  	        }
	   	    if(PlayerBoxing[playerid] > 0 || PlayerInfo[playerid][pJailed] != 0)
	        {
	            SendClientMessage(playerid,COLOR_GREY,"Use Drogas enquanto você está lutando !");
	            return true;
	        }
		   	if(PlayerInfo[playerid][pDrogas3] > 1)
			{
			    new Float:PlayersArmour;
			    GetPlayerArmour(playerid,PlayersArmour);
			    PlayerInfo[playerid][pDrogas3] -= 2;
			    PlayerInfo[playerid][pDorgado] += 2;
                new Dmelhoria = 1 * PlayerInfo[playerid][pDrugPerk]; Dmelhoria += 2;
			    if(PlayersArmour >= 100)
    			{
			        SetPlayerArmour(playerid, 100);
			        SendClientMessage(playerid,COLOR_LIGHTRED,"* Você não pode mais usar drogas!");
			        return true;
       	        }
		        else
		        {
			    	SetPlayerArmour(playerid, PlayersArmour + Dmelhoria);
			    }
			    GetPlayerName(playerid, sendername, sizeof(sendername));
		    	format(string, sizeof(string), "* %s Fumou Crack.", PlayerName(playerid));
   	            ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
			  	SetPlayerAttachedObject(playerid, 0, 3044, 2, 0.070999,0.016000,0.024000, 0.000000,0.000000,177.499969,1.000000,1.000000,1.000000);
			  	GameTextForPlayer(playerid, "~y~VOCE ESTA~n~~w~DOIDAO", 7000, 1);
		        SetPlayerWeather(playerid, -22);
			    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			    TempoDrogas[playerid] = SetTimerEx("TUsandoDrogas", 15000, 0, "i", playerid);
			}
			else
			{
			    SendClientMessage(playerid,COLOR_GREY,"Você não tem Gramas de Drogas Suficiente.!");
			}
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/curarme", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if (PlayerToPoint(3, playerid,1172.6522,-1327.9591,15.4025)||PlayerToPoint(3, playerid,2029.5945,-1404.6426,17.2512))
			{
	            if(PlayerInfo[playerid][pDoenca] > 0)
	            {
					PlayerInfo[playerid][pDoenca] = 0;
					SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você está infectado com uma DST, vá ate um hospital se tratar !");
					GivePlayerMoney(playerid, -500);
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dr.Bezerra de Menezes: Retiramos as suas doenças! Tenha um otimo dia!!");
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hospital: Foram cobrados R$500 para ajudar o Hospital!!");
					SendClientMessage(playerid, TEAM_CYAN_COLOR, "Hospital: Procure um médico que eles cobram mais barato!!");
					SetPlayerDrunkLevel (playerid, 0);
				}
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não tem uma Doença para ser curada !");
				    return true;
				}
	        }
	        else
	        {
	            SendClientMessage(playerid, COLOR_GREY, "   Você não está em um Hospital !");
	        }
        }
		return true;
	}
	if(strcmp(cmd, "/ejetar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        new State;
	        if(IsPlayerInAnyVehicle(playerid))
	        {
         		State=GetPlayerState(playerid);
		        if(State!=PLAYER_STATE_DRIVER)
		        {
		        	SendClientMessage(playerid,COLOR_GREY,"   Você não é o motorista do carro !");
		            return true;
		        }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /ejetar [id]");
					return true;
				}
				new playa;
				playa = ReturnUser(tmp);
				new test;
				test = GetPlayerVehicleID(playerid);
				if(IsPlayerConnected(playa))
				{
				    if(playa != INVALID_PLAYER_ID)
				    {
				        if(playa == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se expulsar... Aperte Enter ¬¬!"); return true; }
				        if(IsPlayerInVehicle(playa,test))
				        {
							new PName[MAX_PLAYER_NAME];
							GetPlayerName(playerid,PName,sizeof(PName));
							GetPlayerName(playa, giveplayer, sizeof(giveplayer));
							format(string, sizeof(string), "* Você expulsou o(a) %s para fora do carro!", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Você foi retirado do carro por %s !", PName);
							SendClientMessage(playa, COLOR_LIGHTBLUE, string);
							RemovePlayerFromVehicle(playa);
						}
						else
						{
						    SendClientMessage(playerid, COLOR_GREY, "   Este jogador não está em seu carro !");
						    return true;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, " ID/Nick - Invalido!");
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você precisa estar em um carro para usar este comando !");
			}
		}
		return true;
	}
	if(strcmp(cmd, "/transar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
	        if(PlayerInfo[playerid][pEmprego] == 2)
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					SendClientMessage(playerid, COLOR_GREY, "   Você só pode transar em um carro !");
					return true;
			    }
			    new Car = GetPlayerVehicleID(playerid);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /transar [id] [price]");
					return true;
				}
				//giveplayerid = strval(tmp);
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				new money;
				money = strval(tmp);
				if(money < 1 || money > 20000) { SendClientMessage(playerid, COLOR_GREY, "   Preço da transa não pode ser menor que R$1, ou maior que R$20000!"); return true; }
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
						if (ProxDetectorS(8.0, playerid, giveplayerid))
						{
						    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode ter relação sexual com você mesma, mais pode bater uma siririca!"); return true; }
						    if(IsPlayerInAnyVehicle(playerid) && IsPlayerInVehicle(giveplayerid, Car))
						    {
							    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
								GetPlayerName(playerid, sendername, sizeof(sendername));
								format(string, sizeof(string), "* Você ofereceu ao %s para dar uma *Foda* com você por R$%d.", giveplayer, money);
								SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
								format(string, sizeof(string), "* Profissional do sexo %s Perguntou se você aceita dar uma *Foda*, por R$%d (Digite /aceitar transa) Para Aceitar.", sendername, money);
								SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
					            SexOffer[giveplayerid] = playerid;
					            SexPrice[giveplayerid] = money;
				            }
				            else
				            {
				                SendClientMessage(playerid, COLOR_GREY, "   Você e o seu cliente devem estar juntos em um carro !");
				                return true;
				            }
						}
						else
						{
							SendClientMessage(playerid, COLOR_GREY, "   Este jogador não está perto de você !");
							return true;
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   O Jogador está offline !");
					return true;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "   Você não é Profissional do sexo !");
			}
		}//not connected
		return true;
	}
 	if(strcmp(cmd, "/esmola", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
		    if(PlayerInfo[playerid][pEmprego] != 9)
		    {
				SendClientMessage(playerid, COLOR_GREY, "   Você não é Mendigo!");
				return true;
		    }
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /esmola [id] [preço]");
				return true;
			}
			new money;
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp)) { return true; }
			money = strval(tmp);
			if(money < 1 || money > 99999) { SendClientMessage(playerid, COLOR_GREY, "   Preço da esmola não pode ser menor que R$1, ou maior que R$99999!"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if(ProxDetectorS(8.0, playerid, giveplayerid))
					{
					    if(giveplayerid == playerid)
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Você não pode pedir dinheiro a si mesmo!");
					        return true;
					    }
         				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você pediu ao %s uma esmola de R$%d.", giveplayer, money);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Mendigo %s pediu R$%d de esmola... Digite /aceitar mendigo e ajude-o.", sendername, money);
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
        				MendigoOffer[giveplayerid] = playerid;
        				MendigoPrice[giveplayerid] = money;
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador não está perto de você !");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está Offline!");
			}
		}
		return true;
	}
 	if(strcmp(cmd,"/Bafometro",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
   			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial !");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão !");
			    return true;
			}
 			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /bafometro [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
			    	if (ProxDetectorS(8.0,playerid,giveplayerid))
					{
  	  					if(giveplayerid == playerid) { SendClientMessage(playerid,COLOR_GREY,"Você não pode fazer o teste em si mesmo!"); return true; }
				    	GetPlayerName(giveplayerid,giveplayer,sizeof(giveplayer));
						GetPlayerName(playerid,sendername,sizeof(sendername));
				    	new bebado[32], bebado2[32];
					    if(PlayerDrunk[giveplayerid] > 0) { bebado = "Bêbado."; } else { bebado = "| Sóbrio "; }
				    	if(PlayerInfo[giveplayerid][pMats] > 0) { bebado2 = "Drogado."; } else { bebado2 = "| Sóbrio "; }
				    	format(string,sizeof(string),"|__________[ %s ]__________|",giveplayer);
			        	SendClientMessage(playerid,COLOR_WHITE,string);
			        	format(string,sizeof(string),"%s.",bebado);
						SendClientMessage(playerid,COLOR_GREY,string);
						format(string,sizeof(string),"%s.",bebado2);
						format(string,sizeof(string),"* %s faz o teste do Bafomêtro em %s.",sendername ,giveplayer);
						ProxDetector(30.0,playerid,string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
				    	SendClientMessage(playerid,COLOR_GREY,"O jogador não está perto de você !");
				    	return true;
    				}
				}
			}
        	else
       		{
            	SendClientMessage(playerid,COLOR_GREY,"Esse jogador está off-line !");
            	return true;
       		}
    		return true;
		}
	}
//--------------------------------=Ajuda para Polícia=----------------------------------------------------------------
	if(strcmp(cmd,"/reforco",true)==0 || strcmp(cmd,"/rf",true)==0)
	{
		if(IsPlayerConnected(playerid))
		{
				if(!IsACop(playerid))
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
				    return true;
				}
				if(OnDuty[playerid] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
				    return true;
				}
				if (PlayerInfo[playerid][pRequestingBackup] != 1)
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "Todas as unidades: %s está pedindo reforço,veja o mapa e digite /procurar %d!.", sendername,playerid);
					PlayerInfo[playerid][pRequestingBackup] = 1;
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnected(i))
						{
							if(IsACop(i))
							{
                    			new Float:plocx,Float:plocy,Float:plocz;
								new plo;
								plo = ReturnUser(tmp);
								GetPlayerPos(plo, plocx, plocy, plocz);
								SendClientMessage(i, TEAM_BLUE_COLOR, string);
							}
						}
					}
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Digite /rcr pra retirar o alerta.");
                    SetTimerEx("BackupClear", 180000, false, "ii", playerid, 1);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "Você já tem um pedido de reforço ativo!");
				}
		}
		return true;
	}

//-----------------=Limpa a Ajuda Policial=-----------------
	if(strcmp(cmd,"/reforcoretirar",true)==0 || strcmp(cmd,"/rcr",true)==0)
	{
		BackupClear(playerid, 0);
		return true;
	}
 	if(strcmp(cmd,"/revistar",true)==0)
    {
        if(IsPlayerConnected(playerid))
	    {
  			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
        	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USE: /revistar [id]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
				if(giveplayerid != INVALID_PLAYER_ID)
				{
			    	if (ProxDetectorS(8.0, playerid, giveplayerid))
					{
				    	if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode se Revistar!"); return true; }
				    	GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
				    	new text1[20], text2[20], text3[20], text4[20], text5[20], text6[20], text7[20];
         				if(PlayerInfo[giveplayerid][pDrogas] > 0) { text1 = "| Maconha."; } else { text1 = "| Vazio."; }
         				if(PlayerInfo[giveplayerid][pDrogas2] > 0) { text2 = "| Cocaina."; } else { text2 = "| Vazio."; }
         				if(PlayerInfo[giveplayerid][pDrogas3] > 0) { text3 = "| Crack."; } else { text3 = "| Vazio."; }
				    	if(PlayerInfo[giveplayerid][pMats] > 0) { text4 = "| Materiais."; } else { text4 = "| Vazio."; }
				    	if(Fishes[giveplayerid][pWeight1] > 0 || Fishes[giveplayerid][pWeight2] > 0 || Fishes[giveplayerid][pWeight3] > 0 || Fishes[giveplayerid][pWeight4] > 0 || Fishes[giveplayerid][pWeight5] > 0) { text5 = "| Peixes."; } else { text5 = "| Vazio."; }
				    	if(PlayerInfo[giveplayerid][pPhoneBook] > 0) { text6 = "| Lista Telefonica."; } else { text6 = "| Vazio."; }
				    	if(PlayerInfo[giveplayerid][pCDPlayer] > 0) { text7 = "| MP10."; } else { text7 = "| Vazio."; }
				    	format(string, sizeof(string), "|__________ Itens %s __________|", giveplayer);
			        	SendClientMessage(playerid, COLOR_WHITE, string);
			        	format(string, sizeof(string), "%s [Quantidade: %d].", text1, PlayerInfo[giveplayerid][pDrogas]);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s [Quantidade: %d].", text2, PlayerInfo[giveplayerid][pDrogas2]);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s [Quantidade: %d].", text3, PlayerInfo[giveplayerid][pDrogas3]);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s [Quantidade: %d].", text4, PlayerInfo[giveplayerid][pMats]);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text5);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text6);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "%s.", text7);
						SendClientMessage(playerid, COLOR_GREY, string);
						format(string, sizeof(string), "* %s revistou %s para ver se tem qualquer item ilegal.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					}
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "   O Jogador está longe de Você !");
					    return true;
					}
				}
			}
     	   	else
      	  	{
            	SendClientMessage(playerid, COLOR_GREY, "   O Jogador Está Offline !");
            	return true;
        	}
		}
    	return true;
 	}
	if(strcmp(cmd, "/presos", true) == 0)
	{
		if(IsPlayerConnected(playerid))
	    {
			SendClientMessage(playerid, COLOR_WHITE, "|______________[ Presos ]______________|");
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(PlayerInfo[i][pJailed] == 1)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Policia Militar - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
					if(PlayerInfo[i][pJailed] == 2)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Carandiru - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				    if(PlayerInfo[i][pJailed] == 3)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : B.O.P.E - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				    if(PlayerInfo[i][pJailed] == 4)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Policia Civil - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
	                if(PlayerInfo[i][pJailed] == 5)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Policia Federal - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
                    if(PlayerInfo[i][pJailed] == 6)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Cela Admin - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
					if(PlayerInfo[i][pJailed] == 7)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Exército - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
					if(PlayerInfo[i][pJailed] == 9)
				    {
						GetPlayerName(i, sendername, sizeof(sendername));
						format(string, 128, "ID : %d Preso: %s Local : Cadeia Admin - Tempo : %d seg.", i, sendername, PlayerInfo[i][pJailTime]);
      					SendClientMessage(playerid, COLOR_GRAD2, string);
					}
				}
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/procurados", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
   			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
			new x;
			SendClientMessage(playerid, COLOR_WHITE, "|______________[ Suspeitos ]______________|");
		    for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(WantedPoints[i] > 0)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
						format(string, sizeof(string), "%s%s(%d): %d", string,giveplayer,i,WantedPoints[i]);
						x++;
						if(x > 3)
						{
						    SendClientMessage(playerid, COLOR_YELLOW, string);
						    x = 0;
							format(string, sizeof(string), "");
						}
						else
						{
							format(string, sizeof(string), "%s, ", string);
						}
					}
				}
			}
			if(x <= 3 && x > 0)
			{
				string[strlen(string)-2] = '.';
			    SendClientMessage(playerid, COLOR_YELLOW, string);
			}
		}//not connected
		return true;
	}
	if(strcmp(cmd, "/sairdoemprego", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
		    if(PlayerInfo[playerid][pEmprego] > 0)
		    {
		        if(PlayerInfo[playerid][pVIP] > 0)
		        {
		            if(PlayerInfo[playerid][pContractTime] >= 2)
					{
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você cumpriu seu contrato e saiu do emprego.");
					    PlayerInfo[playerid][pEmprego] = 0;
					    if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 2 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Você ainda tem %d Horas para o fim do contrato.", chours / 2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
		        }
		        else
		        {
					if(PlayerInfo[playerid][pContractTime] >= 10)
					{
					    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você cumpriu seu contrato e saiu do emprego.");
					    PlayerInfo[playerid][pEmprego] = 0;
					    if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
					    PlayerInfo[playerid][pContractTime] = 0;
					}
					else
					{
					    new chours = 10 - PlayerInfo[playerid][pContractTime];
					    format(string, sizeof(string), "* Você ainda tem %d Horas para o fim do contrato.", chours / 2);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não possui um emprego!");
			}
		}//not connected
		return true;
	}

	if(strcmp(cmd, "/fianca", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(PlayerInfo[playerid][pJailed]==1)
			{
			    if(JailPrice[playerid] > 0)
			    {
			        if(GetPlayerMoneyEx(playerid) > JailPrice[playerid])
			        {
			            format(string, sizeof(string), "Voce pagou sua fianca por: $%d", JailPrice[playerid]);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						GivePlayerMoneyEx(playerid, -JailPrice[playerid]);
						JailPrice[playerid] = 0;
						PlayerInfo[playerid][pJailTime] = 1;
			        }
			        else
			        {
			            SendClientMessage(playerid, COLOR_GRAD1, "   Voce nao pode pagar a fianca!");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GRAD1, "   Sua fianca foi desativada!");
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GRAD1, "   Voce nao esta preso!");
			}
		}//not connected
		return true;
	}

	if(strcmp(cmd, "/limpar", true) == 0 || strcmp(cmd, "/limparficha", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(!IsACop(playerid))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
			new member = PlayerInfo[playerid][pMembro];
			new lider = PlayerInfo[playerid][pLider];
			new rank = PlayerInfo[playerid][pCargo];
	 		if((gTeam[playerid] == 2 || 1 || 3))
			{
				if (!PlayerToPoint(3.0, playerid, 253.9280,69.6094,1003.6406) && !PlayerToPoint(3.0, playerid, 259.2474,120.3977,1003.2188) && !PlayerToPoint(3.0, playerid, 198.9671,168.1982,1003.0234) && !PlayerToPoint(3.0, playerid, 234.8419,111.2194,1003.2257) && !PlayerToPoint(3.0, playerid, 326.8282,304.4166,999.1484) && !PlayerToPoint(3.0, playerid, 699.6252,-553.2016,-3.5950))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   Você não está na recepção do Departamento de Policia !");
					return true;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /limpar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
                    if (!PlayerToPoint(3.5, giveplayerid, 253.9280,69.6094,1003.6406) && !PlayerToPoint(3.5, giveplayerid, 259.2474,120.3977,1003.2188) && !PlayerToPoint(3.5, giveplayerid, 198.9671,168.1982,1003.0234) && !PlayerToPoint(3.5, giveplayerid, 234.8419,111.2194,1003.2257) && !PlayerToPoint(3.5, giveplayerid, 326.8282,304.4166,999.1484) && !PlayerToPoint(3.5, giveplayerid, 699.6252,-553.2016,-3.5950))
				    {
                      SendClientMessage(playerid, COLOR_GREY, "O Jogador está longe de você.");
					  return true;
				    }
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
                        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode limpar sua própria ficha!"); return true; }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* Você limpou a ficha de %s.", giveplayer);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Oficial %s Limpou a Ficha.", PlayerName(playerid));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						WantedPoints[giveplayerid] = 0;
      					SetPlayerWantedLevel(giveplayerid, 0);
						ClearCrime(giveplayerid);
						if(gTeam[giveplayerid]==4)
						{
						    gTeam[giveplayerid] = 3;
						    SetPlayerToTeamColor(giveplayerid);
						}
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   Invalido ID/NICK!");
				}
			}
			else if(member == 12||member == 13||lider == 12||lider == 13)
			{
			    tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "USE: /limpar [id]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				if(IsPlayerConnected(giveplayerid))
				{
				    if(giveplayerid != INVALID_PLAYER_ID)
				    {
				        if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Você não pode limpar-se!"); return true; }
					    if(rank < 3) { SendClientMessage(playerid, COLOR_GREY, "   Apenas Cargo 3+ Podem Limpar Ficha !"); return true; }
					    if(GetPlayerMoney(playerid) < 100) { SendClientMessage(playerid, COLOR_GREY, "   Você precisa de R$100 para limpar a ficha !"); return true; }
		                GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
					    if(member > 0)
					    {
						    if(PlayerInfo[giveplayerid][pMembro] != member)
							{
								SendClientMessage(playerid, COLOR_GREY, "   O Jogador não é da sua família !");
								return true;
							}
							format(string, sizeof(string), "* Você limpou a ficha do(a) %s por R$100.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Membro %s cargo %d, limpou sua ficha.", sendername, rank);
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						}
						else if(lider > 0)
						{
			                if(PlayerInfo[giveplayerid][pMembro] != lider)
							{
								SendClientMessage(playerid, COLOR_GREY, "   O Jogador não é da sua família !");
								return true;
							}
						    format(string, sizeof(string), "* Você limpou a ficha do(a) %s por R$100.", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							format(string, sizeof(string), "* Lider %s, limpou sua ficha.", PlayerName(playerid));
							SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						}
						WantedPoints[giveplayerid] = 0;
      					SetPlayerWantedLevel(giveplayerid, 0);
						ClearCrime(giveplayerid);
						GivePlayerMoney(playerid, - 100);
					}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GREY, "   ID/Nick! Invalido");
				}
			}

		}//not connected
		return true;
	}
	if(strcmp(cmd, "/multar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(!IsADetran(playerid) && (!IsACop(playerid)))
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial ou DETRAN!");
			    return true;
			}
			if(OnDuty[playerid] != 1)
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
			    return true;
			}
	    	tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /multar [ID] [Custo] [Razao]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
            tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USE: /multar [ID] [Custo] [Razao]");
				return true;
			}
			moneys = strval(tmp);
			if(moneys < 1000 || moneys > 10000) { SendClientMessage(playerid, COLOR_GREY, "Custo entre 1000 e 10000 !"); return true; }
			if(IsPlayerConnected(giveplayerid))
			{
				if(IsACop(giveplayerid))
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não pode multar Policiais!");
					return true;
				}
				if(PlayerInfo[giveplayerid][pJailed] > 0)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não pode multar jogadores que estejam presos!");
					return true;
				}
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
			        if (ProxDetectorS(25.0, playerid, giveplayerid))
					{
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						new length = strlen(cmdtext);
						while ((idx < length) && (cmdtext[idx] <= ' '))
						{
							idx++;
						}
						new offset = idx;
						new result[64];
						while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
						{
							result[idx - offset] = cmdtext[idx];
							idx++;
						}
						result[idx - offset] = EOS;
						if(!strlen(result))
						{
							SendClientMessage(playerid, COLOR_GRAD2, "USE: /multar [ID] [Custo] [Razao]");
							return true;
						}
						format(string, sizeof(string), "* Você multou %s por R$%d, Razao: %s", giveplayer, moneys, (result));
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						format(string, sizeof(string), "* Oficial %s lhe deu uma multa no valor de R$%d, Razao: %s", sendername, moneys, (result));
						SendClientMessage(giveplayerid, COLOR_LIGHTBLUE, string);
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, "* Use /aceitar multa, para aceita-la.");
						SendClientMessage(giveplayerid, COLOR_LIGHTRED, "* Se em 5 minutos você não pagar, irá preso!");
						TicketOffer[giveplayerid] = playerid;
						TicketMoney[giveplayerid] = moneys;
						SetTimerEx("PresoMulta", 300000, false, "i", giveplayerid);
						return true;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREY, "O jogador está longe !");
						return true;
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "O jogador está Offline !");
			    return true;
			}
		}
		return true;
    }
//BARREIRAS
	if(strcmp(cmd, "/barreira", true)==0 || strcmp(cmd, "/br", true)==0)
	{
		if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
		 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
		if(PlayerInfo[playerid][pJailed] != 0)
		{
		SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
		return true;
		}
		if (pRoadblock[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Você só pode criar 1 barreira por vez, /rbr - para remover sua barreira");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		pRoadblock[playerid] = CreateObject(981, X, Y, Z, 0.0, 0.0, A+180);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Barreira ~r~Criada", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Barreira Implantada... Use /rbr Para Remove-la!");
		format(string, sizeof(string), "Estado: Uma barreira foi posta por %s.", PlayerName(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pCargo] >= 5 || PlayerInfo[i][pLider] > 0)
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, "Você pode remover todas as barreiras usando /rbrall");
					}
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/removerbarreira", true)==0 || strcmp(cmd, "/rbr", true)==0)
	{
		if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
		 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
		if (pRoadblock[playerid] != 0)
		{
			RemoveRoadblock(playerid);
			SendClientMessage(playerid, COLOR_GREY, "Você retirou a sua barreira!");
		}
		else { return SendClientMessage(playerid, COLOR_GREY, "Você não criou uma barreira!"); }
		format(string, sizeof(string), "Estado: Uma barreira foi destruída por %s.", PlayerName(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/removertodasbarreiras", true)==0 || strcmp(cmd, "/rbrall", true)==0)
	{
		if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
		 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26 && PlayerInfo[playerid][pAdmin] >= 1) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(pRoadblock[i] != 0)
				{
					RemoveRoadblock(i);
				}
			}
			format(string, sizeof(string), "Estado: Todas as barreiras foram retiradas por: %s.", PlayerName(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsACop(i))
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
  		}
		return true;
	}
 	if(strcmp(cmd, "/removerprego", true)==0 || strcmp(cmd, "/rpr", true)==0)
	{
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é um Policial!");
		if (SpikeInfo[playerid][sCreated] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não criou nenhum tapete de pregos!");
			return true;
		}
  		RemoveRoadPregos(playerid);
		SendClientMessage(playerid, COLOR_GREY, "Você retirou seu tapete de pregos!");
		format(string, sizeof(string), "Estado: %s removeu seu tapete de pregos.", PlayerName(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
		}
		return true;
	}
  	if(strcmp(cmd, "/removerprall", true)==0 || strcmp(cmd, "/rprall", true)==0)
	{
		if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
		 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
		{
   			for(new i = 0; i < MAX_PLAYERS; i++)
			{
                if(IsPlayerConnected(i))
                {
					if(SpikeInfo[playerid][sCreated] != 0)
					{
     					RemoveRoadPregos(i);
					}
				}
			}
			format(string, sizeof(string), "Estado: Todos os pregos foram retirados por: %s.", PlayerName(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
                    if (IsACop(i))
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
		}
		return true;
	}
 	if(strcmp(cmd, "/prego", true)==0 || strcmp(cmd, "/pregos", true)==0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
		{
		SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
		return true;
		}
		if (!IsACop(playerid)) return SendClientMessage(playerid, COLOR_GREY, "Você não é COP!");
		if (SpikeInfo[playerid][sCreated] != 0) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar 1 prego por vez, /rpr - para remover seu tapete de pregos.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		SpikeInfo[playerid][sCreated]=1;
        SpikeInfo[playerid][sX]=X;
        SpikeInfo[playerid][sY]=Y;
        SpikeInfo[playerid][sZ]=Z-0.7;
        SpikeInfo[playerid][sObject] = CreateObject(2899, X, Y, Z-0.9, 0, 0, A-90);
		GameTextForPlayer(playerid, "~w~Pregos ~r~Criados", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Pregos Implantados... Use /rpr Para Remover e Poder Criar Mais!.");
		format(string, sizeof(string), "Estado: Um prego foi bem plantado por %s.", PlayerName(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pCargo] >= 5 && IsACop(i))
					{
						SendClientMessage(i, COLOR_YELLOW, "Você pode remover todos os pregos usando /rprall");
					}
				}
			}
		}
		return true;
	}
	//colocar emprego aki
  	if(strcmp(cmd, "/plantarbarraca", true)==0 || strcmp(cmd, "/pbarraca", true)==0)
	{
		if (PlayerInfo[playerid][pEmprego] != 9) return SendClientMessage(playerid, COLOR_GREY, "Você não é Mendigo!");
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
		   SendClientMessage(playerid,COLOR_YELLOW," Você não pode plantar barracas na cadeia!");
		   return true;
	    }
		if (PlayerInfo[playerid][pBarraca] != 0) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar uma barraca por vez, /rbarraca - para remover sua barraca.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		PlayerInfo[playerid][pBarraca] = CreateObject(1457, X, Y, Z, 0.0, 0.0, A+180);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Barraquinha ~r~Criada", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Barraca Implantada... Use /rbarraca para remover e poder criar em outro lugar!.");
		SendClientMessage(playerid, COLOR_YELLOW, "Agora você pode trafegar ou dormir em sua barraca");
		return true;
	}
	if(strcmp(cmd, "/removerbarraca", true)==0 || strcmp(cmd, "/rbarraca", true)==0)
	{
		if (PlayerInfo[playerid][pEmprego] != 9)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não é um Mendigo !");
			return true;
		}
		if (PlayerInfo[playerid][pBarraca] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não criou nenhuma barraca!");
			return true;
		}
		RemoveBarraca(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Barracas removidas com sucesso.");
		return true;
	}
	if(strcmp(cmd, "/bloqueio", true)==0 || strcmp(cmd, "/bq", true)==0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
		{
		SendClientMessage(playerid,COLOR_YELLOW," Você não pode usar esse comando na cadeia!");
		return true;
		}
		if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
		 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
		if (pRoadCones[playerid] != 0) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar 1 Bloqueio por vez, /rbq - para remover seu bloqueio.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		pRoadCones[playerid] = CreateObject(4526, X, Y, Z+1, 0.0, 0.0, A+110);
		SetPlayerPos(playerid, X, Y, Z+1);
		GameTextForPlayer(playerid, "~w~Bloqueio ~r~Criado", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Bloqueio Implantado... Use /rbq Para Remover e Poder Criar Mais!.");
		format(string, sizeof(string), "Estado: Um Bloqueio foi posto por %s.", PlayerName(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
					if (PlayerInfo[i][pCargo] >= 5 && IsACop(i))
					{
						SendClientMessage(i, COLOR_YELLOW, "Você pode remover todos os Bloqueios usando /rbqall");
					}
				}
			}
		}
		return true;
	}
	if(strcmp(cmd, "/removerbloqueio", true)==0 || strcmp(cmd, "/rbq", true)==0)
	{
	if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
 	&& PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
 	{
		if (pRoadCones[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não criou nenhum bloqueio Bloqueio!");
			return true;
		}
		SendClientMessage(playerid, COLOR_GREY, "Você retirou o seu Bloqueio!");
		RemoveRoadCones(playerid);
		format(string, sizeof(string), "Estado: %s removeu seu bloqueio.", PlayerName(playerid));
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(IsACop(i))
				{
					SendClientMessage(i, TEAM_BLUE_COLOR, string);
				}
			}
		}
		}
	return true;
	}
  	if(strcmp(cmd, "/removerbloqueioall", true)==0 || strcmp(cmd, "/rbqall", true)==0)
	{
	if (PlayerInfo[playerid][pMembro] != 1 && PlayerInfo[playerid][pLider] != 1 && PlayerInfo[playerid][pMembro] != 2 && PlayerInfo[playerid][pLider] != 2 && PlayerInfo[playerid][pMembro] != 3 && PlayerInfo[playerid][pLider] != 3 && PlayerInfo[playerid][pMembro] != 11 && PlayerInfo[playerid][pLider] != 11
		 && PlayerInfo[playerid][pMembro] != 16 && PlayerInfo[playerid][pLider] != 16 && PlayerInfo[playerid][pMembro] != 24 && PlayerInfo[playerid][pLider] != 24 && PlayerInfo[playerid][pMembro] != 26 && PlayerInfo[playerid][pLider] != 26) return SendClientMessage(playerid, COLOR_GREY, "Você não é um oficial !");
	{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
			    if(IsPlayerConnected(i))
			    {
					if(pRoadCones[i] != 0)
					{
						RemoveRoadCones(i);
					}
				}
			}
			format(string, sizeof(string), "Estado: Todos os Bloqueios foram retirados por: %s.", PlayerName(playerid));
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(IsACop(i))
					{
						SendClientMessage(i, TEAM_BLUE_COLOR, string);
					}
				}
			}
}
return true;
}
	if(strcmp(cmd, "/paredao", true)==0 || strcmp(cmd, "/paredaoadm", true)==0)
	{
		if(PlayerInfo[playerid][pJailed] != 0)
    	{
	   		SendClientMessage(playerid,COLOR_YELLOW," Você não pode colocar paredao na cadeia!");
	  		return true;
	    }
     if(admtrampando[playerid] < 1 && PlayerInfo[playerid][pAdmin] != DONO)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Você não está trabalhando! (/trabalhar)");
			return true;
		}
		if (PlayerInfo[playerid][pAdmin] == 0) return SendClientMessage(playerid, COLOR_GREY, "Você não é Admin!");
		if (PlayerInfo[playerid][pParedao] != 0) return SendClientMessage(playerid, COLOR_GREY, "Você só pode implantar 1 paredao de cada vez, /rparedao - para remover seu bloqueio.");
		new Float:X, Float:Y, Float:Z, Float:A;
		GetPlayerPos(playerid, X, Y, Z);
		GetPlayerFacingAngle(playerid, A);
		PlayerInfo[playerid][pParedao] = CreateObject(972, X, Y, Z-2, 0.0, 0.0, A+90);
		SetPlayerPos(playerid, X, Y, Z+4);
		GameTextForPlayer(playerid, "~w~Paredao ~r~Criado", 5000, 5);
		SendClientMessage(playerid, COLOR_GREEN, "Paredão Implantado... Use /rparedao Para Remover e Poder Criar Mais!.");
		format(string, sizeof(string), "AdmAviso: Um Paredão foi posto por %s.", PlayerName(playerid));
		ABroadCast(COLOR_YELLOW, string, 1);
		return true;
	}
	if(strcmp(cmd, "/removerparedao", true)==0 || strcmp(cmd, "/rparedao", true)==0)
	{
		if (PlayerInfo[playerid][pAdmin] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não é um Admin!");
			return true;
		}
		if (PlayerInfo[playerid][pParedao] == 0)
		{
			SendClientMessage(playerid, COLOR_GREY, "Você não criou nenhum paredão!");
			return true;
		}
		RemoveParedao(playerid);
		SendClientMessage(playerid, COLOR_GREEN, "Paredão removido com sucesso.");
		return true;
	}
	if(strcmp(cmd, "/removerparedaotodos", true)==0 || strcmp(cmd, "/rpall", true)==0)
	{
		if (PlayerInfo[playerid][pAdmin] >= 3)
		{
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
			    if(IsPlayerConnected(i))
			    {
				if(PlayerInfo[i][pParedao] != 0)
				{
					RemoveParedao(i);
				}
				}
			}
			format(string, sizeof(string), "Estado: Todos os Paredões foram retirados por: %s.", PlayerName(playerid));
			ABroadCast(TEAM_BLUE_COLOR, string, 1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREY, "Você precisa ser admin nivel 3 + pra remover os paredões!");
		}
		return true;
	}

	//---------------------Lista Animações------------------------------------
	new animationplayed;
	if(strcmp(cmdtext, "/animlist", true) == 0) {
SendClientMessage(playerid, COLOR_GRAD4,">/animped - ./dance - ./handsup - ");
SendClientMessage(playerid, COLOR_GRAD4,"/animairport /animat /animbar /animball /animfire /animbeach");
SendClientMessage(playerid, COLOR_GRAD4,">/animbp /animinf /animbiked /animbh /animfood /animbikelp /animms /animbikes /animcar");
SendClientMessage(playerid, COLOR_GRAD4,">/animbikev /animbmx /animbikedbz /animchase /animbox /animbomber /animbsp /animcamera ");
SendClientMessage(playerid, COLOR_GRAD4,">/animgym /animpara /animgangs /animlookers /animcarchat /animcasino /animbuddy /animbus");
SendClientMessage(playerid, COLOR_GRAD4,">/animcarry /animintshop /animjst /animkart /animkissing /animknife /animlapdan /animdend");
SendClientMessage(playerid, COLOR_GRAD4,">/animmedic /animmtb /animmusc /animotb /animnevada /animpark /animsaw /animchoppa");
SendClientMessage(playerid, COLOR_GRAD4,">/animclothes /animcoach /animcolt /animcopa /animcod /animcrack");
SendClientMessage(playerid, COLOR_GRAD4,">/animlist2 - Para a lista 2.");
return 1;
}
if(strcmp(cmdtext, "/animlist2", true) == 0) {
SendClientMessage(playerid, COLOR_GRAD4,">lista 2 dos anim:");
SendClientMessage(playerid, COLOR_GRAD4,">/animcrib /animjump /animdealer /animdildo /animdodge /animdozer /animdrivebys /animfat");
SendClientMessage(playerid, COLOR_GRAD4,">/animfightb /animfightc /animfightd /animfighte /animfinale /animfinale2 /animflamef");
SendClientMessage(playerid, COLOR_GRAD4,">/animflowers /animghands /animfw /animghetto /animgog /animgraffity /animgreya /animgren");
SendClientMessage(playerid, COLOR_GRAD4,">/animhaircut /animheist /animinthouse /animintoffice /animplayerdbf /animplayidles /animpolice");
SendClientMessage(playerid, COLOR_GRAD4,">/animpool /animpoor /animpython /animquad /animquadbz /animrapping /animrifle /animriot /animrobbank ");
SendClientMessage(playerid, COLOR_GRAD4,">/animrocket /animrustler /animryder /animscrat /animshamal /animshop /animskate /animshotgun");
SendClientMessage(playerid, COLOR_GRAD4,">/animvortex /animtec /animtrain /animsil /animtattoo /animsmoking /animsniper /animspray /animstrip");
SendClientMessage(playerid, COLOR_GRAD4,">/animbath /animswat /animsweet /animswim /animsword /animtank /animtruck /animuzi /animvan /animvending");
SendClientMessage(playerid, COLOR_GRAD4,">/animway /animweap");
return 1;
}
if(strcmp(cmd, "/animbar", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbar [1-12]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbar [1-12]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BAR","Barcustom_get",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"BAR","Barcustom_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"BAR","Barcustom_order",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"BAR","Barserve_bottle",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"BAR","Barserve_give",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"BAR","Barserve_glass",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"BAR","Barserve_in",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"BAR","Barserve_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"BAR","Barserve_order",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"BAR","dnk_stndM_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"BAR","BARman_idle",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animball", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animball [1-11]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 11) {
SendClientMessage(playerid,0xFF0000FF,">USE /animball [1-11]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BASEBALL","Bat_1",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"BASEBALL","Bat_2",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"BASEBALL","Bat_4",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"BASEBALL","Bat_block",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"BASEBALL","Bat_Hit_1",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"BASEBALL","Bat_Hit_2",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"BASEBALL","Bat_Hit_3",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"BASEBALL","Bat_IDLE",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"BASEBALL","Bat_M",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"BASEBALL","BAT_PART",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfire", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfire [1-13]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 13) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfire [1-13]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BD_FIRE","BD_Fire1",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"BD_FIRE","BD_Fire2",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"BD_FIRE","BD_Fire3",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"BD_FIRE","BD_GF_Wave",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"BD_FIRE","BD_Panic_01",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"BD_FIRE","BD_Panic_02",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"BD_FIRE","BD_Panic_03",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"BD_FIRE","BD_Panic_04",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"BD_FIRE","BD_Panic_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"BD_FIRE","M_smklean_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"BD_FIRE","Playa_Kiss_03",4.1,0,1,1,1,1);
} else if(animationplayed == 13) {
ApplyAnimation(playerid,"BD_FIRE","wash_up",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbeach", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbeach [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbeach [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BEACH","bather",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"BEACH","BD_Fire3",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"BEACH","ParkSit_W_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"BEACH","SitnWait_loop_W",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animinf", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animinf [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animinf [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BF_injection","BF_getin_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"BF_injection","BF_getin_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"BF_injection","BF_getout_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"BF_injection","BF_getout_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbiked", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbiked [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbiked [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKED","BIKEd_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKED","BIKEd_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKED","BIKEd_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKED","BIKEd_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKED","BIKEd_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKED","BIKEd_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKED","BIKEd_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKED","BIKEd_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKED","BIKEd_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BIKED","BIKEd_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BIKED","BIKEd_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BIKED","BIKEd_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BIKED","BIKEd_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BIKED","BIKEd_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BIKED","BIKEd_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BIKED","BIKEd_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BIKED","BIKEd_shuffle",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BIKED","BIKEd_Still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbp", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbp [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbp [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"benchpress","gym_bp_celebrate",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"benchpress","gym_bp_down",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"benchpress","gym_bp_up_A",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"benchpress","gym_bp_up_smooth",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbh", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbh [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbh [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKEH","BIKEh_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKEH","BIKEh_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKEH","BIKEh_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BIKEH","BIKEh_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BIKEH","BIKEh_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BIKEH","BIKEh_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BIKEH","BIKEh_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BIKEH","BIKEh_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BIKEH","BIKEh_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animms", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animms [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animms [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKEH","BIKEh_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKEH","BIKEh_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKEH","BIKEh_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKEH","BIKEh_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKEH","BIKEh_getoffRHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfood", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfood [1-33]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 33) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfood [1-33]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FOOD","EAT_Burger",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"FOOD","EAT_Chicken",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"FOOD","EAT_Pizza",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"FOOD","EAT_Vomit_P",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"FOOD","EAT_Vomit_SK",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"FOOD","FF_Dam_Bkw",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"FOOD","FF_Dam_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"FOOD","FF_Dam_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"FOOD","FF_Dam_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"FOOD","FF_Die_Bkw",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"FOOD","FF_Die_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"FOOD","FF_Die_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"FOOD","FF_Die_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Eat1",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Eat2",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Eat3",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"FOOD","FF_Sit_In",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"FOOD","FF_Sit_In_L",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"FOOD","FF_Sit_In_R",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Look",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Out_180",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Out_L_180",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"FOOD","FF_Sit_Out_R_180",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"FOOD","SHP_Thank",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_In",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_In",4.1,0,1,1,1,1);
}else if(animationplayed == 29) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 30) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Lift_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 31) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 32) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Pose",4.1,0,1,1,1,1);
}else if(animationplayed == 33) {
ApplyAnimation(playerid,"FOOD","SHP_Tray_Return",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animms2", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animms2 [1-41]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 41) {
SendClientMessage(playerid,0xFF0000FF,">USE /animms2 [1-41]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"MISC","bitchslap",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"MISC","BMX_celebrate",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"MISC","BMX_comeon",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"MISC","bmx_idleloop_01",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"MISC","bmx_idleloop_02",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"MISC","bmx_talkleft_in",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"MISC","bmx_talkleft_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"MISC","bmx_talkleft_out",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"MISC","bmx_talkright_in",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"MISC","bmx_talkright_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"MISC","bmx_talkright_out",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"MISC","bng_wndw",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"MISC","bng_wndw_02",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"MISC","Case_pickup",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"MISC","door_jet",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"MISC","GRAB_L",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"MISC","GRAB_R",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"MISC","Hiker_Pose",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"MISC","Hiker_Pose_L",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"MISC","Idle_Chat_02",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"MISC","KAT_Throw_K",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"MISC","KAT_Throw_O",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"MISC","KAT_Throw_P",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"MISC","PASS_Rifle_O",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"MISC","PASS_Rifle_Ped",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"MISC","PASS_Rifle_Ply",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"MISC","pickup_box",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"MISC","Plane_door",4.1,0,1,1,1,1);
}else if(animationplayed == 29) {
ApplyAnimation(playerid,"MISC","Plane_exit",4.1,0,1,1,1,1);
}else if(animationplayed == 30) {
ApplyAnimation(playerid,"MISC","Plane_hijack",4.1,0,1,1,1,1);
}else if(animationplayed == 31) {
ApplyAnimation(playerid,"MISC","Plunger_01",4.1,0,1,1,1,1);
}else if(animationplayed == 32) {
ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 33) {
ApplyAnimation(playerid,"MISC","plyr_shkhead",4.1,0,1,1,1,1);
}else if(animationplayed == 34) {
ApplyAnimation(playerid,"MISC","Run_Dive",4.1,0,1,1,1,1);
}else if(animationplayed == 35) {
ApplyAnimation(playerid,"MISC","Scratchballs_01",4.1,0,1,1,1,1);
}else if(animationplayed == 36) {
ApplyAnimation(playerid,"MISC","SEAT_LR",4.1,0,1,1,1,1);
}else if(animationplayed == 37) {
ApplyAnimation(playerid,"MISC","Seat_talk_01",4.1,0,1,1,1,1);
}else if(animationplayed == 38) {
ApplyAnimation(playerid,"MISC","Seat_talk_02",4.1,0,1,1,1,1);
}else if(animationplayed == 39) {
ApplyAnimation(playerid,"MISC","SEAT_watch",4.1,0,1,1,1,1);
}else if(animationplayed == 40) {
ApplyAnimation(playerid,"MISC","smalplane_door",4.1,0,1,1,1,1);
}else if(animationplayed == 41) {
ApplyAnimation(playerid,"MISC","smlplane_door",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbikelp", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikelp [1-9]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 9) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikelp [1-9]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKELEAP","bk_blnce_in",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKELEAP","bk_blnce_out",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKELEAP","bk_jmp",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKELEAP","bk_rdy_in",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKELEAP","bk_rdy_out",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKELEAP","struggle_cesar",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKELEAP","struggle_driver",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKELEAP","truck_driver",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BIKELEAP","truck_getin",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbikes", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikes [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikes [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKES","BIKEs_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKES","BIKEs_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKES","BIKEs_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKES","BIKEs_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKES","BIKEs_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKES","BIKEs_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKES","BIKEs_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKES","BIKEs_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BIKES","BIKEs_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BIKES","BIKEs_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BIKES","BIKEs_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BIKES","BIKEs_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BIKES","BIKEs_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BIKES","BIKEs_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BIKES","BIKEs_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BIKES","BIKEs_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BIKES","BIKEs_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BIKES","BIKEs_Still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbikev", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikev [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikev [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKEV","BIKEv_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKEV","BIKEv_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKEV","BIKEv_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKEV","BIKEv_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKEV","BIKEv_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKEV","BIKEv_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BIKEV","BIKEv_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BIKEV","BIKEv_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BIKEV","BIKEv_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BIKEV","BIKEv_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BIKEV","BIKEv_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BIKEV","BIKEv_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BIKEV","BIKEv_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BIKEV","BIKEv_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BIKEV","BIKEv_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BIKEV","BIKEv_Still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbmx", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbmx [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbmx [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BMX","BMX_back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BMX","BMX_bunnyhop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BMX","BMX_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BMX","BMX_driveby_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BMX","BMX_driveby_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BMX","BMX_fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BMX","BMX_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BMX","BMX_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BMX","BMX_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BMX","BMX_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BMX","BMX_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BMX","BMX_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BMX","BMX_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BMX","BMX_pedal",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BMX","BMX_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BMX","BMX_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BMX","BMX_sprint",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BMX","BMX_still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbikedbz", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikedbz [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbikedbz [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKE_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animchase", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animchase [1-25]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 25) {
SendClientMessage(playerid,0xFF0000FF,">USE /animchase [1-25]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"MD_CHASE","Carhit_Hangon",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"MD_CHASE","Carhit_Tumble",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"MD_CHASE","donutdrop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L1",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L2",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_L3",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R1",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R2",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"MD_CHASE","Fen_Choppa_R3",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"MD_CHASE","Hangon_Stun_Turn",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_2_HANG",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_BL",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Jmp_F",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_BL",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_BL",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Die_F",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_F",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Lnd_Roll_F",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Punch_F",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"MD_CHASE","MD_BIKE_Shot_F",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Lnd_Roll",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"MD_CHASE","MD_HANG_Loop",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbox", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbox [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbox [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BOX","boxhipin",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BOX","boxhipup",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BOX","boxshdwn",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BOX","boxshup",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BOX","bxhipwlk",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BOX","bxhwlki",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BOX","bxshwlk",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BOX","bxshwlki",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BOX","bxwlko",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BOX","catch_box",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbomber", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbomber [1-6]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 6) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbomber [1-6]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BOMBER","BOM_Plant",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BOMBER","BOM_Plant_2Idle",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_In",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BOMBER","BOM_Plant_Crouch_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BOMBER","BOM_Plant_In",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BOMBER","BOM_Plant_Loop",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbsp", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbsp [1-41]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 41) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbsp [1-41]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_def_jump_shot",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepL",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_def_stepR",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Gli_O",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnch_O",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_Lnd",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk_O",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_idle",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_idle2_O",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop_O",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_idle_O",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Cancel_0",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_End",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot_O",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_Net_Dnk_O",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup_O",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_react_miss",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_react_score",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,0,1,1,1,1);
}else if(animationplayed == 29) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_run_O",4.1,0,1,1,1,1);
}else if(animationplayed == 30) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L",4.1,0,1,1,1,1);
}else if(animationplayed == 31) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_L_O",4.1,0,1,1,1,1);
}else if(animationplayed == 32) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R",4.1,0,1,1,1,1);
}else if(animationplayed == 33) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_SkidStop_R_O",4.1,0,1,1,1,1);
}else if(animationplayed == 34) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,0,1,1,1,1);
}else if(animationplayed == 35) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L",4.1,0,1,1,1,1);
}else if(animationplayed == 36) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_L_O",4.1,0,1,1,1,1);
}else if(animationplayed == 37) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R",4.1,0,1,1,1,1);
}else if(animationplayed == 38) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_WalkStop_R_O",4.1,0,1,1,1,1);
}else if(animationplayed == 39) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_O",4.1,0,1,1,1,1);
}else if(animationplayed == 40) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start",4.1,0,1,1,1,1);
}else if(animationplayed == 41) {
ApplyAnimation(playerid,"BSKTBALL","BBALL_walk_start_O",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcamera", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcamera [1-14]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 14) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcamera [1-14]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CAMERA","camcrch_cmon",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CAMERA","camcrch_idleloop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CAMERA","camcrch_stay",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CAMERA","camcrch_to_camstnd",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CAMERA","camstnd_cmon",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CAMERA","camstnd_idleloop",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CAMERA","camstnd_lkabt",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"CAMERA","camstnd_to_camcrch",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"CAMERA","piccrch_in",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"CAMERA","piccrch_out",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"CAMERA","piccrch_take",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"CAMERA","picstnd_in",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"CAMERA","picstnd_out",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"CAMERA","picstnd_take",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animgym", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgym [1-24]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 24) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgym [1-24]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GYMNASIUM","GYMshadowbox",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_celebrate",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_fast",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_faster",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_getoff",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_geton",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_pedal",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"GYMNASIUM","gym_bike_still",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"GYMNASIUM","gym_jog_falloff",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_celebrate",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_falloff",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_getoff",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_geton",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_jog",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_sprint",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_tired",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"GYMNASIUM","gym_tread_walk",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"GYMNASIUM","gym_walk_falloff",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"GYMNASIUM","Pedals_fast",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"GYMNASIUM","Pedals_med",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"GYMNASIUM","Pedals_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"GYMNASIUM","Pedals_still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animpara", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpara [1-22]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 22) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpara [1-22]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_Accel",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"PARACHUTE","FALL_skyDive_DIE",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_L",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"PARACHUTE","FALL_SkyDive_R",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"PARACHUTE","PARA_decel",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"PARACHUTE","PARA_decel_O",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"PARACHUTE","PARA_float",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"PARACHUTE","PARA_float_O",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Land",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Land_O",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Land_Water_O",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"PARACHUTE","PARA_open",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"PARACHUTE","PARA_open_O",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Land_O",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_Loop_O",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"PARACHUTE","PARA_Rip_O",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"PARACHUTE","PARA_steerL",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"PARACHUTE","PARA_steerL_O",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"PARACHUTE","PARA_steerR",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"PARACHUTE","PARA_steerR_O",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animgangs", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgangs [1-22]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 22) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgangs [1-22]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GANGS","DEALER_DEAL",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"GANGS","DEALER_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"GANGS","drnkbr_prtl",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"GANGS","drnkbr_prtl_F",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"GANGS","DRUGS_BUY",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"GANGS","leanIN",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"GANGS","leanOUT",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkCt",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
}else if(animationplayed == 29) {
ApplyAnimation(playerid,"GANGS","shake_cara",4.1,0,1,1,1,1);
}else if(animationplayed == 30) {
ApplyAnimation(playerid,"GANGS","shake_carK",4.1,0,1,1,1,1);
}else if(animationplayed == 31) {
ApplyAnimation(playerid,"GANGS","shake_carSH",4.1,0,1,1,1,1);
}else if(animationplayed == 32) {
ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,1,1,1,1);
}else if(animationplayed == 33) {
ApplyAnimation(playerid,"GANGS","smkcig_prtl_F",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animlowrider", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animlowrider [1-39]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 39) {
SendClientMessage(playerid,0xFF0000FF,">USE /animlowrider [1-39]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"LOWRIDER","F_smklean_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_bdbnce",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_hair",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_hurry",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_idleloop",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_idle_to_l0",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_bnce",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l0_to_l1",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l12_to_l0",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_bnce",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l1_to_l2",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_bnce",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l2_to_l3",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l345_to_l1",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_bnce",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l3_to_l4",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_bnce",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l4_to_l5",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_bnce",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"LOWRIDER","lrgirl_l5_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"LOWRIDER","M_smklean_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"LOWRIDER","M_smkstnd_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkB",4.1,0,1,1,1,1);
}else if(animationplayed == 29) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkC",4.1,0,1,1,1,1);
}else if(animationplayed == 30) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkD",4.1,0,1,1,1,1);
}else if(animationplayed == 31) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkE",4.1,0,1,1,1,1);
}else if(animationplayed == 32) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkF",4.1,0,1,1,1,1);
}else if(animationplayed == 33) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkG",4.1,0,1,1,1,1);
}else if(animationplayed == 34) {
ApplyAnimation(playerid,"LOWRIDER","prtial_gngtlkH",4.1,0,1,1,1,1);
}else if(animationplayed == 35) {
ApplyAnimation(playerid,"LOWRIDER","RAP_A_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 36) {
ApplyAnimation(playerid,"LOWRIDER","RAP_B_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 37) {
ApplyAnimation(playerid,"LOWRIDER","RAP_C_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 38) {
ApplyAnimation(playerid,"LOWRIDER","Sit_relaxed",4.1,0,1,1,1,1);
}else if(animationplayed == 39) {
ApplyAnimation(playerid,"LOWRIDER","Tap_hand",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animlookers", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animlookers [1-25]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 25) {
SendClientMessage(playerid,0xFF0000FF,">USE /animlookers [1-25]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"ON_LOOKERS","lkaround_in",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"ON_LOOKERS","lkaround_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"ON_LOOKERS","lkaround_out",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"ON_LOOKERS","lkup_in",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"ON_LOOKERS","lkup_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"ON_LOOKERS","lkup_out",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"ON_LOOKERS","lkup_point",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_cower",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_hide",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_in",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_out",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_point",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"ON_LOOKERS","panic_shout",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"ON_LOOKERS","Pointup_in",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"ON_LOOKERS","Pointup_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"ON_LOOKERS","Pointup_out",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"ON_LOOKERS","Pointup_shout",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"ON_LOOKERS","point_in",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"ON_LOOKERS","point_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"ON_LOOKERS","point_out",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"ON_LOOKERS","shout_01",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"ON_LOOKERS","shout_02",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"ON_LOOKERS","shout_in",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"ON_LOOKERS","shout_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"ON_LOOKERS","shout_out",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"ON_LOOKERS","wave_in",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"ON_LOOKERS","wave_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"ON_LOOKERS","wave_out",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcarchat", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcarchat [1-20]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 20) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcarchat [1-20]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CAR_CHAT","carfone_in",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CAR_CHAT","carfone_loopA_to_B",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CAR_CHAT","carfone_loopB_to_A",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CAR_CHAT","carfone_out",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_BR",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FL",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc1_FR",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc2_FL",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_BR",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FL",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc3_FR",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BL",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_BR",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FL",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"CAR_CHAT","CAR_Sc4_FR",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"CAR_CHAT","car_talkm_in",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"CAR_CHAT","car_talkm_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"CAR_CHAT","car_talkm_out",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcasino", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcasino [1-23]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 23) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcasino [1-23]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CASINO","cards_in",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CASINO","cards_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CASINO","cards_lose",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CASINO","cards_out",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CASINO","cards_pick_01",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CASINO","cards_pick_02",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CASINO","cards_raise",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"CASINO","cards_win",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"CASINO","manwinb",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"CASINO","manwind",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"CASINO","Roulette_bet",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"CASINO","Roulette_in",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"CASINO","Roulette_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"CASINO","Roulette_lose",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"CASINO","Roulette_out",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"CASINO","Roulette_win",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"CASINO","Slot_bet_02",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"CASINO","Slot_in",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"CASINO","Slot_lose_out",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"CASINO","Slot_Plyr",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"CASINO","Slot_wait",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"CASINO","Slot_win_out",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"CASINO","wof",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbuddy", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbuddy [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbuddy [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BUDDY","buddy_crouchfire",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BUDDY","buddy_crouchreload",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BUDDY","buddy_fire",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BUDDY","buddy_fire_poor",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BUDDY","buddy_reload",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbus", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbus [1-9]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 9) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbus [1-9]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BUS","BUS_close",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BUS","BUS_getin_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BUS","BUS_getin_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BUS","BUS_getout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BUS","BUS_getout_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BUS","BUS_jacked_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BUS","BUS_open",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BUS","BUS_open_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BUS","BUS_pullout_LHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcar", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcar [1-11]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 11) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcar [1-11]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CAR","Fixn_Car_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CAR","Fixn_Car_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CAR","flag_drop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CAR","Sit_relaxed",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CAR","Tap_hand",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CAR","Tyd2car_bump",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CAR","Tyd2car_high",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"CAR","Tyd2car_low",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"CAR","Tyd2car_med",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"CAR","Tyd2car_TurnL",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"CAR","Tyd2car_TurnR",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcarry", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcarry [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcarry [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CARRY","crry_prtial",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CARRY","liftup",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CARRY","liftup05",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CARRY","liftup105",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CARRY","putdwn",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CARRY","putdwn05",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CARRY","putdwn105",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animintshop", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animintshop [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animintshop [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"INT_SHOP","shop_cashier",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"INT_SHOP","shop_in",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"INT_SHOP","shop_lookA",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"INT_SHOP","shop_lookB",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"INT_SHOP","shop_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"INT_SHOP","shop_out",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"INT_SHOP","shop_pay",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"INT_SHOP","shop_shelf",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animjst", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animjst [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animjst [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"JST_BUISNESS","girl_01",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"JST_BUISNESS","girl_02",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"JST_BUISNESS","player_01",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"JST_BUISNESS","smoke_01",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animkart", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animkart [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animkart [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"KART","KART_getin_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"KART","KART_getin_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"KART","KART_getout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"KART","KART_getout_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animkissing", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animkissing [1-14]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 14) {
SendClientMessage(playerid,0xFF0000FF,">USE /animkissing [1-14]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"KISSING","BD_GF_Wave",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"KISSING","gfwave2",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"KISSING","GF_CarArgue_01",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"KISSING","GF_CarArgue_02",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"KISSING","GF_CarSpot",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"KISSING","GF_StreetArgue_01",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"KISSING","GF_StreetArgue_02",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"KISSING","gift_give",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_01",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_02",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"KISSING","Grlfrd_Kiss_03",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"KISSING","Playa_Kiss_01",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"KISSING","Playa_Kiss_02",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"KISSING","Playa_Kiss_03",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animknife", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animknife [1-14]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 14) {
SendClientMessage(playerid,0xFF0000FF,">USE /animknife [1-14]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Damage",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"KNIFE","KILL_Knife_Ped_Die",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"KNIFE","KILL_Knife_Player",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"KNIFE","KILL_Partial",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"KNIFE","knife_2",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"KNIFE","knife_4",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"KNIFE","Knife_G",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"KNIFE","knife_hit_1",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"KNIFE","knife_hit_2",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"KNIFE","knife_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"KNIFE","knife_hit_3",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"KNIFE","knife_part",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"KNIFE","WEAPON_knifeidle",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animlapdan", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animlapdan [1-6]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 6) {
SendClientMessage(playerid,0xFF0000FF,">USE /animlapdan [1-6]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"LAPDAN1","LAPDAN_D",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"LAPDAN1","LAPDAN_P",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"LAPDAN2","LAPDAN_D",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"LAPDAN2","LAPDAN_P",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"LAPDAN3","LAPDAN_D",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"LAPDAN3","LAPDAN_P",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdend", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdend [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdend [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"MD_END","END_SC1_PLY",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"MD_END","END_SC1_RYD",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"MD_END","END_SC1_SMO",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"MD_END","END_SC1_SWE",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"MD_END","END_SC2_PLY",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"MD_END","END_SC2_RYD",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"MD_END","END_SC2_SMO",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"MD_END","END_SC2_SWE",4.1,0,1,1,1,1);
}
return 1;
}

if(strcmp(cmd, "/animmedic", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animmedic [1]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 1) {
SendClientMessage(playerid,0xFF0000FF,">USE /animmedic [1]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"MEDIC","CPR",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animmtb", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animmtb [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animmtb [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"MTB","MTB_back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"MTB","MTB_bunnyhop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"MTB","MTB_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"MTB","MTB_driveby_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"MTB","MTB_driveby_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"MTB","MTB_fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"MTB","MTB_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"MTB","MTB_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"MTB","MTB_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"MTB","MTB_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"MTB","MTB_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"MTB","MTB_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"MTB","MTB_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"MTB","MTB_pedal",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"MTB","MTB_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"MTB","MTB_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"MTB","MTB_sprint",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"MTB","MTB_still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animmusc", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animmusc [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 17) {
SendClientMessage(playerid,0xFF0000FF,">USE /animmusc [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"MUSCULAR","MscleWalkst_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_run",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"MUSCULAR","Mscle_rckt_walkst",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"MUSCULAR","Mscle_run_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"MUSCULAR","MuscleIdle",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"MUSCULAR","MuscleIdle_rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"MUSCULAR","MuscleRun",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"MUSCULAR","MuscleRun_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"MUSCULAR","MuscleSprint",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"MUSCULAR","MuscleWalk",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"MUSCULAR","MuscleWalkstart",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"MUSCULAR","MuscleWalk_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"MUSCULAR","Musclewalk_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"MUSCULAR","Musclewalk_rocket",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animotb", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animotb [1-11]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 11) {
SendClientMessage(playerid,0xFF0000FF,">USE /animotb [1-11]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"OTB","betslp_in",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"OTB","betslp_lkabt",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"OTB","betslp_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"OTB","betslp_out",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"OTB","betslp_tnk",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"OTB","wtchrace_cmon",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"OTB","wtchrace_in",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"OTB","wtchrace_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"OTB","wtchrace_lose",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"OTB","wtchrace_out",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"OTB","wtchrace_win",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animnevada", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animnevada [1-2]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 2) {
SendClientMessage(playerid,0xFF0000FF,">USE /animnevada [1-2]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"NEVADA","NEVADA_getin",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"NEVADA","NEVADA_getout",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animpark", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpark [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpark [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PARK","Tai_Chi_in",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"PARK","Tai_Chi_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"PARK","Tai_Chi_Out",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animpaul", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpaul [1-12]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpaul [1-12]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PAULNMAC","Piss_in",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"PAULNMAC","Piss_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"PAULNMAC","Piss_out",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_A",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"PAULNMAC","PnM_Argue1_B",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_A",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"PAULNMAC","PnM_Argue2_B",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_A",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"PAULNMAC","PnM_Loop_B",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"PAULNMAC","wank_in",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"PAULNMAC","wank_out",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animsaw", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsaw [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsaw [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_1",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_2",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_3",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_G",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_1",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_2",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"CHAINSAW","CSAW_Hit_3",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"CHAINSAW","IDLE_csaw",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"CHAINSAW","WEAPON_csaw",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"CHAINSAW","WEAPON_csawlo",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animchoppa", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animchoppa [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animchoppa [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_bunnyhop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_driveby_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_pedal",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_Pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_ride",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_sprint",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"CHOPPA","CHOPPA_Still",4.1,0,1,1,1,1);
}
return 1;
}

if(strcmp(cmd, "/animclothes", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animclothes [1-13]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 13) {
SendClientMessage(playerid,0xFF0000FF,">USE /animclothes [1-13]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CLOTHES","CLO_Buy",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"CLOTHES","CLO_In",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"CLOTHES","CLO_Out",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Hat",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_In_O",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Legs",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Out_O",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Shoes",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Torso",4.1,0,1,1,1,1);
} else if(animationplayed == 13) {
ApplyAnimation(playerid,"CLOTHES","CLO_Pose_Watch",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcoach", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcoach [1-6]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 6) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcoach [1-6]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"COACH","COACH_inL",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"COACH","COACH_inR",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"COACH","COACH_opnL",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"COACH","COACH_opnR",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"COACH","COACH_outL",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"COACH","COACH_outR",4.1,0,1,1,1,1);
}
return 1;
}

if(strcmp(cmd, "/animcolt", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcolt [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcolt [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"COLT45","2guns_crouchfire",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"COLT45","colt45_crouchfire",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"COLT45","colt45_crouchreload",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"COLT45","colt45_fire",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"COLT45","colt45_fire_2hands",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"COLT45","colt45_reload",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"COLT45","sawnoff_reload",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcopa", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcopa [1-12]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcopa[1-12]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_in",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_nod",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_out",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_shake",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_in",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_nod",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_out",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_shake",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_think",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcod", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcod [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcod [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_B",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_FT",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_L",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"COP_DVBYZ","COP_Dvby_R",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcrack", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcrack[1-9]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 9) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcrack [1-9]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"CRACK","crckdeth1",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"CRACK","crckdeth2",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"CRACK","crckdeth3",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"CRACK","crckdeth4",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"CRACK","crckidle1",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"CRACK","crckidle2",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"CRACK","crckidle3",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animcrib", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcrib [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animcrib [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"CRIB","CRIB_Console_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"CRIB","CRIB_Use_Switch",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"CRIB","PED_Console_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"CRIB","PED_Console_Loose",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"CRIB","PED_Console_Win",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animjump", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animjump [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animjump [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DAM_JUMP","DAM_Dive_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"DAM_JUMP","DAM_Land",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"DAM_JUMP","DAM_Launch",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"DAM_JUMP","Jump_Roll",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"DAM_JUMP","SF_JumpWall",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdance", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdance [1-13]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 13) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdance [1-13]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DANCING","bd_clap",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"DANCING","bd_clap1",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"DANCING","dance_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"DANCING","dnce_M_a",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"DANCING","dnce_M_b",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"DANCING","dnce_M_c",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"DANCING","dnce_M_d",4.1,0,1,1,1,1);
} else if(animationplayed == 13) {
ApplyAnimation(playerid,"DANCING","dnce_M_e",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdealer", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdealer [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdealer [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DEALER","DEALER_DEAL",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"DEALER","DEALER_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"DEALER","DEALER_IDLE_01",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"DEALER","DEALER_IDLE_02",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"DEALER","DEALER_IDLE_03",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"DEALER","DRUGS_BUY",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"DEALER","shop_pay",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdildo", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdildo [1-9]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 9) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdildo [1-9]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DILDO","DILDO_1",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"DILDO","DILDO_2",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"DILDO","DILDO_3",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"DILDO","DILDO_block",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"DILDO","DILDO_G",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"DILDO","DILDO_Hit_1",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"DILDO","DILDO_Hit_2",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"DILDO","DILDO_Hit_3",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"DILDO","DILDO_IDLE",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdodge", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdodge [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdodge [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DODGE","Cover_Dive_01",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"DODGE","Cover_Dive_02",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"DODGE","Crushed",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"DODGE","Crush_Jump",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdozer", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdozer [1-9]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 9) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdozer [1-9]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DOZER","DOZER_Align_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"DOZER","DOZER_Align_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"DOZER","DOZER_getin_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"DOZER","DOZER_getin_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"DOZER","DOZER_getout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"DOZER","DOZER_getout_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"DOZER","DOZER_Jacked_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"DOZER","DOZER_Jacked_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"DOZER","DOZER_pullout_LHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animdrivebys", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdrivebys [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animdrivebys [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Bwd",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyLHS_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Bwd",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyRHS_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"DRIVEBYS","Gang_DrivebyTop_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfat", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfat [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 17) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfat [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FAT","FatIdle",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"FAT","FatIdle_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"FAT","FatIdle_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"FAT","FatIdle_Rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"FAT","FatRun",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"FAT","FatRun_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"FAT","FatRun_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"FAT","FatRun_Rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"FAT","FatSprint",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"FAT","FatWalk",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"FAT","FatWalkstart",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"FAT","FatWalkstart_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"FAT","FatWalkSt_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"FAT","FatWalkSt_Rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"FAT","FatWalk_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"FAT","FatWalk_Csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"FAT","FatWalk_Rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"FAT","IDLE_tired",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfightb", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfightb [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfightb [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"FIGHT_B","FightB_2",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"FIGHT_B","FightB_3",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"FIGHT_B","FightB_block",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"FIGHT_B","FightB_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"FIGHT_B","FightB_M",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"FIGHT_B","HitB_1",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"FIGHT_B","HitB_2",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"FIGHT_B","HitB_3",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfightc", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfightc [1-12]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfightc [1-12]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FIGHT_C","FightC_1",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"FIGHT_C","FightC_2",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"FIGHT_C","FightC_3",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"FIGHT_C","FightC_block",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"FIGHT_C","FightC_blocking",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"FIGHT_C","FightC_G",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"FIGHT_C","FightC_IDLE",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"FIGHT_C","FightC_Spar",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"FIGHT_C","HitC_1",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"FIGHT_C","HitC_2",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"FIGHT_C","HitC_3",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfightd", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfightd [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfightd [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FIGHT_D","FightD_1",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"FIGHT_D","FightD_2",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"FIGHT_D","FightD_block",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"FIGHT_D","FightD_M",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"FIGHT_D","HitD_1",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"FIGHT_D","HitD_2",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"FIGHT_D","HitD_3",4.1,0,1,1,1,1);
}
return 1;
}

if(strcmp(cmd, "/animfighte", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfighte [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfighte [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FIGHT_E","FightKick",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"FIGHT_E","FightKick_B",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"FIGHT_E","Hit_fightkick_B",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfinale", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfinale [1-15]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 15) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfinale [1-15]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FINALE","FIN_Climb_In",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"FINALE","FIN_Cop1_ClimbOut2",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"FINALE","FIN_Cop1_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"FINALE","FIN_Cop1_Stomp",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"FINALE","FIN_Hang_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"FINALE","FIN_Hang_R",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"FINALE","FIN_Hang_L",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"FINALE","FIN_Jump_On",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"FINALE","FIN_Land_Die",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"FINALE","FIN_LegsUp",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"FINALE","FIN_LegsUp_L",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"FINALE","FIN_LegsUp_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"FINALE","FIN_LegsUp_R",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"FINALE","FIN_Let_Go",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfinale2", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfinale2 [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfinale2 [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FINALE2","FIN_Cop1_ClimbOut",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Fall",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Shot",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"FINALE2","FIN_Cop1_Swing",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"FINALE2","FIN_Cop2_ClimbOut",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"FINALE2","FIN_Switch_P",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"FINALE2","FIN_Switch_S",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animflamef", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animflamef [1-1]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 1) {
SendClientMessage(playerid,0xFF0000FF,">USE /animflamef [1-1]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"FLAME","FLAME_fire",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animflowers", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animflowers [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animflowers [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"Flowers","Flower_attack",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"Flowers","Flower_attack_M",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"Flowers","Flower_Hit",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animghands", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animghands [1-20]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 20) {
SendClientMessage(playerid,0xFF0000FF,">USE /animghands [1-20]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GHANDS","gsign1",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"GHANDS","gsign2",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"GHANDS","gsign3",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"GHANDS","gsign4",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"GHANDS","gsign5",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"GHANDS","LHGsign1",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"GHANDS","LHGsign2",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"GHANDS","LHGsign3",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"GHANDS","LHGsign4",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"GHANDS","LHGsign5",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"GHANDS","RHGsign1",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"GHANDS","RHGsign2",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"GHANDS","RHGsign3",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"GHANDS","RHGsign4",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"GHANDS","RHGsign5",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animfw", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfw [1-9]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 9) {
SendClientMessage(playerid,0xFF0000FF,">USE /animfw [1-9]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"Freeweights","gym_barbell",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"Freeweights","gym_free_A",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"Freeweights","gym_free_B",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"Freeweights","gym_free_celebrate",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"Freeweights","gym_free_down",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"Freeweights","gym_free_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"Freeweights","gym_free_pickup",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"Freeweights","gym_free_putdown",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"Freeweights","gym_free_up_smooth",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animghetto", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animghetto [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animghetto [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_PLY",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_SMO",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car2_SWE",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_PLY",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_RYD",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_SMO",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"GHETTO_DB","GDB_Car_SWE",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animgog", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgog [1-1]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 1) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgog [1-1]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"goggles","goggles_put_on",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animgraffity", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgraffity [1-2]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 2) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgraffity [1-2]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GRAFFITI","graffiti_Chkout",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"GRAFFITI","spraycan_fire",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animgreya", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgreya [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgreya [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"GRAVEYARD","prst_loopa",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animgren", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgren [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animgren [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"GRENADE","WEAPON_start_throw",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"GRENADE","WEAPON_throw",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animhaircut", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animhaircut [1-13]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 13) {
SendClientMessage(playerid,0xFF0000FF,">USE /animhaircut [1-13]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Beard_01",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Buy",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_In",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Cut_Out",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_01",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Hair_02",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_In",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Out",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_In",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Loop",4.1,0,1,1,1,1);
} else if(animationplayed == 13) {
ApplyAnimation(playerid,"HAIRCUTS","BRB_Sit_Out",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animheist", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animheist [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animheist [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"HEIST9","CAS_G2_GasKO",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"HEIST9","swt_wllpk_L",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"HEIST9","swt_wllpk_L_back",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"HEIST9","swt_wllpk_R",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"HEIST9","swt_wllpk_R_back",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_L",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"HEIST9","swt_wllshoot_in_R",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_L",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"HEIST9","swt_wllshoot_out_R",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"HEIST9","Use_SwipeCard",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animinthouse", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animinthouse [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animinthouse [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"INT_HOUSE","BED_In_L",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"INT_HOUSE","BED_In_R",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_L",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"INT_HOUSE","BED_Loop_R",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"INT_HOUSE","BED_Out_L",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"INT_HOUSE","BED_Out_R",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"INT_HOUSE","LOU_In",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"INT_HOUSE","LOU_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"INT_HOUSE","LOU_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"INT_HOUSE","wash_up",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animintoffice", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animintoffice [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animintoffice [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"INT_OFFICE","FF_Dam_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_2Idle_180",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Bored_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Crash",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Drink",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Idle_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_In",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Read",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Type_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"INT_OFFICE","OFF_Sit_Watch",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animplayerdbf", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animplayerdbf [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animplayerdbf [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyBwd",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyFwd",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyLHS",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"PLAYER_DVBYS","Plyr_DrivebyRHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animplayidles", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animplayidles [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animplayidles [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PLAYIDLES","shift",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"PLAYIDLES","shldr",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"PLAYIDLES","stretch",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"PLAYIDLES","strleg",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"PLAYIDLES","time",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animpolice", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpolice [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpolice [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"POLICE","CopTraf_Away",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"POLICE","CopTraf_Come",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"POLICE","CopTraf_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"POLICE","CopTraf_Stop",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"POLICE","COP_getoutcar_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"POLICE","Cop_move_FWD",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"POLICE","crm_drgbst_01",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"POLICE","Door_Kick",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"POLICE","plc_drgbst_01",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"POLICE","plc_drgbst_02",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animpool", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpool [1-21]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 21) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpool [1-21]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"POOL","POOL_Idle_Stance",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"POOL","POOL_Long_Shot",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"POOL","POOL_Long_Shot_O",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"POOL","POOL_Long_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"POOL","POOL_Long_Start_O",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"POOL","POOL_Med_Shot",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"POOL","POOL_Med_Shot_O",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"POOL","POOL_Med_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"POOL","POOL_Med_Start_O",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"POOL","POOL_Place_White",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"POOL","POOL_Short_Shot",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"POOL","POOL_Short_Shot_O",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"POOL","POOL_Short_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"POOL","POOL_Short_Start_O",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"POOL","POOL_Walk",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"POOL","POOL_Walk_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"POOL","POOL_XLong_Shot",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"POOL","POOL_XLong_Shot_O",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"POOL","POOL_XLong_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"POOL","POOL_XLong_Start_O",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animpoor", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpoor [1-2]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 2) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpoor [1-2]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"POOR","WINWASH_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"POOR","WINWASH_Wash2Beg",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animpython", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpython [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animpython [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PYTHON","python_crouchfire",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"PYTHON","python_crouchreload",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"PYTHON","python_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"PYTHON","python_fire_poor",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"PYTHON","python_reload",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animquad", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animquad [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 17) {
SendClientMessage(playerid,0xFF0000FF,">USE /animquad [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"QUAD","QUAD_back",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"QUAD","QUAD_driveby_FT",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"QUAD","QUAD_driveby_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"QUAD","QUAD_driveby_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"QUAD","QUAD_FWD",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"QUAD","QUAD_getoff_B",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"QUAD","QUAD_getoff_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"QUAD","QUAD_getoff_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"QUAD","QUAD_geton_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"QUAD","QUAD_geton_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"QUAD","QUAD_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"QUAD","QUAD_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"QUAD","QUAD_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"QUAD","QUAD_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"QUAD","QUAD_reverse",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"QUAD","QUAD_ride",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"QUAD","QUAD_Right",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animquadbz", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animquadbz [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animquadbz [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_BWD",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_FWD",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"QUAD_DBZ","Pass_Driveby_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animrapping", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrapping [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrapping [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"RAPPING","Laugh_01",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"RAPPING","RAP_A_IN",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"RAPPING","RAP_A_OUT",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"RAPPING","RAP_B_IN",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"RAPPING","RAP_B_OUT",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animrifle", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrifle [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrifle [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"RIFLE","RIFLE_crouchfire",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"RIFLE","RIFLE_crouchload",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"RIFLE","RIFLE_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"RIFLE","RIFLE_fire_poor",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"RIFLE","RIFLE_load",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animriot", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animriot [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animriot [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"RIOT","RIOT_ANGRY_B",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"RIOT","RIOT_challenge",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"RIOT","RIOT_CHANT",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"RIOT","RIOT_FUKU",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"RIOT","RIOT_PUNCHES",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"RIOT","RIOT_shout",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animrobbank", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrobbank [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrobbank [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_End",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open_O",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"ROB_BANK","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animrocket", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrocket [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrocket [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"ROCKET","RocketFire",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"ROCKET","run_rocket",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"ROCKET","walk_rocket",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"ROCKET","WALK_start_rocket",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animrustler", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrustler [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animrustler [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"RUSTLER","Plane_align_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"RUSTLER","Plane_close",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"RUSTLER","Plane_getin",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"RUSTLER","Plane_getout",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"RUSTLER","Plane_open",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbiked", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbiked [1-18]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbiked [1-18]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKED","BIKEd_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"BIKED","BIKEd_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"BIKED","BIKEd_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"BIKED","BIKEd_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"BIKED","BIKEd_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"BIKED","BIKEd_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"BIKED","BIKEd_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"BIKED","BIKEd_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"BIKED","BIKEd_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"BIKED","BIKEd_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"BIKED","BIKEd_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"BIKED","BIKEd_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"BIKED","BIKEd_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"BIKED","BIKEd_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"BIKED","BIKEd_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"BIKED","BIKEd_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"BIKED","BIKEd_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"BIKED","BIKEd_shuffle",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"BIKED","BIKEd_Still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animryder", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animryder [1-14]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 14) {
SendClientMessage(playerid,0xFF0000FF,">USE /animryder [1-14]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"RYDER","RYD_Beckon_01",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"RYDER","RYD_Beckon_02",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"RYDER","RYD_Beckon_03",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"RYDER","RYD_Die_PT1",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"RYDER","RYD_Die_PT2",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"RYDER","Van_Crate_L",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"RYDER","Van_Crate_R",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"RYDER","Van_Fall_L",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"RYDER","Van_Fall_R",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"RYDER","Van_Lean_L",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"RYDER","Van_Lean_R",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"RYDER","VAN_PickUp_S",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"RYDER","Van_Stand",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"RYDER","Van_Stand_Crate",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"RYDER","Van_Throw",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animscrat", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animscrat [1-12]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animscrat [1-12]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SCRATCHING","scdldlp",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"SCRATCHING","scdlulp",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"SCRATCHING","scdrdlp",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"SCRATCHING","scdrulp",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"SCRATCHING","sclng_l",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"SCRATCHING","sclng_r",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"SCRATCHING","scmid_l",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"SCRATCHING","scmid_r",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"SCRATCHING","scshrtl",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"SCRATCHING","scshrtr",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"SCRATCHING","sc_ltor",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"SCRATCHING","sc_rtol",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animshamal", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animshamal [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animshamal [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SHAMAL","SHAMAL_align",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"SHAMAL","SHAMAL_getin_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"SHAMAL","SHAMAL_getout_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"SHAMAL","SHAMAL_open",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animshop", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animshop [1-24]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 24) {
SendClientMessage(playerid,0xFF0000FF,">USE /animshop [1-24]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SHOP","ROB_2Idle",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SHOP","ROB_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SHOP","donutdrop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SHOP","ROB_Loop_Threat",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SHOP","ROB_Shifty",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SHOP","ROB_StickUp_In",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SHOP","SHP_Duck_Fire",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"SHOP","SHP_Gun_Aim",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"SHOP","SHP_Gun_Duck",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"SHOP","SHP_Gun_Fire",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"SHOP","SHP_Gun_Grab",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"SHOP","SHP_Gun_Threat",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"SHOP","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"SHOP","SHP_Jump_Glide",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"SHOP","SHP_Jump_Land",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"SHOP","SHP_Jump_Launch",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"SHOP","SHP_Rob_GiveCash",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"SHOP","SHP_Rob_HandsUp",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"SHOP","SHP_Rob_React",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"SHOP","SHP_Serve_End",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"SHOP","SHP_Serve_Idle",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"SHOP","SHP_Serve_Loop",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"SHOP","SHP_Serve_Start",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"SHOP","Smoke_RYD",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animshotgun", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animshotgun [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animshotgun [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SHOTGUN","shotgun_crouchfire",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"SHOTGUN","shotgun_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"SHOTGUN","shotgun_fire_poor",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animskate", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animskate [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animskate [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SKATE","skate_idle",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"SKATE","skate_run",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"SKATE","skate_sprint",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animvortex", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animvortex [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animvortex [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"VORTEX","CAR_jumpin_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"VORTEX","CAR_jumpin_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"VORTEX","vortex_getout_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"VORTEX","vortex_getout_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animtec", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtec [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtec [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"TEC","TEC_crouchfire",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"TEC","TEC_crouchreload",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"TEC","TEC_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"TEC","TEC_reload",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animtrain", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtrain [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtrain [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"TRAIN","tran_gtup",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"TRAIN","tran_hng",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"TRAIN","tran_ouch",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"TRAIN","tran_stmb",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animsil", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsil [1-4]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 4) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsil [1-4]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SILENCED","CrouchReload",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"SILENCED","SilenceCrouchfire",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"SILENCED","Silence_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"SILENCED","Silence_reload",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animtattoo", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtattoo [1-56]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 56) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtattoo [1-56]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_O",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_P",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_In_T",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_O",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"TATTOOS","TA_ArmL_Out_P",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Out_T",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_O",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_P",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmL_Pose_T",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_O",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_P",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_In_T",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_O",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_P",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Out_T",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_O",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_P",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"TATTOOS","TAT_ArmR_Pose_T",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_O",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_P",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_In_T",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_O",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_P",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Out_T",4.1,0,1,1,1,1);
}else if(animationplayed == 25) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_O",4.1,0,1,1,1,1);
}else if(animationplayed == 26) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_P",4.1,0,1,1,1,1);
}else if(animationplayed == 27) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Pose_T",4.1,0,1,1,1,1);
}else if(animationplayed == 28) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_In_P",4.1,0,1,1,1,1);
}else if(animationplayed == 29) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Loop_P",4.1,0,1,1,1,1);
}else if(animationplayed == 30) {
ApplyAnimation(playerid,"TATTOOS","TAT_Back_Sit_Out_P",4.1,0,1,1,1,1);
}else if(animationplayed == 31) {
ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_O",4.1,0,1,1,1,1);
}else if(animationplayed == 32) {
ApplyAnimation(playerid,"TATTOOS","TAT_Bel_In_T",4.1,0,1,1,1,1);
}else if(animationplayed == 33) {
ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_O",4.1,0,1,1,1,1);
}else if(animationplayed == 34) {
ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Out_T",4.1,0,1,1,1,1);
}else if(animationplayed == 35) {
ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_O",4.1,0,1,1,1,1);
}else if(animationplayed == 36) {
ApplyAnimation(playerid,"TATTOOS","TAT_Bel_Pose_T",4.1,0,1,1,1,1);
}else if(animationplayed == 37) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_O",4.1,0,1,1,1,1);
}else if(animationplayed == 38) {
ApplyAnimation(playerid,"TATTOOS","Sit_relaxed",4.1,0,1,1,1,1);
}else if(animationplayed == 39) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_P",4.1,0,1,1,1,1);
}else if(animationplayed == 40) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_In_T",4.1,0,1,1,1,1);
}else if(animationplayed == 41) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_O",4.1,0,1,1,1,1);
}else if(animationplayed == 41) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_P",4.1,0,1,1,1,1);
}else if(animationplayed == 42) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_Out_T",4.1,0,1,1,1,1);
}else if(animationplayed == 43) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_O",4.1,0,1,1,1,1);
}else if(animationplayed == 44) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_P",4.1,0,1,1,1,1);
}else if(animationplayed == 45) {
ApplyAnimation(playerid,"TATTOOS","TAT_Che_Pose_T",4.1,0,1,1,1,1);
}else if(animationplayed == 46) {
ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_O",4.1,0,1,1,1,1);
}else if(animationplayed == 47) {
ApplyAnimation(playerid,"TATTOOS","TAT_Idle_Loop_T",4.1,0,1,1,1,1);
}else if(animationplayed == 48) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_O",4.1,0,1,1,1,1);
}else if(animationplayed == 49) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_P",4.1,0,1,1,1,1);
}else if(animationplayed == 50) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_In_T",4.1,0,1,1,1,1);
}else if(animationplayed == 51) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_O",4.1,0,1,1,1,1);
}else if(animationplayed == 52) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_P",4.1,0,1,1,1,1);
}else if(animationplayed == 53) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Loop_T",4.1,0,1,1,1,1);
}else if(animationplayed == 54) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_O",4.1,0,1,1,1,1);
}else if(animationplayed == 55) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_P",4.1,0,1,1,1,1);
}else if(animationplayed == 56) {
ApplyAnimation(playerid,"TATTOOS","TAT_Sit_Out_T",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animsmoking", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsmoking [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsmoking [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SMOKING","F_smklean_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SMOKING","M_smklean_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SMOKING","M_smkstnd_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SMOKING","M_smk_drag",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SMOKING","M_smk_in",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SMOKING","M_smk_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SMOKING","M_smk_out",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"SMOKING","M_smk_tap",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animsniper", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsniper [1-1]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 1) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsniper [1-1]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SNIPER","WEAPON_sniper",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animspray", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animspray [1-2]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 2) {
SendClientMessage(playerid,0xFF0000FF,">USE /animspray [1-2]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SPRAYCAN","spraycan_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animstrip", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animstrip [1-20]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 20) {
SendClientMessage(playerid,0xFF0000FF,">USE /animstrip [1-20]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"STRIP","PLY_CASH",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"STRIP","PUN_CASH",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"STRIP","PUN_HOLLER",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"STRIP","PUN_LOOP",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"STRIP","strip_A",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"STRIP","strip_B",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"STRIP","strip_C",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"STRIP","strip_D",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"STRIP","strip_E",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"STRIP","strip_F",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"STRIP","strip_G",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"STRIP","STR_A2B",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"STRIP","STR_B2A",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"STRIP","STR_B2C",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"STRIP","STR_C1",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"STRIP","STR_C2",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"STRIP","STR_C2B",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"STRIP","STR_Loop_A",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"STRIP","STR_Loop_B",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"STRIP","STR_Loop_C",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animbath", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbath [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 18) {
SendClientMessage(playerid,0xFF0000FF,">USE /animbath [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SUNBATHE","batherdown",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"SUNBATHE","batherup",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_in",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SUNBATHE","Lay_Bac_out",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleA",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleB",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_IdleC",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_in",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_M_out",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleA",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleB",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_idleC",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_in",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"SUNBATHE","ParkSit_W_out",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_LieB2Sit",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"SUNBATHE","SBATHE_F_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"SUNBATHE","SitnWait_in_W",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"SUNBATHE","SitnWait_out_W",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animswat", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animswat [1-24]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 24) {
SendClientMessage(playerid,0xFF0000FF,">USE /animswat [1-24]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SWAT","gnstwall_injurd",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SWAT","JMP_Wall1m_180",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SWAT","Rail_fall",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SWAT","Rail_fall_crawl",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SWAT","swt_breach_01",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SWAT","cards_pick_02",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SWAT","swt_breach_02",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"SWAT","swt_breach_03",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"SWAT","swt_go",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"SWAT","swt_lkt",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"SWAT","swt_sty",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"SWAT","swt_vent_01",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"SWAT","swt_vent_02",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"SWAT","swt_vnt_sht_die",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"SWAT","swt_vnt_sht_in",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"SWAT","swt_vnt_sht_loop",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"SWAT","swt_wllpk_L",4.1,0,1,1,1,1);
}else if(animationplayed == 18) {
ApplyAnimation(playerid,"SWAT","swt_wllpk_L_back",4.1,0,1,1,1,1);
}else if(animationplayed == 19) {
ApplyAnimation(playerid,"SWAT","swt_wllpk_R",4.1,0,1,1,1,1);
}else if(animationplayed == 20) {
ApplyAnimation(playerid,"SWAT","swt_wllpk_R_back",4.1,0,1,1,1,1);
}else if(animationplayed == 21) {
ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_L",4.1,0,1,1,1,1);
}else if(animationplayed == 22) {
ApplyAnimation(playerid,"SWAT","swt_wllshoot_in_R",4.1,0,1,1,1,1);
}else if(animationplayed == 23) {
ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_L",4.1,0,1,1,1,1);
}else if(animationplayed == 24) {
ApplyAnimation(playerid,"SWAT","swt_wllshoot_out_R",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animsweet", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsweet [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsweet [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SWEET","LaFin_Player",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SWEET","LaFin_Sweet",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SWEET","plyr_hndshldr_01",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SWEET","sweet_hndshldr_01",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SWEET","Sweet_injuredloop",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animswim", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animswim [1-7]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 7) {
SendClientMessage(playerid,0xFF0000FF,">USE /animswim [1-7]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SWIM","Swim_Breast",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SWIM","SWIM_crawl",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SWIM","Swim_Dive_Under",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SWIM","Swim_Glide",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SWIM","Swim_jumpout",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SWIM","Swim_Tread",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SWIM","Swim_Under",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animsword", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsword [1-10]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 10) {
SendClientMessage(playerid,0xFF0000FF,">USE /animsword [1-10]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"SWORD","sword_1",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"SWORD","sword_2",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"SWORD","sword_3",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"SWORD","sword_4",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"SWORD","sword_block",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"SWORD","Sword_Hit_1",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"SWORD","Sword_Hit_2",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"SWORD","Sword_Hit_3",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"SWORD","sword_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"SWORD","sword_part",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animtank", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtank [1-6]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 6) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtank [1-6]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"TANK","TANK_align_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"TANK","TANK_close_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"TANK","TANK_doorlocked",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"TANK","TANK_getin_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"TANK","TANK_getout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"TANK","TANK_open_LHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animtruck", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtruck [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 17) {
SendClientMessage(playerid,0xFF0000FF,">USE /animtruck [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"TRUCK","TRUCK_ALIGN_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"TRUCK","TRUCK_closedoor_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"TRUCK","TRUCK_close_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"TRUCK","TRUCK_close_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"TRUCK","TRUCK_getin_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"TRUCK","TRUCK_getin_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"TRUCK","TRUCK_getout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"TRUCK","TRUCK_getout_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"TRUCK","TRUCK_jackedLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"TRUCK","TRUCK_jackedRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"TRUCK","TRUCK_open_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"TRUCK","TRUCK_open_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"TRUCK","TRUCK_pullout_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"TRUCK","TRUCK_Shuffle",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animuzi", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animuzi [1-5]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 5) {
SendClientMessage(playerid,0xFF0000FF,">USE /animuzi [1-5]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"UZI","UZI_crouchfire",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"UZI","UZI_crouchreload",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"UZI","UZI_fire",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"UZI","UZI_fire_poor",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"UZI","UZI_reload",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animvan", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animvan [1-8]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 8) {
SendClientMessage(playerid,0xFF0000FF,">USE /animvan [1-8]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"VAN","VAN_close_back_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"VAN","VAN_close_back_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"VAN","VAN_getin_Back_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"VAN","VAN_getin_Back_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"VAN","VAN_getout_back_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"VAN","VAN_getout_back_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"VAN","VAN_open_back_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"VAN","VAN_open_back_RHS",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animvending", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animvending [1-6]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 6) {
SendClientMessage(playerid,0xFF0000FF,">USE /animvending [1-6]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"VENDING","VEND_Drink2_P",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"VENDING","VEND_Drink_P",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"VENDING","vend_eat1_P",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"VENDING","VEND_Eat_P",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"VENDING","VEND_Use",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"VENDING","VEND_Use_pt2",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animway", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animway [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 17) {
SendClientMessage(playerid,0xFF0000FF,">USE /animway [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"WAYFARER","WF_Back",4.1,0,1,1,1,1);
}else if(animationplayed == 1) {
ApplyAnimation(playerid,"WAYFARER","WF_drivebyFT",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"WAYFARER","WF_drivebyLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"WAYFARER","WF_drivebyRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"WAYFARER","WF_Fwd",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"WAYFARER","WF_getoffBACK",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"WAYFARER","WF_getoffLHS",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"WAYFARER","WF_getoffRHS",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"WAYFARER","WF_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"WAYFARER","WF_jumponL",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"WAYFARER","WF_jumponR",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"WAYFARER","WF_kick",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"WAYFARER","WF_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"WAYFARER","WF_passenger",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"WAYFARER","WF_pushes",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"WAYFARER","WF_Ride",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"WAYFARER","WF_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"WAYFARER","WF_Still",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animweap", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animweap [1-17]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 17) {
SendClientMessage(playerid,0xFF0000FF,">USE /animweap [1-17]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift",4.1,0,1,1,1,1);
}else if(animationplayed == 2) {
ApplyAnimation(playerid,"WEAPONS","SHP_1H_Lift_End",4.1,0,1,1,1,1);
}else if(animationplayed == 3) {
ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret",4.1,0,1,1,1,1);
}else if(animationplayed == 4) {
ApplyAnimation(playerid,"WEAPONS","SHP_1H_Ret_S",4.1,0,1,1,1,1);
}else if(animationplayed == 5) {
ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift",4.1,0,1,1,1,1);
}else if(animationplayed == 6) {
ApplyAnimation(playerid,"WEAPONS","SHP_2H_Lift_End",4.1,0,1,1,1,1);
}else if(animationplayed == 7) {
ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret",4.1,0,1,1,1,1);
}else if(animationplayed == 8) {
ApplyAnimation(playerid,"WEAPONS","SHP_2H_Ret_S",4.1,0,1,1,1,1);
}else if(animationplayed == 9) {
ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift",4.1,0,1,1,1,1);
}else if(animationplayed == 10) {
ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Lift_End",4.1,0,1,1,1,1);
}else if(animationplayed == 11) {
ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret",4.1,0,1,1,1,1);
}else if(animationplayed == 12) {
ApplyAnimation(playerid,"WEAPONS","SHP_Ar_Ret_S",4.1,0,1,1,1,1);
}else if(animationplayed == 13) {
ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_In",4.1,0,1,1,1,1);
}else if(animationplayed == 14) {
ApplyAnimation(playerid,"WEAPONS","SHP_G_Lift_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 15) {
ApplyAnimation(playerid,"WEAPONS","SHP_Tray_In",4.1,0,1,1,1,1);
}else if(animationplayed == 16) {
ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Out",4.1,0,1,1,1,1);
}else if(animationplayed == 17) {
ApplyAnimation(playerid,"WEAPONS","SHP_Tray_Pose",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animwuzi", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animwuzi [1-12]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 12) {
SendClientMessage(playerid,0xFF0000FF,">USE /animwuzi [1-12]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"WUZI","CS_Dead_Guy",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"WUZI","CS_Plyr_pt1",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"WUZI","CS_Plyr_pt2",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt1",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"WUZI","CS_Wuzi_pt2",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"WUZI","Walkstart_Idle_01",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Plyr",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"WUZI","Wuzi_Greet_Wuzi",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"WUZI","Wuzi_grnd_chk",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"WUZI","Wuzi_stand_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"WUZI","Wuzi_Walk",4.1,0,1,1,1,1);
}
return 1;
}
if(strcmp(cmd, "/animat", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animat [1-3]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 3) {
SendClientMessage(playerid,0xFF0000FF,">USE /animat [1-3]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"Attractors","Stepsit_in",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"Attractors","Stepsit_loop",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"Attractors","Stepsit_out",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animairport", true) == 0) {
if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animairport [1]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 1) {
SendClientMessage(playerid,0xFF0000FF,">USE /animairport [1]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"AIRPORT","thrw_barl_thrw",4.1,0,1,1,1,1);
}
return 1;
}
}
if(strcmp(cmd, "/animped", true) == 0) {
tmp = strtok(cmdtext, idx);
if(!strlen(tmp)) {
SendClientMessage(playerid,0xFF0000FF,">USE /animped [1-295]");
return 1;
}
animationplayed = strval(tmp);
if(animationplayed < 1 || animationplayed > 295) {
SendClientMessage(playerid,0xFF0000FF,">USE /animped [1-295]");
return 1;
}
if(animationplayed == 1) {
ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
} else if(animationplayed == 2) {
ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,0,1,1,1,1);
} else if(animationplayed == 3) {
ApplyAnimation(playerid,"PED","abseil",4.1,0,1,1,1,1);
} else if(animationplayed == 4) {
ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
} else if(animationplayed == 5) {
ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
} else if(animationplayed == 6) {
ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1,0,1,1,1,1);
} else if(animationplayed == 7) {
ApplyAnimation(playerid,"PED","BIKE_fallR",4.1,0,1,1,1,1);
} else if(animationplayed == 8) {
ApplyAnimation(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,1);
} else if(animationplayed == 9) {
ApplyAnimation(playerid,"PED","BIKE_pickupL",4.1,0,1,1,1,1);
} else if(animationplayed == 10) {
ApplyAnimation(playerid,"PED","BIKE_pickupR",4.1,0,1,1,1,1);
} else if(animationplayed == 11) {
ApplyAnimation(playerid,"PED","BIKE_pullupL",4.1,0,1,1,1,1);
} else if(animationplayed == 12) {
ApplyAnimation(playerid,"PED","BIKE_pullupR",4.1,0,1,1,1,1);
} else if(animationplayed == 13) {
ApplyAnimation(playerid,"PED","bomber",4.1,0,1,1,1,1);
} else if(animationplayed == 14) {
ApplyAnimation(playerid,"PED","CAR_alignHI_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 15) {
ApplyAnimation(playerid,"PED","CAR_alignHI_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 16) {
ApplyAnimation(playerid,"PED","CAR_align_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 17) {
ApplyAnimation(playerid,"PED","CAR_align_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 18) {
ApplyAnimation(playerid,"PED","CAR_closedoorL_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 19) {
ApplyAnimation(playerid,"PED","CAR_closedoorL_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 20) {
ApplyAnimation(playerid,"PED","CAR_closedoor_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 21) {
ApplyAnimation(playerid,"PED","CAR_closedoor_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 22) {
ApplyAnimation(playerid,"PED","CAR_close_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 23) {
ApplyAnimation(playerid,"PED","CAR_crawloutRHS",4.1,0,1,1,1,1);
} else if(animationplayed == 24) {
ApplyAnimation(playerid,"PED","CAR_dead_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 25) {
ApplyAnimation(playerid,"PED","CAR_dead_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 26) {
ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 27) {
ApplyAnimation(playerid,"PED","CAR_fallout_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 28) {
ApplyAnimation(playerid,"PED","CAR_fallout_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 29) {
ApplyAnimation(playerid,"PED","CAR_getinL_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 30) {
ApplyAnimation(playerid,"PED","CAR_getinL_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 31) {
ApplyAnimation(playerid,"PED","CAR_getin_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 32) {
ApplyAnimation(playerid,"PED","CAR_getin_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 33) {
ApplyAnimation(playerid,"PED","CAR_getoutL_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 34) {
ApplyAnimation(playerid,"PED","CAR_getout_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 35) {
ApplyAnimation(playerid,"PED","CAR_getout_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 36) {
ApplyAnimation(playerid,"PED","car_hookertalk",4.1,0,1,1,1,1);
} else if(animationplayed == 37) {
ApplyAnimation(playerid,"PED","CAR_jackedLHS",4.1,0,1,1,1,1);
} else if(animationplayed == 38) {
ApplyAnimation(playerid,"PED","CAR_jackedRHS",4.1,0,1,1,1,1);
} else if(animationplayed == 39) {
ApplyAnimation(playerid,"PED","CAR_jumpin_LHS",4.1,0,1,1,1,1);
} else if(animationplayed == 40) {
ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,1);
} else if(animationplayed == 41) {
ApplyAnimation(playerid,"PED","CAR_LB_pro",4.1,0,1,1,1,1);
} else if(animationplayed == 42) {
ApplyAnimation(playerid,"PED","CAR_LB_weak",4.1,0,1,1,1,1);
} else if(animationplayed == 43) {
ApplyAnimation(playerid,"PED","CAR_LjackedLHS",4.1,0,1,1,1,1);
} else if(animationplayed == 44) {
ApplyAnimation(playerid,"PED","CAR_Lshuffle_RHS",4.1,0,1,1,1,1);
} else if(animationplayed == 45) {
ApplyAnimation(playerid,"PED","CAR_Lsit",4.1,0,1,1,1,1);
} else if(animationplayed == 46) {
ApplyAnimation(playerid,"PED","CAR_open_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 47) {
ApplyAnimation(playerid,"PED","CAR_open_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 49) {
ApplyAnimation(playerid,"PED","CAR_pulloutL_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 50) {
ApplyAnimation(playerid,"PED","CAR_pulloutL_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 51) {
ApplyAnimation(playerid,"PED","CAR_pullout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 52) {
ApplyAnimation(playerid,"PED","CAR_pullout_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 53) {
ApplyAnimation(playerid,"PED","CAR_Qjacked",4.1,0,1,1,1,1);
}else if(animationplayed == 54) {
ApplyAnimation(playerid,"PED","CAR_rolldoor",4.1,0,1,1,1,1);
}else if(animationplayed == 55) {
ApplyAnimation(playerid,"PED","CAR_rolldoorLO",4.1,0,1,1,1,1);
}else if(animationplayed == 56) {
ApplyAnimation(playerid,"PED","CAR_rollout_LHS",4.1,0,1,1,1,1);
}else if(animationplayed == 57) {
ApplyAnimation(playerid,"PED","CAR_rollout_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 58) {
ApplyAnimation(playerid,"PED","CAR_shuffle_RHS",4.1,0,1,1,1,1);
}else if(animationplayed == 59) {
ApplyAnimation(playerid,"PED","CAR_sit",4.1,0,1,1,1,1);
}else if(animationplayed == 60) {
ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,1);
}else if(animationplayed == 61) {
ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,1);
}else if(animationplayed == 62) {
ApplyAnimation(playerid,"PED","CAR_sit_pro",4.1,0,1,1,1,1);
}else if(animationplayed == 63) {
ApplyAnimation(playerid,"PED","CAR_sit_weak",4.1,0,1,1,1,1);
}else if(animationplayed == 64) {
ApplyAnimation(playerid,"PED","CAR_tune_radio",4.1,0,1,1,1,1);
}else if(animationplayed == 65) {
ApplyAnimation(playerid,"PED","CLIMB_idle",4.1,0,1,1,1,1);
}else if(animationplayed == 66) {
ApplyAnimation(playerid,"PED","CLIMB_jump",4.1,0,1,1,1,1);
}else if(animationplayed == 67) {
ApplyAnimation(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,1);
}else if(animationplayed == 68) {
ApplyAnimation(playerid,"PED","CLIMB_jump_B",4.1,0,1,1,1,1);
}else if(animationplayed == 69) {
ApplyAnimation(playerid,"PED","CLIMB_Pull",4.1,0,1,1,1,1);
}else if(animationplayed == 70) {
ApplyAnimation(playerid,"PED","CLIMB_Stand",4.1,0,1,1,1,1);
}else if(animationplayed == 71) {
ApplyAnimation(playerid,"PED","CLIMB_Stand_finish",4.1,0,1,1,1,1);
}else if(animationplayed == 72) {
ApplyAnimation(playerid,"PED","cower",4.1,0,1,1,1,1);
}else if(animationplayed == 73) {
ApplyAnimation(playerid,"PED","Crouch_Roll_L",4.1,0,1,1,1,1);
}else if(animationplayed == 74) {
ApplyAnimation(playerid,"PED","Crouch_Roll_R",4.1,0,1,1,1,1);
}else if(animationplayed == 75) {
ApplyAnimation(playerid,"PED","DAM_armL_frmBK",4.1,0,1,1,1,1);
}else if(animationplayed == 76) {
ApplyAnimation(playerid,"PED","DAM_armL_frmFT",4.1,0,1,1,1,1);
}else if(animationplayed == 77) {
ApplyAnimation(playerid,"PED","DAM_armL_frmLT",4.1,0,1,1,1,1);
}else if(animationplayed == 78) {
ApplyAnimation(playerid,"PED","DAM_armR_frmBK",4.1,0,1,1,1,1);
}else if(animationplayed == 79) {
ApplyAnimation(playerid,"PED","DAM_armR_frmFT",4.1,0,1,1,1,1);
}else if(animationplayed == 80) {
ApplyAnimation(playerid,"PED","DAM_armR_frmRT",4.1,0,1,1,1,1);
}else if(animationplayed == 81) {
ApplyAnimation(playerid,"PED","DAM_LegL_frmBK",4.1,0,1,1,1,1);
}else if(animationplayed == 82) {
ApplyAnimation(playerid,"PED","DAM_LegL_frmFT",4.1,0,1,1,1,1);
}else if(animationplayed == 83) {
ApplyAnimation(playerid,"PED","DAM_LegL_frmLT",4.1,0,1,1,1,1);
}else if(animationplayed == 84) {
ApplyAnimation(playerid,"PED","DAM_LegR_frmBK",4.1,0,1,1,1,1);
}else if(animationplayed == 85) {
ApplyAnimation(playerid,"PED","DAM_LegR_frmFT",4.1,0,1,1,1,1);
}else if(animationplayed == 86) {
ApplyAnimation(playerid,"PED","DAM_LegR_frmRT",4.1,0,1,1,1,1);
}else if(animationplayed == 87) {
ApplyAnimation(playerid,"PED","DAM_stomach_frmBK",4.1,0,1,1,1,1);
}else if(animationplayed == 88) {
ApplyAnimation(playerid,"PED","DAM_stomach_frmFT",4.1,0,1,1,1,1);
}else if(animationplayed == 89) {
ApplyAnimation(playerid,"PED","DAM_stomach_frmLT",4.1,0,1,1,1,1);
}else if(animationplayed == 90) {
ApplyAnimation(playerid,"PED","DAM_stomach_frmRT",4.1,0,1,1,1,1);
}else if(animationplayed == 91) {
ApplyAnimation(playerid,"PED","DOOR_LHinge_O",4.1,0,1,1,1,1);
}else if(animationplayed == 92) {
ApplyAnimation(playerid,"PED","DOOR_RHinge_O",4.1,0,1,1,1,1);
}else if(animationplayed == 93) {
ApplyAnimation(playerid,"PED","DrivebyL_L",4.1,0,1,1,1,1);
}else if(animationplayed == 94) {
ApplyAnimation(playerid,"PED","DrivebyL_R",4.1,0,1,1,1,1);
}else if(animationplayed == 95) {
ApplyAnimation(playerid,"PED","Driveby_L",4.1,0,1,1,1,1);
}else if(animationplayed == 96) {
ApplyAnimation(playerid,"PED","Driveby_R",4.1,0,1,1,1,1);
}else if(animationplayed == 97) {
ApplyAnimation(playerid,"PED","DRIVE_BOAT",4.1,0,1,1,1,1);
}else if(animationplayed == 98) {
ApplyAnimation(playerid,"PED","DRIVE_BOAT_back",4.1,0,1,1,1,1);
}else if(animationplayed == 99) {
ApplyAnimation(playerid,"PED","DRIVE_BOAT_L",4.1,0,1,1,1,1);
}else if(animationplayed == 100) {
ApplyAnimation(playerid,"PED","DRIVE_BOAT_R",4.1,0,1,1,1,1);
}else if(animationplayed == 101) {
ApplyAnimation(playerid,"PED","Drive_L",4.1,0,1,1,1,1);
}else if(animationplayed == 102) {
ApplyAnimation(playerid,"PED","Drive_LO_l",4.1,0,1,1,1,1);
}else if(animationplayed == 103) {
ApplyAnimation(playerid,"PED","Drive_LO_R",4.1,0,1,1,1,1);
}else if(animationplayed == 104) {
ApplyAnimation(playerid,"PED","Drive_L_pro",4.1,0,1,1,1,1);
}else if(animationplayed == 105) {
ApplyAnimation(playerid,"PED","Drive_L_pro_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 106) {
ApplyAnimation(playerid,"PED","Drive_L_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 107) {
ApplyAnimation(playerid,"PED","Drive_L_weak",4.1,0,1,1,1,1);
}else if(animationplayed == 108) {
ApplyAnimation(playerid,"PED","Drive_L_weak_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 109) {
ApplyAnimation(playerid,"PED","Drive_R",4.1,0,1,1,1,1);
}else if(animationplayed == 110) {
ApplyAnimation(playerid,"PED","Drive_R_pro",4.1,0,1,1,1,1);
}else if(animationplayed == 111) {
ApplyAnimation(playerid,"PED","Drive_R_pro_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 112) {
ApplyAnimation(playerid,"PED","Drive_R_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 113) {
ApplyAnimation(playerid,"PED","Drive_R_weak",4.1,0,1,1,1,1);
}else if(animationplayed == 114) {
ApplyAnimation(playerid,"PED","Drive_R_weak_slow",4.1,0,1,1,1,1);
}else if(animationplayed == 115) {
ApplyAnimation(playerid,"PED","Drive_truck",4.1,0,1,1,1,1);
}else if(animationplayed == 116) {
ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
}else if(animationplayed == 117) {
ApplyAnimation(playerid,"PED","DRIVE_truck_L",4.1,0,1,1,1,1);
}else if(animationplayed == 118) {
ApplyAnimation(playerid,"PED","DRIVE_truck_R",4.1,0,1,1,1,1);
}else if(animationplayed == 119) {
ApplyAnimation(playerid,"PED","Drown",4.1,0,1,1,1,1);
}else if(animationplayed == 120) {
ApplyAnimation(playerid,"PED","DUCK_cower",4.1,0,1,1,1,1);
}else if(animationplayed == 121) {
ApplyAnimation(playerid,"PED","endchat_01",4.1,0,1,1,1,1);
}else if(animationplayed == 122) {
ApplyAnimation(playerid,"PED","endchat_02",4.1,0,1,1,1,1);
}else if(animationplayed == 123) {
ApplyAnimation(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
}else if(animationplayed == 124) {
ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
}else if(animationplayed == 125) {
ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
}else if(animationplayed == 126) {
ApplyAnimation(playerid,"PED","EV_dive",4.1,0,1,1,1,1);
}else if(animationplayed == 127) {
ApplyAnimation(playerid,"PED","EV_step",4.1,0,1,1,1,1);
}else if(animationplayed == 128) {
ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
}else if(animationplayed == 129) {
ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
}else if(animationplayed == 130) {
ApplyAnimation(playerid,"PED","facgum",4.1,0,1,1,1,1);
}else if(animationplayed == 131) {
ApplyAnimation(playerid,"PED","facsurp",4.1,0,1,1,1,1);
}else if(animationplayed == 132) {
ApplyAnimation(playerid,"PED","facsurpm",4.1,0,1,1,1,1);
}else if(animationplayed == 133) {
ApplyAnimation(playerid,"PED","factalk",4.1,0,1,1,1,1);
}else if(animationplayed == 134) {
ApplyAnimation(playerid,"PED","facurios",4.1,0,1,1,1,1);
}else if(animationplayed == 135) {
ApplyAnimation(playerid,"PED","FALL_back",4.1,0,1,1,1,1);
}else if(animationplayed == 136) {
ApplyAnimation(playerid,"PED","FALL_collapse",4.1,0,1,1,1,1);
}else if(animationplayed == 137) {
ApplyAnimation(playerid,"PED","FALL_fall",4.1,0,1,1,1,1);
}else if(animationplayed == 138) {
ApplyAnimation(playerid,"PED","FALL_front",4.1,0,1,1,1,1);
}else if(animationplayed == 139) {
ApplyAnimation(playerid,"PED","FALL_glide",4.1,0,1,1,1,1);
}else if(animationplayed == 140) {
ApplyAnimation(playerid,"PED","FALL_land",4.1,0,1,1,1,1);
}else if(animationplayed == 141) {
ApplyAnimation(playerid,"PED","FALL_skyDive",4.1,0,1,1,1,1);
}else if(animationplayed == 142) {
ApplyAnimation(playerid,"PED","Fight2Idle",4.1,0,1,1,1,1);
}else if(animationplayed == 143) {
ApplyAnimation(playerid,"PED","FightA_1",4.1,0,1,1,1,1);
}else if(animationplayed == 144) {
ApplyAnimation(playerid,"PED","FightA_2",4.1,0,1,1,1,1);
}else if(animationplayed == 145) {
ApplyAnimation(playerid,"PED","FightA_3",4.1,0,1,1,1,1);
}else if(animationplayed == 146) {
ApplyAnimation(playerid,"PED","FightA_block",4.1,0,1,1,1,1);
}else if(animationplayed == 147) {
ApplyAnimation(playerid,"PED","FightA_G",4.1,0,1,1,1,1);
}else if(animationplayed == 148) {
ApplyAnimation(playerid,"PED","FightA_M",4.1,0,1,1,1,1);
}else if(animationplayed == 149) {
ApplyAnimation(playerid,"PED","FIGHTIDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 150) {
ApplyAnimation(playerid,"PED","FightShB",4.1,0,1,1,1,1);
}else if(animationplayed == 151) {
ApplyAnimation(playerid,"PED","FightShF",4.1,0,1,1,1,1);
}else if(animationplayed == 152) {
ApplyAnimation(playerid,"PED","FightSh_BWD",4.1,0,1,1,1,1);
}else if(animationplayed == 153) {
ApplyAnimation(playerid,"PED","FightSh_FWD",4.1,0,1,1,1,1);
}else if(animationplayed == 154) {
ApplyAnimation(playerid,"PED","FightSh_Left",4.1,0,1,1,1,1);
}else if(animationplayed == 155) {
ApplyAnimation(playerid,"PED","FightSh_Right",4.1,0,1,1,1,1);
}else if(animationplayed == 156) {
ApplyAnimation(playerid,"PED","flee_lkaround_01",4.1,0,1,1,1,1);
}else if(animationplayed == 157) {
ApplyAnimation(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
}else if(animationplayed == 158) {
ApplyAnimation(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1);
}else if(animationplayed == 159) {
ApplyAnimation(playerid,"PED","fucku",4.1,0,1,1,1,1);
}else if(animationplayed == 160) {
ApplyAnimation(playerid,"PED","gang_gunstand",4.1,0,1,1,1,1);
}else if(animationplayed == 161) {
ApplyAnimation(playerid,"PED","gas_cwr",4.1,0,1,1,1,1);
}else if(animationplayed == 162) {
ApplyAnimation(playerid,"PED","getup",4.1,0,1,1,1,1);
}else if(animationplayed == 163) {
ApplyAnimation(playerid,"PED","getup_front",4.1,0,1,1,1,1);
}else if(animationplayed == 164) {
ApplyAnimation(playerid,"PED","gum_eat",4.1,0,1,1,1,1);
}else if(animationplayed == 165) {
ApplyAnimation(playerid,"PED","GunCrouchBwd",4.1,0,1,1,1,1);
}else if(animationplayed == 166) {
ApplyAnimation(playerid,"PED","GunCrouchFwd",4.1,0,1,1,1,1);
}else if(animationplayed == 167) {
ApplyAnimation(playerid,"PED","GunMove_BWD",4.1,0,1,1,1,1);
}else if(animationplayed == 168) {
ApplyAnimation(playerid,"PED","GunMove_FWD",4.1,0,1,1,1,1);
}else if(animationplayed == 169) {
ApplyAnimation(playerid,"PED","GunMove_L",4.1,0,1,1,1,1);
}else if(animationplayed == 170) {
ApplyAnimation(playerid,"PED","GunMove_R",4.1,0,1,1,1,1);
}else if(animationplayed == 171) {
ApplyAnimation(playerid,"PED","Gun_2_IDLE",4.1,0,1,1,1,1);
}else if(animationplayed == 172) {
ApplyAnimation(playerid,"PED","GUN_BUTT",4.1,0,1,1,1,1);
}else if(animationplayed == 173) {
ApplyAnimation(playerid,"PED","GUN_BUTT_crouch",4.1,0,1,1,1,1);
}else if(animationplayed == 174) {
ApplyAnimation(playerid,"PED","Gun_stand",4.1,0,1,1,1,1);
}else if(animationplayed == 175) {
ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
}else if(animationplayed == 176) {
ApplyAnimation(playerid,"PED","handsup",4.1,0,1,1,1,1);
}else if(animationplayed == 177) {
ApplyAnimation(playerid,"PED","HitA_1",4.1,0,1,1,1,1);
}else if(animationplayed == 178) {
ApplyAnimation(playerid,"PED","HitA_2",4.1,0,1,1,1,1);
}else if(animationplayed == 179) {
ApplyAnimation(playerid,"PED","HitA_3",4.1,0,1,1,1,1);
}else if(animationplayed == 180) {
ApplyAnimation(playerid,"PED","HIT_back",4.1,0,1,1,1,1);
}else if(animationplayed == 181) {
ApplyAnimation(playerid,"PED","HIT_behind",4.1,0,1,1,1,1);
}else if(animationplayed == 182) {
ApplyAnimation(playerid,"PED","HIT_front",4.1,0,1,1,1,1);
}else if(animationplayed == 183) {
ApplyAnimation(playerid,"PED","HIT_GUN_BUTT",4.1,0,1,1,1,1);
}else if(animationplayed == 184) {
ApplyAnimation(playerid,"PED","HIT_L",4.1,0,1,1,1,1);
}else if(animationplayed == 185) {
ApplyAnimation(playerid,"PED","HIT_R",4.1,0,1,1,1,1);
}else if(animationplayed == 186) {
ApplyAnimation(playerid,"PED","HIT_walk",4.1,0,1,1,1,1);
}else if(animationplayed == 187) {
ApplyAnimation(playerid,"PED","HIT_wall",4.1,0,1,1,1,1);
}else if(animationplayed == 188) {
ApplyAnimation(playerid,"PED","Idlestance_fat",4.1,0,1,1,1,1);
}else if(animationplayed == 189) {
ApplyAnimation(playerid,"PED","idlestance_old",4.1,0,1,1,1,1);
}else if(animationplayed == 190) {
ApplyAnimation(playerid,"PED","IDLE_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 191) {
ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
}else if(animationplayed == 192) {
ApplyAnimation(playerid,"PED","IDLE_csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 193) {
ApplyAnimation(playerid,"PED","Idle_Gang1",4.1,0,1,1,1,1);
}else if(animationplayed == 194) {
ApplyAnimation(playerid,"PED","IDLE_HBHB",4.1,0,1,1,1,1);
}else if(animationplayed == 195) {
ApplyAnimation(playerid,"PED","IDLE_ROCKET",4.1,0,1,1,1,1);
}else if(animationplayed == 196) {
ApplyAnimation(playerid,"PED","IDLE_stance",4.1,0,1,1,1,1);
}else if(animationplayed == 197) {
ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
}else if(animationplayed == 198) {
ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,1,1);
}else if(animationplayed == 199) {
ApplyAnimation(playerid,"PED","Jetpack_Idle",4.1,0,1,1,1,1);
}else if(animationplayed == 200) {
ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,0,1,1,1,1);
}else if(animationplayed == 201) {
ApplyAnimation(playerid,"PED","JOG_maleA",4.1,0,1,1,1,1);
}else if(animationplayed == 202) {
ApplyAnimation(playerid,"PED","JUMP_glide",4.1,0,1,1,1,1);
}else if(animationplayed == 203) {
ApplyAnimation(playerid,"PED","JUMP_land",4.1,0,1,1,1,1);
}else if(animationplayed == 204) {
ApplyAnimation(playerid,"PED","JUMP_launch",4.1,0,1,1,1,1);
}else if(animationplayed == 205) {
ApplyAnimation(playerid,"PED","JUMP_launch_R",4.1,0,1,1,1,1);
}else if(animationplayed == 206) {
ApplyAnimation(playerid,"PED","KART_drive",4.1,0,1,1,1,1);
}else if(animationplayed == 207) {
ApplyAnimation(playerid,"PED","KART_L",4.1,0,1,1,1,1);
}else if(animationplayed == 208) {
ApplyAnimation(playerid,"PED","KART_LB",4.1,0,1,1,1,1);
}else if(animationplayed == 209) {
ApplyAnimation(playerid,"PED","KART_R",4.1,0,1,1,1,1);
}else if(animationplayed == 210) {
ApplyAnimation(playerid,"PED","KD_left",4.1,0,1,1,1,1);
}else if(animationplayed == 211) {
ApplyAnimation(playerid,"PED","KD_right",4.1,0,1,1,1,1);
}else if(animationplayed == 212) {
ApplyAnimation(playerid,"PED","KO_shot_face",4.1,0,1,1,1,1);
}else if(animationplayed == 213) {
ApplyAnimation(playerid,"PED","KO_shot_front",4.1,0,1,1,1,1);
}else if(animationplayed == 214) {
ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
}else if(animationplayed == 215) {
ApplyAnimation(playerid,"PED","KO_skid_back",4.1,0,1,1,1,1);
}else if(animationplayed == 216) {
ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
}else if(animationplayed == 217) {
ApplyAnimation(playerid,"PED","KO_spin_L",4.1,0,1,1,1,1);
}else if(animationplayed == 218) {
ApplyAnimation(playerid,"PED","KO_spin_R",4.1,0,1,1,1,1);
}else if(animationplayed == 219) {
ApplyAnimation(playerid,"PED","pass_Smoke_in_car",4.1,0,1,1,1,1);
}else if(animationplayed == 220) {
ApplyAnimation(playerid,"PED","phone_in",4.1,0,1,1,1,1);
}else if(animationplayed == 221) {
ApplyAnimation(playerid,"PED","phone_out",4.1,0,1,1,1,1);
}else if(animationplayed == 222) {
ApplyAnimation(playerid,"PED","phone_talk",4.1,0,1,1,1,1);
}else if(animationplayed == 223) {
ApplyAnimation(playerid,"PED","Player_Sneak",4.1,0,1,1,1,1);
}else if(animationplayed == 224) {
ApplyAnimation(playerid,"PED","Player_Sneak_walkstart",4.1,0,1,1,1,1);
}else if(animationplayed == 225) {
ApplyAnimation(playerid,"PED","roadcross",4.1,0,1,1,1,1);
}else if(animationplayed == 226) {
ApplyAnimation(playerid,"PED","roadcross_female",4.1,0,1,1,1,1);
}else if(animationplayed == 227) {
ApplyAnimation(playerid,"PED","roadcross_gang",4.1,0,1,1,1,1);
}else if(animationplayed == 228) {
ApplyAnimation(playerid,"PED","roadcross_old",4.1,0,1,1,1,1);
}else if(animationplayed == 229) {
ApplyAnimation(playerid,"PED","run_1armed",4.1,0,1,1,1,1);
}else if(animationplayed == 230) {
ApplyAnimation(playerid,"PED","run_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 231) {
ApplyAnimation(playerid,"PED","run_civi",4.1,0,1,1,1,1);
}else if(animationplayed == 232) {
ApplyAnimation(playerid,"PED","run_csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 233) {
ApplyAnimation(playerid,"PED","run_fat",4.1,0,1,1,1,1);
}else if(animationplayed == 234) {
ApplyAnimation(playerid,"PED","run_fatold",4.1,0,1,1,1,1);
}else if(animationplayed == 235) {
ApplyAnimation(playerid,"PED","run_gang1",4.1,0,1,1,1,1);
}else if(animationplayed == 236) {
ApplyAnimation(playerid,"PED","run_left",4.1,0,1,1,1,1);
}else if(animationplayed == 237) {
ApplyAnimation(playerid,"PED","run_old",4.1,0,1,1,1,1);
}else if(animationplayed == 238) {
ApplyAnimation(playerid,"PED","run_player",4.1,0,1,1,1,1);
}else if(animationplayed == 239) {
ApplyAnimation(playerid,"PED","run_right",4.1,0,1,1,1,1);
}else if(animationplayed == 240) {
ApplyAnimation(playerid,"PED","run_rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 241) {
ApplyAnimation(playerid,"PED","Run_stop",4.1,0,1,1,1,1);
}else if(animationplayed == 242) {
ApplyAnimation(playerid,"PED","Run_stopR",4.1,0,1,1,1,1);
}else if(animationplayed == 243) {
ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,0,1,1,1,1);
}else if(animationplayed == 244) {
ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,1);
}else if(animationplayed == 245) {
ApplyAnimation(playerid,"PED","SEAT_idle",4.1,0,1,1,1,1);
}else if(animationplayed == 246) {
ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,1,1);
}else if(animationplayed == 247) {
ApplyAnimation(playerid,"PED","SHOT_leftP",4.1,0,1,1,1,1);
}else if(animationplayed == 248) {
ApplyAnimation(playerid,"PED","SHOT_partial",4.1,0,1,1,1,1);
}else if(animationplayed == 249) {
ApplyAnimation(playerid,"PED","SHOT_partial_B",4.1,0,1,1,1,1);
}else if(animationplayed == 250) {
ApplyAnimation(playerid,"PED","SHOT_rightP",4.1,0,1,1,1,1);
}else if(animationplayed == 251) {
ApplyAnimation(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
}else if(animationplayed == 252) {
ApplyAnimation(playerid,"PED","Smoke_in_car",4.1,0,1,1,1,1);
}else if(animationplayed == 253) {
ApplyAnimation(playerid,"PED","sprint_civi",4.1,0,1,1,1,1);
}else if(animationplayed == 254) {
ApplyAnimation(playerid,"PED","sprint_panic",4.1,0,1,1,1,1);
}else if(animationplayed == 255) {
ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,0,1,1,1,1);
}else if(animationplayed == 256) {
ApplyAnimation(playerid,"PED","swat_run",4.1,0,1,1,1,1);
}else if(animationplayed == 257) {
ApplyAnimation(playerid,"PED","Swim_Tread",4.1,0,1,1,1,1);
}else if(animationplayed == 258) {
ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,1);
}else if(animationplayed == 259) {
ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,1);
}else if(animationplayed == 260) {
ApplyAnimation(playerid,"PED","turn_180",4.1,0,1,1,1,1);
}else if(animationplayed == 261) {
ApplyAnimation(playerid,"PED","Turn_L",4.1,0,1,1,1,1);
}else if(animationplayed == 262) {
ApplyAnimation(playerid,"PED","Turn_R",4.1,0,1,1,1,1);
}else if(animationplayed == 263) {
ApplyAnimation(playerid,"PED","WALK_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 264) {
ApplyAnimation(playerid,"PED","WALK_civi",4.1,0,1,1,1,1);
}else if(animationplayed == 265) {
ApplyAnimation(playerid,"PED","WALK_csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 266) {
ApplyAnimation(playerid,"PED","Walk_DoorPartial",4.1,0,1,1,1,1);
}else if(animationplayed == 267) {
ApplyAnimation(playerid,"PED","WALK_drunk",4.1,0,1,1,1,1);
}else if(animationplayed == 268) {
ApplyAnimation(playerid,"PED","WALK_fat",4.1,0,1,1,1,1);
}else if(animationplayed == 269) {
ApplyAnimation(playerid,"PED","WALK_fatold",4.1,0,1,1,1,1);
}else if(animationplayed == 270) {
ApplyAnimation(playerid,"PED","WALK_gang1",4.1,0,1,1,1,1);
}else if(animationplayed == 271) {
ApplyAnimation(playerid,"PED","WALK_gang2",4.1,0,1,1,1,1);
}else if(animationplayed == 272) {
ApplyAnimation(playerid,"PED","WALK_old",4.1,0,1,1,1,1);
}else if(animationplayed == 273) {
ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,1,1);
}else if(animationplayed == 274) {
ApplyAnimation(playerid,"PED","WALK_rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 275) {
ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,0,1,1,1,1);
}else if(animationplayed == 276) {
ApplyAnimation(playerid,"PED","WALK_start",4.1,0,1,1,1,1);
}else if(animationplayed == 277) {
ApplyAnimation(playerid,"PED","WALK_start_armed",4.1,0,1,1,1,1);
}else if(animationplayed == 278) {
ApplyAnimation(playerid,"PED","WALK_start_csaw",4.1,0,1,1,1,1);
}else if(animationplayed == 279) {
ApplyAnimation(playerid,"PED","WALK_start_rocket",4.1,0,1,1,1,1);
}else if(animationplayed == 280) {
ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,0,1,1,1,1);
}else if(animationplayed == 281) {
ApplyAnimation(playerid,"PED","WEAPON_crouch",4.1,0,1,1,1,1);
}else if(animationplayed == 282) {
ApplyAnimation(playerid,"PED","woman_idlestance",4.1,0,1,1,1,1);
}else if(animationplayed == 283) {
ApplyAnimation(playerid,"PED","woman_run",4.1,0,1,1,1,1);
}else if(animationplayed == 284) {
ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,0,1,1,1,1);
}else if(animationplayed == 285) {
ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,0,1,1,1,1);
}else if(animationplayed == 286) {
ApplyAnimation(playerid,"PED","woman_runpanic",4.1,0,1,1,1,1);
}else if(animationplayed == 287) {
ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,0,1,1,1,1);
}else if(animationplayed == 288) {
ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,0,1,1,1,1);
}else if(animationplayed == 289) {
ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,0,1,1,1,1);
}else if(animationplayed == 290) {
ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,0,1,1,1,1);
}else if(animationplayed == 291) {
ApplyAnimation(playerid,"PED","WOMAN_walkold",4.1,0,1,1,1,1);
}else if(animationplayed == 292) {
ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,0,1,1,1,1);
}else if(animationplayed == 293) {
ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,0,1,1,1,1);
}else if(animationplayed == 294) {
ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,0,1,1,1,1);
}else if(animationplayed == 295) {
ApplyAnimation(playerid,"PED","XPRESSscratch",4.1,0,1,1,1,1);
}
return 1;
}
	if (strcmp(cmd, "/animes", true) == 0)
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "Alguns animes");
	    SendClientMessage(playerid, COLOR_PURPLE, "/dance /ligar /desligar /bebado /bomba /apontar /merda /de4 /peidar");
	    SendClientMessage(playerid, COLOR_PURPLE, "/handsup /sentar /deitar /abaixar /vomitar /comer /rape /passaramao /fumarbaseado");
    	SendClientMessage(playerid, COLOR_PURPLE, "/cobrar /overdose /fumar /fumar2 /mijar /gro /conversar /fodase /taichi /punheta");
	    return true;
	}
	if (strcmp(cmd, "/de4", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s está de 4 ", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,1,1,1,1,1,1);
	    return true;
	}
	if (strcmp(cmd, "/handsup", true) == 0)
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s se rendeu. ", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return true;
	}
	if (strcmp(cmd, "/sentar", true) == 0)
	{
        ApplyAnimation(playerid,"PED","SEAT_idle",1.0,1,0,0,0,0);
		return true;
	}
	if (strcmp(cmd, "/mijar", true) == 0)
	{
        ApplyAnimation(playerid, "PAULNMAC", "Piss_in", 4.0, 1, 0, 0, 0, 0);
		SetPlayerSpecialAction(playerid, 68);
		return true;
	}
		if(!strcmp(cmd, "/animrobbank", true))
		{
			tmp = strtok(cmdtext, idx);
			animid = strval(tmp);
				if(!strlen(tmp)||animid < 1 || animid > 5)
				{
					SendClientMessage(playerid,COLOR_WHITE," Syntax: /animrobbank [1-5]");
				return 1;
				}
				switch(animid)
				{
				    case 1: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_End",4.1,0,1,1,1,1);
				    case 2: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open",4.1,0,1,1,1,1);
				    case 3: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open_O",4.1,0,1,1,1,1);
				    case 4: ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Rob",4.1,0,1,1,1,1);
				    case 5: ApplyAnimation(playerid,"ROB_BANK","SHP_HandsUp_Scr",4.1,0,1,1,1,1);
				}
		return true;
		}
	if (strcmp(cmd, "/dance", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid) == 1) return SendClientMessage(playerid,COLOR_RED," Animations are inaccessible in transport!");

		tmp = strtok(cmdtext, idx);
		animid = strval(tmp);
		if(!strlen(tmp)||animid < 1 || animid > 15)
		{
			SendClientMessage(playerid,COLOR_GRAD1," Use: /dance [1-15]");
			return true;
		}
		switch(animid)
		{
			case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
			case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
			case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
			case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
   		    case 5:ApplyAnimation(playerid, "DANCING","dance_loop", 4.0, 1, 1, 1, 1, 0, 1);
		    case 6:ApplyAnimation(playerid, "DANCING","DAN_Down_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 7:ApplyAnimation(playerid, "DANCING","DAN_Left_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 8:ApplyAnimation(playerid, "DANCING","DAN_Loop_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 9:ApplyAnimation(playerid, "DANCING","DAN_Right_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 10:ApplyAnimation(playerid, "DANCING","DAN_Up_A", 4.0, 1, 1, 1, 1, 0, 1);
		    case 11:ApplyAnimation(playerid, "DANCING","dnce_M_a", 4.0, 1, 1, 1, 1, 0, 1);
		    case 12:ApplyAnimation(playerid, "DANCING","dnce_M_b", 4.0, 1, 1, 1, 1, 0, 1);
		    case 13:ApplyAnimation(playerid, "DANCING","dnce_M_c", 4.0, 1, 1, 1, 1, 0, 1);
		    case 14:ApplyAnimation(playerid, "DANCING","dnce_M_d", 4.0, 1, 1, 1, 1, 0, 1);
		    case 15:ApplyAnimation(playerid, "DANCING","dnce_M_ e", 4.0, 1, 1, 1, 1, 0, 1);
		}
		return true;
	}
	if (strcmp(cmd, "/repe", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s está dançando um repe ^^!.", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/fodase", true) == 0)
	{
	    ApplyAnimation(playerid, "PED", "fucku", 4.0, 0, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/taichi", true) == 0)
	{
	    ApplyAnimation(playerid, "PARK", "Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/observar", true) == 0)
	{
	    ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/bebado", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s está bebado uhul ^^!.", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    ApplyAnimation(playerid, "PED", "WALK_DRUNK", 4.0, 1, 1, 1, 1, 0);
	    return true;
	}
	if (strcmp(cmd, "/deitar", true) == 0)
	{
	    ApplyAnimation(playerid, "BEACH", "bather", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/abaixar", true) == 0)
	{
	    ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
	    return true;
	} 
	if(strcmp(cmd, "/punheta", true) == 0) 
	{
	 ApplyAnimation(playerid,"PAULNMAC", "wank_loop", 1.800001, 1, 0, 0, 1, 600);
	 return true;
	}
	if (strcmp(cmd, "/vomitar", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s está vomitando ^^!.", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/passaramao", true) == 0)
	{
	    ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/cobrar", true) == 0)
	{
	    ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.0, 0, 0, 0, 0, 0); 
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	    return true;
	}
	if (strcmp(cmd, "/overdose", true) == 0)
	{
	    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/fumar", true) == 0)
	{
	   	ApplyAnimation(playerid, "SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	  	SetPlayerAttachedObject(playerid, 0, 3044, 2, 0.070999,0.016000,0.024000, 0.000000,0.000000,177.499969,1.000000,1.000000,1.000000);
	    return true;
	}
	if (strcmp(cmd, "/fumarbaseado", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s está fumando um baseado ^^!.", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/fumar2", true) == 0)
	{
         ApplyAnimation(playerid, "SMOKING", "F_smklean_loop", 4.0, 1, 0, 0, 0, 0);
  		SetPlayerAttachedObject(playerid, 0, 3044, 2, 0.070999,0.016000,0.024000, 0.000000,0.000000,177.499969,1.000000,1.000000,1.000000);
		
	    return true;
	}
	if (strcmp(cmd, "/gro", true) == 0)
	{
	    ApplyAnimation(playerid, "BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0);
	    return true;
	}
	if (strcmp(cmd, "/peidar", true) == 0)
	{
	    GetPlayerName(playerid, sendername, sizeof(sendername));
	    format(string, sizeof(string), "%s Acabou de soltar um peido snif snif ^^!.", sendername);
	    ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
	    ApplyAnimation(playerid,"FINALE","FIN_Land_Car",4.1,1,1,1,1,1,1);
	    return true;
	}

	if(strcmp(cmd, "/ajustar", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
				    return true;
				}
		        if(!PlayerToPoint(12.0, playerid, 268.3327,77.8972,1001.0391) && !PlayerToPoint(12.0, playerid, 1545.4073,-1607.9791,13.3828) && !PlayerToPoint(12.0, playerid, 1281.0261,-1633.7400,6.0538) && !PlayerToPoint(12.0, playerid, 920.5212,-1184.8267,16.9766) &&  !PlayerToPoint(12.0, playerid, 221.1459,115.3492,999.0156) && !PlayerToPoint(12.0, playerid, 193.9101,179.2799,1003.0234) && !PlayerToPoint(12.0, playerid, 1545.7220,-1609.4769,13.3828)
			    && !PlayerToPoint(12.0, playerid, 1019.6051,-317.6436,73.9922) && !PlayerToPoint(12.0, playerid, 195.5733,158.4008,1003.0234)
                && !PlayerToPoint(12.0, playerid, -1298.8188,490.5014,11.1953) && !PlayerToPoint(12.0, playerid, 264.1557,77.5797,1001.0391) && !PlayerToPoint(12.0, playerid, 1361,175.1075,1003.0234) && !PlayerToPoint(12.0, playerid, 321.8284,315.6733,999.1484) && !PlayerToPoint(12.0, playerid, 709.5662,-568.6655,-6.1966) && !PlayerToPoint(3,playerid,852.7875,-1275.1605,14.3879))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está perto da cela, não pode ajustar o tempo do suspeito !");
				    return true;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
                	SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajustar [id] [tempo (minutos)]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
                	SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajustar [id] [tempo (minutos)]");
					return true;
				}
				new time = strval(tmp);
				if(time < 1 || time > 20) { SendClientMessage(playerid, COLOR_GREY, "   O Tempo não pode ser menor que 1 nem maior que 20 !"); return true; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /ajustar [id] [tempo (minutos)]");
					return true;
				}
				new suspect = giveplayerid;
				if(IsPlayerConnected(suspect))
				{
				format(string, sizeof(string), "* Você ajustou %s !", giveplayer);
				SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
				PlayerInfo[suspect][pJailTime] = time * 60;
				format(string, sizeof(string), "Oficial %s ajustou seu tempo de prisão para %d Segundos.", PlayerName(playerid),PlayerInfo[suspect][pJailTime]);
				SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
				}
				}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Oficial !");
			    return true;
			}
		}//not connected
		return true;
	}

	if(strcmp(cmd, "/prender", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			if(IsACop(playerid))
			{
				if(OnDuty[playerid] != 1)
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Você não Bateu o cartão!");
				    return true;
				}
		        if(!PlayerToPoint(12.0, playerid, 268.3327,77.8972,1001.0391) && !PlayerToPoint(12.0, playerid, 1545.4073,-1607.9791,13.3828) && !PlayerToPoint(12.0, playerid, 1281.0261,-1633.7400,6.0538) && !PlayerToPoint(12.0, playerid, 920.5212,-1184.8267,16.9766) &&  !PlayerToPoint(12.0, playerid, 221.1459,115.3492,999.0156) && !PlayerToPoint(12.0, playerid, 193.9101,179.2799,1003.0234) && !PlayerToPoint(12.0, playerid, 1545.7220,-1609.4769,13.3828)
			    && !PlayerToPoint(12.0, playerid, 1019.6051,-317.6436,73.9922) && !PlayerToPoint(12.0, playerid, 195.5733,158.4008,1003.0234)
                && !PlayerToPoint(12.0, playerid, -1298.8188,490.5014,11.1953) && !PlayerToPoint(12.0, playerid, 264.1557,77.5797,1001.0391) && !PlayerToPoint(12.0, playerid, 1361,175.1075,1003.0234) && !PlayerToPoint(12.0, playerid, 321.8284,315.6733,999.1484) && !PlayerToPoint(12.0, playerid, 709.5662,-568.6655,-6.1966) && !PlayerToPoint(3,playerid,852.7875,-1275.1605,14.3879))
				{// Jail spot
				    SendClientMessage(playerid, COLOR_GREY, "   Você não está perto da cela, não pode prender o suspeito !");
				    return true;
				}
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
                	SendClientMessage(playerid, COLOR_GRAD2, "USE: /prender [id] [tempo (minutos)] [fianca (0=nao 1=sim)] [preco da fianca]");
					return true;
				}
				giveplayerid = ReturnUser(tmp);
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
                	SendClientMessage(playerid, COLOR_GRAD2, "USE: /prender [id] [tempo (minutos)] [fianca (0=nao 1=sim)] [preco da fianca]");
					return true;
				}
				new time = strval(tmp);
				if(time < 1 || time > 20) { SendClientMessage(playerid, COLOR_GREY, "   O Tempo não pode ser menor que 1 nem maior que 20 !"); return true; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /prender [id] [tempo (minutos)] [fianca (0=nao 1=sim)] [preco da fianca]");
					return true;
				}
                new bail = strval(tmp);
				if(bail < 0 || bail > 1) { SendClientMessage(playerid, COLOR_GREY, "   Fiança Tem Que ser 0=Não ou 1=Sim !"); return true; }
				tmp = strtok(cmdtext, idx);
				if(!strlen(tmp))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USE: /prender [id] [tempo (minutos)] [fianca (0=nao 1=sim)] [preco da fianca]");
					return true;
				}
				new bailprice = strval(tmp);
				if(bailprice < 0 || bailprice > 10000) { SendClientMessage(playerid, COLOR_GREY, "   O Preço não pode ser menor que 0 nem maior que R$300000 !"); return true; }
				new suspect = giveplayerid;
				if(IsPlayerConnected(suspect))
				{
					if(GetDistanceBetweenPlayers(playerid,suspect) < 15)
					{
 					    if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
					    {
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedPoints[suspect] < 1)
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador deve ter no mínimo 1 nível de procurado!");
							    return true;
							}
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							//GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							ResetPlayerWeaponsEx(suspect);
							if(PlayerInfo[playerid][pMembro]==1||PlayerInfo[playerid][pLider]==1)
							{
								format(string, sizeof(string), "<< Policial Militar %s prendeu o suspeito %s >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							SetPlayerInterior(suspect, 6);
							SetPlayerPos(suspect,264.6288,77.5742,1001.0391);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: R$%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							PlayerInfo[suspect][pJailed] = 1;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevel(suspect, 0);
							WantAdvogado[suspect] = 1;
							PlayerInfo[suspect][pMuted] = 0;
							Controle(suspect, 1);
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pDrogas] = 0;
				            PlayerInfo[suspect][pDrogas2] = 0;
				            PlayerInfo[suspect][pDrogas3] = 0;
				            PlayerInfo[suspect][pMats] = 0;
				            Controle(suspect, 1);
				            TaCongelado[suspect] = false;
							return true;
						}
					    if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
					    {
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedPoints[suspect] < 1)
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador deve ter no minimo 1 nível de procura!");
							    return true;
							}
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							//GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							ResetPlayerWeaponsEx(suspect);
							if(PlayerInfo[playerid][pMembro]==2||PlayerInfo[playerid][pLider]==2)
							{
								format(string, sizeof(string), "<< B.O.P.E %s prendeu o suspeito %s >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							SetPlayerInterior(suspect, 10);
							SetPlayerPos(suspect,223.5335,110.3779,999.0156);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: R$%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							PlayerInfo[suspect][pJailed] = 3;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							WantedPoints[suspect] = 0;
      						SetPlayerWantedLevel(suspect, 0);
							WantAdvogado[suspect] = 1;
							Controle(suspect, 1);
							PlayerInfo[suspect][pMuted] = 0;
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pDrogas] = 0;
					        PlayerInfo[suspect][pDrogas2] = 0;
					        PlayerInfo[suspect][pDrogas3] = 0;
					        PlayerInfo[suspect][pMats] = 0;
					        Controle(suspect, 1);
					        TaCongelado[suspect] = false;
							return true;
       					}
					    if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedPoints[suspect] < 1)
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador deve ter no minimo 1 nível de procura!");
							    return true;
							}
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							//GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							ResetPlayerWeaponsEx(suspect);
							if(PlayerInfo[playerid][pMembro]==11||PlayerInfo[playerid][pLider]==11)
							{
								format(string, sizeof(string), "<< Policial Federal %s prendeu o suspeito %s >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							SetPlayerInterior(suspect, 5);
							SetPlayerPos(suspect,319.0175,317.0517,999.1484);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: R$%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							PlayerInfo[suspect][pJailed] = 5;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevel(suspect, 0);
							WantAdvogado[suspect] = 1;
							Controle(suspect, 1);
							PlayerInfo[suspect][pMuted] = 0;
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pDrogas] = 0;
				            PlayerInfo[suspect][pDrogas2] = 0;
				            PlayerInfo[suspect][pDrogas3] = 0;
				            PlayerInfo[suspect][pMats] = 0;
				            Controle(suspect, 1);
				            TaCongelado[suspect] = false;
							return true;
          				}
                        if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
						{
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedPoints[suspect] < 1)
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador deve ter no minimo 1 nível de procura!");
							    return true;
							}
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							//GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							ResetPlayerWeaponsEx(suspect);
							if(PlayerInfo[playerid][pMembro]==3||PlayerInfo[playerid][pLider]==3)
							{
								format(string, sizeof(string), "<< Exército %s prendeu o suspeito %s >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							SetPlayerInterior(suspect, 0);
							SetPlayerPos(suspect,-1293.2203,490.5885,11.1953);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: R$%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							PlayerInfo[suspect][pJailed] = 7;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevel(suspect, 0);
							WantAdvogado[suspect] = 1;
							Controle(suspect, 1);
							PlayerInfo[suspect][pMuted] = 0;
							PlayerCuffed[suspect] = 0;
							PlayerInfo[suspect][pDrogas] = 0;
				            PlayerInfo[suspect][pDrogas2] = 0;
				            PlayerInfo[suspect][pDrogas3] = 0;
				            PlayerInfo[suspect][pMats] = 0;
				            Controle(suspect, 1);
				            TaCongelado[suspect] = false;
							return true;
	                    }
					    if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
					    {
							GetPlayerName(suspect, giveplayer, sizeof(giveplayer));
							GetPlayerName(playerid, sendername, sizeof(sendername));
							if(WantedPoints[suspect] < 1)
							{
							    SendClientMessage(playerid, COLOR_GREY, "   O Jogador deve ter no minimo 1 nível de procura!");
							    return true;
							}
							format(string, sizeof(string), "* Você Prendeu %s !", giveplayer);
							SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
							//GivePlayerMoney(suspect, -moneys);
							format(string, sizeof(string), "Preso por %s", PlayerName(playerid));
							GameTextForPlayer(suspect, string, 5000, 5);
							ResetPlayerWeaponsEx(suspect);
							if(PlayerInfo[playerid][pMembro]==16||PlayerInfo[playerid][pLider]==16)
							{
								format(string, sizeof(string), "<< Policial Civil %s prendeu o suspeito %s >>", sendername, giveplayer);
								OOCNews(COLOR_LIGHTRED, string);
							}
							SetPlayerInterior(suspect, 3);
							SetPlayerPos(suspect,198.1076,175.0731,1003.0234);
							PlayerInfo[suspect][pJailTime] = time * 60;
							if(bail == 1)
							{
								JailPrice[suspect] = bailprice;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: R$%d", PlayerInfo[suspect][pJailTime], JailPrice[suspect]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							else
							{
							    JailPrice[suspect] = 0;
								format(string, sizeof(string), "Você foi preso por %d Segundos.   Fiança: Desativada", PlayerInfo[suspect][pJailTime]);
								SendClientMessage(suspect, COLOR_LIGHTBLUE, string);
								Controle(suspect, 1);
								TaCongelado[suspect] = false;
							}
							PlayerInfo[suspect][pJailed] = 4;
							SetPlayerFree(suspect,playerid, "Foi Preso");
							WantedPoints[suspect] = 0;
							SetPlayerWantedLevel(suspect, 0);
							Controle(suspect, 1);
							PlayerInfo[suspect][pMuted] = 0;
							PlayerCuffed[suspect] = 0;
	                        WantAdvogado[suspect] = 1;
	                        PlayerInfo[suspect][pDrogas] = 0;
				            PlayerInfo[suspect][pDrogas2] = 0;
				            PlayerInfo[suspect][pDrogas3] = 0;
				            PlayerInfo[suspect][pMats] = 0;
				            Controle(suspect, 1);
				            TaCongelado[suspect] = false;
							return true;
						}
					}//distance
				}//not connected
				else
				{
				    SendClientMessage(playerid, COLOR_GREY, "   Esse não é um jogador ativo.");
				    return true;
				}
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Você não é um Oficial !");
			    return true;
			}
		}//not connected
		return true;
	}
if (strcmp("/instalarsom", cmdtext) == 0)
	{
	new newcar = GetPlayerVehicleID(playerid);
	new playerState = GetPlayerState(playerid);
if(IsPlayerInAnyVehicle(playerid))
		{
	 if(playerState == PLAYER_STATE_DRIVER)
     	{
          if(strcmp(PlayerName(playerid), CarInfo[newcar][cOwner], true) == 0)
		    {
		    switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
		    {
			    case 400,401,402,404,405,409,410,411,412,415,418,419,
		             420,421,422,426,429,434,436,438,439,444,445,451,458,466,467,
					 470,474,475,477,478,479,480,483,489,490,491,492,494,495,496,
					 500,502,503,504,505,506,507,516,517,518,526,527,529,533,534,535,536,
					 540,541,542,543,545,546,547,549,550,551,554,555,556,557,558,559,
					 560,561,562,565,566,567,575,576,578,579,580,585,587,589,596,597,598,
					 600,602,603,604,605:
			    {
				  if(IsPlayerInRangeOfPoint(playerid,5,1871.7122,-1844.0450,14.6965))
				  {
						SetVehicleParamsEx(GetPlayerVehicleID(playerid),0,0,0,0,0,1,0);
						ShowPlayerDialog(playerid, DialogCaixaSom, DIALOG_STYLE_LIST, "Som Automotivo", "Instalar Som\nEditar\nRemover Som\n", "Ok", "Cancelar");
						PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
                  }
			  	  else
				     SendClientMessage(playerid, -1,"Você não está na Som & Rodas para instalar som em seu veículo!");
				}
				default:
					SendClientMessage(playerid, 0xB4B5B7FF,"Você não pode instalar som neste veículo.");
			}
		}
		else
		    SendClientMessage(playerid, 0xB4B5B7FF,"Você não pode instalar som neste veículo.");
	   }
	}
}
	if (strcmp(cmd, "/pegararma", true) == 0 || strcmp(cmd, "/parma", true) == 0)
	{
		new f = maxobj+1;
		for(new a=0;a<sizeof(ObjCoords);a++)
		{
			if(ObjetoID[a][0] != 0)
			{
				if(IsPlayerInRangeOfPoint(playerid, 1, ObjCoords[a][0], ObjCoords[a][1], ObjCoords[a][2]))
				f = a;
			}
		}
		if(f == maxobj+1 || Dropped[f] == 1) return SendClientMessage(playerid, COLOR_RED, "Você não está perto de uma arma.");
		else
		{
            new gunname[100];
		    new buffer[512];
            DestroyObject(objectgun[f]);
			GivePlayerWeapon(playerid, ObjetoID[f][0], ObjetoID[f][1]);
			GetWeaponName(ObjetoID[f][0], gunname, sizeof(gunname));
            format(buffer, sizeof(buffer), "Você pegou uma %s do chao.", gunname);
			SendClientMessage(playerid, COLOR_LIGHTGREEN, buffer);
			format(buffer, sizeof(buffer), "* %s pegou uma %s no chao",PlayerName(playerid), gunname);
			ProxDetector(30.0, playerid, buffer, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			ObjetoID[f][0] = 0;
            ObjetoID[f][1] = 0;
            ObjetoID[f][2] = 0;
		    ObjCoords[f][0] = 0.0;
			ObjCoords[f][1] = 0.0;
			ObjCoords[f][2] = 0.0;
		}
		return 1;
	}
    if (strcmp(cmd, "/largararma", true) == 0 || strcmp(cmd, "/larma", true) == 0)
	{
		new gunID = GetPlayerWeapon(playerid);
		new gunAmmo = GetPlayerAmmo(playerid);
		if(gunID < 1 || gunID > 46 || gunID==38 || gunID==37 || gunID==44 || gunID==45 || gunID==9  || gunID==26 || gunID==28 || gunID==32 || gunID==18 || gunID==35 || gunID==36 || gunID==37 || gunID==38 || gunID==39 || gunID==40	|| gunID==41 || gunID==42 || gunID==16 || gunID==27)
		{ SendClientMessage(playerid, COLOR_GRAD1, "Você não pode jogar essa arma no chão."); return true; }
		if(gunID != 0 && gunAmmo != 0)
		{
			new f = maxobj+1;
			for(new a = 0; a < sizeof(ObjCoords); a++)
			{
				if(ObjCoords[a][0] == 0.0) f = a;
			}

			if(f == maxobj+1) return SendClientMessage(playerid, COLOR_RED, "[ERRO] Você não pode jogar armas agora, tente novamente mais tarde.");
   			else
   			{
                new gunname[100];
			    new buffer[512];
				GetWeaponName(gunID, gunname, sizeof(gunname));
				format(buffer, sizeof(buffer), "Você deixou uma %s no chao", gunname);
				SendClientMessage(playerid, COLOR_LIGHTGREEN, buffer);
				format(buffer, sizeof(buffer), "* %s jogou uma %s no chao",PlayerName(playerid), gunname);
                ProxDetector(30.0, playerid, buffer, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				RemovePlayerWeapon(playerid, gunID);
				ObjetoID[f][0] = gunID;
				ObjetoID[f][1] = gunAmmo;
				ObjetoID[f][2] = GetPlayerVirtualWorld(playerid);
		        GetPlayerPos(playerid, ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]);
                objectgun[f] = CreateObject(GunObjects[gunID][0], ObjCoords[f][0], ObjCoords[f][1], ObjCoords[f][2]-1, 93.7, 120.0, 120.0, 200.0);
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/contrato", true) == 0)
	{
	    if(IsPlayerConnected(playerid))
	   	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /contrato [ID/Nome] [Quantia]");
				return true;
			}
			giveplayerid = ReturnUser(tmp);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: /contrato [ID/Nome] [Quantia]");
				return true;
			}
			moneys = strval(tmp);
			if(moneys < 1000) { SendClientMessage(playerid, COLOR_GREY, "   Contrato Minimo R$1000!"); return true; }
			if(moneys > 10000) { SendClientMessage(playerid, COLOR_GREY, "   Contrato Máximo R$10000!"); return true; }
			if (IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(PlayerInfo[giveplayerid][pMembro] == 8 && PlayerInfo[playerid][pMembro] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em membros de sua agencia!");
				        return true;
                    }
				    if(PlayerInfo[giveplayerid][pMembro] == 22 && PlayerInfo[playerid][pMembro] == 22)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em membros de sua agencia!");
				        return true;
				    }
				    else if(PlayerInfo[giveplayerid][pLider] == 8 && PlayerInfo[playerid][pMembro] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em assasinos!");
				        return true;
				    }
				    else if(PlayerInfo[giveplayerid][pMembro] == 8||PlayerInfo[giveplayerid][pLider] == 8)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em assasinos!");
				        return true;
         			}
				    else if(PlayerInfo[giveplayerid][pMembro] == 22 && PlayerInfo[giveplayerid][pMembro] == 22)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Não pode colocar contrato em assassinos!");
				        return true;
				    }
				    else if(admtrampando[giveplayerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Você não pode colocar contratos em Admins em modo de trabalho!");
				        return true;
				    }
				    else if(helpertrampando[giveplayerid] == 1)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "Você não pode colocar contratos em Helpers em modo de ajuda!");
				        return true;
				    }
				    if(IsACop(giveplayerid) && moneys <= 300)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Preco Minimo de R$300 em oficiais!");
				        return true;
				    }
				    if(giveplayerid == playerid) { SendClientMessage(playerid, COLOR_GREY, "Não pode colocar contrato em si mesmo!"); return true; }
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					playermoney = GetPlayerMoneyEx(playerid);
					if (moneys > 0 && playermoney >= moneys)
					{
						GivePlayerMoneyEx(playerid, (0 - moneys));
						PlayerInfo[giveplayerid][pHeadValue]+=moneys;
						format(string, sizeof(string), "%s Colocou um contrato em %s, por R$%d.",sendername, giveplayer, moneys);
						SendFamilyMessage(8, COR_BOPE, string); SendFamilyMessage(22, COR_BOPE, string);
						format(string, sizeof(string), "* Você colocou um contrato em %s, por R$%d.",giveplayer, moneys);
						SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						ColocouContrato = playerid;
					}
					else
					{
						SendClientMessage(playerid, COLOR_GRAD1, "   Você não possui essa grana.");
					}
				}
			}
			else
			{
				format(string, sizeof(string), "   %d não é um jogador ativo.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
		}
		}//not connected
		return true;
	}
//------------------------------------------------------------------------------------------------------
public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if(IsPlayerConnected(playerid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(!BigEar[i])
				{
					GetPlayerPos(i, posx, posy, posz);
					tempposx = (oldposx -posx);
					tempposy = (oldposy -posy);
					tempposz = (oldposz -posz);
					//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
					if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
					{
						SendClientMessage(i, col1, string);
					}
					else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
					{
						SendClientMessage(i, col2, string);
					}
					else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
					{
						SendClientMessage(i, col3, string);
					}
					else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
					{
						SendClientMessage(i, col4, string);
					}
					else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
					{
						SendClientMessage(i, col5, string);
					}
				}
				else
				{
					SendClientMessage(i, col1, string);
				}
			}
		}
	}//not connected
	return true;
}
public CrimInRange(Float:radi, playerid,copid)
{
	if(IsPlayerConnected(playerid)&&IsPlayerConnected(copid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		GetPlayerPos(copid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
		{
			return true;
		}
	}
	return 0;
}
public ProxDetectorS(Float:radi, playerid, targetid)
{
    if(IsPlayerConnected(playerid)&&IsPlayerConnected(targetid))
	{
		new Float:posx, Float:posy, Float:posz;
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		//radi = 2.0; //Trigger Radius
		GetPlayerPos(targetid, posx, posy, posz);
		tempposx = (oldposx -posx);
		tempposy = (oldposy -posy);
		tempposz = (oldposz -posz);
		//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		new Float:tempposx, Float:tempposy, Float:tempposz;
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		tempposx = (oldposx -x);
		tempposy = (oldposy -y);
		tempposz = (oldposz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			return 1;
		}
	}
	return 0;
}
public OnVehicleMod(playerid,vehicleid,componentid)
{
	new mods = InitComponents(componentid);
	if(IsPlayerInVehicle(playerid, vehicleid))
	{
		switch(mods)
		{
			case 1: { CarInfo[vehicleid][mod1] = componentid; }
			case 2: { CarInfo[vehicleid][mod2] = componentid; }
			case 3: { CarInfo[vehicleid][mod3] = componentid; }
			case 4: { CarInfo[vehicleid][mod4] = componentid; }
			case 5: { CarInfo[vehicleid][mod5] = componentid; }
			case 6: { CarInfo[vehicleid][mod6] = componentid; }
			case 7: { CarInfo[vehicleid][mod7] = componentid; }
			case 8: { CarInfo[vehicleid][mod8] = componentid; }
			case 9: { CarInfo[vehicleid][mod9] = componentid; }
			case 10: { CarInfo[vehicleid][mod10] = componentid; }
			case 11: { CarInfo[vehicleid][mod11] = componentid; }
			case 12: { CarInfo[vehicleid][mod12] = componentid; }
			case 13: { CarInfo[vehicleid][mod13] = componentid; }
			case 14: { CarInfo[vehicleid][mod14] = componentid; }
			case 15: { CarInfo[vehicleid][mod15] = componentid; }
			case 16: { CarInfo[vehicleid][mod16] = componentid; }
			case 17: { CarInfo[vehicleid][mod17] = componentid; }
		}
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(IsPlayerInVehicle(playerid, vehicleid))
	{
	    if(GetVehicleModel(vehicleid) == 483)
	    {
			switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 534)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 535)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 536)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 558)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 559)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 560)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 561)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 562)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 565)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 567)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 575)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    	}
  		}
  		if(GetVehicleModel(vehicleid) == 576)
	    {
	   		switch(paintjobid)
			{
	    		case 0: CarInfo[vehicleid][paintjob] = 0;
	    		case 1: CarInfo[vehicleid][paintjob] = 1;
	    		case 2: CarInfo[vehicleid][paintjob] = 2;
	    	}
  		}
	}
	return 1;
}
public CustomPickups()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    new tmpcar = GetPlayerVehicleID(i);
			if(PlayerToPoint(15.0, i, 63.4227,-1525.4623,4.9099) || PlayerToPoint(15.0, i, 39.9876,-1537.8563,5.2190) || PlayerToPoint(15.0, i, 50.8741,-1531.4620,5.2977))
			{
			    if(Reduzido[i] == 0)
			    {
                    GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 20);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			else if(PlayerToPoint(15.0, i, -1133.7361,1094.6746,38.5247) || PlayerToPoint(15.0, i, -1159.4485,1090.8225,39.4211))
			{
			    if(Reduzido[i] == 0)
			    {
					GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 500);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			else if(PlayerToPoint(15.0, i, -2672.4253,1280.6934,55.9456) || PlayerToPoint(15.0, i, -2690.4136,1268.3032,55.9456))
			{
			    if(Reduzido[i] == 0)
			    {
                    GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 20);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			else if(PlayerToPoint(22.0, i, 2514.2334,292.2852,29.3627) || PlayerToPoint(22.0, i, 2540.9075,310.9224,28.8231))
			{
			    if(Reduzido[i] == 0)
			    {
					GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 20);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			else if(PlayerToPoint(15.0, i, 81.8500,-1259.7455,14.3465) || PlayerToPoint(15.0, i, 96.9080,-1280.1302,14.1135))
			{
			    if(Reduzido[i] == 0)
			    {
					GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 20);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			else if(PlayerToPoint(15.0, i, 1745.8721,525.1683,27.6760) || PlayerToPoint(15.0, i, 1752.5485,523.1072,27.6667) || PlayerToPoint(15.0, i, 1734.7725,529.1494,27.6652) || PlayerToPoint(15.0, i, 1728.3962,531.7761,27.6392))
			{
			    if(Reduzido[i] == 0)
			    {
					GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 20);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			else if(PlayerToPoint(15.0, i, 519.0666,468.8470,18.9297) || PlayerToPoint(15.0, i, 524.3035,472.9212,18.9297) || PlayerToPoint(15.0, i, -181.2493,329.5744,12.0781) || PlayerToPoint(15.0, i, -175.0119,327.9676,12.0781))
			{
			    if(Reduzido[i] == 0)
			    {
					GameTextForPlayer(i,"~w~ Pedagio Pago!~n~~r~ -20 Reais.", 3000, 1);
					SendClientMessage(i, COLOR_YELLOW, "Pedágio Pago! -R$-20!");
					GivePlayerMoney(i, - 20);
					SBizzInfo[9][sbTill] += 20;
					ExtortionSBiz(9, 20);
					SetTimerEx("ReduzTempo", 20000, false, "i", i);
					Reduzido[i] = 1;
				}
			}
			if (IsAPlane(tmpcar))
			{// Ganhar Paraquedas Helicoptero
				GivePlayerWeapon(i, 46, 1);
			}
            else if (PlayerToPoint(2.0, i, 1544.0869,-1353.1323,329.4746))
			{// Ganhar Paraquedas Prédio
				GivePlayerWeapon(i, 46, 1);
			}
			else if(PlayerToPoint(1,i,822.0201,4.2154,1004.1797) || PlayerToPoint(1, i,822.0099,6.3927,1004.1797) || PlayerToPoint(1, i,822.0087,-0.1116,1004.1797) || PlayerToPoint(1, i,822.0237,1.7826,1004.1797))
			{//loterica
			    GameTextForPlayer(i, "~y~Digite ~r~/loteria ~y~para comprar um bilhete!", 5000, 5);
			}
			/*else if(PlayerToPoint(3.0, i,249.6155,67.6277,1003.6406))
   			{
				if (PlayerInfo[i][pEmprego] == 2)
				{
					GameTextForPlayer(i, "~g~PAGUE 2000 REAIS e, ~n~ ~w~ | Digite ~y~/autorizacao |", 5000, 5);
				}
			}*/
			else if (PlayerToPoint(1, i,246.3118,72.9691,1003.6406)) // /pp automatico
			{
				MoveObject( PDDOORa, 247.005905 , 72.448440 , 1006.912902,3);
				GameTextForPlayer(i, "~w~Portao ~n~~b~Aberto", 4000, 3);
				SetTimer("GaragemDpClosed", 5000, false);
			}
			else if (PlayerToPoint(1, i,367.3167,162.2013,1025.7891)) // /ppre automatico
			{
                MoveObject( PortaoPre, 369.15893554688, 162.35037231445, 1030.9030273438,3);
				GameTextForPlayer(i, "~w~Porta ~n~~b~Aberta", 4000, 3);
				SetTimer("PortaoPre2", 5000, false);
			}
			else if (PlayerToPoint(3, i,2268.0308,2449.0750,3.5313))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /subirlv", 5000, 5);
			}
			else if (PlayerToPoint(3, i,2267.2820,2458.2598,38.6837))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /descerlv", 5000, 5);
			}
			else if (PlayerToPoint(3, i,2808.0322,-1176.3846,25.3794) || PlayerToPoint(3, i,2807.4321,-1174.6454,32.6688))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /evagos", 5000, 5);
			}
			else if (PlayerToPoint(3, i,901.4695,-1276.5393,23.0861) || PlayerToPoint(3, i,903.3665,-1272.1648,14.5035))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /epc", 5000, 5);
			}
   			else if (PlayerToPoint(3, i,611.1056,-583.5060,18.2109) || PlayerToPoint(3, i,618.5693,-566.6214,26.1432))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /epf", 5000, 5);
			}
			else if (PlayerToPoint(3, i,2155.9192,-1814.9847,13.5469) || PlayerToPoint(3, i,2154.7317,-1822.2634,18.8672))//Comando Vermelho
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /ecv", 5000, 5);
			}
			else if (PlayerToPoint(3, i,221.1146,-234.2171,8.0786) || PlayerToPoint(3, i,221.1805,-237.8225,1.5781))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /epcc", 5000, 5);
			}
			else if (PlayerToPoint(2, i,969.8785,-1516.9382,23.7241) || PlayerToPoint(2, i,970.1837,-1520.5553,13.5502))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /ehit", 5000, 5);
			}
			else if (PlayerToPoint(3, i,1225.5535,-1811.9352,16.5938) || PlayerToPoint(3, i,1235.1705,-1768.2770,33.6559))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /ebomb", 5000, 5);
			}
			else if (PlayerToPoint(3, i,1275.4336,-1650.2966,13.5291) || PlayerToPoint(3, i,1258.8270,-1686.1508,44.4594))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /epr", 5000, 5);
			}
			else if (PlayerToPoint(3, i,965.7349,-1465.6044,21.3783) || PlayerToPoint(3, i,964.0209,-1465.8312,13.4589))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /etaxi", 5000, 5);
			}
			else if (PlayerToPoint(3, i,2139.7847,-1176.8256,23.9922) || PlayerToPoint(3, i,2138.6680,-1168.9967,28.1484))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /ealuguel", 5000, 5);
			}
			else if (PlayerToPoint(2, i,1653.8035,-1655.3170,22.5156) || PlayerToPoint(2, i,1676.8268,-1645.2245,14.2286))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /edetran", 5000, 5);
			}
			else if (PlayerToPoint(2, i,1657.5554,-1656.3943,22.5156) || PlayerToPoint(2, i,1658.4657,-1691.3813,15.6094))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /edeposito", 5000, 5);
			}
			else if (PlayerToPoint(3, i,1172.8306,-1361.4685,13.9624) || PlayerToPoint(3, i,1161.5586,-1329.5938,31.4949))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /esamu", 5000, 5);
			}
			else if (PlayerToPoint(3, i,2522.9346,-1679.4137,15.4970) || PlayerToPoint(3, i,2524.4297,-1681.8153,19.9302))
			{
			    GameTextForPlayer(i, "~w~ELEVADOR, ~n~~b~Digite /egroove", 5000, 5);
			}
			else if (PlayerToPoint(1.5, i,1535.5697,-1637.5358,13.5469) || PlayerToPoint(1.5, i,1710.8175,-1605.0188,13.5469) || PlayerToPoint(1.5, i,1808.1926,-1598.6720,13.5469)
		    || PlayerToPoint(1.5, i,1611.2460,-1713.0765,13.5469) || PlayerToPoint(1.5, i,1362.9312,-1751.3467,13.5244) || PlayerToPoint(1.5, i,1804.5630,-1167.7408,23.8281)
	        || PlayerToPoint(1.5, i,814.5628,-1355.5433,13.5414) || PlayerToPoint(1.5, i,839.7822,-1339.5476,7.1719) || PlayerToPoint(1.5, i,522.3236,-1515.9530,14.5936)
            || PlayerToPoint(1.5, i,523.9922,-1525.5927,14.7482) || PlayerToPoint(1.5, i,547.3288,-1498.3148,14.4988) || PlayerToPoint(1.5, i,637.4054,-1228.4910,17.8721)
            || PlayerToPoint(1.5, i,356.4761,-1365.3461,14.4760) || PlayerToPoint(1.5, i,338.9698,-1397.1982,14.2238) || PlayerToPoint(1.5, i,248.2463,-1448.8539,13.5899)
            || PlayerToPoint(1.5, i,2232.8149,-1165.7214,25.8906) || PlayerToPoint(1.5, i,2219.9551,-1154.7574,1025.7969) || PlayerToPoint(1.5, i,1723.9048,-1720.7859,13.5437)
            || PlayerToPoint(1.5, i,1720.4819,-1720.9020,13.5442))
			{
			    GameTextForPlayer(i, "~w~Orelhao, ~n~Digite ~b~/orelhao ~n~~w~Sem Agenda? ~b~~n~Digite ~y~/gps ~r~Mercado", 8000, 5);
			}
			else if (PlayerToPoint(3, i,1964.0239,-372.1131,1093.7289))
			{
			    GameTextForPlayer(i, "~y~Casamento ~n~~r~Digite ~w~/ajudacasamento", 5000, 5);
			}
			else if (PlayerToPoint(3, i,1991.7828,-1183.4724,20.5116) || PlayerToPoint(3, i,1948.1309,-1215.2512,20.5019))
			{
			    GameTextForPlayer(i, "~r~Pescaria, ~n~~r~Digite ~y~/ajudapescaria", 5000, 5);
			}

			else if(PlayerToPoint(2.0, i,1007.9274,-1541.3163,13.5671) && GetPlayerOrg(i) == 8 || PlayerToPoint(2.0,i,1656.9484,-1793.7782,13.5478) && GetPlayerOrg(i) == 22)
			{
			    if(OrderReady[i] > 0)
			    {
			        switch (OrderReady[i])
			        {
			            case 1:
			            {
			                GivePlayerWeapon(i, 24, 50); GivePlayerWeapon(i, 29, 300); GivePlayerWeapon(i, 33, 50); GivePlayerWeapon(i, 4, 1);
			                //SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100.0);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
			            case 2:
			            {
			                GivePlayerWeapon(i, 24, 100); GivePlayerWeapon(i, 29, 400); GivePlayerWeapon(i, 34, 100); GivePlayerWeapon(i, 4, 1);
			                //SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100.0);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
			            case 3:
			            {
			                GivePlayerWeapon(i, 24, 200); GivePlayerWeapon(i, 29, 500); GivePlayerWeapon(i, 33, 200); GivePlayerWeapon(i, 30, 200); GivePlayerWeapon(i, 4, 1);
			                //SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100.0);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
			            case 4:
			            {
			                GivePlayerWeapon(i, 24, 200); GivePlayerWeapon(i, 29, 500); GivePlayerWeapon(i, 34, 300); GivePlayerWeapon(i, 31, 300); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 14, 1);
			                SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100.0);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
			            case 5:
			            {
			                GivePlayerWeapon(i, 24, 400); GivePlayerWeapon(i, 29, 500); GivePlayerWeapon(i, 33, 400); GivePlayerWeapon(i, 30, 400); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 14, 1);
			                SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100.0);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
			            case 6:
			            {
			                GivePlayerWeapon(i, 24, 300); GivePlayerWeapon(i, 29, 500); GivePlayerWeapon(i, 34, 500); GivePlayerWeapon(i, 31, 500); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 14, 1);
							SetPlayerArmour(i, 100);
							SetPlayerHealth(i, 100);
							SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
			            case 7:
			            {
			                GivePlayerWeapon(i, 24, 300); GivePlayerWeapon(i, 29, 500); GivePlayerWeapon(i, 34, 500); GivePlayerWeapon(i, 30, 500); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 14, 1);
			                SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu pacote.");
			            }
		            	case 8:
			            {
			                GivePlayerWeapon(i, 24, 900); GivePlayerWeapon(i, 29, 900); GivePlayerWeapon(i, 27, 900); GivePlayerWeapon(i, 30, 900); GivePlayerWeapon(i, 4, 1); GivePlayerWeapon(i, 34, 900);
			                SetPlayerArmour(i, 100);
			                SetPlayerHealth(i, 100);
			                GivePlayerMoney(i, 1000);
			                SendClientMessage(i, COLOR_LIGHTBLUE, "* Você pegou o seu Bônus Especial, Paranéns !");
			            }
			        }
			        OrderReady[i] = 0;
				}
			}
		}
	}
	return true;
}

public OnPlayerText(playerid, text[])
{

	new string[126];
	KillTimer(FloodTimer[playerid]);
	FloodTimer[playerid] = SetTimerEx("RemoveFlood", TimerFlood, 0, "i", playerid);
	FloodAlert[playerid] ++;
	new giver[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new tmp[128];
	//new string[360];
	new giveplayerid;
	PlayerInactivity[playerid] = 0;
	//SpamProtection(playerid);
	if(TentouDivulgar(text))
	{
		if(cdivulgar[playerid] >= 4)
		{
			SendClientMessage(playerid, COLOR_LIGHTBLUE,"Aqui você não pode anunciar servidores!");
   			PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);
   			Kick(playerid);
		}
		format(string, 128, "AdmAviso: [%d]%s tentou divulgar: %s.",playerid,PlayerName(playerid),text);
		ABroadCast(COLOR_YELLOW,string,1);
		DivulgouLog(string);
       	cdivulgar[playerid] += 1;
       	return 0;
	}
	if(PlayerInfo[playerid][pMuted] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "Você não pode falar, você foi calado");
		return 0;
	}
	if(SelectChar[playerid] == 255)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Proximo", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Proximo")))
		{
		    switch (SelectCharID[playerid])
			{
				case 1: //Policia Militar
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 280); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 280; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 281); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 281; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 282); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 282; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 265); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 265; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 267); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 267; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 246); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 246; }
				}
				case 2: //B.O.P.E
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 285); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 285; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 298); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 298; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 285); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 285; }
    			}
				case 3: //Exército
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 287); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 287; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 191); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 191; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 179); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 179; }
				}
				case 4: //SAMU
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 91; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 279); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 279; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 277); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 277; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 276); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 276; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 275); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 275; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 279); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 279; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 274); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 274; }
				}
				case 5: //Varrios Los Aztecas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 116); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 116; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 115); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 115; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 114); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 114; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 41); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 41; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 148); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 148; }
				}
				case 6: //Taliban
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 122); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 122; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 272); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 272; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 131); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 131; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 128); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 128; }
				}
				case 7: //Prefeito
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 164); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 164; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 163); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 163; }
					else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 17); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 17; }
					else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 141); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 141; }
				}
				case 8: //Hitman Agency
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 166); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 166; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 165); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 165; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 127); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 127; }
				}
				case 9: //Reporteres
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 188); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 188; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 187); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 187; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 148); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 148; }
				}
				case 10: //Taxistas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 255); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 255; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 219); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 219; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 253); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 253; }
				}
				case 11: //Policia federal
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 224); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 224; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 286); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 286; }
				}
				case 12: //Mafia CN
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 17); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 17; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 43); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 43; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 46); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 46; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 98); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 98; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 111); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 111; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 223); SelectCharPlace[playerid] = 7; ChosenSkin[playerid] = 223; }
				    else if(SelectCharPlace[playerid] == 7) { SetPlayerSkin(playerid, 126); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 126; }
				}
				case 13: //Yakuza
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 203); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 203; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 204); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 204; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 117); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 117; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 118); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 118; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 169); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 169; }
				}
				case 14: //Groove
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 105); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 105; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 106); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 106; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 107); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 107; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 271); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 271; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 195); SelectCharPlace[playerid] = 6; ChosenSkin[playerid] = 195; }
				    else if(SelectCharPlace[playerid] == 6) { SetPlayerSkin(playerid, 269); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 269; }
				}
				case 15: //Al'qaeda
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 30); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 30; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 47); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 47; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 48); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 48; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 192); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 192; }
				}
				case 16: //Policia Civil
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 59); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 59; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 124); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 124; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 76); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 76; }
				}
				case 17: //Ballas
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 102); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 102; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 103); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 103; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 104); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 104; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 40); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 40; }
				}
				case 18: //Vagos
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 108); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 108; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 109); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 109; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 110); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 110; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 91); SelectCharPlace[playerid] = 5; ChosenSkin[playerid] = 91; }
				    else if(SelectCharPlace[playerid] == 5) { SetPlayerSkin(playerid, 85); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 85; }
				}
				case 19: //Comando Vermelho
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 19); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 19; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 170); SelectCharPlace[playerid] = 3; ChosenSkin[playerid] = 170; }
				    else if(SelectCharPlace[playerid] == 3) { SetPlayerSkin(playerid, 40); SelectCharPlace[playerid] = 4; ChosenSkin[playerid] = 193; }
				    else if(SelectCharPlace[playerid] == 4) { SetPlayerSkin(playerid, 193); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 193; }
    			}
				case 20: //Sons of Anarchy
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 247); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 247; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 248); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 248; }
				}
				case 21: //DRIFTERS
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 101); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 101; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 293); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 293; }
				}
				case 22: //TRIADS
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 117); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 117; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 118); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 118; }
				}
    			case 23: //FARC
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 111); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 111; }
				    else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 112); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 112; }
				}
				case 24: //TRIADS
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 16); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 16; }
				}
				case 25: // ADVOGADOS
				{
				    if(SelectCharPlace[playerid] == 1) { SetPlayerSkin(playerid, 228); SelectCharPlace[playerid] = 2; ChosenSkin[playerid] = 228; }
				    //else if(SelectCharPlace[playerid] == 2) { SetPlayerSkin(playerid, 228); SelectCharPlace[playerid] = 1; ChosenSkin[playerid] = 228; }
				}
			}
		    return 0;
		}
		else if ((strcmp("Confirma", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Confirma")))
		{
		    if(IsAtClothShop(playerid))
		    {
		        PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
		        SelectCharPlace[playerid] = 0;
		    	SelectCharID[playerid] = 0;
		    	SelectChar[playerid] = 0;
		    	SetCameraBehindPlayer(playerid);
		    	Controle(playerid, 1);
		        return 0;
		    }
		    if(ChangePos2[playerid][1] == 1)
		    {
			    PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
		        SetPlayerInterior(playerid, ChangePos2[playerid][0]);
		        SetPlayerPos(playerid, ChangePos[playerid][0],ChangePos[playerid][1],ChangePos[playerid][2]);
		        ChangePos2[playerid][1] = 0;
		        return 0;
		    }
		    PlayerInfo[playerid][pSkin] = ChosenSkin[playerid];
		    //PlayerInfo[playerid][pSpawn] = 0;
		    SetSpawnInfo(playerid, PlayerInfo[playerid][pTeam], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
		    gTeam[playerid] = PlayerInfo[playerid][pTeam];
			SetPlayerToTeamColor(playerid);
			MedicBill[playerid] = 0;
			SpawnPlayer(playerid);
		    SelectCharPlace[playerid] = 0;
		    SelectCharID[playerid] = 0;
		    SelectChar[playerid] = 0;
		    return 0;
		}
		else
		{
		    SendClientMessage(playerid, TEAM_VAGOS_COLOR, "* Use 'Proximo', ou 'Confirma'.");
		    return 0;
		}
	}
	if(MarriageCeremoney[playerid] > 0)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("sim", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("sim")))
		{
		    if(GotProposedBy[playerid] < 999)
		    {
			    if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
				    format(string, sizeof(string), "Padre: %s Você aceita %s como sua amada esposa? (Digite 'sim', qualquer outra coisa cancela o casamento).", giveplayer,PlayerName(playerid));
					SendClientMessage(GotProposedBy[playerid], COLOR_WHITE, string);
					MarriageCeremoney[GotProposedBy[playerid]] = 1;
					MarriageCeremoney[playerid] = 0;
					GotProposedBy[playerid] = 999;
				    return true;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
			}
			else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
						format(string, sizeof(string), "Padre: %s e %s eu vos declaro Marido e Mulher, Pode Beijar a Noiva.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu vos declaro Marido e Mulher, Pode Beijar o Noivo.", giveplayer, PlayerName(playerid));
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticia de Casamento: Temos um novo Casamento, %s e %s se casaram.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 1 && PlayerInfo[ProposedTo[playerid]][pSex] == 1)
					{
					    format(string, sizeof(string), "Padre: %s e %s eu os declaro Marido e Marido, Pode Beijar o Noivo.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu os declaro Marido e Marido, Pode Beijar o Noivo.", giveplayer, PlayerName(playerid));
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticia de Casamento: Temos um novo Casamento Gay, %s e %s se casaram.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					else if(PlayerInfo[playerid][pSex] == 2 && PlayerInfo[ProposedTo[playerid]][pSex] == 2)
					{
					    format(string, sizeof(string), "Padre: %s e %s eu os declaro Esposa e Esposa, Pode Beijar a Noiva.", sendername, giveplayer);
						SendClientMessage(playerid, COLOR_WHITE, string);
				   		format(string, sizeof(string), "Padre: %s e %s eu os declaro Esposa e Esposa, Pode Beijar a Noiva", giveplayer, PlayerName(playerid));
						SendClientMessage(ProposedTo[playerid], COLOR_WHITE, string);
						format(string, sizeof(string), "Noticia de Casamento: Temos um novo Casamento Lesbico, %s e %s se casaram.", sendername, giveplayer);
						OOCNews(COLOR_WHITE, string);
					}
					//MarriageCeremoney[ProposedTo[playerid]] = 1;
					MarriageCeremoney[ProposedTo[playerid]] = 0;
					MarriageCeremoney[playerid] = 0;
					format(string, sizeof(string), "%s", PlayerName(playerid));
					strmid(PlayerInfo[ProposedTo[playerid]][pMarriedTo], string, 0, strlen(string), 255);
					format(string, sizeof(string), "%s", giveplayer);
					strmid(PlayerInfo[playerid][pMarriedTo], string, 0, strlen(string), 255);
					GivePlayerMoney(playerid, - 100);
					PlayerInfo[playerid][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pMarried] = 1;
					PlayerInfo[ProposedTo[playerid]][pPHousekey] = PlayerInfo[playerid][pPHousekey];
					PlayerInfo[ProposedTo[playerid]][pPbiskey] = PlayerInfo[playerid][pPbiskey];
					ProposedTo[playerid] = 999;
					MarriageCeremoney[playerid] = 0;
				    return true;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
		else
		{
		    if(GotProposedBy[playerid] < 999)
		    {
				if(IsPlayerConnected(GotProposedBy[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(GotProposedBy[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Você deseja se casar com %s, Se Quizer Digite 'sim'.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s quer casar com Você, um 'sim' foi dito.",PlayerName(playerid));
				    SendClientMessage(GotProposedBy[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        GotProposedBy[playerid] = 999;
			        return 0;
			    }
		    }
		    else if(ProposedTo[playerid] < 999)
			{
			    if(IsPlayerConnected(ProposedTo[playerid]))
				{
					GetPlayerName(playerid, sendername, sizeof(sendername));
					GetPlayerName(ProposedTo[playerid], giveplayer, sizeof(giveplayer));
					format(string, sizeof(string), "* Você deseja se casar com %s, Se Quizer Digite 'sim'.",giveplayer);
				    SendClientMessage(playerid, COLOR_YELLOW, string);
				    format(string, sizeof(string), "* %s quer casar com Você, um 'sim' foi dito.",PlayerName(playerid));
				    SendClientMessage(ProposedTo[playerid], COLOR_YELLOW, string);
				    return 0;
			    }
			    else
			    {
			        MarriageCeremoney[playerid] = 0;
			        ProposedTo[playerid] = 999;
			        return 0;
			    }
			}
		}
	    return 0;
	}
	if(ConnectedToPC[playerid] == 255)
	{
		new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("Contratos", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Contratos")))
		{
			if(GetPlayerOrg(playerid) == 8) { FH = 1; }
			if(GetPlayerOrg(playerid) == 22) { FK = 1; }
		    SearchingHit(playerid);
			return 0;
		}
		else if ((strcmp("noticias", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("noticias")))
		{
		    	new x_nr[256];
				x_nr = strtok(text, idx);

				if(!strlen(x_nr)) {
					SendClientMessage(playerid, COLOR_WHITE, "|__________________ Noticia da agencia dos Assasinos __________________|");
					SendClientMessage(playerid, COLOR_WHITE, "USE: noticias [Numero] ou noticias apagar [Numero] ou noticias apagar tudo");
					format(string, sizeof(string), "1: %s :: Assasino: %s", News[hAdd1], News[hContact1]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "2: %s :: Assasino: %s", News[hAdd2], News[hContact2]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "3: %s :: Assasino: %s", News[hAdd3], News[hContact3]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "4: %s :: Assasino: %s", News[hAdd4], News[hContact4]);
					SendClientMessage(playerid, COLOR_GREY, string);
					format(string, sizeof(string), "5: %s :: Assasino: %s", News[hAdd5], News[hContact5]);
					SendClientMessage(playerid, COLOR_GREY, string);
					SendClientMessage(playerid, COLOR_WHITE, "|________________________________________________________|");
					return 0;
				}//lets start
				if(strcmp(x_nr,"1",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Ja tem uma noticia nesse numero, apague primeiro!"); return 0; }
				    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3+ para escrever uma noticia!"); return 0; }
				    if(News[hTaken1] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   Texto da noticia muito curto!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact1], string, 0, strlen(string), 255);
						News[hTaken1] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você criou uma nova noticia na agencia dos Assasinos.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Slot 1 ocupado!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"2",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Ja tem uma noticia nesse numero, apague primeiro!"); return 0; }
				    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3+ para escrever uma noticia!"); return 0; }
				    if(News[hTaken2] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   Texto da noticia muito curto!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact2], string, 0, strlen(string), 255);
						News[hTaken2] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você criou uma nova noticia na agencia dos Assasinos.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Slot 2 ocupado!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"3",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Ja tem uma noticia nesse numero, apague primeiro!"); return 0; }
				    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3+ para escrever uma noticia!"); return 0; }
				    if(News[hTaken3] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   Texto da noticia muito curto!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact3], string, 0, strlen(string), 255);
						News[hTaken3] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você criou uma nova noticia na agencia dos Assasinos.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Slot 3 ocupado!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"4",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Ja tem uma noticia nesse numero, apague primeiro!"); return 0; }
				    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3+ para escrever uma noticia!"); return 0; }
				    if(News[hTaken4] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   Texto da noticia muito curto !"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact4], string, 0, strlen(string), 255);
						News[hTaken4] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você criou uma nova noticia na agencia dos Assasinos.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Slot 4 ocupado!");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"5",true) == 0)
				{
				    if(PlacedNews[playerid] == 1) { SendClientMessage(playerid, COLOR_GREY, "   Ja tem uma noticia nesse numero, apague primeiro!"); return 0; }
				    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 3+ para escrever uma noticia!"); return 0; }
				    if(News[hTaken5] == 0)
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        if(strlen(text)-(strlen(x_nr)) < 9) { SendClientMessage(playerid, COLOR_GREY, "   Texto da noticia muito curto!"); return 0; }
						format(string, sizeof(string), "%s",right(text,strlen(text)-7)); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string, sizeof(string), "%s",sendername); strmid(News[hContact5], string, 0, strlen(string), 255);
						News[hTaken5] = 1; PlacedNews[playerid] = 1;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você criou uma nova noticia na agencia dos Assasinos.");
						return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Slot 5 ocupado !");
				        return 0;
				    }
				}
				else if(strcmp(x_nr,"apagar",true) == 0)
				{
				    if(PlayerInfo[playerid][pCargo] < 4)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 4+ para apagar mensagens!");
				        return 0;
				    }
				    new string1[MAX_PLAYER_NAME];
				    new x_tel[256];
					x_tel = strtok(text, idx);
					if(!strlen(x_tel)) {
					    SendClientMessage(playerid, COLOR_WHITE, "USE: noticias apagar [Numero] ou noticias apagar tudo.");
					    return 0;
					}
                    if(strcmp(x_tel,"1",true) == 0)
                    {
                        format(string, sizeof(string), "Nada"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						PlacedNews[playerid] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você apagou a noticia (1) da Agencia dos Assasinos.");
						return 0;
                    }
                    else if(strcmp(x_tel,"2",true) == 0)
                    {
                        format(string, sizeof(string), "Nada"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						PlacedNews[playerid] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você apagou a noticia (2) da Agencia dos Assasinos.");
						return 0;
                    }
                    else if(strcmp(x_tel,"3",true) == 0)
                    {
                        format(string, sizeof(string), "Nada"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						PlacedNews[playerid] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você apagou a noticia (3) da Agencia dos Assasinos.");
						return 0;
                    }
                    else if(strcmp(x_tel,"4",true) == 0)
                    {
                        format(string, sizeof(string), "Nada"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						PlacedNews[playerid] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você apagou a noticia (4) da Agencia dos Assasinos.");
						return 0;
                    }
                    else if(strcmp(x_tel,"5",true) == 0)
                    {
                        format(string, sizeof(string), "Nada"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						PlacedNews[playerid] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você apagou a noticia (5) da Agencia dos Assasinos.");
						return 0;
                    }
                    else if(strcmp(x_tel,"tudo",true) == 0)
                    {
                        format(string, sizeof(string), "Nada"); strmid(News[hAdd1], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact1], string1, 0, strlen(string1), 255);
						News[hTaken1] = 0;
						format(string, sizeof(string), "Nada"); strmid(News[hAdd2], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact2], string1, 0, strlen(string1), 255);
						News[hTaken2] = 0;
						format(string, sizeof(string), "Nada"); strmid(News[hAdd3], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact3], string1, 0, strlen(string1), 255);
						News[hTaken3] = 0;
						format(string, sizeof(string), "Nada"); strmid(News[hAdd4], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact4], string1, 0, strlen(string1), 255);
						News[hTaken4] = 0;
						format(string, sizeof(string), "Nada"); strmid(News[hAdd5], string, 0, strlen(string), 255);
						format(string1, sizeof(string1), "Ninguem");	strmid(News[hContact5], string1, 0, strlen(string1), 255);
						News[hTaken5] = 0;
						PlacedNews[playerid] = 0;
						PlacedNews[playerid] = 0;
						PlacedNews[playerid] = 0;
						PlacedNews[playerid] = 0;
						PlacedNews[playerid] = 0;
						SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você apagou todas as mensagens da agencia dos Assasinos.");
						return 0;
                    }
                    else
                    {
                        SendClientMessage(playerid, COLOR_WHITE, "USE: noticias apagar [Numero] ou noticias apagar tudo.");
					    return 0;
                    }
				}
				else { return 0; }
		}
		else if ((strcmp("darcont", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("darcont")))
		{
		    if(PlayerInfo[playerid][pCargo] < 4)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Você precisa de cargo 4+ para dar contrato!");
		        return 0;
		    }
		    if(hitfound == 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "   Não ha contratos, USE contratos em seu laptop primeiro!");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USE: darcont [ID/Nome]");
				return 0;
			}
			//giveplayerid = strval(tmp);
			giveplayerid = ReturnUser(tmp);
			if(IsPlayerConnected(giveplayerid))
			{
			    if(giveplayerid != INVALID_PLAYER_ID)
			    {
				    if(GetPlayerOrg(playerid) != GetPlayerOrg(giveplayerid))
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Esse Jogador não é um Assassino!");
						return 0;
				    }
				    if(GoChase[giveplayerid] < 999)
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   Esse assasino ja possui um contrato!");
						return 0;
				    }
				    if(IsPlayerConnected(hitid1))
				    {
				        GetPlayerName(playerid, sendername, sizeof(sendername));
				        GetPlayerName(giveplayerid, giver, sizeof(giver));
				        GetPlayerName(hitid1, giveplayer, sizeof(giveplayer));
		    			format(string, sizeof(string), "* Assasino %s, deu um contrato para %s matar: %s(ID:%d), por R$%d.", sendername, giver, giveplayer, hitid1, PlayerInfo[hitid1][pHeadValue]);
		    			SendFamilyMessage(GetPlayerOrg(playerid), COLOR_YELLOW, string);
		    			GoChase[giveplayerid] = hitid1;
		    			GetChased[hitid1] = giveplayerid;
		    			GotHit[hitid1] = 1;
		    			hitid1 = 0;
		    			hitfound = 0;
				        return 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, COLOR_GREY, "   O contrato saiu do servidor, USE contratos no seu laptop novamente!");
				        return 0;
				    }
				}
				return 0;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "   Esse não e um assasino ativo!");
			    return 0;
			}
		}
		else if ((strcmp("membros", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("membros")))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|__________________ Membros da Agencia __________________|");
		    for(new i=0; i < MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
				    if(GetPlayerOrg(playerid) == 8 || GetPlayerOrg(playerid) == 22)
				    {
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
				        format(string, sizeof(string), "* %s: Cargo %d", giveplayer,PlayerInfo[i][pCargo]);
						SendClientMessage(playerid, COLOR_GREY, string);
					}
				}
			}
		}
		else if ((strcmp("pedido", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("pedido")))
		{
		    if(OrderReady[playerid] > 0)
		    {
		        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
		        return 0;
		    }
		    tmp = strtok(text, idx);
		    if ((strcmp("1", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("1")))
			{
			    if(PlayerInfo[playerid][pCargo] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 1;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("2", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("2")))
			{
			    if(PlayerInfo[playerid][pCargo] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 2;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("3", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("3")))
			{
			    if(PlayerInfo[playerid][pCargo] < 1) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 3;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("4", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("4")))
			{
			    if(PlayerInfo[playerid][pCargo] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 4;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("5", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("5")))
			{
			    if(PlayerInfo[playerid][pCargo] < 2) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 5;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("6", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("6")))
			{
			    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {
			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 6;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("7", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("7")))
			{
			    if(PlayerInfo[playerid][pCargo] < 3) { SendClientMessage(playerid, COLOR_GREY, "   Você não tem cargo suficiente para pegar esse pacote!"); return 0; }
			    if(GetPlayerMoney(playerid) > 1)
			    {

			        SendClientMessage(playerid, COLOR_GREY, "Seu pacote foi entregue a sua HQ, verifique na Caixa de Pacotes !");
			        OrderReady[playerid] = 7;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   Você não possui essa grana!");
			        return 0;
			    }
			}
			else if ((strcmp("8", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("8")))
			{
			    if(GanhouArmamento == GetPlayerOrg(playerid))
			    {
			        SendClientMessage(playerid, COLOR_LIGHTBLUE, "Seu Bônus foi entregue a sua HQ, verifique na Caixa de Pacotes !");
					OrderReady[playerid] = 8;
			        return 0;
			    }
			    else
			    {
			        SendClientMessage(playerid, COLOR_GREY,"   A sua organização não ganhou o Bônus Especial por contratos concluidos!");
			        return 0;
			    }
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "|__________________[ Pedidos Disponiveis ]__________________|");
			    if(PlayerInfo[playerid][pCargo] >= 1) { SendClientMessage(playerid, COLOR_GREY, "|(1) Cargo 1 - 6: Knife, Eagle, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pCargo] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(2) Cargo 2 - 6: Knife, Eagle, M4, MP5, Shotgun"); }
			    if(PlayerInfo[playerid][pCargo] >= 2) { SendClientMessage(playerid, COLOR_GREY, "|(3) Cargo 2 - 6: Knife, Eagle, AK47, MP5, Shotgun, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(4) Cargo 3 - 6: Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 3) { SendClientMessage(playerid, COLOR_GREY, "|(5) Cargo 3 - 6: Knife, Eagle, AK47, MP5, Shotgun, Sniper, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(6) Cargo 4 - 6: Knife, Eagle, M4, MP5, Shotgun, Sniper, Colete"); }
			    if(PlayerInfo[playerid][pCargo] >= 4) { SendClientMessage(playerid, COLOR_GREY, "|(7) Cargo 4 - 6: Knife, Eagle, AK47, MP5, Shotgun, Sniper, Colete"); }
			    SendClientMessage(playerid, COLOR_LIGHTRED, "|(8) Bônus: Knife, Eagle, AK47, MP5, Combat Shotgun, Sniper, Colete, e 100 mil.");
			    return 0;
			}
		}
		else if ((strcmp("sair", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("sair")))
		{
		    SendClientMessage(playerid, COLOR_LIGHTBLUE, "* Você desligou seu laptop e se desconectou de sua agencia.");
      		ConnectedToPC[playerid] = 0;
		    return 0;
		}
		else
		{
			    SendClientMessage(playerid, COLOR_WHITE, "|___ Agencia dos Assasinos ___|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "|");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Noticias");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Contratos");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - DarCont");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Pedido");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Membros");
			    SendClientMessage(playerid, COLOR_YELLOW2, "| - Sair");
				SendClientMessage(playerid, COLOR_WHITE, "|______________|00:00|");
			    return 0;
		}
	    return 0;
	}
	if(CallAdvogado[playerid] == 111)
	{
	    new idx;
	    tmp = strtok(text, idx);
	    if ((strcmp("sim", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("sim")))
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
		    format(string, sizeof(string), "** %s está na prisão e precisa de um advogado, olhe /presos.", PlayerName(playerid));
	    	SendFamilyMessage(25, TEAM_AZTECAS_COLOR, string);
	    	SendClientMessage(playerid, COLOR_LIGHTRED, "A Mensagem foi enviada para todos os advogados online, Por favor espere.");
	    	WantAdvogado[playerid] = 0;
			CallAdvogado[playerid] = 0;
	    	return 0;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Sua sentença foi iniciada.");
		    WantAdvogado[playerid] = 0;
			CallAdvogado[playerid] = 0;
		    return 0;
		}
	}
	if(TalkingLive[playerid] != 255)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
		{
		    format(string, sizeof(string), "Ao Vivo %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
 			SetPlayerChatBubble(playerid, text, COLOR_AZULBB, 20.0, 10000);
		}
		else
		{
		    format(string, sizeof(string), "Ao Vivo %s: %s", sendername, text);
			OOCNews(COLOR_LIGHTGREEN, string);
			SetPlayerChatBubble(playerid, text, COLOR_AZULBB, 20.0, 10000);
		}
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new idx;
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s diz (Celular): %s", sendername, text);
		SetPlayerChatBubble(playerid, string, COLOR_AZULBB, 20.0, 10000);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 191)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Denuncia: Desculpe, Nao Entendi");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Denuncia: Temos alertado todas as unidades na área.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Obrigado por Relatar o Ocorrido");
			format(wanted, sizeof(wanted), "Denuncia: Todas Unidades IA: Chamador: %s",turner);
			SendFamilyMessage(1, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Denuncia: %s",text);
			SendFamilyMessage(1, TEAM_CYAN_COLOR, wanted);
			SendClientMessage(playerid, COLOR_GRAD2, "   Ninguem na linha...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 191)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGÊNCIA: Desculpe eu não entendo");
				return 0;
			}
			if ((strcmp("nao", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("nao")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, COLOR_DBLUE, "COP: Alertamos todos as unidades perto do local.");
				SendClientMessage(playerid, COLOR_DBLUE, "Obrigado por ter relatado o Ocorrido");
				format(wanted, sizeof(wanted), "HQ: Todas as unidades: Denunciante: %s",turner);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				format(wanted, sizeof(wanted), "HQ: Crime: %s, Suspeito: Desconhecido",PlayerCrime[playerid][pAccusing]);
				SendFamilyMessage(1, COLOR_DBLUE, wanted);
				SendClientMessage(playerid, COLOR_GRAD2, "   Ninguém na linha.....");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			//badguy = strval(tmp);
			badguy = ReturnUser(tmp);
			if (IsPlayerConnected(badguy))
			{
			    if(badguy != INVALID_PLAYER_ID)
			    {
					if (gTeam[badguy] == 2 || gTeam[badguy] == 1)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Você terá que entrar em contato com os assuntos internos. Esta é uma linha de emergência");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ninghem na linha...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (WantedPoints[badguy] > 0)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Unidades já estão atribuídos a esse caso.");
						SendClientMessage(playerid, COLOR_DBLUE, "Obrigado por denunciar este crime");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ninguémm na linha...");
						Mobile[playerid] = 255;
						return 0;
					}
					if (badguy == playerid)
					{
						SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Esta linha e de emergencia.");
						SendClientMessage(playerid, COLOR_GRAD2, "   Ninguémm na linha...");
						Mobile[playerid] = 255;
						return 0;
					}
					SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Temos alertado todas as unidades na área.");
					SendClientMessage(playerid, COLOR_DBLUE, "Obrigado por denunciar este crime");
					SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing]);
					if(WantedPoints[badguy] > 0) { } else
					{
						WantedPoints[badguy] += 1;
      					SetPlayerWantedLevel(badguy, WantedPoints[badguy]);
				  	}
					SendClientMessage(playerid, COLOR_GRAD2, "   Ninguémm na linha...");
					Mobile[playerid] = 255;
					return 0;
				}//invalid id
				return 0;
			}//not connected
			else
			{
				format(string, sizeof(string), "Police HQ: Nenhuma informação sobre %s, o nome citado esta correto?",tmp);
				SendClientMessage(playerid, COLOR_DBLUE, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIA: Desculpe, nao entendi.");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Se você souber o nome do assaltante ou de parte dele, me fale, ou simplesmente dizer não");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 190)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIA: Desculpe não entendo... Policia ou SAMU?");
				return 0;
			}
			else if ((strcmp("policia", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("policia")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIA: Você optou por Policia, Espere.");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, COLOR_DBLUE, "Polícia HQ: Por favor me dê uma breve descrição do crime.");
				return 0;
			}
			else if ((strcmp("SAMU", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("SAMU")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIA: Você optou por SAMU, Espere.");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Denuncia: Por favor me dê uma breve descrição do Incidente.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "EMERGENCIA: Desculpe não entendo... Policia ou SAMU?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]))
		{
		    if(Mobile[Mobile[playerid]] == playerid)
		    {
				SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Ninguém lá");
		}
		return 0;
	}
	if (realchat)
	{
	    if(gPlayerLogged[playerid] == 0)
	    {
	        return 0;
      	}
		if(PlayerInfo[playerid][pMaskuse] == 1)
		{
			format(string, sizeof(string), "Mascarado diz: %s", text);
			ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
			SetPlayerChatBubble(playerid, text, COLOR_AZULBB, 20.0, 10000);
			//ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,0,0,0,0,0);
		}
		else
		{
		   	format(string, sizeof(string), "%s diz: %s", PlayerName(playerid), text);
		   	ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		   	SetPlayerChatBubble(playerid, text, COLOR_AZULBB, 20.0, 10000);
		   	//ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,0,1,1,1,1);
		}
		return 0;
  	}
	return true;
}

public SetCamBack(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		new Float:plocx,Float:plocy,Float:plocz;
		GetPlayerPos(playerid, plocx, plocy, plocz);
		SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
		SetPlayerInterior(playerid,14);
	}
}
public Fixhour(hora)
{
	hora = timeshift+hora;
	if (hora < 0)
	{
		hora = hora+24;
	}
	else if (hora > 23)
	{
		hora = hora-24;
	}
	shifthour = hora;
	return true;
}
public IsAPoliciaCivilCar(carid)
{
	if((carid >= 211) && (carid <= 231))
	{
		return true;
	}
	return 0;
}

public IsATaliban(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==6 || member==6)
		{
		    return true;
		}
		else if(lider==6 || lider==6)
		{
		    return true;
		}
	}
	return 0;
}
public IsATalibanCar(carid)
{
	if((carid >= 86) && (carid <= 103))
	{
		return true;
	}
	return 0;
}
public IsASonsofAnarchy(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==20 || member==20)
		{
		    return true;
		}
		else if(lider==20 || lider==20)
		{
		    return true;
		}
	}
	return 0;
}
public IsASonsofAnarchyCar(carid)
{
	if((carid >= 265) && (carid <= 274))
	{
		return true;
	}
	return 0;
}
public IsATriad(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==22 || member==22)
		{
		    return true;
		}
		else if(lider==22 || lider==22)
		{
		    return true;
		}
	}
	return 0;
}
public IsATriadCar(carid)
{
	if((carid >= 286) && (carid <= 296))
	{
		return true;
	}
	return 0;
}
public IsAYa(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==13|| member==13)
		{
		    return true;
		}
		else if(lider==13 || lider==13)
		{
		    return true;
		}
	}
	return 0;
}
public IsAYaCar(carid)
{
	if((carid >= 175) && (carid <= 185))
	{
		return true;
	}
	return 0;
}
public IsAPFCar(carid)
{
	if((carid >= 148) && (carid <= 163))
	{
		return true;
	}
	return 0;
}


public IsACosaNostra(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==12 || member==12)
		{
		    return true;
		}
		else if(lider==12 || lider==12)
		{
		    return true;
		}
	}
	return 0;
}
public IsAGOV(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==7 || lider==7)
		{
		    return true;
		}
	}
	return 0;
}
public IsAGOVCar(carid)//Carros Governo
{
	if((carid >= 104) && (carid <= 112))
	{
		return true;
	}
	return 0;
}
public IsACosaNostraCar(carid)//Máfia Cosa Nostra Carros
{
	if((carid >= 164) && (carid <= 174))
	{
		return true;
	}
	return 0;
}

public IsAAl(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==15 || member==15)
		{
		    return true;
		}
		else if(lider==15 || lider==15)
		{
		    return true;
		}
	}
	return 0;
}
public IsAAlCar(carid)
{
	if((carid >= 197) && (carid <= 210))
	{
		return true;
	}
	return 0;
}
public IsAFARC(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==23 || member==23)
		{
		    return true;
		}
		else if(lider==23 || lider==23)
		{
		    return true;
		}
	}
	return 0;
}
public IsAFARCCar(carid)
{
	if((carid >= 297) && (carid <= 313))
	{
		return true;
	}
	return 0;
}
public IsAOni(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new emprego = PlayerInfo[playerid][pEmprego];
	    if(emprego==8)
		{
		    return true;
		}
	}
	return 0;
}
public IsAOniCar(carid)
{
	if((carid >= 373) && (carid <= 383))
	{
		return true;
	}
	return 0;
}
public IsAJornal(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==9 || member==9)
		{
		    return true;
		}
		else if(lider==9 || lider==9)
		{
		    return true;
		}
	}
	return 0;
}
public IsAJornalCar(carid)
{
	if((carid >= 124) && (carid <= 134))
	{
		return true;
	}
	return 0;
}

public IsAGroove(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==14 || member==14)
		{
		    return true;
		}
		else if(lider==14 || lider==14)
		{
		    return true;
		}
	}
	return 0;
}
forward IsAGang(playerid);
public IsAGang(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==14 || member==17 || member==18 || member==19 || member==20 || member==21 || member==5)
		{
		    return true;
		}
		else if(lider==14 || lider==17 || lider==18 || lider==19 || lider==20 || lider==21 || lider==5)
		{
		    return true;
		}
	}
	return 0;
}
public IsAGrooveCar(carid)
{
	if((carid >= 186) && (carid <= 196))
	{
		return true;
	}
	return 0;
}
public IsATaxi(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==10 || member==10)
		{
		    return true;
		}
		else if(lider==10 || lider==10)
		{
		    return true;
		}
	}
	return 0;
}
public IsATaxiCar(carid)
{
	if((carid >= 135 && carid <= 147))
	{
		return true;
	}
	return 0;
}
public IsAVagos(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==18 || member==18)
		{
		    return true;
		}
		else if(lider==18 || lider==18)
		{
		    return true;
		}
	}
	return 0;
}
public IsAVagosCar(carid)
{
	if((carid >= 243) && (carid <= 253))
	{
		return true;
	}
	return 0;
}

public IsABallas(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==17 || member==17)
		{
		    return true;
		}
		else if(lider==17 || lider==17)
		{
		    return true;
		}
	}
	return 0;
}
public IsABallasCar(carid)
{
	if((carid >= 232) && (carid <= 242))
	{
		return true;
	}
	return 0;
}

public IsADetran(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==24 || member==24)
		{
		    return true;
		}
		else if(lider==24 || lider==24)
		{
		    return true;
		}
	}
	return 0;
}

public IsAAdv(playerid)
{
   	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member== 25 || member==25)
		{
		    return true;
		}
		else if(lider==25 || lider==25)
		{
		    return true;
		}
	}
   return 0;
}
public IsADetranCar(carid)
{
	if((carid >= 314) && (carid <= 322))
	{
		return true;
	}
	return 0;
}

public IsAAdvCar(carid)
{

   if((carid >= 460) && (carid <= 464))
   {
   
	  return true;
   }
   return 0;
}
public IsAAzteca(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==5 || member==5)
		{
		    return true;
		}
		else if(lider==5 || lider==5)
		{
		    return true;
		}
	}
	return 0;
}
public IsAAztecaCar(carid)
{
	if((carid >= 76) && (carid <= 85))
	{
		return true;
	}
	return 0;
}
public IsADri(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==21 || member==21)
		{
		    return true;
		}
		else if(lider==21 || lider==21)
		{
		    return true;
		}
	}
	return 0;
}
public IsADriCar(carid)
{
	if((carid >= 275) && (carid <= 285))
	{
		return true;
	}
	return 0;
}
public IsAMec(playerid)
{
	if(PlayerInfo[playerid][pEmprego] == 4)
	{
		return true;
	}
	return 0;
}
public IsAMecCar(carid)
{
	if((carid >= 369 && carid <= 372))
	{
		return true;
	}
	return 0;
}
public IsABOPEs(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==2 || member==2)
		{
		    return true;
		}
		else if(lider==2 || lider==2)
		{
		    return true;
		}
	}
	return 0;
}
public IsABOPEsCar(carid)
{
	if((carid >= 25) && (carid <= 44))
	{
		return true;
	}
	return 0;
}
public IsAEx(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==3 || member==3)
		{
		    return true;
		}
		else if(lider==3 || lider==3)
		{
		    return true;
		}
	}
	return 0;
}
public IsAExCar(carid)
{
	if((carid >= 45) && (carid <= 68))
	{
		return true;
	}
	return 0;
}
public IsAHit(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new lider = PlayerInfo[playerid][pLider];
	    new member = PlayerInfo[playerid][pMembro];
	    if(member==8 || member==8)
		{
		    return true;
		}
		else if(lider==8 || lider==8)
		{
		    return true;
		}
	}
	return 0;
}
public IsAHitCar(carid)
{
	if((carid >= 113) && (carid <= 123))
	{
		return true;
	}
	return 0;
}
public IsABikeCar(carid)
{
	if((carid >= 324 && carid <= 329))
	{
		return true;
	}
	return 0;
}
public GaragemDpClosed2()
{
	MoveObject(PDDOORb,250.774871 , 60.822799 , 1003.640625, 2);//GaragemClosed
	return true;
}
public gasolina(playerid)
{
    new string[128];
    new vehicle = GetPlayerVehicleID(playerid);
    new Nick[MAX_PLAYER_NAME];
    GetPlayerName(playerid, Nick, sizeof(Nick));
	new wanted = WantedPoints[playerid];
    SendClientMessage(playerid, COLOR_YELLOW2, "| Computador De Bordo |");
    format(string, sizeof(string), "  Motorista: %s", Nick);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Veiculo: %s", NomeCarro[vehicle]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Combustivel: %d", Gas[vehicle]);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Nivel De Procura: %d", wanted);
    SendClientMessage(playerid, COLOR_WHITE, string);
    format(string, sizeof(string), "  Horas: %d", hour);
    SendClientMessage(playerid, COLOR_WHITE, string);
    Gas[vehicle]--;
    return true;
}
public GaragemDpClosed()
{
	MoveObject(PDDOORa,247.005905 , 72.448440 , 1003.640625, 2);//GaragemClosed
	return true;
}
public pcclosed()
{
    MoveObject(PDDOORb,248.142105 , 78.125961 , 1003.640625, 2);//CelaClosed
	return true;
}
public pd1()
{
	MoveObject(PDDOORc,248.142105 , 78.125961 , 1003.640625, 2);//GaragemClosed
	return true;
}
public pd2()
{
	MoveObject(PDPMLS,1546.8681640625, -1627.3585205078, 15.156204223633, 2);//GaragemClosed
	return true;
}
public pd3()
{
	MoveObject(PDGARAGE,1588.195,-1637.969,15.193, 2);//GaragemClosed
	return true;
}
public pd4()
{
	MoveObject(PDELEVATOR,1549.049804 , -1697.787109 , 12.5514954, 2);//GaragemClosed
	return true;
}
public PFClosed2()
{
    MoveObject(gatepf2,2334.757568, 2443.675537, 8.250650, 2);//GateClosed
	return true;
}
public PFClosed3()
{
	MoveObject(gatepf3,2293.928467, 2499.322021, 5.825822, 2);//GateClosed
	return true;
}
public PortaoPoliciaC1()
{
	MoveObject(portaoPC1,923.80151367188, -1224.8518066406, 18.749954223633, 2);//GateClosed
	MoveObject(portaoPC2,923.73193359375, -1217.4801025391, 18.749954223633, 2);//GateClosed
	return true;
}
public PortaoCasaHosp()
{
	MoveObject(PortaoCHosp,	1256.1277, -1270.6016, 14.0361, 2);//GateClosed
	return true;
}
public PortaoCMadDog() {
MoveObject(PortaoCasaMadDog, 1245.5508, -767.3086, 93.8034, 2);//GateClosed
return true;
}
public PortaoCMansao4() {
MoveDynamicObject(CasaMVIP4p, 1027.4020, -1725.6104, 13.4879, 0.1, 0.0000, 180.0000, 270.8403);
MoveDynamicObject(CasaMVIP4p2, 1027.5145, -1734.7024, 13.4857, 0.1, 0.0000, 180.0000, 90.0721);
return true;
}
public PortaoC2Mansao4() {
MoveDynamicObject(CasaMVIP4p3, 1027.2101, -1759.4048, 13.4879, 0.1, 0.0000, 180.0000, 269.7149);
MoveDynamicObject(CasaMVIP4p4, 1027.0420, -1768.5371, 13.4857, 0.1, 0.0000, 180.0000, 87.8244);
return true;
}
public PortaoMVIP1() {
MoveDynamicObject(CasaMVIP1, 927.4365, -1615.6812, 13.5657, 0.1, 0.0000, 180.0000, 89.0000);
MoveDynamicObject(CasaMVIP1p, 927.5054, -1606.5392, 13.5679, 0.1, 0.0000, 180.0000, 269.7149);
return true;
}
public PortaoCasaVIP1() {
MoveObject(CasaVIP1, 1202.0939, -1865.5991, 13.7862, 1.0, 0.0000, 0.0000, 270.0000);//GateClosed
return true;
}
public PortaooPC2() {
	MoveObject(PortaooPC,922.45611572266, -1208.7191162109, 17.982734680176, 2);// portaooPC Closed
	return true;
}
public PortaoTaxi2() {
	MoveObject(PortaoTaxi,958.840,-1415.794,15.151, 2);//Portao Taxi Closed
	return true;
}
public PDEx2()
{
	MoveObject(PDEx,-1531.3978271484, 482.25979614258, 8.9530792236328, 2);//GateClosed
	return true;
}
public gt3gate2()
{
	MoveObject(gt3gate,1267.0302, -1602.1642, 9.0120, 2);//GateClosed
	MoveObject(gt3gate3,1212.5449, -1643.5854, 6.6265, 2);//GateClosed
	return true;
}
public PortaoGov2()
{
	MoveObject(PortaoGov,1539.5814, -1839.0818, 15.3195, 2);//Portao Gov Closed
	return true;
}
public PortaoDeposito2()
{
	MoveObject(PortaoDeposito,1644.00000000, -1719.3000488281, 14.60000038147, 2);//Portao Gov Closed
	return true;
}
public PortaoHit3()
{
	MoveObject(PortaoHit1,956.80456542969, -1503.0864257813, 15.321235656738, 2);//Portao HIT 1 Closed
	return true;
}
public PortaoTriad2()
{
	MoveObject(PortaoTriad1,1620.7049560547, -1861.2620849609, 15.324647903442, 2);//Portao Triad 1 Closed
	return true;
}
public PortaoPre2()
{
	MoveObject(PortaoPre,369.15893554688, 162.35037231445, 1028.6030273438, 2);//Portao Prefeitura Closed
	return true;
}
public PortaoReporter2() {
	MoveObject(PortaoReporter,777.80017089844, -1330.2664794922, 14.200000762939, 2);//Portao Reporter Closed
	return true;
}
public PortaoRally2() {
	MoveObject(PortaoRally,-2368.4670410156, -2192.6381835938, 36.037666320801, 2);//Portao Rally Closed
	return true;
}
public cortando(playerid)
{
new string[256];
new playername[MAX_PLAYER_NAME];
GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
format(string, sizeof(string), "Atenção %s conseguiu pegar as madeiras ilegais",playername);
SendClientMessageToAll(COLOR_YELLOW, string);
SendClientMessage(playerid, COLOR_YELLOW,"[BRNM]: Vá até o local de venda de madeiras e venda as suas !");
SetPlayerCheckpoint(playerid, 2249.8088,-2257.7874,14.7647,8.0);
madeiracortada[playerid] = 1;
if (!PlayerToPoint(30, playerid, 1450.0607,-1965.0198,29.8656))
{
SendClientMessage(playerid, COLOR_GRAD1, "[BRNM]: Você não está no local de pegar madeiras.");
madeiracortada[playerid] = 0;
OnCortado[playerid] = 0;
}
return true;
}
public cortando2(playerid)//
{
SendClientMessage(playerid, COLOR_GRAD1, "Agora você já pode pegar madeiras novamente");
OnCortado[playerid] = 0;
return true;
}

public OnVehicleDamageStatusUpdate(vehicleid,playerid)
{ 
    new Float:vida;
    new newcar = GetPlayerVehicleID(playerid);
    GetVehicleHealth(newcar, vida);
	if(IsAAutoescola(newcar))
	{
      if(vida <= 800)
      {
  	        SetVehicleToRespawn(newcar);
  	        SendClientMessage(playerid, COLOR_LIGHTBLUE, "O Veículo da auto escola foi danificado refaça o teste!");
		    Teste[playerid] = 0;
		    SetPVarInt(playerid,"autoescola",0);
	    	DisablePlayerCheckpoint(playerid);
  	    }
	}
 	return true;
}
stock SYSTEMEMPRESTIMO(playerid,type,quantos)
{
	if(IsPlayerConnected(playerid))
	{
	    SetPVarInt(playerid, "EMPRESTIMOVAR",quantos);
		if(GetPVarInt(playerid, "EMPRESTIMOVAR") > 1)
		{
			EMPRESTIMO[playerid] = GetPVarInt(playerid, "EMPRESTIMOVAR");
			new log[35];
			new string[256];
  			format(log,sizeof log,"Emprestimo/%s.ini",PlayerName(playerid));
		    if(EMPRESTIMO[playerid] < 1000) return SendClientMessage(playerid,COLOR_GREY,"Você So pode Fazer Empréstimos acima de R$1.000");
      		if(EMPRESTIMO[playerid] > 50000) return SendClientMessage(playerid,COLOR_GREY,"Você So pode Fazer Empréstimos abaixo de R$50.000");
   			if(dini_Exists(log))
			{
				if(dini_Int(log, "Emprestimo") > 1)
				{
			    	SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}Ops... Lamento mas você ja tem um Empréstimo no Banco !");
			    	SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}Pague o Empréstimo Anterior para um Fazer um novo Empréstimo !");
   				}
	   			else if(dini_Int(log, "Emprestimo") < 1)
				{
        			if(BizzInfo[3][bTill] < EMPRESTIMO[playerid]) return SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}O Banco deve está {FF0000}Falido{FFFFFF} ou não tem esse Dinheiro !");
     				new quantasvs;
					quantasvs = type;
         			format(string, sizeof(string), "Empréstimo: Você pagará R$%d em %d parcelas de R$%d.(Juros de 25 por cento)", EMPRESTIMO[playerid], quantasvs, EMPRESTIMO[playerid] / quantasvs);
         			SendClientMessage(playerid, COLOR_GREY, string);
					dini_Create(log);
					dini_IntSet(log, "Emprestimo",EMPRESTIMO[playerid]);
					dini_IntSet(log, "Money",EMPRESTIMO[playerid]);
					dini_IntSet(log, "Quantasvs",quantasvs);
					GivePlayerMoneyEx(playerid, EMPRESTIMO[playerid]);
					BizzInfo[3][bTill] -= EMPRESTIMO[playerid];
					totalesmprestado(EMPRESTIMO[playerid]);
					new String[256];
					format(String, sizeof(String), "empréstimo de %d", EMPRESTIMO[playerid]);
					losgemprestimo(playerid,String);
				}
 			}
			else
    	    {
    	        if(BizzInfo[3][bTill] < EMPRESTIMO[playerid]) return SendClientMessage(playerid,COLOR_GREY,"{FFFFFF}O Banco deve está {FF0000}Falido{FFFFFF} ou não tem esse Dinheiro !");
				new quantasvs;
				quantasvs = type;
         		format(string, sizeof(string), "Empréstimo: Você pagará R$%d em %d parcelas de R$%d.(Juros de 25 por cento)", EMPRESTIMO[playerid], quantasvs, EMPRESTIMO[playerid] / quantasvs);
         		SendClientMessage(playerid, COLOR_GREY, string);
				dini_Create(log);
				dini_IntSet(log, "Emprestimo",EMPRESTIMO[playerid]);
				dini_IntSet(log, "Money",EMPRESTIMO[playerid]);
				dini_IntSet(log, "Quantasvs",quantasvs);
				GivePlayerMoneyEx(playerid, EMPRESTIMO[playerid]);
				BizzInfo[3][bTill] -= EMPRESTIMO[playerid];
				totalesmprestado(EMPRESTIMO[playerid]);
				new String[256];
				format(String, sizeof(String), "empréstimo de %d", EMPRESTIMO[playerid]);
				losgemprestimo(playerid,String);
       		}
  		}
	}
	return true;
}
stock losgemprestimo(playerid,string[])
{
	new logs[35],DialogEmprestimo[100];
	format(logs,sizeof logs,"Emprestimo/logs.ini");
	format(logs, 128, "%s fez um %s",PlayerName(playerid),string);
	strcat(DialogEmprestimo,logs);
	dini_IntSet(logs, DialogEmprestimo, 1);

}
stock totalesmprestado(total)
{
	new logs[35];
	format(logs,sizeof logs,"Emprestimo/infobanco.ini");
	if(!dini_Exists(logs)) return dini_Create(logs);
	dini_IntSet(logs, "Total", dini_Int(logs, "Total")+total);
	return true;
}
stock totalRecebido(total)
{
	new logs[35];
	format(logs,sizeof logs,"Emprestimo/infobanco.ini");
	if(!dini_Exists(logs)) return dini_Create(logs);
	dini_IntSet(logs, "Recebido", dini_Int(logs, "Total")+total);
	return true;
}
public SendSocioMessage(COLOR, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    if(PlayerInfo[i][pCidadania] >= 1)
		    {
				SendClientMessage(i, COLOR, string);
			}
		}
	}
}

public OnPlayerKeyStateChange(playerid,newkeys,oldkeys)
{
    new string[128];
    PlayerInactivity[playerid] = 0;
    
    new carid = GetPlayerVehicleID(playerid);
    if ((newkeys & KEY_SECONDARY_ATTACK))
	{
	    if(IsAnOwnableCar(carid) && CarInfo[carid][cOwned] == 0)
	   	{
		    TaCongelado[playerid] = false;
	        TogglePlayerControllable(playerid, 1);
	        RemovePlayerFromVehicle(playerid);
	    }
	}
	if((newkeys == 1) && (IsPlayerInAnyVehicle(playerid)))
    {
        if(!GetPVarInt(playerid, "Motor ON"))
        {
            SetPVarInt(playerid, "Motor ON", true);
            OnPlayerCommandText(playerid,"/motoron");
        }
        else
        {
            SetPVarInt(playerid, "Motor ON", false);
            OnPlayerCommandText(playerid,"/motoroff");
        }
        return true;
    }
    if ((newkeys == KEY_CROUCH)) // Mude o KEY_JUMP pelo COD que Quiser, neste caso KEY_JUMP = Tecla SHIFT ( A pé ) / Espaço ( Em Veiculo ) - ( Pular/Freiar )
    {
        OnPlayerCommandText(playerid,"/pballas"); // O Comando que Estiver aqui deve Ser o Memso que você Colocou Anteriormente !
        // Adicione Outros Comandos para serem Executados com a Tecla SHIFT ( A pé ) / Espaço ( Em Veiculo ) - ( Pular/Freiar ) Aqui !
        OnPlayerCommandText(playerid,"/phit");
        OnPlayerCommandText(playerid,"/ptriad");
        OnPlayerCommandText(playerid,"/impostometro");
    }
    if(newkeys == 16 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
    {
        OnPlayerCommandText(playerid,"/sair");
    }
   	if((newkeys == KEY_SECONDARY_ATTACK))
    {
		if(PlayerToPoint(1.0,playerid,247.8818,71.5204,1003.6406))
		{
            ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/pp");
		}
		if(PlayerToPoint(1.0,playerid,1207.3396,-1441.3483,13.3828))
		{
            ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/interfoneadmin");
		}
		if(PlayerToPoint(1.0,playerid,249.0358,74.6236,1003.6406) || PlayerToPoint(1.0,playerid,247.4305,77.2490,1003.6406))
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/pv");
		}
		if(PlayerToPoint(1.0,playerid,249.9555,64.5031,1003.6406) || PlayerToPoint(1.0,playerid,251.3744,64.5719,1003.6406))
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/pr");
		}
		if(PlayerToPoint(1.0,playerid,925.3904,-1210.9376,16.9796) || PlayerToPoint(1.0,playerid,921.4904,-1211.2009,16.9832)) //
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/ptpc");
		}
		if(PlayerToPoint(1.0,playerid,245.3586,73.8210,1003.6406))
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/pppresos");
		}
		if(PlayerToPoint(1.0,playerid,923.5170, -1209.0148, 18.7499))
		{
            ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/pc");
		}
		if(PlayerToPoint(1.0,playerid,925.3904,-1210.9376,16.9796) || PlayerToPoint(1.0,playerid,921.4904,-1211.2009,16.9832)) //
		{
      		ApplyAnimation(playerid, "HEIST9","Use_SwipeCard", 4.0, 0, 0, 0, 0, 0);
      		SetTimerEx("LimparAnim", 2000, false, "i", playerid);
            OnPlayerCommandText(playerid,"/ptpc");
		}
}


	//======= Caixinhas - Inicio ========//
		if(PlayerToPoint(2.0,playerid,7505.2256,-19994.4023,92.8942))
        {
            new DinheiroCaixinha = 50 + random(250);
    		new RespeitoCaixinha = random(2);
            //new string[126];
            if(PlayerInfo[playerid][pCaixinha] == char)
            {
                if(caixinha != char){SendClientMessage(playerid, COLOR_GRAD1, "Presentes bloqueados no momento.");return true;}
                SendClientMessage(playerid, COLOR_GRAD1, "Você pegou uma caixinha há pouco tempo, volte no próximo Payday!");
                return true;
			}
			else
			{
			    if(caixinha != char){SendClientMessage(playerid, COLOR_GRAD1, "Presentes bloqueados no momento.");return true;}
			    PlayerInfo[playerid][pCaixinha] = char;
			    format(string, sizeof(string), "%s pegou uma caixinha e ganhou R$%d e %d de respeito.",PlayerName(playerid), DinheiroCaixinha, RespeitoCaixinha);
			 	SendClientMessageToAll(COLOR_LIGHTRED,string);
			 	GivePlayerMoneyEx(playerid, DinheiroCaixinha);
				PlayerInfo[playerid][pExp] += RespeitoCaixinha;
				format(string, sizeof(string), "Na caixinha continha R$%d e %d de respeito, volte no próximo Payday!",
			 	DinheiroCaixinha, RespeitoCaixinha);
			 	SendClientMessage(playerid, COLOR_RED, string);
			}
		}
   if(newkeys & KEY_FIRE)
	{
		if(HaveTaser[playerid] == 1)
		{ 
		    if(IsPlayerInAnyVehicle(playerid) == 1) return true;
		    PlayerPlaySound(playerid, 6003, 0.0, 0.0, 0.0);
 			ApplyAnimation(playerid,"KNIFE","knife_3",4.1,0,1,1,0,0,1);
		    new victimid = GetClosestPlayer(playerid);
			if(IsPlayerConnected(victimid))
	     	{
	        	if(GetDistanceBetweenPlayers(playerid,victimid) < 2)
	            {
	            	new Float:health;
	                GetPlayerHealth(victimid, health);
	                SetPlayerHealth(victimid, health - 5.0);
					PlayerPlaySound(victimid, 6003, 0.0, 0.0, 0.0);
	                SetTimerEx("TimerFall",300,false,"d",victimid);
	                return 1;
	             }
	         }
         }
	}
    if(newkeys == 16 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
    {
		OnPlayerCommandText(playerid,"/equipara");
		OnPlayerCommandText(playerid,"/equiparterrorista");
		OnPlayerCommandText(playerid,"/equiparreporter");
		OnPlayerCommandText(playerid,"/entrar");
        OnPlayerCommandText(playerid,"/sair");

        if(PlayerToPoint(2,playerid,-2033.4347,-117.3490,1035.1719))
        {
        OnPlayerCommandText(playerid,"/detran");
        }
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 1642.3599,-2238.1589,13.4979) || IsPlayerInRangeOfPoint(playerid, 2.0, -1421.4819,-287.3259,14.1484) || IsPlayerInRangeOfPoint(playerid, 2.0, 1673.2532,1447.8350,10.7860))
        {
        OnPlayerCommandText(playerid,"/viajar");
        }
  		if(PlayerToPoint(1,playerid,1691.4391,-1334.9795,17.4275))
        {
        OnPlayerCommandText(playerid,"/creditos");
		}

        if(PlayerToPoint(2,playerid,2249.8088,-2257.7874,14.7647))
        {
        OnPlayerCommandText(playerid,"/vendermadeira");
        }
        if(PlayerToPoint(1,playerid,346.1226,161.8205,1025.7964))
        {
        OnPlayerCommandText(playerid,"/equipargov");
        }
		if(PlayerToPoint(1,playerid,1016.5500,-922.6879,42.1797))
        {
        OnPlayerCommandText(playerid,"/mhelper");
		}
        if(PlayerToPoint(2,playerid,1450.0607,-1965.0198,29.8656))
        {
        OnPlayerCommandText(playerid,"/cortarmadeira");
        }

       	if (PlayerToPoint(2, playerid, 344.5580,309.7243,999.1557) || PlayerToPoint(2, playerid, 1658.3202,-1841.8921,13.5465))
    	{
			OnPlayerCommandText(playerid,"/dhitman");
    	}
    	if (PlayerToPoint(2, playerid, 609.1560,-601.8568,17.2266))
    	{
			OnPlayerCommandText(playerid,"/dpf");
    	}


        if(PlayerToPoint(3,playerid,1530.3060,-1702.4915,6.2252) || PlayerToPoint(3,playerid,326.6374,307.1123,999.1484) || PlayerToPoint(3,playerid,1263.5537,-1655.0265,6.3116) || PlayerToPoint(3,playerid,240.6516,112.8062,1003.2188) || PlayerToPoint(3,playerid,255.1123,77.4241,1003.6406) || PlayerToPoint(3,playerid,229.8059,164.7830,1003.0234)
		 || PlayerToPoint(3,playerid,-1345.8823,492.5301,11.2027) || PlayerToPoint(3,playerid,712.7550,-554.5677,-3.5950))
        {
        OnPlayerCommandText(playerid,"/batercartao");
        }
        if(PlayerToPoint(3,playerid,1172.4320,-1319.2578,15.3940))
        {
        OnPlayerCommandText(playerid,"/bcsamu");
        }
        if(PlayerToPoint(3,playerid,370.8871,174.5609,1019.9844))
        {
        OnPlayerCommandText(playerid,"/bcd");
        }
        if(PlayerToPoint(3,playerid,359.4272,163.7324,1008.3828))
        {
        OnPlayerCommandText(playerid,"/infotestecidadania");
        }
		if(PlayerToPoint(3.0, playerid, 2309.3223,-8.3691,26.7422))
		{
		OnPlayerCommandText(playerid,"/bancof");
		}
        if(PlayerToPoint(3,playerid,1791.7347,-1689.3971,13.4656))
        {
        OnPlayerCommandText(playerid,"/bcmec");
        }
        if(PlayerToPoint(3,playerid,1289.7114,-798.4102,1089.9375))
        {
        OnPlayerCommandText(playerid,"/bcadv");
        }
        if(PlayerToPoint(3,playerid,1484.0079,-1749.2959,15.4453))
		{
		OnPlayerCommandText(playerid,"/impostometro");
		}
        if(PlayerToPoint(3,playerid,1672.6251,-1108.5673,24.2059))
		{
		OnPlayerCommandText(playerid,"/menuconce");
		}
        if(PlayerToPoint(3,playerid,549.1534,-1309.9156,27.2406))
		{
		OnPlayerCommandText(playerid,"/menuconce2");
		}
	    if(PlayerToPoint(3,playerid,1830.4945,-1397.8027,13.4340))
		{
		OnPlayerCommandText(playerid,"/menuconcekart");
		}
	    if(PlayerToPoint(2,playerid,1310.5232,-1251.0765,14.5019))
		{
		OnPlayerCommandText(playerid,"/cardapio");
		}
		if(PlayerToPoint(1.0, playerid, 2226.3379,-1158.2490,25.7794))
   	    {
        OnPlayerCommandText(playerid,"/ajudanpc");
   	    }
        if(PlayerToPoint(3.0, playerid, 927.0744,-1596.0996,13.5469))
        {
        OnPlayerCommandText(playerid,"/p227");
        }
        if(IsPlayerInRangeOfPoint(playerid, 1.5, 2306.9739,-7.4446,26.7422)) // Info Banco
        {
	        if(IsPlayerConnected(playerid))
	    	{
				new logs[35],total,recebido,DialogThiago[1500];
				format(logs,sizeof logs,"Emprestimo/infobanco.ini");
				if(!dini_Exists(logs)) return dini_Create(logs);
				total = dini_Int(logs, "Total");
				recebido = dini_Int(logs, "Recebido");
				format(string, 128, "{FFFFFF}Total Emprestado : R${FF0066} %d\n", total);
                strcat(DialogThiago,string);
                format(string, 128, "{FFFFFF}Total Recebido : R${FF0066} %d\n", recebido);
                strcat(DialogThiago,string);
                format(string, 128, "{00FF00}Disponivel Para Empréstimos : R${FFFFFF} %d\n", BizzInfo[3][bTill]);
                strcat(DialogThiago,string);
                if(BizzInfo[3][bTill] < 1000000)
                {
                    format(string, 128, "{FFFFFF}Status Da Empresa: {FF0000}Falida \n");
				}else
				{
				    format(string, 128, "{FFFFFF}Status Da Empresa: {00FF00}Funcionando \n");
				}
                strcat(DialogThiago,string);
				ShowPlayerDialog(playerid, 8724, DIALOG_STYLE_MSGBOX, "{FFFFFF}Empréstimo do Banco", DialogThiago, "Ok", "Cancelar");
			}
   		}
		if (InAFoodPlace[playerid] != 0)
		{
			if(PlayerToPoint(1.5,playerid,368.9714,-6.2486,1001.8516))
			{
				ShowPlayerDialog(playerid, 28, DIALOG_STYLE_LIST, "Cluckin' Bell", "Coração no Espeto R$2\nCarne de Vaca R$4\nCarne de Jacaré R$5\nCarne de Frango R$3\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerPos(playerid,368.9714,-6.2486,1001.8516);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			if(PlayerToPoint(1.5,playerid,376.8571,-67.6620,1001.5151) || PlayerToPoint(1.5,playerid,683.9015,-456.7076,-25.6099))
			{
				ShowPlayerDialog(playerid, 29, DIALOG_STYLE_LIST, "Burger Shot", "X-Baycon R$2\nX-Tudo R$4\nX-Especial R$5\nX-Frango R$3\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerPos(playerid,376.8571,-67.6620,1001.5151);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			if(PlayerToPoint(1.5,playerid,375.6895,-118.9683,1001.4995))
			{
				ShowPlayerDialog(playerid, 30, DIALOG_STYLE_LIST, "Well Stacked Pizza", "Presunto e Mussarela - Pequena R$2\nPresunto e Mussarela - Grande R$4\nFrango e Azeitona R$5\nBacon e Chocolate R$3\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerPos(playerid,375.6895,-118.9683,1001.4995);
				SetPlayerFacingAngle(playerid, 357.0132);
			}
			if(PlayerToPoint(1.5,playerid,379.0611,-186.6032,1000.6328))
			{
				ShowPlayerDialog(playerid, 31, DIALOG_STYLE_LIST, "Jim's sticky ring", "Rosquinha Pequena R$2\nRosquinha Normal R$4\nRosquinha de Chefe R$5\nSuper Rosquinha R$4\nAgua R$1\nSuco R$1", "Selecionar", "Cancelar");
				SetPlayerPos(playerid,379.0611,-186.6032,1000.6328);
				SetPlayerFacingAngle(playerid, 280);
			}
			SetCameraBehindPlayer(playerid);
		}
		if(PlayerToPoint(1.5,playerid,2224.1484,-1141.8772,1025.7969) || PlayerToPoint(1.0,playerid,1929.5409,-1785.1664,13.5469) || PlayerToPoint(1.0,playerid,2232.2886,-1162.6107,25.8906) || PlayerToPoint(1.5,playerid,957.4803,-48.7381,1001.1172)
		|| PlayerToPoint(1.5,playerid,321.4753,305.5962,999.1484) || PlayerToPoint(1.5,playerid,-1347.6376,499.9476,11.1953)
		 || PlayerToPoint(1.5, playerid,2308.7908,-13.2499,26.7422) || PlayerToPoint(1.5,playerid,1495.3928,-1749.1208,15.4453) ||  PlayerToPoint(1.5,playerid,1363.0376,-1745.4191,13.5439))
		{
		    OnPlayerCommandText(playerid,"/banco");
		}
		if(PlayerToPoint(1.5,playerid, 414.8116,-50.1285,1001.8984) || PlayerToPoint(1.5,playerid, 414.9881,-52.1974,1001.8984) || PlayerToPoint(1.5,playerid, 415.0535,-54.3463,1001.8984))
		{
	       OnPlayerCommandText(playerid, "/cabeloshopping");
		}	
		if (PlayerToPoint(2, playerid, 361.8300,173.5202,1008.3828))
    	{
			OnPlayerCommandText(playerid,"/getemprego");
    	}
    	if (PlayerToPoint(2, playerid, 1490.2411,1307.2179,1093.2891))
    	{
			OnPlayerCommandText(playerid,"/licencas");
    	}
    	if (PlayerToPoint(2.0, playerid, -26.8819,-89.6936,1003.5469) || PlayerToPoint(2.0, playerid, -22.2540,-55.6456,1003.5469)
    	|| PlayerToPoint(2.0, playerid, -22.3265,-138.4765,1003.5469) || PlayerToPoint(2.0, playerid, -30.3140,-28.3121,1003.5573)
		|| PlayerToPoint(2.0, playerid, 1128.7734,-1651.9916,18.6182))
    	{
    	    Controle(playerid, 0);
			ShowPlayerDialog(playerid, 5, DIALOG_STYLE_LIST, "Mercado 24/7", "Celular - R$100\nAgenda - R$2\nDado - R$2\nCamisinha - R$2\nCD-Player - R$2\nFrango - R$10\nHamburguer - R$10\nPizza - R$10\n30 Creditos - R$30\n50 Creditos - R$50\nCapacete - R$30", "Confirmar", "Cancelar");
    	}
    	if (PlayerToPoint(2.0, playerid, 312.1259,-166.1339,999.6010) || PlayerToPoint(2.0, playerid, 295.7041,-80.3617,1001.5156))
    	{
    	    Controle(playerid, 0);
    	    ShowPlayerDialog(playerid, 6, DIALOG_STYLE_LIST, "Loja de Armas", "Kit Vip/Kit Premium\nEagle\nMP5\nShotgun\nAk-47\nM4\nRifle\nParaquedas\nTaco de Golfe\nCaceteti\nTaco de Baseball\nPá\nTaco de Sinuca\nVibrador 1\nVibrador 2\nVibrador 3\nVibrador 4\nBuque de Flores\nCano\nColete  R$3.000", "Confirmar", "Cancelar");
        }
        if(IsPlayerInRangeOfPoint(playerid, 2.0, 768.2192,-3.9873,1000.7203))
		{
		    Controle(playerid, 0);
			ShowPlayerDialog(playerid, DIALOGID+7, DIALOG_STYLE_LIST, "Estilos De Luta", "Cotoveladas\nBoxe\nRua\nKickBoxing\nKarate\nNormal", "confirma", "Cancela");
		}
		if(PlayerToPoint(2.0, playerid, 2152.4727,-1014.0005,62.8375) || PlayerToPoint(2.0, playerid, 1450.4479,-2287.0803,13.5469) || PlayerToPoint(2.0, playerid, 1919.1384,-1415.4775,13.5703) || PlayerToPoint(2.0, playerid, 1123.7664,-1506.4692,15.7869) || PlayerToPoint(2.0, playerid, 1138.8217,-1972.5050,61.1965))
		{
		    if (PlayerInfo[playerid][pEmprego] == 3)
			{
			    Controle(playerid, 0);
		    	ShowPlayerDialog(playerid, 2572, DIALOG_STYLE_LIST, "Pegar Drogas", "Pegar Maconha\nPegar Cocaina\nPegar Crack\nEsconder Maconha\nEsconder Cocaina\nEsconder Crack\nPegar Safe Maconha\nPegar Safe Cocaina\nPegar Safe Crack", "Confirma", "Cancela");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Você não é um vendedor de drogas");
			}
		}
        if(PlayerToPoint(2.0,playerid,-2648.0940,1396.4666,906.4609) || PlayerToPoint(2.0,playerid,675.0947,-1275.7603,13.6334))
		{
		    if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12 || PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
			{
			    Controle(playerid, 0);
		    	ShowPlayerDialog(playerid, 2582, DIALOG_STYLE_LIST, "Menu Máfia", "Equipar\nPegar Materiais\nEsconder Materiais", "Confirma", "Cancela");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Você não é um mafioso");
			}
		}
  		if(PlayerToPoint(3.0,playerid,2026.2104,-1896.1097,13.5469) || PlayerToPoint(3.0,playerid,1240.5569,-2036.9919,59.9709))
		{
		    if (PlayerInfo[playerid][pEmprego] == 6)
			{
			    Controle(playerid, 0);
		    	ShowPlayerDialog(playerid, PEGARMAFIA, DIALOG_STYLE_INPUT, "Pegar Materiais", "Digite a quantidade de materiais/nque deseja pegar", "Pegar", "Cancelar");
			}
			else
			{
			    SendClientMessage(playerid, COLOR_GREY, "  Você não é um vendedor de armas");
			}
		}
		if (PlayerToPoint(2.0, playerid, 1524.4977,-1677.9469,6.2188) || PlayerToPoint(2.0, playerid, 1565.1235,-1666.9944,28.3956) || PlayerToPoint(2.0, playerid, 246.2975,87.4735,1003.6406))
		{
		    Controle(playerid, 0);
    		ShowPlayerDialog(playerid, 2585, DIALOG_STYLE_LIST, "Elevador Policial", "Garagem\nDepartamento\nCobertura", "Confirma", "Cancela");
 		}
 		if(PlayerToPoint(3.0,playerid,1990.8590,-1996.3722,13.5469) || PlayerToPoint(3.0,playerid,1240.5569,-2036.9919,59.9709))
 		{
 			if(MatsHolding[playerid] > 0)
			{
   				new payout = (100)*(MatsHolding[playerid]);
       			format(gstring, sizeof(gstring), "* A Boca comprou %d pacotes e te deu %d materiais.", payout, MatsHolding[playerid]);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
       			PlayerInfo[playerid][pMats] += payout;
   				MatsHolding[playerid] = 0;
      		}
       		else
       		{
				SendClientMessage(playerid, COLOR_GREY, "   Você não tem nenhum pacote !");
    		}
    	}
      	if(PlayerToPoint(3.0,playerid,1828.9386,-1149.9722,23.9766))
 		{
            if(PlayerInfo[playerid][pEmprego] == 6)
            {
 			if(MatsHolding[playerid] > 0)
			{
   				new payout = (100)*(MatsHolding[playerid]);
       			format(gstring, sizeof(gstring), "* A Boca comprou %d pacotes e te deu %d materiais..", payout, MatsHolding[playerid]);
			    SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
       			PlayerInfo[playerid][pMats] += payout;
   				MatsHolding[playerid] = 0;
      		}
       		else
       		{
				SendClientMessage(playerid, COLOR_GREY, "Você não tem nenhum pacote ou não é vendedor de armas !");
    		}
    	}
     }
    	if(PlayerToPoint(1, playerid, 1568.6442,-1689.9729,6.2188) || PlayerToPoint(1, playerid, 238.2739,108.0566,1003.2257) || PlayerToPoint(1, playerid, -1341.1760,500.5289,11.1953)
		|| PlayerToPoint(1, playerid, 608.4645,-592.8484,17.2330) || PlayerToPoint(1, playerid, 208.8036,145.8378,1003.0234) || PlayerToPoint(1, playerid, 608.6080,-592.8043,17.2330))
    	{
    	    if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
    	    {
    	        Controle(playerid, 0);
    	        ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Polícia Militar", "Dinheiro", "Confirmar", "Cancelar");
    	    }
    	    else if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
    	    {
    	        Controle(playerid, 0);
                ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre B.O.P.E", "Dinheiro", "Confirmar", "Cancelar");
    	    }
    	    else if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
    	    {
    	        Controle(playerid, 0);
                ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Exército", "Dinheiro", "Confirmar", "Cancelar");
    	    }
    	    else if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
    	    {
    	        Controle(playerid, 0);
                ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Polícia Federal", "Dinheiro", "Confirmar", "Cancelar");
    	    }
    	    else if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
    	    {
    	        Controle(playerid, 0);
                ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Polícia Civil", "Dinheiro", "Confirmar", "Cancelar");
    	    }
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um policial !"); }
    	}
    	if(PlayerToPoint(1, playerid, 1106.6525,-314.3387,73.9922))
    	{
    	    if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Taliban", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é do Taliban !"); }
		}
		if(PlayerToPoint(1, playerid, 400.0611,2539.5366,16.5448))
		{
			if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Al'qaeda", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é da Al'qaeda !"); }
    	}
     	if(PlayerToPoint(1, playerid, -314.4704,1774.4768,43.6406))
		{
			if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre F.A.R.C", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é da F.A.R.C !"); }
    	}
    	if(PlayerToPoint(1, playerid, 2811.7102,-1166.1824,1025.5703))
    	{
			if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Aztecas", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é dos Aztecas !"); }
    	}
    	if(PlayerToPoint(1, playerid, 2514.1301,-1691.2979,14.0460))
    	{
			if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Groove Street", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é da Groove Street !"); }
    	}
    	if(PlayerToPoint(1, playerid, 1074.7671,-1204.1219,18.1446))
    	{
			if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Ballas", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é dos Ballas !"); }
    	}
    	if(PlayerToPoint(1, playerid, 296.2728,1489.4459,1080.2578))
    	{
			if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Vagos", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é dos Vagos !"); }
    	}
    	if(PlayerToPoint(1, playerid, 2151.3218,-1789.1669,13.5097))
    	{
			if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
			{
		    	Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Comando Vermelho", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é dos Comando Vermelho !"); }
		}
		if(PlayerToPoint(1, playerid, 681.3650,-445.1725,16.3359))
    	{
			if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
			{
		    	Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Sons of Anarchy", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não faz parte dos Sons of Anarchy !"); }
		}

		if(PlayerToPoint(1, playerid, 2768.6760,-1626.2833,10.9272))
    	{
			if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
			{
		    	Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Drifters", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack\nEquipar", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não faz parte dos Drifters !"); }
		}

    	if(PlayerToPoint(1, playerid, 1171.2683,-1311.1749,13.9851))
    	{
			if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre S.A.M.U", "Dinheiro", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um Médico !"); }
    	}
    	if(PlayerToPoint(1, playerid, 1642.2533,-1847.7957,13.5411))
    	{
			if(PlayerInfo[playerid][pMembro] == 22 || PlayerInfo[playerid][pLider] == 22)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Triads", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um Triad !"); }
    	}
    	if(PlayerToPoint(1, playerid, 356.3957,152.4393,1025.7891))
    	{
			if(PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Prefeitura", "Dinheiro", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um Servidor Público !"); }
    	}
    	if(PlayerToPoint(1, playerid, 954.3677,-1548.2120,13.5904))
    	{
			if(PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Hitmans", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um Hitman !"); }
    	}
    	if(PlayerToPoint(1, playerid, 752.1580,-1358.9927,13.5000))
    	{
			if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Repórteres", "Dinheiro", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um Repórter !"); }
    	}
    	if(PlayerToPoint(1, playerid, 992.5768,-1460.1726,13.5469))
    	{
			if(PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Taxistas", "Dinheiro", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é um Taxista !"); }
    	}
    	if(PlayerToPoint(1, playerid, -2634.2791,1409.7692,906.4647))
    	{
			if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Cosa Nostra", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é da Cosa Nostra !"); }
    	}
    	if(PlayerToPoint(1, playerid, -2167.5757,644.8060,1057.7687))
    	{
			if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
			{
    	        Controle(playerid, 0);
    			ShowPlayerDialog(playerid, 12, DIALOG_STYLE_LIST, "Cofre Yakuza", "Dinheiro\nMateriais\nMaconha\nCocaina\nCrack", "Confirmar", "Cancelar");
			}
    	    else
    	    { SendClientMessage(playerid, COLOR_GREY, "   Você não é da Yakuza !"); }
    	}
    }
    if((newkeys == KEY_HORN) && (IsPlayerInAnyVehicle(playerid)))
	{
	    if(IsAtGasStation(playerid))
	    {
            OnPlayerCommandText(playerid,"/abastecer");
		}
	}
    if((newkeys == KEY_HORN) && (IsPlayerInAnyVehicle(playerid)))
	{
	    if(gTeam[playerid] == 2  || IsACop(playerid) || IsAGOV(playerid))
		{
			OnPlayerCommandText(playerid,"/pe");
			OnPlayerCommandText(playerid,"/pe2");
  			OnPlayerCommandText(playerid,"/pg");
  			OnPlayerCommandText(playerid,"/abrirgn");
  			OnPlayerCommandText(playerid,"/pc");
  			OnPlayerCommandText(playerid,"/pb");
  			OnPlayerCommandText(playerid,"/pce");
  			OnPlayerCommandText(playerid,"/pcg");
  			OnPlayerCommandText(playerid,"/ppc");
   		}
   		if (PlayerInfo[playerid][pPHousekey] == 1 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p1");
		 
    	}
    	if (PlayerInfo[playerid][pPHousekey] == 231 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p231");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 232 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p232");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 233 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p233");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 234 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p234");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 235 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p235");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 157 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p157");
		 
    	}
       if (PlayerInfo[playerid][pPHousekey] == 228 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p228");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 229 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

		 OnPlayerCommandText(playerid, "/p229");

    	}
    	if (PlayerInfo[playerid][pPHousekey] == 227 && strcmp(PlayerName(playerid), HouseInfo[PlayerInfo[playerid][pPHousekey]][hOwner]) == 0) {

         if(PlayerToPoint(6.0, playerid, 927.1511,-1611.2917,13.5469))
	     {
		   OnPlayerCommandText(playerid, "/p227");
		   return true;
		 }

    	}
        if(IsADetran(playerid))
		{
           OnPlayerCommandText(playerid, "/pdeposito");
        }
        if(IsAGOV(playerid))
		{
		    OnPlayerCommandText(playerid,"/pgov");
		}
        if(IsAJornal(playerid))
		{
			OnPlayerCommandText(playerid,"/portaoreporter");
		}
		if(IsATaxi(playerid))
		{
			OnPlayerCommandText(playerid,"/ptaxi");
		}
		if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
		{
 			OnPlayerCommandText(playerid,"/pyakuza");
		}
		if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
		{
 			OnPlayerCommandText(playerid,"/acn");
		}
		if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
		{
 			OnPlayerCommandText(playerid,"/ppf");
		}
		if(PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8)
		{
 			OnPlayerCommandText(playerid,"/phit");
		}
		if(PlayerInfo[playerid][pMembro] == 22 || PlayerInfo[playerid][pLider] == 22)
		{
 			OnPlayerCommandText(playerid,"/ptriad");
		}
		if((newkeys == KEY_HORN) && (IsPlayerInAnyVehicle(playerid)))
		{
 			OnPlayerCommandText(playerid,"/Cativeiro");//Cativeiro
		}
	}
return true;
}
new Float:Life;
forward Vidaperder();
public Vidaperder()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	if(PlantouBombaNuclear[i] == 1)
	{
	    if(gPlayerLogged[i] == 1)
	    {
	    	if(BOMBAON == 0)
	        {
	            if(BOMBAONTIME == 120) return;
				GetPlayerHealth(i,Life);
				SetPlayerHealth(i,Life-1);
		    	VERVIDA = SetTimer("Vidaperder", 1000, false);
		    	BOMBAONTIME ++;
   			}
   		  }
    	}
	}
}
forward UpdateTimeT(playerid);
public UpdateTimeT(playerid)
{
  new Str[34];
  TimeS --;
  if(TimeM == 0 && TimeS == 0)
  {
 	KillTimer(TimeT);
 	KillTimer(VERVIDA);
 	new Float:x,Float:y,Float:z;
 	GetObjectPos(NuclearBomb, x, y, z);
 	DestroyDynamicObject(NuclearBomb);
 	CreateExplosion(x, y, z, 7, 10);
  	CreateExplosion(x, y, z+3, 7, 10);
   	CreateExplosion(x, y, z+6, 7, 10);
    CreateExplosion(x, y, z+9, 7, 10);
	CreateExplosion(x, y, z+12, 7, 10);
 	CreateExplosion(x, y, z+15, 7, 10);
  	CreateExplosion(x, y, z+18, 7, 10);
   	CreateExplosion(x, y, z+21, 7, 10);
   	CreateExplosion(x, y+7, z+21, 7, 10);
   	CreateExplosion(x, y-7, z+21, 7, 10);
   	CreateExplosion(x+7, y, z+21, 7, 10);
    CreateExplosion(x-7, y, z+21, 7, 10);
    CreateExplosion(x, y, z+24, 7, 10);
    CreateExplosion(x, y+10, z+24, 7, 10);
    CreateExplosion(x, y-10, z+24, 7, 10);
    CreateExplosion(x+10, y, z+24, 7, 10);
    CreateExplosion(x-10, y, z+24, 7, 10);
    CreateExplosion(x, y, z+27, 7, 10);
    CreateExplosion(x, y+7, z+27, 7, 10);
    CreateExplosion(x, y-7, z+27, 7, 10);
   	CreateExplosion(x+7, y, z+27, 7, 10);
   	CreateExplosion(x-7, y, z+27, 7, 10);
   	CreateExplosion(x, y, z+30, 7, 10);
   	CreateExplosion(x, y+3, z+30, 7, 10);
   	CreateExplosion(x, y-3, z+30, 7, 10);
   	CreateExplosion(x+3, y, z+30, 7, 10);
   	CreateExplosion(x-3, y, z+30, 7, 10);
   	SendClientMessage(playerid,COR_GRO,"Bomba Detonada.");
   	new string[255];
    format(string, 128, "{E10E0E}[Terrorista]: Tempo da Bomba se Esgotou {f5f3f0} Bomba Nuclear {E10E0E} Detonada com Sucesso !{f5f3f0}.");
    SendClientMessageToAll(0xFFFFFFAA , string);
	SetWeather(45);
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    SetTimerEx("usebomb", 3600000, false, "i", i);
	    if(pbomba[i] != 0 && pbomba[i] != 0)
	    {
 			pbomba[i] = 0;
  			pbomba2[i] = 0;
		}
		 PlantouBombaNuclear[i] = 1;
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
            if(IsPlayerInRangeOfPoint(i, 200.0, 101.9628,1327.7841,1131.8562) || IsPlayerInRangeOfPoint(i, 200.0, 117.9559,1328.1917,1137.8330))
			{
                    if(IsPlayerConnected(i))
                    {
                          pBombNuclear[playerid] = 0;
					}
                    new Float:px, Float:py, Float:pz;
					GetPlayerPos(i, px, py, pz);
					PlayerPlaySound(i, 1159, px, py, pz);
					PlantouBombaNuclear[i] = 1;
                    StopAudioStreamForPlayer(i);
					TextDrawHideForPlayer(i, Textdraw0[i]);
					return true;
			 }

		}
		else
		{
				if(IsPlayerInAnyVehicle(i))
				{
					SetVehicleHealth(GetPlayerVehicleID(i),0.0);
				}
				for(new allplayers = 0; allplayers < GetMaxPlayers(); allplayers++)
				SetPlayerHealth(allplayers, 0.0);
				new Float:px, Float:py, Float:pz;
				GetPlayerPos(i, px, py, pz);
				PlayerPlaySound(i, 1159, px, py, pz);
				pBombNuclear[playerid] = 0;
		 	}
		}
	 }
  if(TimeS == -1)
  {
    TimeM--;
    TimeS = 59;
  }
  if(TimeS<10)
  {
    format(Str, sizeof(Str), "%02d:%02d", TimeM, TimeS);
  }
  if(TimeS>9)
  {
    format(Str, sizeof(Str), "%02d:%02d", TimeM, TimeS);
  }
  for(new i = 0; i < MAX_PLAYERS; i++)
  {
  		if(IsPlayerConnected(i))
		{
   			if(TimeM == 0 && TimeS == 0)
			{
			    TextDrawHideForPlayer(i, Textdraw0[i]);
			}else
			{
				TextDrawSetString(Textdraw0[i], Str);
	  			TextDrawShowForPlayer(i, Textdraw0[i]);
			}
		}
  }
  return 1;
}
public ScoreLevel(playerid)
{
	new LevScore;
	LevScore = PlayerInfo[playerid][pLevel];
	SetPlayerScore(playerid, LevScore);
}

public VeloThiago()
{
    new Float:Speedo_X,Float:Speedo_Y,Float:Speedo_Z;
	new Float:Speedo_HP;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    new vehicle = GetPlayerVehicleID(i);
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i))
		{
		    GetPlayerPos(i, Speedo_X, Speedo_Y, Speedo_Z);
			GetPlayerVehicleID(i);
			new newcar = GetPlayerVehicleID(i);
			GetVehicleHealth(GetPlayerVehicleID(i), Speedo_HP);
			new str1[256],str2[256],str3[256],str4[256],str5[256],str6[256],str7[256];
			if(SpeedoON[i] == 0)
			{
				TextDrawShowForPlayer(i, box[i]);
				TextDrawShowForPlayer(i, fahrzeug[i]);
				TextDrawShowForPlayer(i, mph[i]);
				TextDrawShowForPlayer(i, combustivelt[i]);
				TextDrawShowForPlayer(i, zustand[i]);
				TextDrawShowForPlayer(i, gps[i]);
				TextDrawShowForPlayer(i, hoehe[i]);
				TextDrawShowForPlayer(i, url[i]);
				SpeedoON[i] = 1;
			}
			format(str1,sizeof(str1),"~w~~d~Veiculo: ~b~~h~~h~%s",vehName[GetVehicleModel(vehicle)-400]);
			TextDrawSetString(fahrzeug[i], str1);
			format(str2,sizeof(str2),"~w~~d~KM/H: ~y~%d",GetPlayerSpeed(i, true));
			TextDrawSetString(mph[i], str2);
			format(str3,sizeof(str3),"~w~~d~Combustivel: ~g~~h~%d%%", Gas[vehicle]);
			TextDrawSetString(combustivelt[i], str3);
			if(IsACopCar(newcar) || IsAExCar(newcar) || IsAnAmbulanceCar(newcar) || IsAPoliciaCivilCar(newcar) || IsAPFCar(newcar) || IsABOPEsCar(newcar) || IsAGOVCar(newcar))
			{
			format(str4,sizeof(str4),"~w~~d~Lataria: ~r~~h~%0.0f%%", Speedo_HP/10);
			}
			else
			{
			format(str4,sizeof(str4),"~w~~d~Lataria: ~r~~h~%0.0f%%", Speedo_HP/10);
			}
			TextDrawSetString(zustand[i], str4);
			format(str5,sizeof(str5),"~w~~d~GPS: ~p~~h~%s", ReturnPlayerZone(i));
			TextDrawSetString(gps[i], str5);
			format(str6,sizeof(str6),"~w~~d~Altura: ~p~~h~%.1f", Speedo_Z);
			TextDrawSetString(hoehe[i], str6);
			format(str7,sizeof(str7),URLTHIAGO);
			TextDrawSetString(url[i], str7);
		}
		SavePlayerPos[i][sX] = Speedo_X, SavePlayerPos[i][sY] = Speedo_Y, SavePlayerPos[i][sZ] = Speedo_Z;
	}
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(!IsPlayerInAnyVehicle(i))
		{
            TextDrawHideForPlayer(i, box[i]);
			TextDrawHideForPlayer(i, fahrzeug[i]);
			TextDrawHideForPlayer(i, mph[i]);
			TextDrawHideForPlayer(i, combustivelt[i]);
			TextDrawHideForPlayer(i, zustand[i]);
			TextDrawHideForPlayer(i, gps[i]);
			TextDrawHideForPlayer(i, hoehe[i]);
			TextDrawHideForPlayer(i, url[i]);
			SpeedoON[i] = 0;
		}
		if(spawnado[i] == 1)
		{
			if(SpeedoON[i] >= 1)
			{
				TextDrawHideForPlayer(i, forum[i]);
			}
			if(SpeedoON[i] <= 0)
			{
				TextDrawShowForPlayer(i, forum[i]);
			}
		}
	}
}


public RemoveRoadblock(playerid)
{
	DestroyObject(pRoadblock[playerid]);
	pRoadblock[playerid] = 0;
}
public RemoveParedao(playerid)
{
	DestroyObject(PlayerInfo[playerid][pParedao]);
	PlayerInfo[playerid][pParedao] = 0;
}
public RemoveRoadPregos(playerid)
{
	SpikeInfo[playerid][sCreated]=0;
    SpikeInfo[playerid][sX]=0.0;
    SpikeInfo[playerid][sY]=0.0;
    SpikeInfo[playerid][sZ]=0.0;
    DestroyObject(SpikeInfo[playerid][sObject]);
}
public RemoveRoadCones(playerid)
{
	DestroyObject(pRoadCones[playerid]);
	pRoadCones[playerid] = 0;
}
public RemoveBarraca(playerid)
{
	DestroyObject(PlayerInfo[playerid][pBarraca]);
	PlayerInfo[playerid][pBarraca] = 0;
}
public ClearChatbox(playerid, lines)
{
	if (IsPlayerConnected(playerid))
	{
		for(new i=0; i<lines; i++)
		{
			SendClientMessage(playerid, COLOR_GREY, " ");
		}
	}
	return true;
}
public NRouco(playerid)
{
	Rouco[playerid] = 0;
	SendClientMessage(playerid, CINZA, "Agora você já pode gritar novamente.");
}
public NSemAn(playerid)
{
	SemAn[playerid] = 0;
	SendClientMessage(playerid, CINZA, "Agora você já usar o /an.");
}
public BackupClear(playerid, calledbytimer)
{
	if(IsPlayerConnected(playerid))
	{
		if(IsACop(playerid))
		{
			if (PlayerInfo[playerid][pRequestingBackup] == 1)
			{
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i))
					{
                    if(IsACop(playerid))
						{
							SetPlayerMarkerForPlayer(i, playerid, TEAM_HIT_COLOR);
						}
					}
				}
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Seu pedido de reforço foi cancelado.");
				}
				else
				{
					SendClientMessage(playerid, TEAM_BLUE_COLOR, "Seu pedido de reforço foi cancelado automaticamente.");
				}
				PlayerInfo[playerid][pRequestingBackup] = 0;
			}
			else
			{
				if (calledbytimer != 1)
				{
					SendClientMessage(playerid, COLOR_GREY, "Você ainda não pediu reforço.");
				}
			}
		}
		else
		{
			if (calledbytimer != 1)
			{
				SendClientMessage(playerid, COLOR_GREY, "Você não é COP");
			}
		}
	}
	return true;
}
public CheckHack() // Anti Xiter de Armas e Jet Pack
{
	new string[128];
	new giveplayer[MAX_PLAYER_NAME];
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	   	if(IsPlayerConnected(i) && gPlayerLogged[i] == 1 && !IsPlayerNPC(i) && spawnado[i] > 0)
	   	{
// Rocket Launcher
if(GetPlayerWeapon(i) == 35)
		    	{
   if(PlayerInfo[i][pVIP] == 0) {
			    GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Rocket Laucher /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
}
// Granada
else if(GetPlayerWeapon(i) == 16)
		    	{
   if(PlayerInfo[i][pVIP] == 0) {
			    GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Granada /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
}
// Lança chamas
else if(GetPlayerWeapon(i) == 37)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Lança Chamas /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
// Visão Noturna
else if(GetPlayerWeapon(i) == 44)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "%s ANTICHEAT: %s[ID %d] está usando uma Visão Noturna /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
// Visão de Calor
else if(GetPlayerWeapon(i) == 45)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Visão de Calor /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
//Serra Eletrica
else if(GetPlayerWeapon(i) == 9)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Serra Eletrica /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
//Sawn-off
else if(GetPlayerWeapon(i) == 26)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Sawn-off /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
//Molotov
else if(GetPlayerWeapon(i) == 18)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando um Molotov /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
//Micro Uzi
else if(GetPlayerWeapon(i) == 28)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Micro Uzi /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
//Tec 9
/*else if(GetPlayerWeapon(i) == 32)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma TEC-9 /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}*/
//Bazooca
else if(GetPlayerWeapon(i) == 36)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Bazooca  /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				//ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
				}
else if(GetPlayerWeapon(i) == 38)
		    	{
				GetPlayerName(i, giveplayer, sizeof(giveplayer));
				format(string, sizeof(string), "ANTICHEAT: %s[ID %d] está usando uma Minigun  /tv nele rapido", giveplayer,i);
				ABroadCast(COLOR_LIGHTRED,string,1);
				SetPlayerPos(i,-123.7512,-2869.0913,183.3834+600);
				ResetPlayerWeaponsEx(i);
				SetPlayerArmedWeapon(i, 0);
}
// Player não pode usar tec 9 em jetpack
else if (GetPlayerSpecialAction(i) == 2) 
         { 
		 SetPlayerArmedWeapon(i, 0); 
		 }
				if(PlayerInfo[i][pConnectTime] < 1 && gPlayerLogged[i] == 1 && GetPlayerWeapon(i) > 1)
				{
		  			ResetPlayerWeaponsEx(i);
					SendClientMessage(i,COLOR_WHITE,"Você só poderá usar armas após 1 hora de jogo."); 
					SendClientMessage(i,COLOR_WHITE,"Dica: Use /gps para saber dos locais importantes."); 
					SendClientMessage(i,COLOR_WHITE,"Dica: Pegue o emprego de caminhoneiro na prefeitura para levantar algum dinheiro."); 
					SendClientMessage(i,COLOR_WHITE,"Dica: Ingresse em uma /profs contactando /lideres ou /sublideres.");
				}
    		}
	}
	return true;
}

public GuerraEstacao(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
	{
	    if(ProvocoEstacao[playerid] == 1)
		{
			if(IsPlayerInEstacao(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Máfia Cosa Nostra Dominaram a Estação!",playername);
				SendClientMessageToAll(COR_COSA, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a estação, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZEstacao);
 				GangZoneShowForAll(GZEstacao,COLORGZ_LH);
 				Dominando[playerid] = 0;
 				ProvocoEstacao[playerid] = 0;
 				GuerranaEstacao = 0;
 				donoestacao = 1;
 				KillTimer(TempoGuerraEstacao);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_COSA, "Você não está na estação.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZEstacao);
				GangZoneShowForAll(GZEstacao, 0xFFFFFF96);
				ProvocoEstacao[playerid] = 0;
				GuerranaEstacao = 0;
				donoestacao = 0;
				KillTimer(TempoGuerraEstacao);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
	{
	    if(ProvocoEstacao[playerid] == 1)
		{
			if(IsPlayerInEstacao(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Yakuza Dominaram a Estação!",playername);
				SendClientMessageToAll(COR_YAK, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a estação, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZEstacao);
				GangZoneShowForAll(GZEstacao,COLORGZ_YAKUZA);
				Dominando[playerid] = 0;
				ProvocoEstacao[playerid] = 0;
				GuerranaEstacao = 0;
				donoestacao = 2;
				KillTimer(TempoGuerraEstacao);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_YAK, "Você não está na estação.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZEstacao);
				GangZoneShowForAll(GZEstacao, 0xFFFFFF96);
				ProvocoEstacao[playerid] = 0;
				GuerranaEstacao = 0;
				donoestacao = 0;
				KillTimer(TempoGuerraEstacao);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
	{
	    if(ProvocoEstacao[playerid] == 1)
		{
			if(IsPlayerInEstacao(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o PF Dominaram a Estação!",playername);
				SendClientMessageToAll(COR_PF, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a estação, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZEstacao);
				GangZoneShowForAll(GZEstacao,COLORGZ_PF);
				Dominando[playerid] = 0;
				ProvocoEstacao[playerid] = 0;
				GuerranaEstacao = 0;
				donoestacao = 3;
				KillTimer(TempoGuerraEstacao);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PF, "Você não está na estação.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZEstacao);
				GangZoneShowForAll(GZEstacao, 0xFFFFFF96);
				ProvocoEstacao[playerid] = 0;
				GuerranaEstacao = 0;
				donoestacao = 0;
				KillTimer(TempoGuerraEstacao);
				return true;
			}
		}
		return true;
	}
	return true;
}
public GuerraCasarao(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12)
	{
	    if(ProvocoCasarao[playerid] == 1)
		{
			if(IsPlayerInCasarao(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Máfia Cosa Nostra Dominaram o Casarão!",playername);
				SendClientMessageToAll(COR_COSA, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o casarão, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZCasarao);
				GangZoneShowForAll(GZCasarao,COLORGZ_LH);
				Dominando[playerid] = 0;
				ProvocoCasarao[playerid] = 0;
				GuerranoCasarao = 0;
				donocasarao = 1;
				KillTimer(TempoGuerraCasarao);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_COSA, "Você não está no casarão.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZCasarao);
				GangZoneShowForAll(GZCasarao, 0xFFFFFF96);
				ProvocoCasarao[playerid] = 0;
				GuerranoCasarao = 0;
				donocasarao = 0;
				KillTimer(TempoGuerraCasarao);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13)
	{
	    if(ProvocoCasarao[playerid] == 1)
		{
			if(IsPlayerInCasarao(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Yakuza Dominaram o Casarão!",playername);
				SendClientMessageToAll(COR_YAK, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o casarão, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZCasarao);
				GangZoneShowForAll(GZCasarao,COLORGZ_YAKUZA);
				Dominando[playerid] = 0;
				ProvocoCasarao[playerid] = 0;
				GuerranoCasarao = 0;
				donocasarao = 2;
				KillTimer(TempoGuerraCasarao);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_YAK, "Você não está no casarão.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZCasarao);
				GangZoneShowForAll(GZCasarao, 0xFFFFFF96);
				ProvocoCasarao[playerid] = 0;
				GuerranoCasarao = 0;
				donocasarao = 0;
				KillTimer(TempoGuerraCasarao);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
	{
	    if(ProvocoCasarao[playerid] == 1)
		{
			if(IsPlayerInCasarao(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Federal Dominaram o Casarão!",playername);
				SendClientMessageToAll(COR_PF, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o casarão, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZCasarao);
				GangZoneShowForAll(GZCasarao,COLORGZ_PF);
				Dominando[playerid] = 0;
				ProvocoCasarao[playerid] = 0;
				GuerranoCasarao = 0;
				donocasarao = 3;
				KillTimer(TempoGuerraCasarao);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PF, "Você não está no casarão.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZCasarao);
				GangZoneShowForAll(GZCasarao, 0xFFFFFF96);
				ProvocoCasarao[playerid] = 0;
				GuerranoCasarao = 0;
				donocasarao = 0;
				KillTimer(TempoGuerraCasarao);
				return true;
			}
		}
		return true;
	}
	return true;
}
//================ GUERRA AERPORTO ===========================================================================
public GuerraAero(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,TEAM_GROVE_COLOR);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 1;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_GRO, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,COR_DRIFTERS);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 1;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_DRIFTERS, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_SONS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,COR_SONS);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 7;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_SONS, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(0xF6000000, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,0xF60000AA);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 7;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF6000000, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,TEAM_BALLAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 2;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_BALLAS_COLOR, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,TEAM_VAGOS_COLOR);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 3;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,TEAM_AZTECAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 4;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_BOPE, string);
				SendClientMessage(playerid, COR_BOPE, "Você dominou a Praça do Aeroporto, mantenha a posição.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,COR_BOPE);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 5;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_BOPE, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_PM, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Praça do Aeroporto, mantenha a posição.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,GCOP_COLOR);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 6;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
	{
	    if(ProvocoAero[playerid] == 1)
		{
			if(IsPlayerInAero(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil Dominaram a Praça do Aeroporto !",playername);
				SendClientMessageToAll(COR_PC, string);
				SendClientMessage(playerid, COR_PC, "Você dominou a Praça do Aeroporto, mantenha a posição.");
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero,COR_PC);
				Dominando[playerid] = 0;
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 6;
				KillTimer(TempoGuerraAero);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está na Praça do Aeroporto.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZAero);
				GangZoneShowForAll(GZAero, 0xFFFFFF96);
				ProvocoAero[playerid] = 0;
				GuerranoAero = 0;
				donoaero = 0;
				KillTimer(TempoGuerraAero);
				return true;
			}
		}
		return true;
	}
	return true;
}

//=============== guerra complexo
forward GuerraComplexo(playerid);
public GuerraComplexo(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street Dominaram o Complexo !",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,TEAM_GROVE_COLOR);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 14;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_GRO, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Federal Dominaram o Complexo!",playername);
				SendClientMessageToAll(COR_PF, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,COLORGZ_PF);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 11;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PF, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}


	if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters Dominaram o Complexo !",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,COR_DRIFTERS);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 21;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_DRIFTERS, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy Dominaram o Complexo !",playername);
				SendClientMessageToAll(COR_SONS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,COR_SONS);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 20;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_SONS, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho Dominaram o Complexo !",playername);
				SendClientMessageToAll(0xF6000000, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,0xF60000AA);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 19;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF6000000, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas Dominaram o Complexo !",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,TEAM_BALLAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 17;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_BALLAS_COLOR, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos Dominaram o Complexo !",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,TEAM_VAGOS_COLOR);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 18;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas Dominaram o Complexo !",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,TEAM_AZTECAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 5;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E Dominaram o Complexo !",playername);
				SendClientMessageToAll(COR_BOPE, string);
				SendClientMessage(playerid, COR_BOPE, "Você dominou o Complexo, mantenha a posição.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,COR_BOPE);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 2;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_BOPE, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar Dominaram o Complexo !",playername);
				SendClientMessageToAll(COR_PM, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Complexo, mantenha a posição.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,GCOP_COLOR);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 1;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
	{
	    if(ProvocoComplexo[playerid] == 1)
		{
			if(IsPlayerInComplexo(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil Dominaram o Complexo !",playername);
				SendClientMessageToAll(COR_PC, string);
				SendClientMessage(playerid, COR_PC, "Você dominou o Complexo, mantenha a posição.");
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo,COR_PC);
				Dominando[playerid] = 0;
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 16;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está no Complexo.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZComplexo);
				GangZoneShowForAll(GZComplexo, 0xFFFFFF96);
				ProvocoComplexo[playerid] = 0;
				GuerranoComplexo = 0;
				donocomplexo = 0;
				KillTimer(TempoGuerraComplexo);
				return true;
			}
		}
		return true;
	}
	return true;
}


public GuerraFavela(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street Dominaram a Favela!",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,TEAM_GROVE_COLOR);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 1;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_GRO, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters Dominaram a Favela!",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,COR_DRIFTERS);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 1;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_DRIFTERS, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy Dominaram a Favela!",playername);
				SendClientMessageToAll(COR_SONS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,COR_SONS);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 7;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_SONS, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho Dominaram a Favela!",playername);
				SendClientMessageToAll(0xF6000000, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,0xF60000AA);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 7;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF6000000, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas Dominaram a Favela!",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,TEAM_BALLAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 2;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_BALLAS_COLOR, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos Dominaram a Favela!",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,TEAM_VAGOS_COLOR);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 3;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas Dominaram a Favela!",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,TEAM_AZTECAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 4;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E Dominaram a Favela!",playername);
				SendClientMessageToAll(COR_BOPE, string);
				SendClientMessage(playerid, COR_BOPE, "Você dominou a Favela, mantenha a posição.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,COR_BOPE);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 5;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_BOPE, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar Dominaram a Favela!",playername);
				SendClientMessageToAll(COR_PM, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Favela, mantenha a posição.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,GCOP_COLOR);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 6;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
	{
	    if(ProvocoFavela[playerid] == 1)
		{
			if(IsPlayerInFavela(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil Dominaram a Favela!",playername);
				SendClientMessageToAll(COR_PC, string);
				SendClientMessage(playerid, COR_PC, "Você dominou a Favela, mantenha a posição.");
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela,COR_PC);
				Dominando[playerid] = 0;
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 6;
				KillTimer(TempoGuerraFavela);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está na Favela.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZFavela);
				GangZoneShowForAll(GZFavela, 0xFFFFFF96);
				ProvocoFavela[playerid] = 0;
				GuerranaFavela = 0;
				donoFavela = 0;
				KillTimer(TempoGuerraFavela);
				return true;
			}
		}
		return true;
	}
	return true;
}


public GuerraPark(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street Dominaram o Park Glen !",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,TEAM_GROVE_COLOR);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 1;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_GRO, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters Dominaram o Park Glen !",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,COR_DRIFTERS);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 1;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_DRIFTERS, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy Dominaram o Park Glen !",playername);
				SendClientMessageToAll(COR_SONS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,COR_SONS);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 7;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_SONS, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho Dominaram o Park Glen !",playername);
				SendClientMessageToAll(0xF6000000, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,0xF60000AA);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 7;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF6000000, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas Dominaram o Park Glen !",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,TEAM_BALLAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 2;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_BALLAS_COLOR, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos Dominaram o Park Glen !",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,TEAM_VAGOS_COLOR);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 3;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas Dominaram o Park Glen !",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, a cada 5 minutos nela ganhará grana.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,TEAM_AZTECAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 4;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E Dominaram o Park Glen !",playername);
				SendClientMessageToAll(COR_BOPE, string);
				SendClientMessage(playerid, COR_BOPE, "Você dominou o Park Glen, mantenha a posição.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,COR_BOPE);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 5;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_BOPE, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar Dominaram o Park Glen !",playername);
				SendClientMessageToAll(COR_PM, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou o Park Glen, mantenha a posição.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,GCOP_COLOR);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 6;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
	{
	    if(ProvocoPark[playerid] == 1)
		{
			if(IsPlayerInPark(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil Dominaram o Park Glen !",playername);
				SendClientMessageToAll(COR_PC, string);
				SendClientMessage(playerid, COR_PC, "Você dominou o Park Glen, mantenha a posição.");
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark,COR_PC);
				Dominando[playerid] = 0;
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 6;
				KillTimer(TempoGuerraPark);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está no Park Glen.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZPark);
				GangZoneShowForAll(GZPark, 0xFFFFFF96);
				ProvocoPark[playerid] = 0;
				GuerranoPark = 0;
				donopark = 0;
				KillTimer(TempoGuerraPark);
				return true;
			}
		}
		return true;
	}
	return true;
}

public contasdolider(playerid)
{
    	DemitirInfoOrg(PlayerName(playerid));
		gTeam[playerid] = 3;
		PlayerInfo[playerid][pTeam] = 3;
		PlayerInfo[playerid][pMembro] = 0;
		PlayerInfo[playerid][pLider] = 0;
		PlayerInfo[playerid][pCargo] = 0;
		SetPlayerSpawn(playerid);
		if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
        SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
		MedicBill[playerid] = 0;
		SpawnPlayer(playerid);
		MedicBill[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "Você pediu as contas, agora você é um Civil novamente!");
		return true;
		}

public GuerraSkate(playerid)
{
	new string[128];
	new playername[MAX_PLAYER_NAME];
	if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Groove Street Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_GROVE_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,TEAM_GROVE_COLOR);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 1;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_GRO, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Drifters Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(COR_DRIFTERS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,COR_DRIFTERS);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 1;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_DRIFTERS, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}

	if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Sons of Anarchy Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(COR_SONS, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,COR_SONS);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 7;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_SONS, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Comando Vermelho Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(0xF6000000, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,0xF60000AA);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 7;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, 0xF6000000, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Ballas Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,TEAM_BALLAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 2;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_BALLAS_COLOR, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o Vagos Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_VAGOS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,TEAM_VAGOS_COLOR);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 3;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_VAGOS_COLOR, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e os Los Aztecas Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(TEAM_AZTECAS_COLOR, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a pista de skate, a cada 3 minutos nele ganhará grana.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,TEAM_AZTECAS_COLOR);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 4;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
	if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e o B.O.P.E Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(COR_BOPE, string);
				SendClientMessage(playerid, COR_BOPE, "Você dominou a Favela, mantenha a posição.");
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate,COR_BOPE);
				Dominando[playerid] = 0;
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 5;
				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_BOPE, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}


	if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Militar Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(COR_PM, string);
				SendClientMessage(playerid, COLOR_GRAD5, "Você dominou a Pista de Skate, mantenha a posição.");
				GangZoneStopFlashForAll(GZSkate);
 				GangZoneShowForAll(GZSkate,GCOP_COLOR);
 				Dominando[playerid] = 0;
 				ProvocoSkate[playerid] = 0;
 				GuerranoSkate = 0;
 				donoskate = 6;
 				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
  	if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16)
	{
	    if(ProvocoSkate[playerid] == 1)
		{
			if(IsPlayerInSkate(playerid))
			{
			    GetPlayerName(playerid, playername, MAX_PLAYER_NAME);
                format(string, sizeof(string), "%s e a Policia Civil Dominaram a Pista de Skate!",playername);
				SendClientMessageToAll(COR_PC, string);
				SendClientMessage(playerid, COR_PC, "Você dominou a Pista de Skate, mantenha a posição.");
				GangZoneStopFlashForAll(GZSkate);
 				GangZoneShowForAll(GZSkate,COR_PC);
 				Dominando[playerid] = 0;
 				ProvocoSkate[playerid] = 0;
 				GuerranoSkate = 0;
 				donoskate = 6;
 				KillTimer(TempoGuerraSkate);
				return true;
			}
			else
			{
				SendClientMessage(playerid, COR_PM, "Você não está na pista de skate.");
				Dominando[playerid] = 0;
				GangZoneStopFlashForAll(GZSkate);
				GangZoneShowForAll(GZSkate, 0xFFFFFF96);
				ProvocoSkate[playerid] = 0;
				GuerranoSkate = 0;
				donoskate = 0;
				KillTimer(TempoGuerraSkate);
				return true;
			}
		}
		return true;
	}
 	return true;
}
public SBan(playerid, string[], string2[])
{
	new arquivo[64], tmp[20], tmp2[20], stri[64], ip[16];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(arquivo, sizeof(arquivo), "Banidos/%s.ini",PlayerName(playerid));
	getdate(Ano, Mes, Dia);
	format(tmp, 20, "%d/%d/%d", Dia, Mes, Ano);
	gettime(Hora, Minuto, Segundo);
	format(tmp2, 20, "%d:%d:%d", Hora, Minuto, Segundo);
	format(gstring, 128, "[%d/%d/%d] [%d:%d:%d] %s IP:%s foi banido pelo admin %s, motivo: %s", v[2], v[1], v[0], v[3], v[4], v[5], PlayerName(playerid),
	ip, string2, string);
	SBanLog(gstring);
	if(dini_Exists(arquivo))
	{
		Kick(playerid);
	}
	else
	{
		dini_Create(arquivo);
		dini_Set(arquivo,"Motivo",string);
		dini_Set(arquivo,"Admin",string2);
		dini_Set(arquivo,"Data",tmp);
		dini_Set(arquivo,"Hora",tmp2);

		format(stri, sizeof(stri), "IPsBanidos/%s.ini",ip);
		dini_Create(stri);
		dini_Set(stri,"Motivo",string);
		dini_Set(stri,"Admin",string2);
		dini_Set(stri,"Data",tmp);
		dini_Set(stri,"Hora",tmp2);
		dini_Set(stri,"Nick",PlayerName(playerid));
		Kick(playerid);
	}
	return true;
}

forward BanTemp(playerid, string[], string2[]);
public BanTemp(playerid, string[], string2[])
{
	new arquivo[64], tmp[20], tmp2[20], stri[64], ip[16];
	new tMinuto[20], tSegundo[20], tHora[20], tDia[20], tMes[20], tAno[20];
	GetPlayerIp(playerid, ip, sizeof ip);
	format(arquivo, sizeof(arquivo), "BanidosTemp/%s.ini",PlayerName(playerid));
	getdate(Ano, Mes, Dia);
	format(tmp, 20, "%d/%d/%d", Dia, Mes, Ano);
	gettime(Hora, Minuto, Segundo);
	format(tmp2, 20, "%d:%d:%d", Hora, Minuto, Segundo);
	
	format(tHora, 20, "%d", Hora);
	format(tMinuto, 20, "%d", Minuto);
	format(tSegundo, 20, "%d", Segundo);
	
	format(tDia, 20, "%d", PlayerInfo[playerid][pDiaBanTemp]);
	format(tMes, 20, "%d", PlayerInfo[playerid][pMesBanTemp]);
	format(tAno, 20, "%d", PlayerInfo[playerid][pAnoBanTemp]);
	if(dini_Exists(arquivo))
	{
		Kick(playerid);
	}
	else
	{
		dini_Create(arquivo);
		dini_Set(arquivo,"Motivo",string);
		dini_Set(arquivo,"Admin",string2);
		dini_Set(arquivo,"Data",tmp);
		dini_Set(arquivo,"Hora",tmp2);
		dini_Set(arquivo,"DiaBanTemp",tDia);
		dini_Set(arquivo,"MesBanTemp",tMes);
		dini_Set(arquivo,"AnoBanTemp",tAno);
		dini_Set(arquivo,"HoraBanTemp",tHora);
		dini_Set(arquivo,"MinutoBanTemp",tMinuto);
		dini_Set(arquivo,"SegundoBanTemp",tSegundo);
	
		format(stri, sizeof(stri), "IPsBanidosTemp/%s.ini",ip);
		dini_Create(stri);
		dini_Set(stri,"Motivo",string);
		dini_Set(stri,"Admin",string2);
		dini_Set(stri,"Data",tmp);
		dini_Set(stri,"Hora",tmp2);
		dini_Set(stri,"Nick",PlayerName(playerid));
		
		dini_Set(stri,"DiaBanTemp",tDia);
		dini_Set(stri,"MesBanTemp",tMes);
		dini_Set(stri,"AnoBanTemp",tAno);
		dini_Set(stri,"HoraBanTemp",tHora);
		dini_Set(stri,"MinutoBanTemp",tMinuto);
		dini_Set(stri,"SegundoBanTemp",tSegundo);
		Kick(playerid);
	}
	return true;
}

public LoginAgora(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		logouagora[playerid] = 0;
		KillTimer(TempoLogin);
	}
}
public Corrida()
{
	if(pcorrida > 0)
	{
			pcorrida = 0;
	}
}
public CorridaOni()
{
	if(pcorridaoni > 0)
	{
			pcorridaoni = 0;
	}
}
public hbomba()
{
	if(phbomba > 0)
	{
			phbomba = 0;
	}
}

public cbomba()
{
	if(pcbomba > 0)
	{
			pcbomba = 0;
	}
}
public Sinc()
{
	if(psinc > 0)
	{
			psinc = 0;
	}
}
public Sequestrar()
{
	if(psequestrar > 0)
	{
			psequestrar = 0;
	}
}
public Amarrar()
{
	if(pamarrar > 0)
	{
			pamarrar = 0;
	}
}

public Hide(target, td)
{
        return TextDrawHideForPlayer(target, MsgBox);
}


public CheckOwnerb(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		// Empresas Com interiores
 			for(new i = 0; i < sizeof(BizzInfo); i++)
			{
			    new playername[MAX_PLAYER_NAME];
	        	GetPlayerName(playerid,playername,sizeof(playername));
	        	if(strcmp(playername,BizzInfo[i][bOwner],true)==0)
	        	{
	        	    PlayerInfo[playerid][pPbiskey] = i;
	        	    return true;
	        	}
			}
			// Empresas sem interiores
			for(new i = 0; i < sizeof(SBizzInfo); i++)
			{
			    new playername[MAX_PLAYER_NAME];
	        	GetPlayerName(playerid,playername,sizeof(playername));
	        	if(strcmp(playername,SBizzInfo[i][sbOwner],true)==0)
	        	{
	        	    PlayerInfo[playerid][pPbiskey] = i+100;
	        	    return true;
	        	}
			}
			PlayerInfo[playerid][pPbiskey] = 255;
			return true;
	}
	return true;
}
public CheckOwnerh(playerid)
{
    if(IsPlayerConnected(playerid))
	{
		// Casas
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
		    new playername[MAX_PLAYER_NAME];
        	GetPlayerName(playerid,playername,sizeof(playername));
        	if(strcmp(playername,HouseInfo[h][hOwner],true)==0)
        	{
        	    PlayerInfo[playerid][pPHousekey] = h;
        	    return true;
        	}
		}
		PlayerInfo[playerid][pPHousekey] = 255;
		return true;
	}
	return true;
}
public LoadCar()
{
	new arrCoords[33][64];
	new strFromFile2[256];
	new File: file = fopen("masini.cfg", io_read);
	if (file)
	{
		new idx = carsonserver;
		while (idx < sizeof(CarInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			CarInfo[idx][cModel] = strval(arrCoords[0]);
			CarInfo[idx][cLocationx] = floatstr(arrCoords[1]);
			CarInfo[idx][cLocationy] = floatstr(arrCoords[2]);
			CarInfo[idx][cLocationz] = floatstr(arrCoords[3]);
			CarInfo[idx][cAngle] = floatstr(arrCoords[4]);
			CarInfo[idx][cColorOne] = strval(arrCoords[5]);
			CarInfo[idx][cColorTwo] = strval(arrCoords[6]);
			strmid(CarInfo[idx][cOwner], arrCoords[7], 0, strlen(arrCoords[7]), 255);
			strmid(CarInfo[idx][cDescription], arrCoords[8], 0, strlen(arrCoords[8]), 255);
			CarInfo[idx][cValue] = strval(arrCoords[9]);
			strmid(CarInfo[idx][cLicense], arrCoords[10], 0, strlen(arrCoords[10]), 255);
			CarInfo[idx][cOwned] = strval(arrCoords[11]);
			CarInfo[idx][cLock] = strval(arrCoords[12]);
			CarInfo[idx][mod1] = strval(arrCoords[13]);
			CarInfo[idx][mod2] = strval(arrCoords[14]);
			CarInfo[idx][mod3] = strval(arrCoords[15]);
			CarInfo[idx][mod4] = strval(arrCoords[16]);
			CarInfo[idx][mod5] = strval(arrCoords[17]);
			CarInfo[idx][mod6] = strval(arrCoords[18]);
			CarInfo[idx][mod7] = strval(arrCoords[19]);
			CarInfo[idx][mod8] = strval(arrCoords[20]);
			CarInfo[idx][mod9] = strval(arrCoords[21]);
			CarInfo[idx][mod10] = strval(arrCoords[22]);
			CarInfo[idx][mod11] = strval(arrCoords[23]);
			CarInfo[idx][mod12] = strval(arrCoords[24]);
			CarInfo[idx][mod13] = strval(arrCoords[25]);
			CarInfo[idx][mod14] = strval(arrCoords[26]);
			CarInfo[idx][mod15] = strval(arrCoords[27]);
			CarInfo[idx][mod16] = strval(arrCoords[28]);
			CarInfo[idx][mod17] = strval(arrCoords[29]);
			CarInfo[idx][paintjob] = strval(arrCoords[30]);
			CarInfo[idx][cFreio] = strval(arrCoords[31]);
			CarInfo[idx][VeiculoAprendido] = strval(arrCoords[32]);
			printf("CarInfo: %d Owner:%s LicensePlate %s Model: %s",idx,CarInfo[idx][cOwner],CarInfo[idx][cLicense],CarInfo[idx][cDescription]);
			idx++;
		}
	}
	return 1;
}

public SaveCarCoords()
{
	new idx;
	new File: file2;
	while (idx < sizeof(CarInfo))
	{
	    new coordsstring[256];
	    format(coordsstring, sizeof(coordsstring), "%d,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		CarInfo[idx][cModel],
		CarInfo[idx][cLocationx],
		CarInfo[idx][cLocationy],
		CarInfo[idx][cLocationz],
		CarInfo[idx][cAngle],
		CarInfo[idx][cColorOne],
		CarInfo[idx][cColorTwo],
		CarInfo[idx][mod1],
		CarInfo[idx][mod2],
		CarInfo[idx][mod3],
		CarInfo[idx][mod4],
		CarInfo[idx][mod5],
		CarInfo[idx][mod6],
		CarInfo[idx][mod7],
		CarInfo[idx][mod8],
		CarInfo[idx][mod9],
		CarInfo[idx][mod10],
		CarInfo[idx][mod11],
		CarInfo[idx][mod12],
		CarInfo[idx][mod13],
		CarInfo[idx][mod14],
		CarInfo[idx][mod15],
		CarInfo[idx][mod16],
		CarInfo[idx][mod17],
		CarInfo[idx][paintjob],
		CarInfo[idx][cFreio]); //26
		if(idx == carsonserver)
		{
			file2 = fopen("masini.cfg", io_write);
		}
		else
		{
			file2 = fopen("masini.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public Administrador(playerid)
{
    if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pAdmin] > 0 && admtrampando[playerid] > 0)
	{
	    ResetPlayerWeaponsEx(playerid);
		SetPlayerHealth(playerid,1500);
	}
}
public Sincronizar(playerid)
{
 	if(IsPlayerConnected(playerid))
	{
		SetPlayerPos(playerid,xx[playerid],yy[playerid],zz[playerid]);
		SetPlayerFacingAngle(playerid,FaceAngle[playerid]);
		SetPlayerHealth(playerid,PlayerHPP[playerid]);
		SetPlayerVirtualWorld(playerid,virt[playerid]);
		SetPlayerInterior(playerid,interior[playerid]);
		SetPlayerSkin(playerid,skinneg[playerid]);
		SetPlayerArmour(playerid,APP[playerid]);
		ResetPlayerWeaponsEx(playerid);
		GivePlayerWeapon(playerid,gunsinc[1][playerid],ammoo[1][playerid]);
		GivePlayerWeapon(playerid,gunsinc[2][playerid],ammoo[2][playerid]);
		GivePlayerWeapon(playerid,gunsinc[3][playerid],ammoo[3][playerid]);
		GivePlayerWeapon(playerid,gunsinc[4][playerid],ammoo[4][playerid]);
		GivePlayerWeapon(playerid,gunsinc[5][playerid],ammoo[5][playerid]);
		GivePlayerWeapon(playerid,gunsinc[6][playerid],ammoo[6][playerid]);
		GivePlayerWeapon(playerid,gunsinc[7][playerid],ammoo[7][playerid]);
		GivePlayerWeapon(playerid,gunsinc[8][playerid],ammoo[8][playerid]);
		GivePlayerWeapon(playerid,gunsinc[9][playerid],ammoo[9][playerid]);
		GivePlayerWeapon(playerid,gunsinc[10][playerid],ammoo[10][playerid]);
		GivePlayerWeapon(playerid,gunsinc[11][playerid],ammoo[11][playerid]);
		GivePlayerWeapon(playerid,gunsinc[12][playerid],ammoo[12][playerid]);
		if(vehicledd[playerid] == 1) { PutPlayerInVehicle(playerid,VehicleIDD[playerid],1); vehicledd[playerid] = 0; }
		sincronizando[playerid] = 0;
		KillTimer(TempoSinc);
		SendClientMessage(playerid,COLOR_YELLOW," Sincronizado com sucesso!");
	}
}
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	new string[128];
	new pstring[128];
	new plname[MAX_PLAYER_NAME];
	ThiagoInfo[playerid][Tels] = 0;
    GetPlayerName(clickedplayerid, plname, sizeof(plname));
    format(string, sizeof(string), "Menu do(a) %s", plname);
    format(pstring, sizeof(pstring), "Ligar para %s\nMandar SMS para %s", plname,plname);
    ShowPlayerDialog(playerid, 3, DIALOG_STYLE_LIST, string, pstring, "Confirmar", "Cancelar");
    ThiagoInfo[playerid][Tels] = PlayerInfo[clickedplayerid][pPnumber];
	return true;
}
public GuerraTerrorista(playerid)
{
    new string[128];
	new plname[MAX_PLAYER_NAME];
 	GetPlayerName(playerid, plname, MAX_PLAYER_NAME);
 	TendoGuerra = 0;
    if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
    {
        KillTimer(TempoGuerra);
        ThiagoInfo[playerid][InicioGuerra] = 0;
        TendoGuerra = 0;
        format(string, sizeof(string), "%s e o Exército Finalizaram uma Guerra!",plname);
       	SendClientMessageToAll(COLOR_EXE, string);
       	GangZoneHideForAll(GZGuerra);
        GangZoneDestroy(GZGuerra);
    }
    if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6)
    {
        KillTimer(TempoGuerra);
        ThiagoInfo[playerid][InicioGuerra] = 0;
        TendoGuerra = 0;
        format(string, sizeof(string), "%s e a Taliban Finalizaram uma Guerra!",plname);
       	SendClientMessageToAll(COR_Taliban, string);
       	GangZoneHideForAll(GZGuerra);
        GangZoneDestroy(GZGuerra);
    }
    if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15)
    {
        KillTimer(TempoGuerra);
        ThiagoInfo[playerid][InicioGuerra] = 0;
        TendoGuerra = 0;
        format(string, sizeof(string), "%s e a Al'qaeda Finalizaram uma Guerra!",plname);
       	SendClientMessageToAll(COR_AL, string);
       	GangZoneHideForAll(GZGuerra);
        GangZoneDestroy(GZGuerra);
    }
    if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23)
    {
        KillTimer(TempoGuerra);
        ThiagoInfo[playerid][InicioGuerra] = 0;
        TendoGuerra = 0;
        format(string, sizeof(string), "%s e a F.A.R.C Finalizaram uma Guerra!",plname);
       	SendClientMessageToAll(COR_FARC, string);
       	GangZoneHideForAll(GZGuerra);
        GangZoneDestroy(GZGuerra);
    }
    if(Territorio[almortos] > Territorio[exemortos] && Territorio[talmortos] > Territorio[exemortos] && Territorio[FARCmortos] > Territorio[exemortos])//exercito ownou
 	{
        format(string, sizeof(string), "O Exército venceu a guerra matando %d do Taliban, %d da Al'qaeda, e %d da F.A.R.C!",Territorio[talmortos], Territorio[almortos], Territorio[FARCmortos]);
       	SendClientMessageToAll(COLOR_EXE, string);
 	}
 	else if(Territorio[exemortos] > Territorio[almortos] && Territorio[talmortos] > Territorio[almortos] && Territorio[FARCmortos] > Territorio[almortos])//al'qaeda ownou
 	{
      	format(string, sizeof(string), "A Al'qaeda venceu a guerra matando %d do Taliban, %d do Exército, e %d da F.A.R.C!",Territorio[talmortos], Territorio[exemortos], Territorio[FARCmortos]);
       	SendClientMessageToAll(COR_AL, string);
 	}
 	else if(Territorio[exemortos] > Territorio[talmortos] && Territorio[almortos] > Territorio[talmortos] && Territorio[FARCmortos] > Territorio[talmortos])//Taliban ownou
 	{
 	  	format(string, sizeof(string), "O Taliban venceu a guerra matando %d da Al'qaeda, %d membros do Exército, e %d da F.A.R.C!",Territorio[almortos], Territorio[exemortos], Territorio[FARCmortos]);
       	SendClientMessageToAll(COR_Taliban, string);
 	}
 	else if(Territorio[exemortos] > Territorio[FARCmortos] && Territorio[almortos] > Territorio[FARCmortos] && Territorio[talmortos] > Territorio[FARCmortos])//FARC ownou
 	{
 	  	format(string, sizeof(string), "A F.A.R.C venceu a guerra matando %d da Al'qaeda, %d do Exército, e %d do Taliban!",Territorio[almortos], Territorio[exemortos], Territorio[talmortos]);
       	SendClientMessageToAll(COR_FARC, string);
 	}
 	else
 	{
 	  	format(string, sizeof(string), "Houve um empate na guerra! Morreram: %d da Al'qaeda, %d do Exército, %d do Taliban, e %d da F.A.R.C !",Territorio[almortos], Territorio[exemortos],Territorio[talmortos],Territorio[FARCmortos]);
       	SendClientMessageToAll(COLOR_YELLOW2, string);
 	}
	return true;
}
public UsarNovamente(playerid)
{
	UsouComando[playerid] = 0;
}
public verping()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
	    {
			new ping = GetPlayerPing(i);
			if(ping >= pingmaximo && gPlayerLogged[i] == 1)
			{
				SetTimerEx("kickping", 6000, 0, "i", i);
			}
		}
	}
	return true;
}
public kickping(playerid)
{
	new nome[MAX_PLAYER_NAME];
	new string[128];
	new ping = GetPlayerPing(playerid);
    GetPlayerName(playerid,nome,sizeof(nome));
	if(ping >= pingmaximo)
	{
		format(string,sizeof(string),"AdmCmd: %s foi kickado por Homem_Aranha. Motivo: 6 Segundos Com Ping (%d / %d)",nome,ping,pingmaximo);
		SendClientMessageToAll(COLOR_LIGHTRED,string);
		Kick(playerid);
	}
	return true;
}

public SaveTrunk()
{
	new idx;
	new File: file2;
	idx = 1;
	while (idx < sizeof(CarInfo))
	{
		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring), "%i,%i,%i,%i,%i,%i,%i,%i,%i,%f\n",
		vehTrunk[idx][1],
		vehTrunkAmmo[idx][1],
		vehTrunk[idx][2],
		vehTrunkAmmo[idx][2],
		vehTrunk[idx][3],
		vehTrunkAmmo[idx][3],
		vehTrunk[idx][4],
		vehTrunkAmmo[idx][4],
		vehTrunkCounter[idx],
		vehTrunkArmour[idx]);
		if(idx == 1)
		{
			file2 = fopen("BrasilGames/PortaMala.cfg", io_write);
		}
		else
		{
			file2 = fopen("BrasilGames/PortaMala.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return true;
}
public LoadTrunk()
{
	new arrCoords[13][64];
	new strFromFile2[128];
	new File: file = fopen("BrasilGames/PortaMala.cfg", io_read);
	if (file)
	{
		new idx = 1;
		while (idx < sizeof(CarInfo))
		{
		    fread(file, strFromFile2);
		    split(strFromFile2, arrCoords, ',');
		    vehTrunk[idx][1] = strval(arrCoords[0]);
		    vehTrunkAmmo[idx][1] = strval(arrCoords[1]);
		    vehTrunk[idx][2] = strval(arrCoords[2]);
		    vehTrunkAmmo[idx][2] = strval(arrCoords[3]);
		    vehTrunk[idx][3] = strval(arrCoords[4]);
		    vehTrunkAmmo[idx][3] = strval(arrCoords[5]);
		    vehTrunk[idx][4] = strval(arrCoords[6]);
		    vehTrunkAmmo[idx][4] = strval(arrCoords[7]);
		    vehTrunkCounter[idx] = strval(arrCoords[8]);
		    vehTrunkArmour[idx] = floatstr(arrCoords[9]);
		    idx++;
		}
	}
	return true;
}

public RemovePlayerWeapon(playerid, weaponid)
{
	new plyWeapons[12] = 0;
	new plyAmmo[12] = 0;
	for(new slot = 0; slot != 12; slot++)
	{
		new wep, ammo;
		GetPlayerWeaponData(playerid, slot, wep, ammo);

		if(wep != weaponid && ammo != 0)
		{
			GetPlayerWeaponData(playerid, slot, plyWeapons[slot], plyAmmo[slot]);
		}
	}

	ResetPlayerWeaponsEx(playerid);
	for(new slot = 0; slot != 12; slot++)
	{
	    if(plyAmmo[slot] != 0)
	    {
			GivePlayerWeapon(playerid, plyWeapons[slot], plyAmmo[slot]);
		}
	}
	return true;
}
public ReduceTimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(ReduceTime[playerid] == 1)
	    {
			ReduceTime[playerid] = 0;
	    }
	}
}
public CarroMala(vehicleid)
{
	if(vehicleid >= totalveiculosh && vehicleid < CAR_AMOUNT) { return true; }
	return 0;
}
public VoltarBombas(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(SemBombas[playerid] == 1)
	    {
			SemBombas[playerid] = 0;
	    }
	}
}
public PresoMulta(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(TicketOffer[playerid] < 999)
	    {
			TicketOffer[playerid] = 999;
			TicketMoney[playerid] = 0;
		/*	PlayerInfo[playerid][pJailed] = 8;
            SetPlayerWantedLevel(playerid, 0);
            WantedPoints[playerid] = 0;
      		SetPlayerWantedLevel(playerid, 0);
            PlayerInfo[playerid][pJailTime] = 1200;*/
             SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pagou a sua dívida e foi preso.");
			 GameTextForPlayer(playerid, "~r~Preso!", 2000, 1);
			 SetPlayerInterior(playerid, 6);
		     SetPlayerPos(playerid, 264.6288,77.5742,1001.0391);
		     PlayerInfo[playerid][pJailed] = 1;
		     ResetPlayerWeaponsEx(playerid);
             WantedPoints[playerid] = 0;
      		 SetPlayerWantedLevel(playerid, 0);
			 PlayerInfo[playerid][pJailTime] = 1200;
			 format(gstring, sizeof(gstring), "Você foi preso por %d segundos.", PlayerInfo[playerid][pJailTime]);
			 SendClientMessage(playerid, COLOR_LIGHTBLUE, gstring);
		}
	}
}
public DropWeapons(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    #define MAX 300
	    new weaponid,ammo,modelid,pickupid;
	    new success=false;
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
	    for(new i=1;i<12;i++)
	    {
			GetPlayerWeaponData(playerid,i,weaponid,ammo);
			if(weaponid)
			{
				if(ammo>MAX)
    				ammo=MAX;
				modelid=GetWeaponModel(weaponid);
				if(modelid)
				{
				    pickupid=CreatePickup(modelid,1,x+(random(10)-random(10)),y+(random(10)-random(10)),z);
				    PickupType[pickupid]=PICKUP_TYPE_WEAPON;
					PickupWeapon[pickupid]=weaponid;
					PickupAmmo[pickupid]=ammo;
					DestroyPickupTimer[pickupid]=SetTimerEx("DestroyWeaponPickup",10000,false,"i",pickupid);
					success=true;
				}
			}
	    }
	    ResetPlayerWeaponsEx(playerid);
	    #undef MAX
	    return success;
	}
	return 0;
}
public DestroyWeaponPickup(pickupid)
{
	if(PickupType[pickupid]==PICKUP_TYPE_WEAPON)
	{
	    PickupType[pickupid]=PICKUP_TYPE_NONE;
	    PickupWeapon[pickupid]=0;
		PickupAmmo[pickupid]=0;
		DestroyPickup(pickupid);
		return true;
	}
	return 0;
}
public DropVida(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new Float:x,Float:y,Float:z;
	    GetPlayerPos(playerid,x,y,z);
	    picVida=CreatePickup(1240,1,x+(random(10)-random(10)),y+(random(10)-random(10)),z);
	    DestroyPickupVidaTimer[picVida]=SetTimerEx("DestroyVidaPickup",10000,false,"i",picVida);
	}
	return true;
}
public DestroyVidaPickup(pickupid)
{
	DestroyPickup(pickupid);
	return true;
}
public OnPlayerExitedMenu(playerid)
{
    Controle(playerid, 1);
	return true;
}
public SavePlayerData(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new string3[32];
		new playername3[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		format(string3, sizeof(string3), "carkeys/%s.ini", playername3);
		new File: hFile = fopen(string3, io_write);
		if (hFile)
		{
			new var[50]; // 32
			format(var, 32, "CarKey=%d\n",PlayerInfo[playerid][pPcarkey]);fwrite(hFile, var);
			format(var, 32, "CarKey2=%d\n",PlayerInfo[playerid][pPcarkey2]);fwrite(hFile, var);
			format(var, 32, "CarKey3=%d\n",PlayerInfo[playerid][pPcarkey3]);fwrite(hFile, var);
			format(var, 32, "CarKey4=%d\n",PlayerInfo[playerid][pPcarkey4]);fwrite(hFile, var);
			fclose(hFile);
		}
	}
	return 1;
}
public CarKeys(playerid)
{
    new string2[64];
	new playername2[MAX_PLAYER_NAME];
    GetPlayerName(playerid, playername2, sizeof(playername2));
	format(string2, sizeof(string2), "carkeys/%s.ini", playername2);
	new File: UserFile = fopen(string2, io_read);
	if ( UserFile )
	{
		new key[ 256 ] , val[ 256 ];
		new Data[ 256 ];
		while ( fread( UserFile , Data , sizeof( Data ) ) )
		{
			key = ini_GetKey( Data );
			if( strcmp( key , "CarKey" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey] = strval( val ); }
			if( strcmp( key , "CarKey2" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey2] = strval( val ); }
			if( strcmp( key , "CarKey3" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey3] = strval( val ); }
			if( strcmp( key , "CarKey4" , true ) == 0 ) { val = ini_GetValue( Data ); PlayerInfo[playerid][pPcarkey4] = strval( val ); }
        }
        fclose(UserFile);
        SendClientMessage(playerid, COLOR_WHITE,"Chaves do Carro Carregadas!");
	}
	return 1;
}
public CarMods(vehicleid)
{
    if(CarInfo[vehicleid][paintjob] > -1 || CarInfo[vehicleid][mod1] > 0 || CarInfo[vehicleid][mod2] > 0 || CarInfo[vehicleid][mod3] > 0 || CarInfo[vehicleid][mod4] > 0 || CarInfo[vehicleid][mod5] > 0 || CarInfo[vehicleid][mod6] > 0 || CarInfo[vehicleid][mod7] > 0 || CarInfo[vehicleid][mod8] > 0)
	{
	    return 1;
	}
	else if (CarInfo[vehicleid][mod9] > 0 || CarInfo[vehicleid][mod10] > 0 || CarInfo[vehicleid][mod11] > 0 || CarInfo[vehicleid][mod12] > 0|| CarInfo[vehicleid][mod13] > 0|| CarInfo[vehicleid][mod14] > 0|| CarInfo[vehicleid][mod15] > 0|| CarInfo[vehicleid][mod16] > 0|| CarInfo[vehicleid][mod17] > 0)
	{
	   return 1;
	}
	return 0;
}

public IsAtDealership(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(PlayerToPoint(25.0,playerid,1639.9688,-1085.7878,23.9063) || PlayerToPoint(50,playerid,537.3366,-1293.2140,17.2422) || PlayerToPoint(35,playerid,2521.5544,-1524.4504,23.8365) || PlayerToPoint(50,playerid,2155.0146,-1177.3333,23.8211) || PlayerToPoint(50,playerid,299.1723,-1518.6627,24.6007) || PlayerToPoint(99,playerid,1938.414428,-2643.810058,13.723393))
		{
			return 1;
		}
	}
	return 0;
}
public RouboBanco(playerid)
{
	KillTimer(tempobanco);
	if(!PlayerToPoint(8.0,playerid,2144.4177,1641.5360,993.5761))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre do Banco! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre do banco.");
        ProvocoBanco[playerid] = 0; roubando[playerid] = 0; roubobanco = 0; KillTimer(tempobanco); temporoubobanco = 0;
        return true;
    }
	ForPlayers(i)
	{
		new grana = 800 + random(2000);
		if(PlayerToPoint(10.0,i,2144.4177,1641.5360,993.5761))
		{
		    new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoBanco[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar o cofre do Banco! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
            	roubando[playerid] = 0; roubobanco = 0; ProvocoBanco[playerid] = 0;
			}
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto ao Banco");
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d do cofre do Banco!",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}
public RouboLot(playerid)
{
	KillTimer(tempolot);
	if(!PlayerToPoint(8.0,playerid,820.6042,8.3990,1004.1962))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar o cofre da Lotérica! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está no cofre da Lotérica.");
        ProvocoLot[playerid] = 0; roubando[playerid] = 0; roubolot = 0; KillTimer(tempolot); temporoubolot = 0;
        return true;
    }
	ForPlayers(i)
	{
		new grana = 600 + random(1200);
		if(PlayerToPoint(5.0,i,820.6042,8.3990,1004.1962))
		{
		    new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoLot[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar o cofre da Lotérica! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
            	roubando[playerid] = 0; roubolot = 0; ProvocoLot[playerid] = 0;
			}
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto a Lotérica");
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d do cofre da Lotérica!",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}
public RouboLoja1(playerid)
{
	KillTimer(tempoloja1);
	if(!PlayerToPoint(8.0,playerid,303.9740,-168.8060,999.5938))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar a Loja de Armas 1! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Loja de Armas 1.");
        ProvocoLoja1[playerid] = 0; roubando[playerid] = 0; rouboloja1 = 0; KillTimer(tempoloja1); temporouboloja1 = 0;
        return true;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,303.9740,-168.8060,999.5938))
		{
		    new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoLoja1[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar a Loja de Armas 1! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
           	 	roubando[playerid] = 0; rouboloja1 = 0; ProvocoLoja1[playerid] = 0;
			}
			new grana = 700 + random(1300);
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto a Loja de Armas 1");
				GivePlayerWeapon(i, 4, 1);
				GivePlayerWeapon(i, 10, 100);
				GivePlayerWeapon(i, 17, 100);
				GivePlayerWeapon(i, 24, 100);
				GivePlayerWeapon(i, 25, 100);
				GivePlayerWeapon(i, 31, 100);
				GivePlayerWeapon(i, 29, 100);
				GivePlayerWeapon(i, 34, 100);
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d da Loja de Armas 1!",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}
public RouboLoja2(playerid)
{
	KillTimer(tempoloja2);
	if(!PlayerToPoint(8.0,playerid,294.8272,-57.8448,1001.5156))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar a Ammu Nation! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Ammu Nation.");
        ProvocoLoja2[playerid] = 0; roubando[playerid] = 0; rouboloja2 = 0; KillTimer(tempoloja2); temporouboloja2 = 0;
        return true;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,294.8272,-57.8448,1001.5156))
		{
		    new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoLoja2[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar a Ammu Nation! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
            	roubando[playerid] = 0; rouboloja2 = 0; ProvocoLoja2[playerid] = 0;
			}
			new grana = 800 + random(1500);
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto a Ammu Nation");
				GivePlayerWeapon(i, 4, 1);
				GivePlayerWeapon(i, 10, 100);
				GivePlayerWeapon(i, 17, 100);
				GivePlayerWeapon(i, 24, 100);
				GivePlayerWeapon(i, 25, 100);
				GivePlayerWeapon(i, 31, 100);
				GivePlayerWeapon(i, 29, 100);
				GivePlayerWeapon(i, 34, 100);
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d da Ammu Nation!",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}
public RouboBinco(playerid)
{
	KillTimer(tempobinco);
	if(!PlayerToPoint(8.0,playerid,211.3917,-96.1839,1005.2578))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar a Binco ! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Binco");
        ProvocoBinco[playerid] = 0; roubando[playerid] = 0; roubobinco = 0; KillTimer(tempobinco); temporoubobinco = 0;
        return true;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,211.3917,-96.1839,1005.2578))
		{
      		new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoBinco[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar a Binco ! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
            	roubando[playerid] = 0; roubobinco = 0; ProvocoBinco[playerid] = 0;
			}
			new grana = 600 + random(1200);
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto a Loja de Roupas");
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d da Binco !",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}

public RouboZip(playerid)
{
	KillTimer(tempozip);
	if(!PlayerToPoint(8.0,playerid,162.1060,-79.8251,1001.8047))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar a Zip ! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Zip");
        ProvocoZip[playerid] = 0; roubando[playerid] = 0; roubozip = 0; KillTimer(tempozip); temporoubozip = 0;
        return true;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,162.1060,-79.8251,1001.8047))
		{
      		new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoZip[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar a Zip ! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
            	roubando[playerid] = 0; roubozip = 0; ProvocoZip[playerid] = 0;
			}
			new grana = 650 + random(1250);
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto a Loja de Roupas");
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d da Zip !",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}


public RouboVictim(playerid)
{
	KillTimer(tempovictim);
	if(!PlayerToPoint(8.0,playerid,205.4029,-11.5629,1005.2109))
    {
		format(gstring, sizeof(gstring), "[Segurança] %s e os %s não conseguiram roubar a Victim ! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
       	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
       	GameTextForPlayer(playerid,"~r~Deu mole playboy...", 2500, 3);
       	Controle(playerid, 1);
       	ClearAnimations(playerid);
        SendClientMessage(playerid, COLOR_GREY, "Você não está na Victim");
        ProvocoVictim[playerid] = 0; roubando[playerid] = 0; roubovictim = 0; KillTimer(tempovictim); temporoubovictim = 0;
        return true;
    }
	ForPlayers(i)
	{
		if(PlayerToPoint(8.0,i,205.4029,-11.5629,1005.2109))
		{
      		new var032=0;
			if (PlayerInfo[playerid][pLider] != 0) { var032 = PlayerInfo[playerid][pLider]; }
			else if (PlayerInfo[playerid][pMembro] != 0) { var032 = PlayerInfo[playerid][pMembro]; }
			if(ProvocoVictim[playerid] == 1)
            {
            	format(gstring, sizeof(gstring), "[Segurança] %s e os %s conseguiram roubar a Victim ! ID:[%d]", PlayerName(playerid), NomeORG(playerid), playerid);
            	SendClientMessageToAll(GetPlayerColor(playerid), gstring);
            	GameTextForPlayer(playerid,"~g~Vai~w~ !~n~~g~Vai~w~ !~n~~g~Vai~w~ !", 2500, 3);
            	Controle(playerid, 1);
            	ClearAnimations(playerid);
            	roubando[playerid] = 0; roubovictim = 0; ProvocoVictim[playerid] = 0;
			}
			new grana = 500 + random(1000);
			if (PlayerInfo[i][pLider] == var032 || PlayerInfo[i][pMembro] == var032)
			{
				SetPlayerCriminal(i,255, "Assalto a Loja de Roupas");
				GivePlayerMoney(i, grana);
				format(gstring, sizeof(gstring), "Você e os %s roubaram R$%d da Victim !",NomeORG(playerid), grana);
            	SendClientMessage(i, COLOR_YELLOW, gstring);
			}
		}
	}
	return true;
}
public AnimRouboBanco(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
//ApplyAnimation(playerid,"ROB_BANK","CAT_Safe_Open_O",3.0,0,0,0,0,0);
}
public AnimRouboLot(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
}
public AnimRouboLoja(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
}
public AnimRouboAmmu(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
}
public AnimRouboBinco(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
}
public AnimRouboZip(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
}
public AnimRouboVictim(playerid)
{
ApplyAnimation(playerid, "ROB_BANK", "CAT_Safe_Rob", 4.0, 1, 0, 0, 1, 0);
}
public Aroubo()
{
    temporoubobanco = 0;
}
public Aroubo2()
{
    temporoubolot = 0;
}
public Aroubo3()
{
    temporouboloja1 = 0;
}
public Aroubo4()
{
    temporouboloja2 = 0;
}
public Aroubo6()
{
    temporoubobinco = 0;
}
public Aroubo7()
{
    temporoubozip = 0;
}
public Aroubo8()
{
    temporoubovictim = 0;
}
//=================[FIM ROUBAR]================
public OnPlayerHaveExtraCash(playerid,extraamount)
{
	return true;
}

public OnGameModeExit()
{
    for(new x = 0; x < MAX_PLAYERS; x++)
	{
	    if(IsPlayerConnected(x))
	    { OnPlayerSave(x); }
	}
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		PlantouBombaNuclear[i] = 0;
		pBombNuclear[i] = 0;
		pbombanuclear[i] = 0;
		pbombanuclear2[i] = 0;
		pbombanuclear3[i] = 0;
		usarbombasnuclear = 0;
	}
	for(new i = (sizeof(Caixa) - 1); i > -1; --i) DestroyObject(Caixa[i]);
 	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(GetPlayerVehicleID(i) == GetPlayerVehicleID(usandolavacarro))
		{
			DestroyPlayerObject(i, AguaLava1);
			DestroyPlayerObject(i, AguaLava2);
			DestroyPlayerObject(i, AguaLava3);
			DestroyPlayerObject(i, AguaLava4);
			DestroyPlayerObject(i, AguaLava5);
			DestroyPlayerObject(i, AguaLava6);
			DestroyPlayerObject(i, AguaLava7);
			TaCongelado[i] = false;
			TogglePlayerControllable(i, 1);
			SetCameraBehindPlayer(i);
			TextDrawDestroy(Text:FilaAtendimentoText[i]);
    		TextDrawDestroy(Text:TempoAtendimento2Text[i]);
		}
	}
	for(new i; i < MAX_VEHICLES ;i++)
	{
	    if(SomInstalado[i] == true)
		{
		    if(SomVeiculoTipo[i] == 1)
		    	DestroyObject(SomVeiculoObjeto[0][i]);
            else
			{
			    for(new j; j < 3;j++)
			        DestroyObject(SomVeiculoObjeto[j][i]);
   			}
		}
	}
 	TextDrawDestroy(Reloginho1);
    TextDrawDestroy(Reloginho2);
   	TextDrawHideForAll(Reloginho1);
   	TextDrawHideForAll(Reloginho2);
	SaveAccounts();
	SetVehicleToRespawn(CAR_AMOUNT);
	getdate(v[0], v[1], v[2]);
	gettime(v[3], v[4], v[5]);
	print("\n=================================================================");
	printf("Servidor Desligado: [%02d/%02d/%d %02d:%02d:%02d]", v[2], v[1], v[0], v[3], v[4], v[5]);
	print("=================================================================\n");
    return 1;
}

//=================================[pedagio]===========================================//
public ReduzTempo(playerid)
{
	Reduzido[playerid] = 0;
}
public ReduzTempoBot(playerid)
{
	ReduzidoBot[playerid] = 0;
}
stock ReturnPlayerZone(playerid)
{
	new location[MAX_ZONE_NAME];
	GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
    return location;
}

public UpdateSpeed(playerid)
{
	new Float:x,Float:y,Float:z;
	new Float:distance,value;
	for(new i=0; i<SLOTS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, x, y, z);
			distance = floatsqroot(floatpower(floatabs(floatsub(x,SavePlayerPos[i][sX])),2)+floatpower(floatabs(floatsub(y,SavePlayerPos[i][sY])),2)+floatpower(floatabs(floatsub(z,SavePlayerPos[i][sZ])),2));
			value = floatround(distance * 3600);
			if(UpdateSeconds > 1)
			{
				value = floatround(value / UpdateSeconds);
			}

			SavePlayerPos[i][sX] = x;
			SavePlayerPos[i][sY] = y;
			SavePlayerPos[i][sZ] = z;
            /* Para colocar Coordenada no lugar que voce quer , basta colocar a Coordenada X,Y,Z no lugar dos 00000 ,
            o 40 é o radio , que o radar pega, e o 50 , é a velocidade maxima*/
		    AddFlitsPaal(i, 18880, 1336.4625,-1271.4056,13.5469, 40, 80); // Ammu
            AddFlitsPaal(i, 18880, 1505.0461,-1724.4634,13.3700, 40, 60); // Prefeitura
		}
	}
}

IsPlayerInCircle(playerid,Float:x,Float:y,radius)
{
    if(GetPlayerDistanceToPoint(playerid,Float:x,Float:y) < radius)
    {
    	return 1;
    }
    return 0;
}

GetPlayerDistanceToPoint(playerid,Float:x,Float:y)
{
    new Float:x1,Float:y1,Float:z1; GetPlayerPos(playerid,x1,y1,z1);
    new Float:tmpdis = floatsqroot(floatpower(floatabs(floatsub(x,x1)),2)+
    floatpower(floatabs(floatsub(y,y1)),2));
    return floatround(tmpdis);
}

stock AddFlitsPaal(playerid, modelid, Float:xradar, Float:yradar, Float:zradar, radius, speed)
{
 	new str[256];

 	if(objectcreated!=maxobject)
  	{
        CreateDynamicObject(modelid, 1505.42651, -1738.72009, zradar - 3.00,   0.00000, 0.00000, 269.73804);
		CreateDynamicObject(modelid, 1505.23022, -1726.65967, zradar - 3.00,   0.00000, 0.00000, 269.73804);
		 // Radar Ammu Nation22695
		CreateDynamicObject(modelid, 1363.84766, -1272.16370, zradar - 3.00,   0.00000, 0.00000, 0.00000);
		CreateDynamicObject(modelid, 1336.43445, -1271.88220, zradar - 3.00,   0.00000, 0.00000, 0.00000);
		objectcreated++;
  	}
  	if(GetPlayerSpeed(playerid, true)>speed)
  	{
		if(IsPlayerInCircle(playerid, xradar, yradar, radius)  && GetPlayerState(playerid)== PLAYER_STATE_DRIVER)
		{
			GivePlayerMoneyEx(playerid, -380);
			format(str,sizeof(str), "[Fiscalização Eletrônica] O Limite de velocidade é %d KM/H Voce Passou a %d KM/H e foi multado em 380,00R$.",speed, GetPlayerSpeed(playerid, true));
			SendClientMessage(playerid, VERDEFRACO, str);
			SBizzInfo[25][sbTill] += 380;
			PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
		}
	}
}

stock NomeORG(playerid)
{
	new gangtext[64];
	if(PlayerInfo[playerid][pMembro] == 0 && PlayerInfo[playerid][pLider] == 0) { gangtext = "Civil"; }
    else if(PlayerInfo[playerid][pMembro] == 1 || PlayerInfo[playerid][pLider] == 1) { gangtext = "Polícia Militar"; }
	else if(PlayerInfo[playerid][pMembro] == 2 || PlayerInfo[playerid][pLider] == 2) { gangtext = "B.O.P.E"; }
	else if(PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3) { gangtext = "Exercito"; }
	else if(PlayerInfo[playerid][pMembro] == 4 || PlayerInfo[playerid][pLider] == 4) { gangtext = "S.A.M.U"; }
	else if(PlayerInfo[playerid][pMembro] == 5 || PlayerInfo[playerid][pLider] == 5) { gangtext = "Los Aztecas"; }
	else if(PlayerInfo[playerid][pMembro] == 6 || PlayerInfo[playerid][pLider] == 6) { gangtext = "Taliban"; }
	else if(PlayerInfo[playerid][pMembro] == 7 || PlayerInfo[playerid][pLider] == 7) { gangtext = "Servidor Público"; }
    else if(PlayerInfo[playerid][pMembro] == 8 || PlayerInfo[playerid][pLider] == 8) { gangtext = "Hitmans"; }
    else if(PlayerInfo[playerid][pMembro] == 9 || PlayerInfo[playerid][pLider] == 9) { gangtext = "Repórter"; }
    else if(PlayerInfo[playerid][pMembro] == 10 || PlayerInfo[playerid][pLider] == 10) { gangtext = "Taxista"; }
	else if(PlayerInfo[playerid][pMembro] == 11 || PlayerInfo[playerid][pLider] == 11) { gangtext = "Policia Federal"; }
   	else if(PlayerInfo[playerid][pMembro] == 12 || PlayerInfo[playerid][pLider] == 12) { gangtext = "Cosa Nostra"; }
   	else if(PlayerInfo[playerid][pMembro] == 13 || PlayerInfo[playerid][pLider] == 13) { gangtext = "Yakuza"; }
    else if(PlayerInfo[playerid][pMembro] == 14 || PlayerInfo[playerid][pLider] == 14) { gangtext = "Groove Street"; }
    else if(PlayerInfo[playerid][pMembro] == 15 || PlayerInfo[playerid][pLider] == 15) { gangtext = "Al'qaeda"; }
    else if(PlayerInfo[playerid][pMembro] == 16 || PlayerInfo[playerid][pLider] == 16) { gangtext = "Policia Civil"; }
    else if(PlayerInfo[playerid][pMembro] == 17 || PlayerInfo[playerid][pLider] == 17) { gangtext = "Ballas"; }
    else if(PlayerInfo[playerid][pMembro] == 18 || PlayerInfo[playerid][pLider] == 18) { gangtext = "Los Vagos"; }
    else if(PlayerInfo[playerid][pMembro] == 19 || PlayerInfo[playerid][pLider] == 19) { gangtext = "Comando Vermelho"; }
    else if(PlayerInfo[playerid][pMembro] == 20 || PlayerInfo[playerid][pLider] == 20) { gangtext = "Sons of Anarchy"; }
    else if(PlayerInfo[playerid][pMembro] == 21 || PlayerInfo[playerid][pLider] == 21) { gangtext = "Drifters"; }
    else if(PlayerInfo[playerid][pMembro] == 22 || PlayerInfo[playerid][pLider] == 22) { gangtext = "Triads"; }
    else if(PlayerInfo[playerid][pMembro] == 23 || PlayerInfo[playerid][pLider] == 23) { gangtext = "F.A.R.C"; }
    else if(PlayerInfo[playerid][pMembro] == 24 || PlayerInfo[playerid][pLider] == 24) { gangtext = "D.E.T.R.A.N"; }
    else if(PlayerInfo[playerid][pMembro] == 25 || PlayerInfo[playerid][pLider] == 25) { gangtext = "Advogados"; }
	return gangtext;
}

stock SendMessageToOthersAdmins(playerid, color, const message[])
{
	new ret=0;
	for (new i=0; i<MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && i!=playerid && PlayerInfo[i][pAdmin] > 0)
		{
			SendClientMessage(i, color, message);
			ret++;
		}
	}
	return ret;
}

stock ArePlayersFacing(playerid, targetid) {
        new
            Float:angle1,
            Float:angle2,
                Float:difference
        ;
        GetPlayerFacingAngle(playerid, angle1);
        GetPlayerFacingAngle(targetid, angle2);
        if(angle1 > angle2) difference = angle1 - angle2;
        else difference = angle2 - angle1;
        if(difference < 190 && difference > 170) return 1;
        return 0;
}

public OnVehicleDeath(vehicleid, killerid)
{
    return 1;
}

public OnVehicleSpawn(vehicleid)
{
	SaveLastPosition(vehicleid); 
	LoadComponents(vehicleid);
	 //se tiver som instalado
    if(SomInstalado[vehicleid] == true)
	 {
	     //uma caixa
	  if(SomVeiculoTipo[vehicleid] == 1)
	  {
       //destroy objeto com id salvo na variavel
	   DestroyObject(SomVeiculoObjeto[0][vehicleid]);
	   //chama a função para criar
       CreateSomObjeto(vehicleid,2232,0,SomPos[0][vehicleid][0],SomPos[0][vehicleid][1],SomPos[0][vehicleid][2],SomPos[0][vehicleid][3],SomPos[0][vehicleid][4],SomPos[0][vehicleid][5],300);
	  }
	  //trio
	    else
	  {
	   for(new j; j < 3;j++)
	   {
	       //destroy objeto com id salvo na variavel
	    DestroyObject(SomVeiculoObjeto[j][vehicleid]);
	    //chama a função para criar
	    CreateSomObjeto(vehicleid,2232,j,SomPos[j][vehicleid][0],SomPos[j][vehicleid][1],SomPos[j][vehicleid][2],SomPos[j][vehicleid][3],SomPos[j][vehicleid][4],SomPos[j][vehicleid][5],300);
	   }
	  }
	 }
	return true;
}
public LoadComponents(vehicleid)
{
	if(CarInfo[vehicleid][cOwned] == 1)
	{
        if(CarInfo[vehicleid][mod1] >= 1000 && CarInfo[vehicleid][mod1] <= 1193)
	    {
            if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod1])) != CarInfo[vehicleid][mod1]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod1]); }
        }
	    if(CarInfo[vehicleid][mod2] >= 1000 && CarInfo[vehicleid][mod2] <= 1193)
	    {
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod2])) != CarInfo[vehicleid][mod2]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod2]); }
	    }
	    if(CarInfo[vehicleid][mod3] >= 1000 && CarInfo[vehicleid][mod3] <= 1193)
	    {
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod3])) != CarInfo[vehicleid][mod3]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod3]); }
	    }
	    if(CarInfo[vehicleid][mod4] >= 1000 && CarInfo[vehicleid][mod4] <= 1193)
	    {
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod4])) != CarInfo[vehicleid][mod4]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod4]); }
	    }
	    if(CarInfo[vehicleid][mod5] >= 1000 && CarInfo[vehicleid][mod5] <= 1193)
	    {
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod5])) != CarInfo[vehicleid][mod5]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod5]); }
	    }
	    if(CarInfo[vehicleid][mod6] >= 1000 && CarInfo[vehicleid][mod6] <= 1193)
	    {
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod6])) != CarInfo[vehicleid][mod6]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod6]); }
	    }
	    if(CarInfo[vehicleid][mod7] >= 1000 && CarInfo[vehicleid][mod7] <= 1193)
	    {
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod7])) != CarInfo[vehicleid][mod7]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod7]); }
	    }
	    if(CarInfo[vehicleid][mod8] >= 1000 && CarInfo[vehicleid][mod8] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod8])) != CarInfo[vehicleid][mod8]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod8]); }
    	}
    	if(CarInfo[vehicleid][mod9] >= 1000 && CarInfo[vehicleid][mod9] <= 1193)
	    {
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod9])) != CarInfo[vehicleid][mod9]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod9]); }
    	}
    	if(CarInfo[vehicleid][mod10] >= 1000 && CarInfo[vehicleid][mod10] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod10])) != CarInfo[vehicleid][mod10]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod10]); }
    	}
    	if(CarInfo[vehicleid][mod11] >= 1000 && CarInfo[vehicleid][mod11] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod11])) != CarInfo[vehicleid][mod11]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod11]); }
    	}
    	if(CarInfo[vehicleid][mod12] >= 1000 && CarInfo[vehicleid][mod12] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod12])) != CarInfo[vehicleid][mod12]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod12]); }
    	}
    	if(CarInfo[vehicleid][mod13] >= 1000 && CarInfo[vehicleid][mod13] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod13])) != CarInfo[vehicleid][mod13]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod13]); }
    	}
    	if(CarInfo[vehicleid][mod14] >= 1000 && CarInfo[vehicleid][mod14] <= 1193)
    	{
	        if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod14])) != CarInfo[vehicleid][mod14]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod14]); }
    	}
    	if(CarInfo[vehicleid][mod15] >= 1000 && CarInfo[vehicleid][mod15] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod15])) != CarInfo[vehicleid][mod15]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod15]); }
    	}
    	if(CarInfo[vehicleid][mod16] >= 1000 && CarInfo[vehicleid][mod16] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod16])) != CarInfo[vehicleid][mod16]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod16]); }
    	}
    	if(CarInfo[vehicleid][mod17] >= 1000 && CarInfo[vehicleid][mod17] <= 1193)
    	{
    	    if(GetVehicleComponentInSlot(vehicleid,GetVehicleComponentType(CarInfo[vehicleid][mod17])) != CarInfo[vehicleid][mod17]) { AddVehicleComponent(vehicleid,CarInfo[vehicleid][mod17]); }
	    }
        if(CarInfo[vehicleid][paintjob] > -1) { ChangeVehiclePaintjob(vehicleid,CarInfo[vehicleid][paintjob]); ChangeVehicleColor(vehicleid, 1, 1); }
        else { ChangeVehicleColor(vehicleid, CarInfo[vehicleid][cColorOne], CarInfo[vehicleid][cColorTwo]); }
        if(CarInfo[vehicleid][cLicense] > 0) { SetVehicleNumberPlate(vehicleid,CarInfo[vehicleid][cLicense]); }
    }
    else
    {
        if(CarInfo[vehicleid][cLicense] > 0) { SetVehicleNumberPlate(vehicleid,CarInfo[vehicleid][cLicense]); }
    }
    return 1;
}
public OnVehicleStreamIn(vehicleid, forplayerid)
{
  	if (VTrancado[vehicleid] >= 1)
	{
		SetVehicleParamsForPlayer(vehicleid,forplayerid,0,1);
	}
	else
	{
		SetVehicleParamsForPlayer(vehicleid,forplayerid,0,0);
	}
	return true;
}
forward LockCar(carid);
public LockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,1);
		}
	}
}
forward UnLockCar(carid);
public UnLockCar(carid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(carid,i,0,0);
		}
	}
}
encode_tires(tires1, tires2, tires3, tires4)
{
	return tires1 | (tires2 << 1) | (tires3 << 2) | (tires4 << 3);
}
//=====================================[INFOORG]================================//
forward ConviteInfoOrg(nome[], org, cargo);
public ConviteInfoOrg(nome[], org, cargo)
{
	new arquivo[256];
	format(arquivo, sizeof(arquivo), "ORG Arquivos/Org%d.cfg",org);
 	if(cargo >= 6)
	{
	    strmid(InfoOrg[org][Lider], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		dini_Set(arquivo,"Lider",nome);
		return true;
	}
	if(cargo == 5)
	{
		if(strcmp(InfoOrg[org][SubLider],"Ninguem",true)==0)
		{
		    strmid(InfoOrg[org][SubLider], nome, 0, strlen(nome), MAX_PLAYER_NAME);
       	    dini_Set(arquivo,"SubLider",nome);
			return true;
		}
	}
	if(strcmp(InfoOrg[org][Membro1],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro1], nome, 0, strlen(nome), MAX_PLAYER_NAME);
        dini_Set(arquivo,"Membro1",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro2],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro2], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro2",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro3],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro3], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro3",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro4],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro4], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro4",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro5],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro5], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro5",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro6],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro6], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro6",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro7],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro7], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro7",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro8],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro8], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro8",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro9],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro9], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro9",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro10],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro10], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro10",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro11],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro11], nome, 0, strlen(nome), MAX_PLAYER_NAME);
		dini_Set(arquivo,"Membro11",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro12],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro12], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro12",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro13],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro13], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro13",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro14],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro14], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro14",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro15],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro15], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro15",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro16],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro16], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro16",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro17],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro17], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro17",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro18],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro18], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro18",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro19],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro19], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro19",nome);
		return true;
	}
	if(strcmp(InfoOrg[org][Membro20],"Ninguem",true)==0)
	{
	    strmid(InfoOrg[org][Membro20], nome, 0, strlen(nome), MAX_PLAYER_NAME);
	    dini_Set(arquivo,"Membro20",nome);
		return true;
	}
	return 0;
}
forward CheckInfoOrg(playerid);
public CheckInfoOrg(playerid)
{
    if(IsPlayerConnected(playerid))
	{
	    new PlayerNick[MAX_PLAYER_NAME];
	    GetPlayerName(playerid,PlayerNick,sizeof(PlayerNick));
	    for(new i = 1; i < sizeof(InfoOrg); i++)
		{
	    	if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
		    {
		    	if(strcmp(PlayerNick,InfoOrg[i][Lider],true)==0)
		    	{
		    	    PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][SubLider],true)==0)
		    	{
   					PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro1],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro2],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro3],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro4],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro5],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro6],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro7],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro8],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro9],true)==0)
		    	{
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro10],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro11],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro12],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro13],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro14],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro15],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro16],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro17],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro18],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro19],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	if(strcmp(PlayerNick,InfoOrg[i][Membro20],true)==0)
		    	{
           			PlayerInfo[playerid][pCheckInfoOrg] = 0;
					return true;
		    	}
		    	PlayerInfo[playerid][pCheckInfoOrg] = 1;
			}
		}
		if(PlayerInfo[playerid][pCheckInfoOrg] >= 1)
		{
		    if(PlayerInfo[playerid][pMembro] > 0 || PlayerInfo[playerid][pLider] > 0)
		    {
       			if(PlayerInfo[playerid][pLider] > 0) { SendClientMessage(playerid, COLOR_LIGHTRED, "Você foi demitido de líder por um admin, agora você é um Civil !"); }
				else { SendClientMessage(playerid, COLOR_LIGHTRED, "Você foi demitido pelo seu líder, agora você é um Civil !"); }
				gTeam[playerid] = 3;
				MedicBill[playerid] = 0;
				PlayerInfo[playerid][pTeam] = 3;
				PlayerInfo[playerid][pMembro] = 0;
				PlayerInfo[playerid][pLider] = 0;
				PlayerInfo[playerid][pCargo] = 0;
				if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
				PlayerInfo[playerid][pCheckInfoOrg] = 0;
				SpawnPlayer(playerid);
				return true;
			}
		}
    }
	return true;
}
forward LoadOrgs();
public LoadOrgs()
{
	new arquivo[256];
	new idx = 1;
	while (idx < sizeof(InfoOrg))
	{
	    format(arquivo, sizeof(arquivo), "ORG Arquivos/Org%d.cfg",idx);
		strmid(InfoOrg[idx][Lider], dini_Get(arquivo,"Lider"), 0, strlen(dini_Get(arquivo,"Lider")), 255);
		strmid(InfoOrg[idx][SubLider], dini_Get(arquivo,"SubLider"), 0, strlen(dini_Get(arquivo,"SubLider")), 255);
		strmid(InfoOrg[idx][Membro1], dini_Get(arquivo,"Membro1"), 0, strlen(dini_Get(arquivo,"Membro1")), 255);
		strmid(InfoOrg[idx][Membro2], dini_Get(arquivo,"Membro2"), 0, strlen(dini_Get(arquivo,"Membro2")), 255);
		strmid(InfoOrg[idx][Membro3], dini_Get(arquivo,"Membro3"), 0, strlen(dini_Get(arquivo,"Membro3")), 255);
		strmid(InfoOrg[idx][Membro4], dini_Get(arquivo,"Membro4"), 0, strlen(dini_Get(arquivo,"Membro4")), 255);
		strmid(InfoOrg[idx][Membro5], dini_Get(arquivo,"Membro5"), 0, strlen(dini_Get(arquivo,"Membro5")), 255);
		strmid(InfoOrg[idx][Membro6], dini_Get(arquivo,"Membro6"), 0, strlen(dini_Get(arquivo,"Membro6")), 255);
		strmid(InfoOrg[idx][Membro7], dini_Get(arquivo,"Membro7"), 0, strlen(dini_Get(arquivo,"Membro7")), 255);
		strmid(InfoOrg[idx][Membro8], dini_Get(arquivo,"Membro8"), 0, strlen(dini_Get(arquivo,"Membro8")), 255);
		strmid(InfoOrg[idx][Membro9], dini_Get(arquivo,"Membro9"), 0, strlen(dini_Get(arquivo,"Membro9")), 255);
		strmid(InfoOrg[idx][Membro10], dini_Get(arquivo,"Membro10"), 0, strlen(dini_Get(arquivo,"Membro10")), 255);
		strmid(InfoOrg[idx][Membro11], dini_Get(arquivo,"Membro11"), 0, strlen(dini_Get(arquivo,"Membro11")), 255);
		strmid(InfoOrg[idx][Membro12], dini_Get(arquivo,"Membro12"), 0, strlen(dini_Get(arquivo,"Membro12")), 255);
		strmid(InfoOrg[idx][Membro13], dini_Get(arquivo,"Membro13"), 0, strlen(dini_Get(arquivo,"Membro13")), 255);
		strmid(InfoOrg[idx][Membro14], dini_Get(arquivo,"Membro14"), 0, strlen(dini_Get(arquivo,"Membro14")), 255);
		strmid(InfoOrg[idx][Membro15], dini_Get(arquivo,"Membro15"), 0, strlen(dini_Get(arquivo,"Membro15")), 255);
		strmid(InfoOrg[idx][Membro16], dini_Get(arquivo,"Membro16"), 0, strlen(dini_Get(arquivo,"Membro16")), 255);
		strmid(InfoOrg[idx][Membro17], dini_Get(arquivo,"Membro17"), 0, strlen(dini_Get(arquivo,"Membro17")), 255);
		strmid(InfoOrg[idx][Membro18], dini_Get(arquivo,"Membro18"), 0, strlen(dini_Get(arquivo,"Membro18")), 255);
		strmid(InfoOrg[idx][Membro19], dini_Get(arquivo,"Membro19"), 0, strlen(dini_Get(arquivo,"Membro19")), 255);
		strmid(InfoOrg[idx][Membro20], dini_Get(arquivo,"Membro20"), 0, strlen(dini_Get(arquivo,"Membro20")), 255);
   		idx ++;
	}
	printf("[BRNM]: %d Orgs Carregadas", idx);
	return true;
}
forward DemitirInfoOrg(nome[]);
public DemitirInfoOrg(nome[])
{
    new arquivo[256];
    for(new i = 1; i < sizeof(InfoOrg); i++)
	{
        format(arquivo, sizeof(arquivo), "ORG Arquivos/Org%d.cfg",i);
    	if(strcmp(nome,InfoOrg[i][Lider],true)==0)
    	{
    	    strmid(InfoOrg[i][Lider], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
    		dini_Set(arquivo,"Lider","Ninguem");
    	    return true;
    	}
		if(strcmp(nome,InfoOrg[i][SubLider],true)==0)
		{
		    strmid(InfoOrg[i][SubLider], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    dini_Set(arquivo,"SubLider","Ninguem");
			return true;
   		}
    	if(strcmp(nome,InfoOrg[i][Membro1],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro1], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro1","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro2],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro2], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	dini_Set(arquivo,"Membro2","Ninguem");
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro3],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro3], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    dini_Set(arquivo,"Membro3","Ninguem");
 	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro4],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro4], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	dini_Set(arquivo,"Membro4","Ninguem");
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro5],true)==0)
    	{
		    strmid(InfoOrg[i][Membro5], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
		    dini_Set(arquivo,"Membro5","Ninguem");
		    return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro6],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro6], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	dini_Set(arquivo,"Membro6","Ninguem");
		    return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro7],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro7], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
 	    	dini_Set(arquivo,"Membro7","Ninguem");
  	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro8],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro8], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro8","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro9],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro9], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro9","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro10],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro10], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro10","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro11],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro11], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro11","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro12],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro12], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro12","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro13],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro13], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro13","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro14],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro14], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro14","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro15],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro15], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro15","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro16],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro16], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro16","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro17],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro17], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro17","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro18],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro18], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro18","Ninguem");
	    	return true;
    	}
    	if(strcmp(nome,InfoOrg[i][Membro19],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro19], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro19","Ninguem");
	    	return true;
    	}
		if(strcmp(nome,InfoOrg[i][Membro20],true)==0)
    	{
	    	strmid(InfoOrg[i][Membro20], "Ninguem", 0, strlen("Ninguem"), MAX_PLAYER_NAME);
	    	dini_Set(arquivo,"Membro20","Ninguem");
	    	return true;
    	}
    }
	return 0;
}
stock Demitir(playerid, para1)
{
	format(gstring, sizeof(gstring), "* Você foi demitido pelo líder %s Motivo: Limpou sua Vaga.", PlayerName(playerid));
	SendClientMessage(para1, COLOR_LIGHTRED, gstring);
	SendClientMessage(para1, COLOR_LIGHTRED, "* Agora você é um civil novamente.");
 	gTeam[para1] = 3;
	PlayerInfo[para1][pTeam] = 3;
	PlayerInfo[para1][pMembro] = 0;
	PlayerInfo[para1][pCargo] = 0;
	if(PlayerInfo[para1][pSex] == 1) { PlayerInfo[para1][pSkin] = 23; } else { PlayerInfo[para1][pSkin] = 41; }
    SetSpawnInfo(para1, gTeam[para1], PlayerInfo[para1][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
	MedicBill[para1] = 0;
	SpawnPlayer(para1);
}
stock DemitirLider(playerid)
{
	SendClientMessage(playerid, COLOR_LIGHTRED, "Você foi demitido de líder por um admin, agora você é um Civil !");
	gTeam[playerid] = 3;
	PlayerInfo[playerid][pTeam] = 3;
	PlayerInfo[playerid][pMembro] = 0;
	PlayerInfo[playerid][pLider] = 0;
	PlayerInfo[playerid][pCargo] = 0;
	if(PlayerInfo[playerid][pSex] == 1) { PlayerInfo[playerid][pSkin] = 60; } else { PlayerInfo[playerid][pSkin] = 226; }
    SetSpawnInfo(playerid, gTeam[playerid], PlayerInfo[playerid][pSkin],0.0,0.0,0.0,0,0,0,0,0,0,0);
	MedicBill[playerid] = 0;
	SpawnPlayer(playerid);
}
forward TemVaga(family);
public TemVaga(family)
{
	if(strcmp(InfoOrg[family][Membro1], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro2], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro3], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro4], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro5], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro6], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro7], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro8], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro9], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro10], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro11], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro12], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro13], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro14], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro15], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro16], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro17], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro18], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro19], "Ninguem", true) == 0)
   	{
		return true;
	}
	if(strcmp(InfoOrg[family][Membro20], "Ninguem", true) == 0)
   	{
		return true;
	}
	return 0;
}

public AttachObjectCorrectly(playerid, object)
{
if(object == 1210)
	{
	    SetPlayerHoldingObject(playerid, 1210,5,0.3,0.1,0.0,0.0,270.0,0.0);
	}
	    return true;
}

forward IsPlayerOnline(name[]);
public IsPlayerOnline(name[])
{
	new PlayerName2[MAX_PLAYER_NAME];
	for(new i=0; i<MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnected(i))
		{
	    	GetPlayerName(i, PlayerName2, sizeof(PlayerName2));
	    	if(strcmp(name,PlayerName2,true)==0)
			{
		    	return true;
			}
		}
	}
	return 0;
}
forward GetPlayerID(string[]);
public GetPlayerID(string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
    	if(IsPlayerConnected(i))
		{
        	new testname[MAX_PLAYER_NAME];
	    	GetPlayerName(i, testname, sizeof(testname));
	    	if(strcmp(testname,string,true)==0)
	    	{
	    	    return i;
	    	}
		}
    }
    return INVALID_PLAYER_ID;
}
forward Avaliar(playerid);
public Avaliar(playerid)
{
KillTimer(TempoAvaliar[playerid]);
Avaliado[playerid] = 0;
return true;
}
//==============================================================================//
stock AtaqueLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/Ataques.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock DivulgouLog(string[])
{
	new entry[128];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("Logs/Divulgou.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
stock IsNumero(string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
		if (string[i] > '9' || string[i] < '0') return 0;
	}
	return true;
}
stock IsPlayerInTerritorio(playerid)
{
    new Float:x,Float:y,Float:z;
    GetPlayerPos(playerid, x, y, z);
    if(x >= Territorio[MinX] && y >= Territorio[MinY] && x <= Territorio[MaxX] && y <= Territorio[MaxY]) return true;
    return 0;
}
stock TentouDivulgar(string[])
{
	new x=0;
	for (new i = 0, j = strlen(string); i <= j; i++)
	{
		if (string[i] >= 46 && string[i] <= 58)
		{
		    x+=1;
		}
	}
	if(x >= 8) return true;
	if(strfind(string, "189.", true) != -1 || strfind(string, "201.", true) != -1 || strfind(string, "200.", true) != -1 || strfind(string, "75.", true) != -1 || strfind(string, "91.", true) != -1 || strfind(string, "67.", true) != -1 || strfind(string, "69.", true) != -1 || strfind(string, "205.", true) != -1 || strfind(string, "PlayForever", true) != -1 || strfind(string, "AdventureStreet", true) != -1 || strfind(string, "", true) != -1 ||
	strfind(string, "168.", true) != -1 || strfind(string, "1 8 9", true) != -1 || strfind(string, "2 0 1", true) != -1 || strfind(string, "192.", true) != -1 || strfind(string, "254.", true) != -1 || strfind(string, "7 7 7 7.", true) != -1 || strfind(string, "169.", true) != -1 || strfind(string, ":8780", true) != -1 ||
    strfind(string, "2 0 0", true) != -1 || strfind(string, "1 6 9", true) != -1 || strfind(string, "63.", true) != -1 || strfind(string, "1 6 8", true) != -1 || strfind(string, "212.124.127.96:7777", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1  || strfind(string, "", true) != -1 || strfind(string, "", true) != -1 ||
	strfind(string, "192.95.17.219:6639", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "Play Crazy", true) != -1 || strfind(string, "", true) != -1  || strfind(string, "Hot mail", true) != -1 ||
	strfind(string, "", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1 || strfind(string, "", true) != -1)
    { return true; }
	return 0;
}
public fecharyakuza1()
{
	MoveObject(pyakuza1, 664.862,-1309.311,15.234,3);
}
public fecharyakuza3()
{
    MoveObject(pyakuza3, 785.128,-1152.442,25.430,3);
}
forward fecharacn();
public fecharacn()
{
	MoveObject(acn,321.39999389648, -1188.1999511719, 77.099998474121,3);
}
stock IsVehicleValid(id)
{
	new type=GetVehicleModel(id);
	new blocked[]={ 548, 425, 417, 487, 488, 497, 563, 447, 469, 520 };
	for(new i;i<sizeof(blocked);i++)
	{
		if(type == blocked[i])
		{
			return 0;
		}
	}
	return true;
}
stock IsPlayerInArea(playerid, Float:max_x, Float:min_x, Float:max_y, Float:min_y)
{
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	if(X <= max_x && X >= min_x && Y <= max_y && Y >= min_y) return true;
	return 0;
}

stock IsPlayerInWater(playerid)
{
	new Float:x,Float:y,Float:pz;
	GetPlayerPos(playerid,x,y,pz);
	if (
 	(IsPlayerInArea(playerid, 2032.1371, 1841.2656, 1703.1653, 1467.1099) && pz <= 9.0484) //lv piratenschiff
  	|| (IsPlayerInArea(playerid, 2109.0725, 2065.8232, 1962.5355, 10.8547) && pz <= 10.0792) //lv visage
  	|| (IsPlayerInArea(playerid, -492.5810, -1424.7122, 2836.8284, 2001.8235) && pz <= 41.06) //lv staucamm
  	|| (IsPlayerInArea(playerid, -2675.1492, -2762.1792, -413.3973, -514.3894) && pz <= 4.24) //sf südwesten kleiner teich
  	|| (IsPlayerInArea(playerid, -453.9256, -825.7167, -1869.9600, -2072.8215) && pz <= 5.72) //sf gammel teich
  	|| (IsPlayerInArea(playerid, 1281.0251, 1202.2368, -2346.7451, -2414.4492) && pz <= 9.3145) //ls neben dem airport
  	|| (IsPlayerInArea(playerid, 2012.6154, 1928.9028, -1178.6207, -1221.4043) && pz <= 18.45) //ls mitte teich
  	|| (IsPlayerInArea(playerid, 2326.4858, 2295.7471, -1400.2797, -1431.1266) && pz <= 22.615) //ls weiter südöstlich
  	|| (IsPlayerInArea(playerid, 2550.0454, 2513.7588, 1583.3751, 1553.0753) && pz <= 9.4171) //lv pool östlich
  	|| (IsPlayerInArea(playerid, 1102.3634, 1087.3705, -663.1653, -682.5446) && pz <= 112.45) //ls pool nordwestlich
  	|| (IsPlayerInArea(playerid, 1287.7906, 1270.4369, -801.3882, -810.0527) && pz <= 87.123) //pool bei maddog's haus oben
  	|| (pz < 1.5)
	)
	{
	    return true;
	}
	return 0;
}
stock SetHora()
{
	gettime(hour, minute, second);
	if(hour == 0 && minute >= 0 && minute <= 59) { SetWorldTime(0); }
	if(hour == 1 && minute >= 0 && minute <= 59) { SetWorldTime(1); }
	if(hour == 2 && minute >= 0 && minute <= 59) { SetWorldTime(2); }
	if(hour == 3 && minute >= 0 && minute <= 59) { SetWorldTime(3); }
	if(hour == 4 && minute >= 0 && minute <= 59) { SetWorldTime(4); }
	if(hour == 5 && minute >= 0 && minute <= 39) { SetWorldTime(5); }
	if(hour == 5 && minute >= 40 && minute <= 49) { SetWorldTime(23); }
	if(hour == 5 && minute >= 50 && minute <= 59) { SetWorldTime(22); }
	if(hour == 6 && minute >= 0 && minute <= 9) { SetWorldTime(21); }
	if(hour == 6 && minute >= 30 && minute <= 59) { SetWorldTime(7); }
	if(hour == 7 && minute >= 0 && minute <= 59) { SetWorldTime(7); }
	if(hour == 8 && minute >= 0 && minute <= 59) { SetWorldTime(8); }
	if(hour == 9 && minute >= 0 && minute <= 59) { SetWorldTime(9); }
	if(hour == 10 && minute >= 0 && minute <= 59) { SetWorldTime(10); }
	if(hour == 11 && minute >= 0 && minute <= 59) { SetWorldTime(11); }
	if(hour == 12 && minute >= 0 && minute <= 59) { SetWorldTime(12); }
	if(hour == 13 && minute >= 0 && minute <= 59) { SetWorldTime(13); }
	if(hour == 14 && minute >= 0 && minute <= 59) { SetWorldTime(14); }
	if(hour == 15 && minute >= 0 && minute <= 59) { SetWorldTime(15); }
	if(hour == 16 && minute >= 0 && minute <= 59) { SetWorldTime(16); }
	if(hour == 17 && minute >= 0 && minute <= 59) { SetWorldTime(17); }
	if(hour == 17 && minute >= 35 && minute <= 39) { SetWorldTime(20); }
	if(hour == 17 && minute >= 40 && minute <= 49) { SetWorldTime(21); }
	if(hour == 17 && minute >= 55 && minute <= 59) { SetWorldTime(23); }
	if(hour == 18 && minute >= 0 && minute <= 29) { SetWorldTime(5); }
	if(hour == 19 && minute >= 0 && minute <= 59) { SetWorldTime(4); }
	if(hour == 20 && minute >= 0 && minute <= 59) { SetWorldTime(3); }
	if(hour == 21 && minute >= 0 && minute <= 59) { SetWorldTime(2); }
	if(hour == 22 && minute >= 0 && minute <= 59) { SetWorldTime(1); }
	if(hour == 23 && minute >= 0 && minute <= 59) { SetWorldTime(0); }
}
forward Atualizar3Dtexts();
public Atualizar3Dtexts()
{
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
	    Delete3DTextLabel(HouseLabel[h]);
		if(HouseInfo[h][hOwned] == 0)
		{
			format(gstring, sizeof(gstring), TextCasaVenda,HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hLevel],h);
			HouseLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,15.0,0);
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			if(HouseInfo[h][hRentabil] == 0)
			{
				format(gstring, sizeof(gstring), TextCasa,HouseInfo[h][hOwner],HouseInfo[h][hLevel],h);
				HouseLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,15.0,0);
			}
			else
			{
				format(gstring, sizeof(gstring), TextCasaAl,HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel],h);
				HouseLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]+0.5,15.0,0);
			}
		}
	}
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		Delete3DTextLabel(BizzLabel[h]);
		if(BizzInfo[h][bOwned] == 0)
		{
			format(gstring, sizeof(gstring), TextEmpresaVenda,BizzInfo[h][bMessage],BizzInfo[h][bBuyPrice],BizzInfo[h][bLevelNeeded],h);
			BizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+0.5,20.0,0);
		}
		if(BizzInfo[h][bOwned] == 1)
		{
   			format(gstring, sizeof(gstring), TextEmpresa,BizzInfo[h][bMessage],BizzInfo[h][bOwner],BizzInfo[h][bExtortion],BizzInfo[h][bEntranceCost],BizzInfo[h][bLevelNeeded],h);
   			BizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,BizzInfo[h][bEntranceX], BizzInfo[h][bEntranceY], BizzInfo[h][bEntranceZ]+0.5,20.0,0);
		}
	}
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		Delete3DTextLabel(SBizzLabel[h]);
		if(SBizzInfo[h][sbOwned] == 0)
		{
			format(gstring, sizeof(gstring), TextMEmpresaVenda,SBizzInfo[h][sbMessage],SBizzInfo[h][sbBuyPrice],SBizzInfo[h][sbLevelNeeded],h);
			SBizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]+0.5,20.0,0);
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
   			format(gstring, sizeof(gstring), TextMEmpresa,SBizzInfo[h][sbMessage],SBizzInfo[h][sbOwner],SBizzInfo[h][sbExtortion],SBizzInfo[h][sbEntranceCost],SBizzInfo[h][sbLevelNeeded],h);
   			SBizzLabel[h] = Create3DTextLabel(gstring,COLOR_AZULBB,SBizzInfo[h][sbEntranceX], SBizzInfo[h][sbEntranceY], SBizzInfo[h][sbEntranceZ]+0.5,20.0,0);
		}
	}
}
stock GetPlayerSpeed(playerid,bool:kmh){new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
if(IsPlayerInAnyVehicle(playerid)) GetVehicleVelocity(GetPlayerVehicleID(playerid),Vx,Vy,Vz); else GetPlayerVelocity(playerid,Vx,Vy,Vz);
rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
return kmh?floatround(rtn * 100 * 1.61):floatround(rtn * 100);}

forward ContarJogadores();
public ContarJogadores(){
new	Jogadores = 0;
for(new i = 0; i < MAX_PLAYERS; i++){
if(IsPlayerConnected(i) && !IsPlayerNPC(i)){Jogadores++;}}return Jogadores;}
forward Anuncio();
public Anuncio(){
if(panuncio > 0){
panuncio = 0;}}

stock RemovePlayerFromVehicleEx(playerid){
RemovePlayerFromVehicle(playerid);
Controle(playerid, 1);}

stock GetPlayerOrg(playerid){
new org;
if(PlayerInfo[playerid][pLider] > 0){
org = PlayerInfo[playerid][pLider];return org;}
if(PlayerInfo[playerid][pMembro] > 0){
org = PlayerInfo[playerid][pMembro];return org;}return 0;}


IsNumeric(const string[]){for (new i = 0, j = strlen(string); i < j; i++){if (string[i] > '9' || string[i] < '0') return 0;}return true;}

ReturnUser(text[], playerid = INVALID_PLAYER_ID){
new pos = 0;
while (text[pos] < 0x21){if (text[pos] == 0) return INVALID_PLAYER_ID;
pos++;}
new userid = INVALID_PLAYER_ID;
if (IsNumeric(text[pos])) {
userid = strval(text[pos]);
if (userid >=0 && userid < MAX_PLAYERS){if(!IsPlayerConnected(userid)){userid = INVALID_PLAYER_ID;}else{return userid;}}}

new len = strlen(text[pos]);
new count = 0;
new name[MAX_PLAYER_NAME];
for (new i = 0; i < MAX_PLAYERS; i++){if (IsPlayerConnected(i)){GetPlayerName(i, name, sizeof (name));
if (strcmp(name, text[pos], true, len) == 0){if (len == strlen(name)){return i;}else{count++;userid = i;}}}}
if (count != 1){if (playerid != INVALID_PLAYER_ID){if (count){SendClientMessage(playerid, 0xFF0000AA, "Multiple users found, please narrow earch");}else{
SendClientMessage(playerid, 0xFF0000AA, "No matching user found");}}userid = INVALID_PLAYER_ID;}return userid;}


forward LoadCofreOrg();
public LoadCofreOrg(){
new arquivo[64];
new idx = 1;
while (idx < sizeof(CofreOrg)){
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",idx);
CofreOrg[idx][Dinheiro] = dini_Int(arquivo,"Dinheiro");
CofreOrg[idx][Materiais] = dini_Int(arquivo,"Materiais");
CofreOrg[idx][Maconha] = dini_Int(arquivo,"Maconha");
CofreOrg[idx][Cocaina] = dini_Int(arquivo,"Cocaina");
CofreOrg[idx][Crack] = dini_Int(arquivo,"Crack");
idx ++;}return true;}

forward OnPlayerSave(playerid);
public SaveAccounts(){for(new i = 0; i < MAX_PLAYERS; i++){
OnPlayerSave(i);
if(IsPlayerConnected(i)){if(PlayerInfo[i][pContractTime] < 25){PlayerInfo[i][pContractTime] ++;}}}
SalvarCofreOrg();return true;}

forward SaveAccounts();
forward SalvarCofreOrg();
public SalvarCofreOrg(){
new arquivo[128];
new idx = 1;
while (idx < sizeof(CofreOrg)){
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",idx);
dini_IntSet(arquivo,"Dinheiro",CofreOrg[idx][Dinheiro]);
dini_IntSet(arquivo,"Materiais",CofreOrg[idx][Materiais]);
dini_IntSet(arquivo,"Maconha",CofreOrg[idx][Maconha]);
dini_IntSet(arquivo,"Cocaina",CofreOrg[idx][Cocaina]);
dini_IntSet(arquivo,"Crack",CofreOrg[idx][Crack]);
idx ++;}return true;}

stock DepositarGranaOrg(org,valor){
new antes = CofreOrg[org][Dinheiro];
CofreOrg[org][Dinheiro] = antes+valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Dinheiro",CofreOrg[org][Dinheiro]);
return true;}

stock SacarGranaOrg(org,valor){
new antes = CofreOrg[org][Dinheiro];
CofreOrg[org][Dinheiro] = antes-valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Dinheiro",CofreOrg[org][Dinheiro]);
return true;}

stock DepositarMaterialOrg(org,valor){
new antes = CofreOrg[org][Materiais];
CofreOrg[org][Materiais] = antes+valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Materiais",CofreOrg[org][Materiais]);
return true;}

stock SacarMaterialOrg(org,valor){
new antes = CofreOrg[org][Materiais];
CofreOrg[org][Materiais] = antes-valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Materiais",CofreOrg[org][Materiais]);
return true;}

stock DepositarMaconhaOrg(org,valor){
new antes = CofreOrg[org][Maconha];
CofreOrg[org][Maconha] = antes+valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Maconha",CofreOrg[org][Maconha]);
return true;}

stock SacarMaconhaOrg(org,valor){
new antes = CofreOrg[org][Maconha];
CofreOrg[org][Maconha] = antes-valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Maconha",CofreOrg[org][Maconha]);
return true;}

stock DepositarCocainaOrg(org,valor){
new antes = CofreOrg[org][Cocaina];
CofreOrg[org][Cocaina] = antes+valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Cocaina",CofreOrg[org][Cocaina]);
return true;}

stock SacarCocainaOrg(org,valor){
new antes = CofreOrg[org][Cocaina];
CofreOrg[org][Cocaina] = antes-valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Cocaina",CofreOrg[org][Cocaina]);
return true;}

stock DepositarCrackOrg(org,valor){
new antes = CofreOrg[org][Crack];
CofreOrg[org][Crack] = antes+valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Crack",CofreOrg[org][Crack]);
return true;}

stock SacarCrackOrg(org,valor){
new antes = CofreOrg[org][Crack];
CofreOrg[org][Crack] = antes-valor;
new arquivo[64];
format(arquivo, sizeof(arquivo), "Cofre Org/Org%d.cfg",org);
dini_IntSet(arquivo,"Crack",CofreOrg[org][Crack]);
return true;}

forward IsAComandoVermelhoCar(carid);
public IsAComandoVermelhoCar(carid){if((carid >= 254) && (carid <= 264)){return true;}return 0;}

forward IsACaminhoneiroCar(carid);
public IsACaminhoneiroCar(carid){if((carid >= 383) && (carid <= 385)){return true;}return 0;}

forward BusrouteEnd(playerid);
public BusrouteEnd(playerid){if (gPlayerTerminal[playerid] == 13){PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);TransportMoney[playerid] += 300;DisablePlayerCheckpoint(playerid);gPlayerTerminal[playerid] = 0;}
else{new conta;conta = gPlayerTerminal[playerid]*50;
format(gstring, 128, "Você encerrou seu serviço de ônibus e ganhou R$%d.", conta-50);SendClientMessage(playerid, COLOR_LIGHTRED, gstring);PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);TransportMoney[playerid] += conta-50;DisablePlayerCheckpoint(playerid);gPlayerTerminal[playerid] = 0;}return true;}

forward busstoptimer(playerid);
public busstoptimer(playerid){if(IsPlayerConnected(playerid)){new newcar = GetPlayerVehicleID(playerid);if(IsABus(newcar)){Controle(playerid, 1);SendClientMessage(playerid, TEAM_AZTECAS_COLOR, "Agora você pode seguir até a próxima parada de ônibus!");}}}

forward IsABus(carid);
public IsABus(carid){if(carid >= 359 && carid <= 365){return true;}return 0;}
forward AnuncioHitmans();
public AnuncioHitmans(){if(panunciohitmans > 0){panunciohitmans = 0;}}
forward AnuncioTriads();
public AnuncioTriads(){if(panunciotriads > 0){panunciotriads = 0;}}
forward AnuncioMafia();
public AnuncioMafia(){if(panunciomafia > 0){panunciomafia = 0;}}
forward AnuncioGang();
public AnuncioGang(){if(panunciogang > 0){panunciogang = 0;}}
forward AnuncioTaxi();
public AnuncioTaxi(){if(panunciotaxi > 0){panunciotaxi = 0;}}
forward AnuncioAlqaeda();
public AnuncioAlqaeda(){if(panuncioalqaeda > 0){panuncioalqaeda = 0;}}
forward AnuncioFARC();
public AnuncioFARC(){if(panuncioFARC > 0){panuncioFARC = 0;}}
forward AnuncioTaliban();
public AnuncioTaliban(){if(panuncioTaliban > 0){panuncioTaliban = 0;}}

stock ResetPlayerWeaponsEx(playerid){
ResetPlayerWeapons(playerid);
PlayerInfo[playerid][pGun1] = 0;PlayerInfo[playerid][pGun2] = 0;PlayerInfo[playerid][pGun3] = 0;PlayerInfo[playerid][pGun4] = 0;PlayerInfo[playerid][pGun5] = 0;PlayerInfo[playerid][pGun6] = 0;PlayerInfo[playerid][pGun7] = 0;PlayerInfo[playerid][pGun8] = 0;PlayerInfo[playerid][pGun9] = 0;PlayerInfo[playerid][pGun10] = 0;PlayerInfo[playerid][pGun11] = 0;
PlayerInfo[playerid][pGun12] = 0;PlayerInfo[playerid][pAmmo1] = 0;PlayerInfo[playerid][pAmmo2] = 0;PlayerInfo[playerid][pAmmo3] = 0;PlayerInfo[playerid][pAmmo4] = 0;PlayerInfo[playerid][pAmmo5] = 0;PlayerInfo[playerid][pAmmo6] = 0;PlayerInfo[playerid][pAmmo7] = 0;PlayerInfo[playerid][pAmmo8] = 0;PlayerInfo[playerid][pAmmo9] = 0;PlayerInfo[playerid][pAmmo10] = 0;PlayerInfo[playerid][pAmmo11] = 0;PlayerInfo[playerid][pAmmo12] = 0;
}
forward IsACaminhoneiro(playerid);
public IsACaminhoneiro(playerid){if(IsPlayerConnected(playerid)){new emprego = PlayerInfo[playerid][pEmprego];if(emprego==10){return true;}}return 0;}
forward ZerarRecarga(playerid);
public ZerarRecarga(playerid){if(var1[playerid] != 0) var1[playerid] = 0;}
public OnRconLoginAttempt(ip[], password[], success){if(success){new pip[16];for(new i=0; i<MAX_PLAYERS; i++){GetPlayerIp(i, pip, sizeof(pip));if(!strcmp(ip, pip, true)){ClearChatbox(i, 100);SendClientMessage(i, COLOR_YELLOW, "Tentou logar na Rcon, Você está banido!");SendClientMessage(i, COLOR_YELLOW, "Não retorne mais a esté Servidor.");
getdate(year, month, day);gettime(hour,minute);format(gstring, 128, "%s foi banido por ser Admin Rcon [%d/%d/%d - %d:%d]",PlayerName(i),day, month, year,hour, minute);fdplog(gstring);SBan(i, "Admin Rcon", "Homem_Aranha");break;}}}return true;}

stock IPlog(playerid){new PlayerIP[17];GetPlayerIp(playerid,PlayerIP, sizeof(PlayerIP));getdate(year, month, day);gettime(hour,minute);format(gstring, sizeof(gstring), "[%d/%d/%d - %d:%d] IP: %s - %s[%d]\n", day, month, year, hour, minute, PlayerIP, PlayerName(playerid), playerid);new File:hFile;hFile = fopen("Logs/IP.log", io_append);fwrite(hFile, gstring);fclose(hFile);}
stock AdminLog(string[]){new File:hFile;hFile = fopen("Logs/AdmTeste.log", io_append);fwrite(hFile, string);fclose(hFile);return true;}
stock LideresLog(string[]){new entry[128];format(entry, sizeof(entry), "%s\n",string);new File:hFile;hFile = fopen("Logs/Lideres.log", io_append);fwrite(hFile, entry);fclose(hFile);return true;}
stock AChatLog(string[]){new entry[128];format(entry, sizeof(entry), "%s\n",string);new File:hFile;hFile = fopen("Logs/AChat.log", io_append);fwrite(hFile, entry);fclose(hFile);return true;}
stock HChatLog(string[]){new entry[128];format(entry, sizeof(entry), "%s\n",string);new File:hFile;hFile = fopen("Logs/HChat.log", io_append);fwrite(hFile, entry);fclose(hFile);return true;}
stock AComandosLog(string[]){new entry[128];format(entry, sizeof(entry), "%s\n",string);new File:hFile;hFile = fopen("Logs/ComandosAdmin.log", io_append);fwrite(hFile, entry);fclose(hFile);return true;}
forward DateProp(playerid);
public DateProp(playerid){new playername[MAX_PLAYER_NAME];GetPlayerName(playerid, playername, sizeof(playername));new curdate = getdate();for(new h = 0; h < sizeof(HouseInfo); h++){if (strcmp(playername, HouseInfo[h][hOwner], true) == 0){HouseInfo[h][hDate] = curdate;OnPropUpdate();}}return true;}
forward usarbomba();
public usarbomba(){usarbombas = 0;}
public usebomb(playerid){pbomba3[playerid] = 0;SendClientMessage(playerid, 0x33FF00FF, "Você já pode comprar bombas novamente");}
public usebombnuclear(playerid){ BOMBAON = 0; pbombanuclear3[playerid] = 0;SendClientMessage(playerid, 0x33FF00FF, "Você já pode comprar bombas novamente");}
forward Checkprop();
public Checkprop(){new olddate;new string[128];new curdate = getdate();for(new h = 0; h < sizeof(HouseInfo); h++){if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9){olddate = HouseInfo[h][hDate];if(curdate-olddate >= 10){getdate(v[0], v[1], v[2]);gettime(v[3], v[4], v[5]);
format(string, sizeof(string), "[%d/%d/%d] [%d:%d:%d] Casa ID:%d vendida, Dono:%s, Tempo:%d\n", v[2], v[1], v[0], v[3], v[4], v[5], h, HouseInfo[h][hOwner], curdate-olddate);new File:hFile;hFile = fopen("Logs/CheckProp.log", io_append);fwrite(hFile, string);fclose(hFile);
HouseInfo[h][hHel] = 0;HouseInfo[h][hArm] = 0;HouseInfo[h][hHealthx] = 0;HouseInfo[h][hHealthy] = 0;HouseInfo[h][hHealthz] = 0;HouseInfo[h][hArmorrx] = 0;HouseInfo[h][hArmorry] = 0;HouseInfo[h][hArmorrz] = 0;HouseInfo[h][hLock] = 1;HouseInfo[h][hOwned] = 0;HouseInfo[h][hVec] = 475;HouseInfo[h][hVcol1] = -1;HouseInfo[h][hVcol2] = -1;strmid(HouseInfo[h][hOwner], "O estado", 0, strlen("O estado"), 255);OnPropUpdate();}}}return true;}

public IsArma(playerid){if(IsPlayerConnected(playerid)){new lider = PlayerInfo[playerid][pLider];new member = PlayerInfo[playerid][pMembro];if(member==14 || member==18 || member==19 || member==5 || member==17 || member==20 || member==21 || member==22){return true;}else if(lider==14 || lider==18 || lider==19 || lider==5 || lider==17 || lider==20 || lider==21 || member==22){return true;}}return 0;}
stock IsPlayerInLocal(playerid){if(PlayerToPoint(3.0,playerid,246.3115,121.0975,1003.2301)){return true;}else if(PlayerToPoint(3.0,playerid,262.0182,71.0734,1003.2422)){return true;}else if(PlayerToPoint(3.0,playerid,211.2608,185.8552,1003.0313)){return true;}else{return 0;}}
public Usarcat(playerid){invadiocat[playerid] = 0;}
stock SoNumero(string[]){for (new i = 0, j = strlen(string); i < j; i++){if (string[i] > '9' || string[i] < '0') return 0;}return true;}
public SendHelperMessage(COLOR, string[]){
for(new i = 0; i < MAX_PLAYERS; i++){if(IsPlayerConnected(i)){if(PlayerInfo[i][pHelper] >= 1){SendClientMessage(i, COLOR, string);}}}}

public SendStarCityMessage(COLOR, string[]){
for(new i = 0; i < MAX_PLAYERS; i++){
if(IsPlayerConnected(i)){
if(PlayerInfo[i][pAdmin] >= 1 || PlayerInfo[i][pHelper] >= 1){
SendClientMessage(i, COLOR, string);}}}}

stock DefineOrgNameSequestro(orgid, Nome[], len){
if(orgid == 5) return format(Nome, len, "Gangster", 0);
if(orgid == 14) return format(Nome, len, "Gangster", 0);
if(orgid == 17) return format(Nome, len, "Gangster", 0);
if(orgid == 18) return format(Nome, len, "Gangster", 0);
if(orgid == 19) return format(Nome, len, "Gangster", 0);
if(orgid == 20) return format(Nome, len, "Gangster", 0);
if(orgid == 21) return format(Nome, len, "Gangster", 0);
if(orgid == 22) return format(Nome, len, "Gangster", 0);
if(orgid == 23) return format(Nome, len, "Gangster", 0);
if(orgid == 25) return format(Nome, len, "Gangster", 0);
if(orgid == 6) return format(Nome, len, "Terrorista", 0);
if(orgid == 15) return format(Nome, len, "Terrorista", 0);
if(orgid == 27) return format(Nome, len, "Terrorista", 0);
if(orgid == 12) return format(Nome, len, "Mafioso", 0);
if(orgid == 13) return format(Nome, len, "Mafioso", 0);
return format(Nome, len, "Nenhum", 0);}

public invadircat(playerid){
new playername[MAX_PLAYER_NAME];new string[256];
GetPlayerName(playerid,playername,sizeof(playername));
if(!PlayerToPoint(30.0, playerid, 2349.23535156,-659.25500488,127.84769440)){
format(string, sizeof(string), "O Policial{E8000B} %s {f5f3f0}não conseguiu invadir o Cativeiro",playername);
SendClientMessageToAll(COLOR_WHITE, string);invadiocat[playerid] = 1;
return true;}ForPlayers(i){
if(PlayerToPoint(30.0, playerid, 2349.23535156,-659.25500488,127.84769440)){
format(string, sizeof(string), "O Policial{E8000B} %s {f5f3f0}Invadio o Cativeiro.Todas unidades se dirijam até la para Ajuda-lo",playername);
SendClientMessageToAll(COLOR_WHITE, string);
DestroyObject(Portaocat);CreateExplosion(2349.23535156,-659.25500488,127.84769440,7,10.0);
invadiocat[playerid] = 1;SetTimer("reformarCat", 220000, 0);return true;}}return true;}

stock GetName(playerid){new name[MAX_PLAYER_NAME];
GetPlayerName(playerid, name, MAX_PLAYER_NAME);
return name;}

stock AntiDeAMX(){new a[][] ={
"Unarmed (Fist)",
"Brass K"};
#pragma unused a
}

public reloginho(){
    SyncTime();
	new
		string[256],
		ano,
		mes,
		dia,
		horas,
		minutos,
		segundos;
	getdate(ano, mes, dia);gettime(horas, minutos, segundos);
	format(string, sizeof string, "~b~~h~~h~~h~%d/%s%d/2014", dia, ((mes < 10) ? ("0") : ("")), mes);TextDrawSetString(Reloginho1, string);
	format(string, sizeof string, "~b~~h~~h~~h~%s%d:%s%d:%s%d", (horas < 10) ? ("0") : (""), horas, (minutos < 10) ? ("0") : (""), minutos, (segundos < 10) ? ("0") : (""), segundos);TextDrawSetString(Reloginho2, string);
	TextDrawShowForAll(Reloginho1);TextDrawShowForAll(Reloginho2);}

public ModCar(playerid){ShowPlayerDialog(playerid, DIALOGID, DIALOG_STYLE_LIST, "Tunar carro","Cores\nRodas\nVolume do Carro\nTunar Carro", "Selecionar", "Sair");return SendClientMessage(playerid, COLOR_YELLOW, "[BRNM]: Selecione um item.");}

public @Viajar(playerid){if(LSThiago[playerid] == 1){SetPlayerPos(playerid, 1642.6492,-2246.1914,13.4877);SetPlayerInterior(playerid, 0);SendClientMessage(playerid, -1, "Você chegou a Los Santos, conheça a cidade e seus cartões postais.");LSThiago[playerid] = 0;}else if(LVThiago[playerid] == 1){
SetPlayerPos(playerid, 1679.2477,1447.9362,10.7745);SetPlayerInterior(playerid, 0);SendClientMessage(playerid, -1, "Você chegou a Las Venturas, conheça a cidade e seus cartões postais ");LVThiago[playerid] = 0;}else if(SFThiago[playerid] == 1){
SetPlayerPos(playerid, -1423.8510,-289.7584,14.1484);SetPlayerInterior(playerid, 0);SendClientMessage(playerid, -1, "Você chegou a San Fierro, conheça a cidade e seus cartões postais ");SFThiago[playerid] = 0;}return true;}

public AcabarMochila(playerid){RemovePlayerAttachedObject(playerid,0);return true;}
stock SaveLastPosition(vehicleid){new Float:SaveCoord_X, Float:SaveCoord_Y, Float:SaveCoord_Z;GetVehiclePos(vehicleid, SaveCoord_X, SaveCoord_Y, SaveCoord_Z);sVehicle_X[vehicleid]=SaveCoord_X;sVehicle_Y[vehicleid]=SaveCoord_Y;sVehicle_Z[vehicleid]=SaveCoord_Z;}
public GranaTerritorios(){new string[128];for(new i=0; i<MAX_PLAYERS; i++){if(IsPlayerConnected(i)){
//=-=-=-=-=-=-=-=-=-| MORRO |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

if(PlayerInfo[i][pLider] == 14 && donoFavela == 1){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 14 && donoFavela == 1){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 17 && donoFavela == 2){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 17 && donoFavela == 2){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 18 && donoFavela == 3){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 18 && donoFavela == 3){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 5 && donoFavela == 4) {if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 5 && donoFavela == 4){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 19 && donoFavela == 7){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 19 && donoFavela == 7) {if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 20 && donoFavela == 8){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 20 && donoFavela == 8){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 21 && donoFavela == 10){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 21 && donoFavela == 10){if(IsPlayerInFavela(i)){GivePlayerMoney(i, GranadaFavela);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaFavela);SendClientMessage(i, COLOR_GRAD3, string);}}

//=-=-=-=-=-=-=-=-=-| PISTA DE SKATE |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

if(PlayerInfo[i][pLider] == 14 && donoskate == 1) {if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 14 && donoskate == 1){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 17 && donoskate == 2){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 17 && donoskate == 2){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 18 && donoskate == 3){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 18 && donoskate == 3){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 5 && donoskate == 4) {if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 5 && donoskate == 4){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 19 && donoskate == 7) {if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 19 && donoskate == 7) {if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 20 && donoskate == 8) {if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 20 && donoskate == 8){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 21 && donoskate == 10){if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 21 && donoskate == 10) {if(IsPlayerInSkate(i)){GivePlayerMoney(i, GranadoSkate);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoSkate);
SendClientMessage(i, COLOR_GRAD3, string);}}

//=-=-=-=-=-=-=-=-=-| PARK GLEN |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

if(PlayerInfo[i][pLider] == 14 && donopark == 1){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 14 && donopark == 1){
if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 17 && donopark == 2){
if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 17 && donopark == 2){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 18 && donopark == 3){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);
SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 18 && donopark == 3){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 5 && donopark == 4){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 5 && donopark == 4){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 19 && donopark == 7){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 19 && donopark == 7){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 20 && donopark == 8){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 20 && donopark == 8){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 21 && donopark == 10){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 21 && donopark == 10){if(IsPlayerInPark(i)){GivePlayerMoney(i, GranadoPark);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoPark);SendClientMessage(i, COLOR_GRAD3, string);}}

//=-=-=-=-=-=-=-=-=-| PRAÇA DO AEROPORTO |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

if(PlayerInfo[i][pLider] == 14 && donoaero == 1){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);
SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 14 && donoaero == 1){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 17 && donoaero == 2){if(IsPlayerInAero(i))
{GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 17 && donoaero == 2){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 18 && donoaero == 3){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 18 && donoaero == 3){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);
SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 5 && donoaero == 4){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 5 && donoaero == 4){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 19 && donoaero == 7){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 19 && donoaero == 7) {if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 20 && donoaero == 8){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 20 && donoaero == 8){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pLider] == 21 && donoaero == 10){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pMembro] == 21 && donoaero == 10){if(IsPlayerInAero(i)){GivePlayerMoney(i, GranadoAero);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoAero);SendClientMessage(i, COLOR_GRAD3, string);}}

//=-=-=-=-=-=-=-=-=-| CASARÃO |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

if(PlayerInfo[i][pMembro] == 12 && donocasarao == 1){if(IsPlayerInCasarao(i)){GivePlayerMoney(i, GranadoCasarao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoCasarao);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pLider] == 12 && donocasarao == 1){if(IsPlayerInCasarao(i)){GivePlayerMoney(i, GranadoCasarao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoCasarao);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 13 && donocasarao == 2){if(IsPlayerInCasarao(i)){
GivePlayerMoney(i, GranadoCasarao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoCasarao);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pLider] == 13 && donocasarao == 2){if(IsPlayerInCasarao(i)){GivePlayerMoney(i, GranadoCasarao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoCasarao);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 11 && donocasarao == 3){if(IsPlayerInCasarao(i)){GivePlayerMoney(i, GranadoCasarao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoCasarao);
SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pLider] == 11 && donocasarao == 3){if(IsPlayerInCasarao(i)){GivePlayerMoney(i, GranadoCasarao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadoCasarao);SendClientMessage(i, COLOR_GRAD3, string);}}

//=-=-=-=-=-=-=-=-=-| ESTAÇÃO |-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

if(PlayerInfo[i][pMembro] == 12 && donoestacao == 1) {if(IsPlayerInEstacao(i)){GivePlayerMoney(i, GranadaEstacao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaEstacao);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pLider] == 12 && donoestacao == 1){if(IsPlayerInEstacao(i)){GivePlayerMoney(i, GranadaEstacao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaEstacao);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 13 && donoestacao == 2){if(IsPlayerInEstacao(i)){GivePlayerMoney(i, GranadaEstacao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaEstacao);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pLider] == 13 && donoestacao == 2){
if(IsPlayerInEstacao(i)){GivePlayerMoney(i, GranadaEstacao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaEstacao);SendClientMessage(i, COLOR_GRAD3, string);}}

if(PlayerInfo[i][pMembro] == 11 && donoestacao == 3){if(IsPlayerInEstacao(i)){GivePlayerMoney(i, GranadaEstacao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaEstacao);SendClientMessage(i, COLOR_GRAD3, string);}}
if(PlayerInfo[i][pLider] == 11 && donoestacao == 3){if(IsPlayerInEstacao(i)){GivePlayerMoney(i, GranadaEstacao);
format(string, sizeof(string), "Você recebeu R$%d, Por manter esta area sobre controle.",GranadaEstacao);SendClientMessage(i, COLOR_GRAD3, string);}}}}return true;}

//=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=| DETETIVE'S E LAVA JATO'S |=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=//

public FuckYou(playerid,give){if(!IsPlayerConnected(give)) {KillTimer(timer[playerid]);DisablePlayerCheckpoint(playerid);return SendClientMessage(playerid, COLOR_WHITE, "O Player Desconectou");}
static Float:X,Float:Y,Float:Z;GetPlayerPos(give,X,Y,Z);SetPlayerCheckpoint(playerid, X,Y,Z, 6);if(PlayerToPoint(7.0,playerid,X,Y,Z)){DisablePlayerCheckpoint(playerid);KillTimer(timer[playerid]);GameTextForPlayer(playerid, " ~w~Voce chegou ao ~b~individuo", 5000, 3);}return true;}

public Autocruise(playerid, in){new Float:vehx, Float:vehy, Float:vehz;GetVehiclePos(GetPlayerVehicleID(playerid), vehx, vehy, vehz);
if(in == 1){if(-1777 < vehy){for(new i = 0; i <= MAX_PLAYERS; i++){if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid)){SetPlayerCameraPos(i,1910.4637,-1771.8,15);SetPlayerCameraLookAt(i,1911.2863,-1775.1614,13.3828);}}SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);TogglePlayerControllable(playerid, 0);MoveObject(PortaoEntrada, 1911.21130371, -1780.68151855, 14.15972233, 1);SetTimerEx("AguaLava",4000,0,"ii",playerid, 1);}
else{if(vehx != 1911.1886){SetVehiclePos(GetPlayerVehicleID(playerid), 1911.1886, vehy, vehz);SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);}TogglePlayerControllable(playerid, 1);SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0.1, 0);SetTimerEx("Autocruise",100,0,"ii",playerid, 1);}}
else{if(-1768 < vehy){SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);TogglePlayerControllable(playerid, 0);MoveObject(PortaoSaida, 1911.21130371,-1771.97814941,14.15972233, 1);SetTimerEx("EndWash",1000,0,"i",playerid);}
else{if(vehx != 1911.1886){SetVehiclePos(GetPlayerVehicleID(playerid), 1911.1886, vehy, vehz);SetVehicleZAngle(GetPlayerVehicleID(playerid), 0);}TogglePlayerControllable(playerid, 1);SetVehicleVelocity(GetPlayerVehicleID(playerid), 0, 0.1, 0);
SetTimerEx("Autocruise",100,0,"ii",playerid, 0);}}return true;}

public TempoAtendimento()
{
    for(new i = 0; i < MAX_PLAYERS; i++)
	{
    	if(FilaAtendimento[i] != 999 && IsPlayerConnected(i)) 
    	{
             TempoAtendimento2[i]++;
    	}
	}
    return 1;
}

public camera(playerid)
{
SetCameraBehindPlayer(playerid);
return true;
}
public musica(playerid)
{
PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
return true;
}
stock ChatAdmin(string[],nivel)
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(PlayerInfo[i][pAdmin] >= nivel)
        {
            SendClientMessage(i, 0xFF0000AA, string);
        }
    }
    return 1;
}

stock ChecarAdmin(playerid)
{
	new viptipo[128];
	if(PlayerInfo[playerid][pAdmin] == 0 || PlayerInfo[playerid][pAdmin] == 0)
	{
    	format(viptipo,sizeof(viptipo),"Jogador");
	}
	if(PlayerInfo[playerid][pAdmin] >= 1)
	{
    	format(viptipo,sizeof(viptipo),"Administrador");
	}
	if(PlayerInfo[playerid][pHelper] >= 1)
	{
    	format(viptipo,sizeof(viptipo),"Helper");
	}
	return viptipo;
}
public TextProcu()
{
    for(new i=0; i<MAX_PLAYERS; i++)
    {
        new string[256];
        if(GetPlayerWantedLevel(i) > 1)
        {
            format(string,256,"**PROCURADO[%d]**",GetPlayerWantedLevel(i));
            SetPlayerChatBubble(i,string, COLOR_LIGHTRED, 100.0, 10000);
        }
    }
}
forward RemoveFlood(playerid);
public RemoveFlood(playerid)
{
	KillTimer(FloodTimer[playerid]);
	FloodAlert[playerid] = 0;
	return 1;
}

forward ShowIntro(playerid);
public ShowIntro(playerid)
{
	SetPVarInt(playerid, "Intro", GetPVarInt(playerid, "Intro") + 1);
	new iteration = GetPVarInt(playerid, "Intro");
	switch(iteration)
	{
		case 1:
		{
			for(new i; i < 11; i++)
			{
			    SendClientMessage(playerid, -1, "");
			}
			TextDrawShowForPlayer(playerid, Intro[0]);
		}
		case 2:
		{
		    TextDrawShowForPlayer(playerid, Intro[1]);
		}
		case 3:
		{
            TextDrawShowForPlayer(playerid, Intro[2]);
		}
		case 4:
		{
		    TextDrawHideForPlayer(playerid, Intro[2]);
		    TextDrawShowForPlayer(playerid, Intro[3]);
		}
		case 5:
		{
		    TextDrawHideForPlayer(playerid, Intro[3]);
		    TextDrawShowForPlayer(playerid, Intro[4]);
		}
		case 6:
		{
		    TextDrawHideForPlayer(playerid, Intro[4]);
		    TextDrawShowForPlayer(playerid, Intro[5]);
		}
		case 7:
		{
		    TextDrawHideForPlayer(playerid, Intro[5]);
		    TextDrawShowForPlayer(playerid, Intro[6]);
		}
		case 8:
		{
		    TextDrawHideForPlayer(playerid, Intro[6]);
		    TextDrawShowForPlayer(playerid, Intro[7]);
		}
		case 9:
		{
		    TextDrawHideForPlayer(playerid, Intro[7]);
		    TextDrawShowForPlayer(playerid, Intro[8]);
		}
		case 10:
		{
		    TextDrawShowForPlayer(playerid, Intro[9]);
		}
		case 11:
		{
		    TextDrawShowForPlayer(playerid, Intro[10]);
		}
		case 12:
		{
		    TextDrawShowForPlayer(playerid, Intro[11]);
		}
	}
	if(GetPVarInt(playerid, "Intro") < 10)
	{
		SetTimerEx("ShowIntro", 300, 0, "d", playerid);
	}
	else if(9 < GetPVarInt(playerid, "Intro") < 13)
	{
        SetTimerEx("ShowIntro", 2000, 0, "d", playerid);
	}
	else
	{
	    for(new i; i < sizeof(Intro); i++)
	    {
			TextDrawHideForPlayer(playerid, Intro[i]);
		}
		TogglePlayerSpectating(playerid, false);
		ForceClassSelection(playerid);
	}
	return 1;
}
forward KickPublic(playerid);
public KickPublic(playerid)
{
Kick(playerid);
return true;
}
forward KickPublic2(playerid);
public KickPublic2(playerid)
{
Kick(playerid);
return true;
}
forward BanPublic(giveplayerid);
public BanPublic(giveplayerid)
{
Ban(giveplayerid);
return true;
}
public CloseGate(gateid)
{
    if(gateid == Gate)
    {
        MoveObject(Gate,1141.40002,-1206.40002,20.8,3.0); // Troque X,Y,Z Pelas Coordenadas do Portão FECHADO !
    }
return 1;
}
public CloseGate2(gateid2)
{
    if(gateid2 == Gate2)
    {
        MoveObject(Gate2,1621.30005,-1862.09998,15.3,3.0); // Troque X,Y,Z Pelas Coordenadas do Portão FECHADO !
    }
return 1;
}
public CloseGate3(gateid3)
{
    if(gateid3 == Gate3)
    {
        MoveObject(Gate3,958.5,-1559.59998,15.3,3.0); // Troque X,Y,Z Pelas Coordenadas do Portão FECHADO !
    }
return 1;
}
public CloseGate5(gateid5)
{
	if(gateid5 == Gate5)
	{
	MoveObject(Gate5,282.20001,-1320.09998,55.6,3.0);
	}
return 1;
}
public CloseGate6(gateid6)
{
	if(gateid6 == Gate6)
	{
	MoveObject(Gate6,263.89999,-1333.30005,54.9,3.0);
	}
return 1;
}
public CloseGate7(gateid7)
{
	if(gateid7 == Gate7)
	{
	MoveObject(Gate7,630.5,-1115.40002,47.5,3.0);
	}
return 1;
}
public CloseGate8(gateid8)
{
	if(gateid8 == Gate8)
	{
	MoveObject(Gate8,211.2,-1350.5,52.5,3.0);
	}
return 1;
}
public CloseGate9(gateid9)
{
	if(gateid9 == Gate9)
	{
	MoveObject(Gate9,345.20001,-1193.69995,78.3,3.0);
	}
return 1;
}
public CloseGate10(gateid10)
{
	if(gateid10 == Gate10)
	{
	MoveObject(Gate10,261.39999,-1231.80005,74.7,3.0);
	}
return 1;
}
forward CheckVida(playerid);
public CheckVida(playerid)
{
	new Float:Vida;
	GetPlayerHealth(playerid, Vida);
	if(admtrampando[playerid] >= 1){ return 1; }
	if(Vida > 100.0)
	{
	   SetPlayerHealth(playerid, 100.0);
    }
return true;
}
forward TUsandoDrogas(playerid);
public TUsandoDrogas(playerid) {

RemovePlayerAttachedObject(playerid, 0);
SetPlayerWeather(playerid, 0);
ClearAnimations(playerid);
KillTimer(TempoDrogas[playerid]);

return true;
}
public CarroTimer(carid)
{
	if(InBike(carid))
	{
	  return true;
	}
	if(CarInfo[carid][cFreio] == 1)
	{
	new Float: X, Float: Y, Float: Z, Float: Angle;
	GetVehiclePos(carid, X, Y, Z);
    GetVehicleZAngle(carid, Angle);
	if(CarInfo[carid][cLocationx] == X && CarInfo[carid][cLocationy] == Y && CarInfo[carid][cLocationz] == Z)
	{
	    CarInfo[carid][cPosX] = CarInfo[carid][cLocationx];
	    CarInfo[carid][cPosY] = CarInfo[carid][cLocationy];
	    CarInfo[carid][cAngulo] = CarInfo[carid][cAngle];
	    CarInfo[carid][cPosZ] = CarInfo[carid][cLocationz];
	    return true;
	}
	if(CarInfo[carid][cPosX] != 0 && CarInfo[carid][cPosY] != 0 && CarInfo[carid][cPosZ] != 0)
	{
		SetVehiclePos(carid, CarInfo[carid][cPosX], CarInfo[carid][cPosY],CarInfo[carid][cPosZ]);
  		SetVehicleZAngle(carid, CarInfo[carid][cAngulo]);
  		return true;
	}
	if(CarInfo[carid][cPosX] == CarInfo[carid][cPosX] && CarInfo[carid][cPosY] == CarInfo[carid][cPosY] && CarInfo[carid][cPosZ] == CarInfo[carid][cPosZ])
        {
	    return true;
        }
	}
	return true;
}
forward usarbombanuclear();
public usarbombanuclear()
{
    usarbombasnuclear = 0;
     return true;
}
forward DesativandoBomba(playerid);
forward DesativandoBomba1(playerid);
forward DesativandoBomba2(playerid);
forward DesativandoBomba3(playerid);
public DesativandoBomba(playerid)
{
	TimeM = 0;
	TimeS = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
 		PlantouBombaNuclear[i] = 0;
        TextDrawHideForPlayer(i, Textdraw0[i]);
        StopAudioStreamForPlayer(i);
	}
	SetWeather(10);
	KillTimer(TimeT);
	SendClientMessage(playerid, COR_EXE, "Você Desativou a Bomba Nuclear Agora Todos Estão Seguros :D");
	new string[128];
	format(string, sizeof(string), "O %s do {23f518}Exercito {f5f3f0} Desarmou a{E10E0E}Bomba Nuclear!{f5f3f0}.",PlayerName(playerid));
	SendClientMessageToAll(COLOR_WHITE, string);

	DestroyObject(NuclearBomb);
	DestroyObject(NuclearBomb);
	DestroyObject(NuclearBomb);
	DestroyObject(NuclearBomb);
	pBombNuclear[playerid] = 0;
	if(IsPlayerConnected(playerid))
	{
		pbombanuclear[playerid] = 0;
  		pbombanuclear2[playerid] = 0;
  		PlantouBombaNuclear[playerid] = 0;
	}
}
public DesativandoBomba1(playerid)
{
	SendClientMessage(playerid, COR_EXE, "Desativando Bomba...");
	SetTimerEx("DesativandoBomba", 5000, false, "i", playerid);
	return true;
}
public DesativandoBomba2(playerid)
{
	SendClientMessage(playerid, COR_EXE, "Desativando Bomba...");
	SetTimerEx("DesativandoBomba1", 5000, false, "i", playerid);
	return true;
}

public DesativandoBomba3(playerid)
{
	SendClientMessage(playerid, COR_EXE, "Desativando Bomba...");
	SetTimerEx("DesativandoBomba2", 5000, false, "i", playerid);
	return true;
}
forward LocalizandoBomba(playerid);
public LocalizandoBomba(playerid)
{
	new string[526];
	SendClientMessage(playerid, COR_EXE, "Computador: Foi Localizado a Coordenada Z Da Bomba Nuclear");
	SendClientMessage(playerid, COR_EXE, "Computador: O Exército Foi Avisado Sobre o Local da Bomba Nuclear");
	format(string, sizeof(string), "HQ Exército: Todas as Unidades Siga Ordems do Encarregado da Missão Para Ir Atrás da Bomba Nuclear, /coordenadabomba");
	SendFamilyMessage(3,COR_EXE,string);
	if(IsPlayerConnected(playerid) && PlayerInfo[playerid][pMembro] == 3 || PlayerInfo[playerid][pLider] == 3)
	{
		PlayerInfo[playerid][pBombL] = 1;
	}
	return true;
}
forward LocalizandoBomba5(playerid);
public LocalizandoBomba5(playerid)
{
    new string[164];
	SetTimerEx("LocalizandoBomba", 5000, false, "i", playerid);
	SendClientMessage(playerid, COR_EXE, "Computador: Rastreando Altos índice de radiação por favor aguarde.....");
	format(string, sizeof(string), "Computador: Foi Localizado a Coordenada Y da Bomba Nuclear");
	SendFamilyMessage(3,COR_EXE,string);
	return true;
}
forward LocalizandoBomba4(playerid);
public LocalizandoBomba4(playerid)
{
	new string[164];
	SetTimerEx("LocalizandoBomba5", 5000, false, "i", playerid);
	SendClientMessage(playerid, COR_EXE, "Computador: Rastreando Altos índice de radiação por favor aguarde.....");
	format(string, sizeof(string), "Computador: Foi Localizado a Coordenada X Da Bomba Nuclear");
	SendFamilyMessage(3,COR_EXE,string);
	return true;
}
forward LocalizandoBomba1(playerid);
public LocalizandoBomba1(playerid)
{
	SetTimerEx("LocalizandoBomba4", 5000, false, "i", playerid);
	SendClientMessage(playerid, COR_EXE, "Computador: Rastreando Altos índice de radiação por favor aguarde....");
	return true;
}
forward LocalizandoBomba2(playerid);
public LocalizandoBomba2(playerid)
{
	SetTimerEx("LocalizandoBomba1", 5000, false, "i", playerid);
	SendClientMessage(playerid, COR_EXE, "Computador: Rastreando Altos índice de radiação por favor aguarde...");
	return true;
}
forward LocalizandoBomba3(playerid);
public LocalizandoBomba3(playerid)
{
	SetTimerEx("LocalizandoBomba2", 5000, false, "i", playerid);
	SendClientMessage(playerid, COR_EXE, "Computador: Rastreando Altos índice de radiação por favor aguarde..");
	return true;
}
forward Roubando(playerid);
public Roubando(playerid) {

RoubandoComando[playerid] = 0;
KillTimer(KillRoubando[playerid]);

return true;
}
forward TempoRelatorio(playerid);
public TempoRelatorio(playerid)
{
EnviouRelatorio[playerid] = 0;
KillTimer(timerrelatorio[playerid]);
return 1;
}
forward ETempoPagamento(playerid);
public ETempoPagamento(playerid)
{
TempoEnviarPagamento[playerid] = 0;
KillTimer(TimerEnviarPagamento[playerid]);
return 1;
}
forward TempoPescar(playerid);
public TempoPescar(playerid)
{
TempoPescou[playerid] = 0;
KillTimer(tempopescar[playerid]);
return 1;
}
forward TempoReport(playerid);
public TempoReport(playerid)
{
EnviouReport[playerid] = 0;
KillTimer(timerreport[playerid]);
return 1;
}
forward TempoHelpers(playerid);
public TempoHelpers(playerid)
{
EnviouHelper[playerid] = 0;
KillTimer(timerhelper[playerid]);
return 1;
}
forward InterfoneAdmin(playerid);
public InterfoneAdmin(playerid) {
InterfonouEnviou[playerid] = 0;
KillTimer(InterfonouKill[playerid]);
return 1;
}
forward EquiparAmmuNation(playerid);
public EquiparAmmuNation(playerid)
{
equiparammu[playerid] = 0;
KillTimer(timerequiparammu[playerid]);
return 1;
}
forward PausarEntrada(playerid);
public PausarEntrada(playerid)
{
TogglePlayerControllable(playerid, 1);
KillTimer(TravarEntrada[playerid]);
return 1;
}
forward TimerFall(playerid);
public TimerFall(playerid)
{
    //ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0); 
	ApplyAnimation(playerid,"KNIFE","knife_hit_3",4.0, 0, 0, 0, 0, 0);
}
forward VerificarCongelado(); 
public VerificarCongelado() 
{ 
    for(new i; i < MAX_PLAYERS; ++i)  
    { 
        if(TaCongelado[i] == true) 
        { 
            TogglePlayerControllable(i, 0);
        } 
    } 
    return 1; 
}
forward Curando(playerid);
public Curando(playerid)
{
    SendClientMessage(playerid, COLOR_WHITE,"[Hospital]: Você já se recuperou e possui plano de saúde.");
    Hospital[playerid] = 0;
	TaCongelado[playerid] = false;
    TogglePlayerControllable(playerid, true);
    SetPlayerFacingAngle(playerid, 271.09);
    SetPlayerPos(playerid, 1179.1116,-1324.1342,14.1533);
    SetPlayerInterior(playerid, 0);
	PlayerInfo[playerid][pInt] = 0;
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	PlayerInfo[playerid][pLocal] = 255;
    SetCameraBehindPlayer(playerid);
    return 1;
}
forward PainelCamConce(playerid);
public PainelCamConce(playerid) {

SetCameraBehindPlayer(playerid);
KillTimer(CameraConce[playerid]);

return true;
}

public VoteTimer(giveplayerid)
{
	new string[STRING];
	new TempPlayerCount = ContarJogadores();
	TempPlayerCount /= 2;
	if(Votes > TempPlayerCount)
	{
		format(string, sizeof(string), "%s foi kickado por ter a maioria dos votos /sim.", PlayerName(giveplayerid));
		SendClientMessageToAll(COLOR_LIGHTRED, string);
		Kick(giveplayerid);
	}
	else
	{
	    format(string, sizeof(string), "%s não foi kickado por ter falta de votos.", PlayerName(giveplayerid));
	    SendClientMessageToAll(COLOR_LIGHTRED, string);
	}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
	    Voted[i] = 0;
	    VoteKick = 0;
	}
	Votes = 0;
	VoteKick = 0;
	return 1;
}
forward IrDiretoPreso(playerid);
public IrDiretoPreso(playerid)
{
    Hospital[playerid] = 0;
    SetCameraBehindPlayer(playerid);
    return true;
}
forward CheckCarHealth();
public CheckCarHealth()
{
new vehicleid;
new string[256];
for (new i=0; i < MAX_PLAYERS; i++)
{
if (IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerState(i) == PLAYER_STATE_DRIVER)
{
GetVehicleHealth(GetPlayerVehicleID(i),chealth);
vehicleid = GetPlayerVehicleID(i);
new mot, lu, alar, por, cap, porma, ob;
new carro = GetPlayerVehicleID(i);
if(chealth <= 300.0)
{
if(GetPlayerState(i) == PLAYER_STATE_DRIVER)
{
SetVehicleHealth(vehicleid, 300);
SendClientMessage(i, COLOR_LIGHTBLUE, "Seu veiculo quebrou tente ligar pra um mecanico! ou /saircarro.");
GetVehicleParamsEx(carro, mot, lu, alar, por, cap, porma, ob);
SetVehicleParamsEx(carro, VEHICLE_PARAMS_OFF, lu, alar, por, cap, porma, ob);
GetPlayerName(i, sendername, sizeof(sendername));
format(string, sizeof(string), "* O veiculo de %s quebrou.", sendername);
ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
          }
        }
     }
   }
}
forward KickBanido(playerid);
public KickBanido(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    Kick(playerid);
	}
	return true;
}
forward RespawnCarros(playerid);
public RespawnCarros(playerid)
{
new string[256];
           	if(admtrampando[playerid] == 1 && admhide[playerid] == 1)
			{
   				format(string, sizeof(string), "{FFFFFF}[{37E031}Atenção{FFFFFF}] Todos os carros foram para seus locais de inicio. By: {FFEA00}BRNM.");
			}
			else
			{
   				format(string, sizeof(string), "{FFFFFF}[{37E031}Atenção{FFFFFF}] Todos os veículos foram para seus locais de inicio. By: {FFEA00}%s.", PlayerName(playerid));
			}
			SendClientMessageToAll(COLOR_RCARRO,string);
			new bool:unwanted[CAR_AMOUNT];
		    for(new h = carsonserver; h < sizeof(CarInfo); h++)
			{
                if(!(InBike(h)))
                {
                    if (!(strcmp(CarInfo[h][cOwner], "Dealership", true) == 0))
                    {
                    
                      CarInfo[h][cFreio] = 1;
				      CarroTimer(h);
                    
                    }
                }
			}
			for(new player=0; player<MAX_PLAYERS; player++)
     		{
            	if(IsPlayerConnected(player) && IsPlayerInAnyVehicle(player)) { unwanted[GetPlayerVehicleID(player)]=true; }
     		}
			for(new car = 1; car <= CAR_AMOUNT; car++)
			{
				if(!unwanted[car]) SetVehicleToRespawn(car);
			}
			return true;
}
forward RespawnCarros2();
public RespawnCarros2()
{
format(gstring, sizeof(gstring), "~b~BRNM: ~w~Respawn de carros em 10 segundos!!!");
GameTextForAll(gstring, 5000, 3);
}
forward CheckViaFacil();
public CheckViaFacil() {
	for(new i; i != GetMaxPlayers(); i++) {
		if(IsPlayerConnected(i)) {
		    if(IsPlayerInAnyVehicle(i)) {
		        if(IsPlayerInRangeOfPoint(i, 19.0, 56.05, -1528.62, 4.67)) {
		            if(ViaFacil[i] && !Pedagio[i]) {
              			Pedagio[i] = true; //Evitar Flood
		                if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
			                SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você possui o plano Via Fácil e não precisa parar! Boa Viagem.");
	                  		ViaFacil[i] --;
						}
                    	MovePlayerObject(i, Cancela[i][0], 56.05, -1528.62, 4.67+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
					}
					if(!ViaFacil[i] && !Pedagio[i]) {
     					Pedagio[i] = true; //Evitar Flood
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
	  						SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você não possui o plano Via Fácil e precisa parar!");
	                  		TogglePlayerControllable(i, false);
	    					sleep2(3);
	    					TogglePlayerControllable(i, true);
	                  		GivePlayerMoney(i, -500);
						}
                  		MovePlayerObject(i, Cancela[i][0], 56.05, -1528.62, 4.67+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
					}
				} else if(IsPlayerInRangeOfPoint(i, 19.0, 56.05, -1535.82, 4.71)) {
		            if(ViaFacil[i] && !Pedagio[i]) {
              			Pedagio[i] = true; //Evitar Flood
		            	if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
			                SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você possui o plano Via Fácil e não precisa parar! Boa Viagem.");
	                  		ViaFacil[i] --;
						}
                  		MovePlayerObject(i, Cancela[i][1], 56.05, -1535.82, 4.71+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
					} else if(!ViaFacil[i] && !Pedagio[i]) {
     					Pedagio[i] = true; //Evitar Flood
						if(GetPlayerState(i) == PLAYER_STATE_DRIVER) {
	  						SendClientMessage(i, 0xFFFFFFFF, "Via Fácil: Você não possui o plano Via Fácil e precisa parar!");
	                  		TogglePlayerControllable(i, false);
	    					sleep2(3);
	    					TogglePlayerControllable(i, true);
	                  		GivePlayerMoney(i, -500);
						}
                  		MovePlayerObject(i, Cancela[i][1], 56.05, -1535.82, 4.71+0.0001, 0.0001, 0.0000, 0.0000, 262.0000);
					}
				}
				else {
					if(Pedagio[i]) {
	                    Pedagio[i] = false;
	                    MovePlayerObject(i, Cancela[i][0], 56.05, -1528.62, 4.67, 0.0001, 0.0000, 270.0000, 262.0000);
	                    MovePlayerObject(i, Cancela[i][1], 56.05, -1535.82, 4.71, 0.0001, 0.0000, 90.0000, 262.0000);
					}
				}
		    }
		}
	}
	return 1;
}
stock HexToInt(string[])
{
    if (string[0] == 0)
    {
        return 0;
    }
    new i;
    new cur = 1;
    new res = 0;
    for (i = strlen(string); i > 0; i--)
    {
        if (string[i-1] < 58)
        {
            res = res + cur * (string[i - 1] - 48);
        }
        else
        {
            res = res + cur * (string[i-1] - 65 + 10);
            cur = cur * 16;
        }
    }
    return res;
}
MenuConceKarts(playerid,ValorCarro,ModeloCarro)
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GREY, "Você Precisa Ser Nível 3 Para Adquirir um Veiculo !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pVIP] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Apenas Jogadores Vip Premium Podem Adquirir 4 Carros !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pPcarkey2] != -1 && PlayerInfo[playerid][pPcarkey3] != -1 && PlayerInfo[playerid][pPcarkey4] != -1 && PlayerInfo[playerid][pVIP] == 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Seu Vip Premium permite que você tenha no máximo 4 carros !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(GetPlayerMoney(playerid) >= ValorCarro)
	{
		new Float:X = 1834.7539,Float:Y = -1403.5194,Float:Z = 13.4110, Float:O = 2.9814; // as cordenadas coloca uma cordenada fixa
		new color1 = random(255), color2 = random(255);
		new Mensagem[128];
		new string[128];
		//new thiscar = CreateVehicle(ModeloCarro,X,Y,Z,O,color1,color2,-1); //cria o objeto
       new thiscar;
	   for (new i = carsonserver; i < sizeof(CarInfo); i++) {
	     if ((strlen(CarInfo[i][cOwner]) != 0)&&(strcmp(CarInfo[i][cOwner], "Dealership", true) == 0)){thiscar = i;break;}
	     else if(i == sizeof(CarInfo) - 1){ return SendClientMessage(playerid,COLOR_GREY,"Desculpe mas no momento não a carros disponíveis para encomendar.");}
	    }
		if(PlayerInfo[playerid][pPcarkey] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey] = thiscar;
		}
	    else if(PlayerInfo[playerid][pPcarkey2] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey2] = thiscar;
		}
	    else if(PlayerInfo[playerid][pPcarkey3] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey3] = thiscar;
		}
	 	else if(PlayerInfo[playerid][pPcarkey4] == -1)
	    {
	    	PlayerInfo[playerid][pPcarkey4] = thiscar;
	  	}
	 	else
	    {
     		SendClientMessage(playerid, COLOR_GREY, "   Você já possui 4 carros!!!");
     		return true;
 	 	}
 	 	DestroyVehicle(thiscar);
	  	CreateVehicle(ModeloCarro,X,Y,Z,O,color1,color2,-1); //cria o objeto
		CarInfo[thiscar][cOwned] = 1;
		CarInfo[thiscar][cModel] = ModeloCarro;
		CarInfo[thiscar][cColorOne] = color1;
		CarInfo[thiscar][cColorTwo] = color2;
		CarInfo[thiscar][cLocationx] = X;
		CarInfo[thiscar][cLocationy] = Y;
		CarInfo[thiscar][cLocationz] = Z;
		CarInfo[thiscar][cAngle] = 1;
		CarInfo[thiscar][cValue] = ValorCarro;
		CarInfo[thiscar][cLock] = 0;
		CarInfo[thiscar][paintjob] = -1;
		CarInfo[thiscar][VeiculoAprendido] = 0;

		strmid(CarInfo[thiscar][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 999);
		format(CarInfo[thiscar][cDescription],32,"%s",vehName[GetVehicleModel(thiscar)-400]);

		format(CarInfo[thiscar][cLicense], 32 ,"VENDIDO");
		SetVehicleNumberPlate(thiscar,CarInfo[thiscar][cLicense]);

		GivePlayerMoney(playerid, -ValorCarro);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
 	    format(string, sizeof(string), "Parabéns %s você adquiriu um %s por R$%d",PlayerName(playerid),CarInfo[thiscar][cDescription], ValorCarro);
		SendClientMessage(playerid, COLOR_BLUE, string);
		SendClientMessage(playerid, COLOR_BLUE, "Digite /v para ver a lista de comandos do veículo.");
        SetPlayerCheckpoint(playerid, 1834.7803,-1403.7552,13.8960,2.5);//Entrega de Bikes & Karts
        InterpolateCameraPos(playerid, 1831.914672, -1397.585327, 14.525514, 1835.280639, -1399.817382, 14.525514, 3000);
		InterpolateCameraLookAt(playerid, 1827.347412, -1398.085937, 12.553267, 1834.565063, -1404.408813, 12.679622, 3000);
		CameraConce[playerid] = SetTimerEx("PainelCamConce", 5000, 0, "i", playerid);
		SBizzInfo[24][sbTill] += (ValorCarro / 4);
		ExtortionSBiz(24, (ValorCarro / 8));
		format(Mensagem, sizeof(Mensagem), "%s comprou um carro de ID [%d] Modelo: (%s) no painel da conce (%d/%d/%d - %d:%d)",PlayerName(playerid),thiscar,CarInfo[thiscar][cDescription],day, month, year,hour, minute);
        ConceLog(Mensagem);

		OnPropUpdate2();
		SavePlayerData(playerid);

		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "  Você não tem dinheiro suficiente ! ");
		return 1;
	}
}
MenuConce2(playerid,ValorCarro,ModeloCarro)
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GREY, "Você Precisa Ser Nível 3 Para Adquirir um Veiculo !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pVIP] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Apenas Jogadores Vip Premium Podem Adquirir 4 Carros !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pPcarkey2] != -1 && PlayerInfo[playerid][pPcarkey3] != -1 && PlayerInfo[playerid][pPcarkey4] != -1 && PlayerInfo[playerid][pVIP] == 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Seu Vip Premium permite que você tenha no máximo 4 carros !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(GetPlayerMoney(playerid) >= ValorCarro)
	{
		new Float:X = 537.1068,Float:Y = -1290.8495,Float:Z = 16.9672, Float:O = 358.8895; // as cordenadas coloca uma cordenada fixa
		new color1 = random(255), color2 = random(255);
		new Mensagem[128];
		new string[128];
		//new thiscar = CreateVehicle(ModeloCarro,X,Y,Z,O,color1,color2,-1); //cria o objeto
       new thiscar;
	   for (new i = carsonserver; i < sizeof(CarInfo); i++) {
	     if ((strlen(CarInfo[i][cOwner]) != 0)&&(strcmp(CarInfo[i][cOwner], "Dealership", true) == 0)){thiscar = i;break;}
	     else if(i == sizeof(CarInfo) - 1){ return SendClientMessage(playerid,COLOR_GREY,"Desculpe mas no momento não a carros disponíveis para encomendar.");}
	    }
		if(PlayerInfo[playerid][pPcarkey] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey] = thiscar;
		}
	    else if(PlayerInfo[playerid][pPcarkey2] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey2] = thiscar;
		}
	    else if(PlayerInfo[playerid][pPcarkey3] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey3] = thiscar;
		}
	 	else if(PlayerInfo[playerid][pPcarkey4] == -1)
	    {
	    	PlayerInfo[playerid][pPcarkey4] = thiscar;
	  	}
	 	else
	    {
     		SendClientMessage(playerid, COLOR_GREY, "   Você já possui 4 carros!!!");
     		return true;
 	 	}
 	 	DestroyVehicle(thiscar);
	  	CreateVehicle(ModeloCarro,X,Y,Z,O,color1,color2,-1); //cria o objeto
		CarInfo[thiscar][cOwned] = 1;
		CarInfo[thiscar][cModel] = ModeloCarro;
		CarInfo[thiscar][cColorOne] = color1;
		CarInfo[thiscar][cColorTwo] = color2;
		CarInfo[thiscar][cLocationx] = X;
		CarInfo[thiscar][cLocationy] = Y;
		CarInfo[thiscar][cLocationz] = Z;
		CarInfo[thiscar][cAngle] = 1;
		CarInfo[thiscar][cValue] = ValorCarro;
		CarInfo[thiscar][cLock] = 0;
		CarInfo[thiscar][paintjob] = -1;
		CarInfo[thiscar][VeiculoAprendido] = 0;

		strmid(CarInfo[thiscar][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 999);
		format(CarInfo[thiscar][cDescription],32,"%s",vehName[GetVehicleModel(thiscar)-400]);

		format(CarInfo[thiscar][cLicense], 32 ,"VENDIDO");
		SetVehicleNumberPlate(thiscar,CarInfo[thiscar][cLicense]);

		GivePlayerMoney(playerid, -ValorCarro);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
 	    format(string, sizeof(string), "Parabéns %s você adquiriu um %s por R$%d",PlayerName(playerid),CarInfo[thiscar][cDescription], ValorCarro);
		SendClientMessage(playerid, COLOR_BLUE, string);
		SendClientMessage(playerid, COLOR_BLUE, "Digite /v para ver a lista de comandos do veículo.");
        SendClientMessage(playerid, COLOR_BLUE, "Seu veículo se encontra no pátio da concessionária, localização marcada no mapa.");
        SendClientMessage(playerid, COLOR_WHITE, "Vendedor: Aqui estão as chaves do seu novo veículo, faça bom proveito!");
        SetPlayerCheckpoint(playerid, 537.0494,-1291.2523,17.2422,6.0);//Entrega de veiculos
        InterpolateCameraPos(playerid, 541.869567, -1310.039672, 28.608335, 540.144897, -1279.139892, 21.715124, 3000);
		InterpolateCameraLookAt(playerid, 537.368591, -1310.625488, 26.511207, 538.643859, -1283.504882, 19.793245, 3000);
		CameraConce[playerid] = SetTimerEx("PainelCamConce", 5000, 0, "i", playerid);
		SBizzInfo[24][sbTill] += (ValorCarro / 4);
		ExtortionSBiz(24, (ValorCarro / 8));
		format(Mensagem, sizeof(Mensagem), "%s comprou um carro de ID [%d] Modelo: (%s) no painel da conce (%d/%d/%d - %d:%d)",PlayerName(playerid),thiscar,CarInfo[thiscar][cDescription],day, month, year,hour, minute);
        ConceLog(Mensagem);

		OnPropUpdate2();
		SavePlayerData(playerid);

		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "  Você não tem dinheiro suficiente ! ");
		return 1;
	}
}
MenuConce(playerid,ValorCarro,ModeloCarro)
{
	if(PlayerInfo[playerid][pLevel] < 3)
	{
		SendClientMessage(playerid, COLOR_GREY, "Você Precisa Ser Nível 3 Para Adquirir um Veiculo !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pVIP] == 0)
	{
		SendClientMessage(playerid, COLOR_GREY, "Apenas Jogadores Vip Premium Podem Adquirir 4 Carros !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(PlayerInfo[playerid][pPcarkey] != -1 && PlayerInfo[playerid][pPcarkey2] != -1 && PlayerInfo[playerid][pPcarkey3] != -1 && PlayerInfo[playerid][pPcarkey4] != -1 && PlayerInfo[playerid][pVIP] == 1)
	{
		SendClientMessage(playerid, COLOR_GREY, "Seu Vip Premium permite que você tenha no máximo 4 carros !");
		RemovePlayerFromVehicleEx(playerid);
		return true;
	}
	if(GetPlayerMoney(playerid) >= ValorCarro)
	{
		new Float:X = 1705.7368,Float:Y = -1085.0337,Float:Z = 23.8019, Float:O = 358.2338; // as cordenadas coloca uma cordenada fixa
		new color1 = random(255), color2 = random(255);
		new Mensagem[128];
		new string[128];
		//new thiscar = CreateVehicle(ModeloCarro,X,Y,Z,O,color1,color2,-1); //cria o objeto
       new thiscar;
	   for (new i = carsonserver; i < sizeof(CarInfo); i++) {
	     if ((strlen(CarInfo[i][cOwner]) != 0)&&(strcmp(CarInfo[i][cOwner], "Dealership", true) == 0)){thiscar = i;break;}
	     else if(i == sizeof(CarInfo) - 1){ return SendClientMessage(playerid,COLOR_GREY,"Desculpe mas no momento não a carros disponíveis para encomendar.");}
	    }
		if(PlayerInfo[playerid][pPcarkey] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey] = thiscar;
		}
	    else if(PlayerInfo[playerid][pPcarkey2] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey2] = thiscar;
		}
	    else if(PlayerInfo[playerid][pPcarkey3] == -1)
		{
	    	PlayerInfo[playerid][pPcarkey3] = thiscar;
		}
	 	else if(PlayerInfo[playerid][pPcarkey4] == -1)
	    {
	    	PlayerInfo[playerid][pPcarkey4] = thiscar;
	  	}
	 	else
	    {
     		SendClientMessage(playerid, COLOR_GREY, "   Você já possui 4 carros!!!");
     		return true;
 	 	}
 	 	DestroyVehicle(thiscar);
	  	CreateVehicle(ModeloCarro,X,Y,Z,O,color1,color2,-1); //cria o objeto
		CarInfo[thiscar][cOwned] = 1;
		CarInfo[thiscar][cModel] = ModeloCarro;
		CarInfo[thiscar][cColorOne] = color1;
		CarInfo[thiscar][cColorTwo] = color2;
		CarInfo[thiscar][cLocationx] = X;
		CarInfo[thiscar][cLocationy] = Y;
		CarInfo[thiscar][cLocationz] = Z;
		CarInfo[thiscar][cAngle] = 1;
		CarInfo[thiscar][cValue] = ValorCarro;
		CarInfo[thiscar][cLock] = 0;
		CarInfo[thiscar][paintjob] = -1;
		CarInfo[thiscar][VeiculoAprendido] = 0;

		strmid(CarInfo[thiscar][cOwner], PlayerName(playerid), 0, strlen(PlayerName(playerid)), 999);
		format(CarInfo[thiscar][cDescription],32,"%s",vehName[GetVehicleModel(thiscar)-400]);

		format(CarInfo[thiscar][cLicense], 32 ,"VENDIDO");
		SetVehicleNumberPlate(thiscar,CarInfo[thiscar][cLicense]);

		GivePlayerMoney(playerid, -ValorCarro);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
 	    format(string, sizeof(string), "Parabéns %s você adquiriu um %s por R$%d",PlayerName(playerid),CarInfo[thiscar][cDescription], ValorCarro);
		SendClientMessage(playerid, COLOR_BLUE, string);
		SendClientMessage(playerid, COLOR_BLUE, "Digite /v para ver a lista de comandos do veículo.");
        SendClientMessage(playerid, COLOR_BLUE, "Seu veículo se encontra no pátio da concessionária, localização marcada no mapa.");
        SendClientMessage(playerid, COLOR_WHITE, "Vendedor: Aqui estão as chaves do seu novo veículo, faça bom proveito!");
        SetPlayerCheckpoint(playerid, 1705.9099,-1085.5020,23.9063,6.0);//Entrega de veiculos
        InterpolateCameraPos(playerid, 1670.634521, -1107.696533, 25.674560, 1706.028564, -1074.824218, 25.674560, 3000);
		InterpolateCameraLookAt(playerid, 1674.756103, -1109.505615, 23.497303, 1705.803466, -1079.720336, 24.686227, 3000);
		CameraConce[playerid] = SetTimerEx("PainelCamConce", 5000, 0, "i", playerid);
		SBizzInfo[24][sbTill] += (ValorCarro / 4);
		ExtortionSBiz(24, (ValorCarro / 8));
		format(Mensagem, sizeof(Mensagem), "%s comprou um carro de ID [%d] Modelo: (%s) no painel da conce (%d/%d/%d - %d:%d)",PlayerName(playerid),thiscar,CarInfo[thiscar][cDescription],day, month, year,hour, minute);
        ConceLog(Mensagem);

		OnPropUpdate2();
		SavePlayerData(playerid);

		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_GREY, "  Você não tem dinheiro suficiente ! ");
		return 1;
	}
}
CreateSomObjeto( vehicleid, modelo, indice, Float:px, Float:py, Float:pz, Float:rx, Float:ry, Float:rz, visao)
{
	DestroyObject(SomVeiculoObjeto[indice][vehicleid]);
	SomVeiculoObjeto[indice][vehicleid] = CreateObject( modelo, px, py, pz, rx, ry, rz, visao);
	AttachObjectToVehicle(SomVeiculoObjeto[indice][vehicleid], vehicleid, px, py, pz, rx, ry, rz);
	SomPos[indice][vehicleid][0] = px;
	SomPos[indice][vehicleid][1] = py;
	SomPos[indice][vehicleid][2] = pz;
	SomPos[indice][vehicleid][3] = rx;
	SomPos[indice][vehicleid][4] = ry;
	SomPos[indice][vehicleid][5] = rz;
}
VendCarInatLog(string[])
{
   new entry[128];
   format(entry, sizeof(entry), "%s\n", string);
   new File: hFile;
   hFile = fopen("Logs/VendaCarInativoLog.log", io_append);
   fwrite(hFile, entry);
   fclose(hFile);
}
VendCarInat(diav, mesv, anov)
{
   new num, strv[256], datev[6][125];
   new string[128];
   //new arquivo[128];
   //loop de todos os carros da conce
   for (new i = carsonserver; i < sizeof(CarInfo); i++)
   {
      //se o carro tiver dono
      if (!(strcmp(CarInfo[i][cOwner], "Dealership", true) == 0))
      {
         //se o arquivo com o nome do dono existir
         format(string, sizeof(string), "Contas/%s.ini", CarInfo[i][cOwner]);
         format(strv, sizeof(strv), "Contas/%s.ini", CarInfo[i][cOwner]); //formata string para axar o endereço da conta
         if (dini_Exists(strv))
         {
            //separa a strv em variaveis a cada /
            split(dini_Get(strv, "LU"), datev, '/');
            //se for a mesma data ou mais antigo o ultimo login do player
            if (((strval(datev[0]) <= diav) && (strval(datev[1]) <= mesv)) && (strval(datev[2]) <= anov))
            {
               //modifica os dados do veiculo
               CarInfo[i][cOwned] = 0;
               new Float: x,Float: y,Float: z, Float: a;
               GetVehiclePos(i, x, y, z);
               GetVehicleZAngle(i, a);
               CarInfo[i][cLocationx] = x;
               CarInfo[i][cLocationy] = y;
               CarInfo[i][cLocationz] = z;
               CarInfo[i][cAngle] = a;
               CarInfo[i][mod1] = 0;
               CarInfo[i][mod2] = 0;
               CarInfo[i][mod3] = 0;
               CarInfo[i][mod4] = 0;
               CarInfo[i][mod5] = 0;
               CarInfo[i][mod6] = 0;
               CarInfo[i][mod7] = 0;
               CarInfo[i][mod8] = 0;
               CarInfo[i][mod9] = 0;
               CarInfo[i][mod10] = 0;
               CarInfo[i][mod11] = 0;
               CarInfo[i][mod12] = 0;
               CarInfo[i][mod13] = 0;
               CarInfo[i][mod14] = 0;
               CarInfo[i][mod15] = 0;
               CarInfo[i][mod16] = 0;
               CarInfo[i][mod17] = 0;
               CarInfo[i][paintjob] = -1;
               CarInfo[i][cLock] = 0;
               CarInfo[i][cFreio] = 0;
               CarInfo[i][VeiculoAprendido] = 0;
               format(CarInfo[i][cLicense], 32, "ÀVenda");
               SetVehicleNumberPlate(i, CarInfo[i][cLicense]);
               //remove as chave ou o arquivo do carkeys
               format(strv, sizeof(strv), "carkeys/%s.ini", CarInfo[i][cOwner]); //formata string para axar o endereço da conta
               if (dini_Exists(strv))
               {
                  if (i == strval(dini_Get(strv, "CarKey")))
                  {
                     dini_Set(strv, "CarKey", "-1");
                  }
                  else if (i == strval(dini_Get(strv, "CarKey2")))
                  {
                     dini_Set(strv, "CarKey2", "-1");
                  }
                  else if (i == strval(dini_Get(strv, "CarKey3")))
                  {
                     dini_Set(strv, "CarKey3", "-1");
                  }
                  else if (i == strval(dini_Get(strv, "CarKey4")))
                  {
                     dini_Set(strv, "CarKey4", "-1");
                  }
                  if ((((-1 == strval(dini_Get(strv, "CarKey"))) && (-1 == strval(dini_Get(strv, "CarKey2")))) && (-1 == strval(dini_Get(strv, "CarKey3")))) && (-1 == strval(dini_Get(strv, "CarKey4"))))
                  {
                     dini_Remove(strv);
                  }
               }
               //log
               format(strv, sizeof(strv), "Sistema vendeu carro ID [%d] Modelo (%s) Preço R$(%d) Jogador: %s. (%d/%d/%d - %d:%d)", i, CarInfo[i][cDescription], CarInfo[i][cValue], CarInfo[i][cOwner], day, month, year, hour, minute);
               VendCarInatLog(strv);
               //seta o nome do dono do veiculo
               strmid(CarInfo[i][cOwner], "Dealership", 0, strlen("Dealership"), 999);
               //salva os dados do carro destroy e cria outro
               OnPropUpdate2();
               DestroyVehicle(i);
               CreateVehicle(CarInfo[i][cModel], CarInfo[i][cLocationx], CarInfo[i][cLocationy], CarInfo[i][cLocationz] + 1.0, CarInfo[i][cAngle], CarInfo[i][cColorOne], CarInfo[i][cColorTwo], -1);
               LoadComponents(i);
               //adiciona o numero de veiculos a venda
               num += 1;
               format(string, sizeof(string), "Último login do dono (%02d/%02d/%02d-%02d:%02d)", dini_Int(string,"DiaLogin"),dini_Int(string,"MesLogin"),dini_Int(string,"AnoLogin"),dini_Int(string,"HoraLogin"),dini_Int(string,"MinutoLogin"));
               SendClientMessageToAll(COLOR_PURPLE, string);
            }
         }
      }
   }
   //Mensagem para admin
   format(strv, sizeof(strv), "Atenção: O sistema vendeu %d veículos de jogadores inativos desde %d/%d/%d. (%d/%d/%d - %d:%d)", num, diav, mesv, anov, day, month, year, hour, minute);
   SendClientMessageToAll(-1, strv);
   VendCarInatLog(strv);
   return true;
}
forward InBike(vehicleid);
public InBike(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	if(model== 509 || model == 481 || model == 510 || model == 462 || model == 448 || model == 581 || model == 522|| model == 461 || model == 521 || model == 523 || model == 463 || model == 586 || model == 468 || model == 471)
		return true;
	else
		return false;
}
